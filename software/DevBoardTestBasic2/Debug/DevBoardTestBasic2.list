
DevBoardTestBasic2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003794  0800bcec  0800bcec  0001bcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f480  0800f480  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f480  0800f480  0001f480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f488  0800f488  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f488  0800f488  0001f488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f48c  0800f48c  0001f48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800f490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d5b4  2000015c  0800f5ec  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000d710  0800f5ec  0002d710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009f170  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006802  00000000  00000000  000bf2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003a38  00000000  00000000  000c5b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003700  00000000  00000000  000c9538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000295bb  00000000  00000000  000ccc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023f72  00000000  00000000  000f61f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eeab8  00000000  00000000  0011a165  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00208c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000100a4  00000000  00000000  00208c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcd4 	.word	0x0800bcd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800bcd4 	.word	0x0800bcd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f8d8 	bl	800075e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f007 ff30 	bl	8008414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f007 ff02 	bl	80083bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	2000d428 	.word	0x2000d428

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	2000d428 	.word	0x2000d428

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4907      	ldr	r1, [pc, #28]	; (80006a0 <__NVIC_EnableIRQ+0x38>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	f04f 32ff 	mov.w	r2, #4294967295
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	f04f 31ff 	mov.w	r1, #4294967295
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43d9      	mvns	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff4c 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000786:	f7ff ff61 	bl	800064c <__NVIC_GetPriorityGrouping>
 800078a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	68b9      	ldr	r1, [r7, #8]
 8000790:	6978      	ldr	r0, [r7, #20]
 8000792:	f7ff ffb1 	bl	80006f8 <NVIC_EncodePriority>
 8000796:	4602      	mov	r2, r0
 8000798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff80 	bl	80006a4 <__NVIC_SetPriority>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff54 	bl	8000668 <__NVIC_EnableIRQ>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff ff0a 	bl	80005ec <HAL_GetTick>
 80007d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e099      	b.n	8000918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2202      	movs	r2, #2
 80007f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f022 0201 	bic.w	r2, r2, #1
 8000802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000804:	e00f      	b.n	8000826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000806:	f7ff fef1 	bl	80005ec <HAL_GetTick>
 800080a:	4602      	mov	r2, r0
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	2b05      	cmp	r3, #5
 8000812:	d908      	bls.n	8000826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2220      	movs	r2, #32
 8000818:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2203      	movs	r2, #3
 800081e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000822:	2303      	movs	r3, #3
 8000824:	e078      	b.n	8000918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1e8      	bne.n	8000806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	4b38      	ldr	r3, [pc, #224]	; (8000920 <HAL_DMA_Init+0x158>)
 8000840:	4013      	ands	r3, r2
 8000842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800085e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800086a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	4313      	orrs	r3, r2
 8000876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087c:	2b04      	cmp	r3, #4
 800087e:	d107      	bne.n	8000890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4313      	orrs	r3, r2
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4313      	orrs	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	f023 0307 	bic.w	r3, r3, #7
 80008a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d117      	bne.n	80008ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00e      	beq.n	80008ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 fa91 	bl	8000df4 <DMA_CheckFifoParam>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d008      	beq.n	80008ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2240      	movs	r2, #64	; 0x40
 80008dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008e6:	2301      	movs	r3, #1
 80008e8:	e016      	b.n	8000918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 fa48 	bl	8000d88 <DMA_CalcBaseAndBitshift>
 80008f8:	4603      	mov	r3, r0
 80008fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000900:	223f      	movs	r2, #63	; 0x3f
 8000902:	409a      	lsls	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	f010803f 	.word	0xf010803f

08000924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000942:	2b01      	cmp	r3, #1
 8000944:	d101      	bne.n	800094a <HAL_DMA_Start_IT+0x26>
 8000946:	2302      	movs	r3, #2
 8000948:	e040      	b.n	80009cc <HAL_DMA_Start_IT+0xa8>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2201      	movs	r2, #1
 800094e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b01      	cmp	r3, #1
 800095c:	d12f      	bne.n	80009be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2202      	movs	r2, #2
 8000962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2200      	movs	r2, #0
 800096a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f000 f9da 	bl	8000d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800097c:	223f      	movs	r2, #63	; 0x3f
 800097e:	409a      	lsls	r2, r3
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 0216 	orr.w	r2, r2, #22
 8000992:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	2b00      	cmp	r3, #0
 800099a:	d007      	beq.n	80009ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0208 	orr.w	r2, r2, #8
 80009aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	e005      	b.n	80009ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009c6:	2302      	movs	r3, #2
 80009c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d004      	beq.n	80009f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00c      	b.n	8000a0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2205      	movs	r2, #5
 80009f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 0201 	bic.w	r2, r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a24:	4b92      	ldr	r3, [pc, #584]	; (8000c70 <HAL_DMA_IRQHandler+0x258>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a92      	ldr	r2, [pc, #584]	; (8000c74 <HAL_DMA_IRQHandler+0x25c>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	0a9b      	lsrs	r3, r3, #10
 8000a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a42:	2208      	movs	r2, #8
 8000a44:	409a      	lsls	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d01a      	beq.n	8000a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d013      	beq.n	8000a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 0204 	bic.w	r2, r2, #4
 8000a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a70:	2208      	movs	r2, #8
 8000a72:	409a      	lsls	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a7c:	f043 0201 	orr.w	r2, r3, #1
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a88:	2201      	movs	r2, #1
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d012      	beq.n	8000aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ab2:	f043 0202 	orr.w	r2, r3, #2
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abe:	2204      	movs	r2, #4
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d012      	beq.n	8000af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00b      	beq.n	8000af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	2204      	movs	r2, #4
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae8:	f043 0204 	orr.w	r2, r3, #4
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af4:	2210      	movs	r2, #16
 8000af6:	409a      	lsls	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4013      	ands	r3, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d043      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d03c      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	2210      	movs	r2, #16
 8000b14:	409a      	lsls	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d018      	beq.n	8000b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d108      	bne.n	8000b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d024      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	4798      	blx	r3
 8000b46:	e01f      	b.n	8000b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d01b      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
 8000b58:	e016      	b.n	8000b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d107      	bne.n	8000b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 0208 	bic.w	r2, r2, #8
 8000b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 808e 	beq.w	8000cb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 8086 	beq.w	8000cb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bae:	2220      	movs	r2, #32
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	d136      	bne.n	8000c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0216 	bic.w	r2, r2, #22
 8000bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <HAL_DMA_IRQHandler+0x1da>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d007      	beq.n	8000c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0208 	bic.w	r2, r2, #8
 8000c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c06:	223f      	movs	r2, #63	; 0x3f
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d07d      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	4798      	blx	r3
        }
        return;
 8000c2e:	e078      	b.n	8000d22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d01c      	beq.n	8000c78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d108      	bne.n	8000c5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d030      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	4798      	blx	r3
 8000c5c:	e02b      	b.n	8000cb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d027      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	4798      	blx	r3
 8000c6e:	e022      	b.n	8000cb6 <HAL_DMA_IRQHandler+0x29e>
 8000c70:	200000f4 	.word	0x200000f4
 8000c74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10f      	bne.n	8000ca6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0210 	bic.w	r2, r2, #16
 8000c94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d032      	beq.n	8000d24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d022      	beq.n	8000d10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2205      	movs	r2, #5
 8000cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0201 	bic.w	r2, r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d307      	bcc.n	8000cfe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f2      	bne.n	8000ce2 <HAL_DMA_IRQHandler+0x2ca>
 8000cfc:	e000      	b.n	8000d00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cfe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	4798      	blx	r3
 8000d20:	e000      	b.n	8000d24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d22:	bf00      	nop
    }
  }
}
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop

08000d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b40      	cmp	r3, #64	; 0x40
 8000d58:	d108      	bne.n	8000d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d6a:	e007      	b.n	8000d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3b10      	subs	r3, #16
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <DMA_CalcBaseAndBitshift+0x64>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <DMA_CalcBaseAndBitshift+0x68>)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d909      	bls.n	8000dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dbe:	f023 0303 	bic.w	r3, r3, #3
 8000dc2:	1d1a      	adds	r2, r3, #4
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8000dc8:	e007      	b.n	8000dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dd2:	f023 0303 	bic.w	r3, r3, #3
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	aaaaaaab 	.word	0xaaaaaaab
 8000df0:	0800c440 	.word	0x0800c440

08000df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d11f      	bne.n	8000e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d855      	bhi.n	8000ec0 <DMA_CheckFifoParam+0xcc>
 8000e14:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <DMA_CheckFifoParam+0x28>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000e2d 	.word	0x08000e2d
 8000e20:	08000e3f 	.word	0x08000e3f
 8000e24:	08000e2d 	.word	0x08000e2d
 8000e28:	08000ec1 	.word	0x08000ec1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d045      	beq.n	8000ec4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e3c:	e042      	b.n	8000ec4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e46:	d13f      	bne.n	8000ec8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e4c:	e03c      	b.n	8000ec8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e56:	d121      	bne.n	8000e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d836      	bhi.n	8000ecc <DMA_CheckFifoParam+0xd8>
 8000e5e:	a201      	add	r2, pc, #4	; (adr r2, 8000e64 <DMA_CheckFifoParam+0x70>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000e75 	.word	0x08000e75
 8000e68:	08000e7b 	.word	0x08000e7b
 8000e6c:	08000e75 	.word	0x08000e75
 8000e70:	08000e8d 	.word	0x08000e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
      break;
 8000e78:	e02f      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d024      	beq.n	8000ed0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e8a:	e021      	b.n	8000ed0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e94:	d11e      	bne.n	8000ed4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e9a:	e01b      	b.n	8000ed4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d902      	bls.n	8000ea8 <DMA_CheckFifoParam+0xb4>
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d003      	beq.n	8000eae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000ea6:	e018      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8000eac:	e015      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00e      	beq.n	8000ed8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8000ebe:	e00b      	b.n	8000ed8 <DMA_CheckFifoParam+0xe4>
      break;
 8000ec0:	bf00      	nop
 8000ec2:	e00a      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      break;
 8000ec4:	bf00      	nop
 8000ec6:	e008      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      break;
 8000ec8:	bf00      	nop
 8000eca:	e006      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      break;
 8000ecc:	bf00      	nop
 8000ece:	e004      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      break;
 8000ed0:	bf00      	nop
 8000ed2:	e002      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      break;   
 8000ed4:	bf00      	nop
 8000ed6:	e000      	b.n	8000eda <DMA_CheckFifoParam+0xe6>
      break;
 8000ed8:	bf00      	nop
    }
  } 
  
  return status; 
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e16b      	b.n	80011dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 815a 	bne.w	80011d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d00b      	beq.n	8000f42 <HAL_GPIO_Init+0x5a>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f36:	2b11      	cmp	r3, #17
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0xfc>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b12      	cmp	r3, #18
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b4 	beq.w	80011d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b5f      	ldr	r3, [pc, #380]	; (80011f0 <HAL_GPIO_Init+0x308>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a5e      	ldr	r2, [pc, #376]	; (80011f0 <HAL_GPIO_Init+0x308>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <HAL_GPIO_Init+0x308>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a5a      	ldr	r2, [pc, #360]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x310>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x320>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x324>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x328>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x32c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20a>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f2:	2308      	movs	r3, #8
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4934      	ldr	r1, [pc, #208]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_GPIO_Init+0x330>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_GPIO_Init+0x330>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_GPIO_Init+0x330>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117c:	4a26      	ldr	r2, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x330>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_GPIO_Init+0x330>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_GPIO_Init+0x330>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_GPIO_Init+0x330>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_GPIO_Init+0x330>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae90 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	3724      	adds	r7, #36	; 0x24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	401a      	ands	r2, r3
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	429a      	cmp	r2, r3
 8001266:	d104      	bne.n	8001272 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	041a      	lsls	r2, r3, #16
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001270:	e002      	b.n	8001278 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e11f      	b.n	80014d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f006 f948 	bl	8007540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2224      	movs	r2, #36	; 0x24
 80012b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012e8:	f001 f846 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80012ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a7b      	ldr	r2, [pc, #492]	; (80014e0 <HAL_I2C_Init+0x25c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d807      	bhi.n	8001308 <HAL_I2C_Init+0x84>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a7a      	ldr	r2, [pc, #488]	; (80014e4 <HAL_I2C_Init+0x260>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	bf94      	ite	ls
 8001300:	2301      	movls	r3, #1
 8001302:	2300      	movhi	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	e006      	b.n	8001316 <HAL_I2C_Init+0x92>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4a77      	ldr	r2, [pc, #476]	; (80014e8 <HAL_I2C_Init+0x264>)
 800130c:	4293      	cmp	r3, r2
 800130e:	bf94      	ite	ls
 8001310:	2301      	movls	r3, #1
 8001312:	2300      	movhi	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0db      	b.n	80014d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4a72      	ldr	r2, [pc, #456]	; (80014ec <HAL_I2C_Init+0x268>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	430a      	orrs	r2, r1
 800133c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a64      	ldr	r2, [pc, #400]	; (80014e0 <HAL_I2C_Init+0x25c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d802      	bhi.n	8001358 <HAL_I2C_Init+0xd4>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3301      	adds	r3, #1
 8001356:	e009      	b.n	800136c <HAL_I2C_Init+0xe8>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	4a63      	ldr	r2, [pc, #396]	; (80014f0 <HAL_I2C_Init+0x26c>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	3301      	adds	r3, #1
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	430b      	orrs	r3, r1
 8001372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800137e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4956      	ldr	r1, [pc, #344]	; (80014e0 <HAL_I2C_Init+0x25c>)
 8001388:	428b      	cmp	r3, r1
 800138a:	d80d      	bhi.n	80013a8 <HAL_I2C_Init+0x124>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1e59      	subs	r1, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fbb1 f3f3 	udiv	r3, r1, r3
 800139a:	3301      	adds	r3, #1
 800139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	bf38      	it	cc
 80013a4:	2304      	movcc	r3, #4
 80013a6:	e04f      	b.n	8001448 <HAL_I2C_Init+0x1c4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <HAL_I2C_Init+0x150>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1e58      	subs	r0, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	440b      	add	r3, r1
 80013be:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	e012      	b.n	80013fa <HAL_I2C_Init+0x176>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e58      	subs	r0, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	0099      	lsls	r1, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Init+0x17e>
 80013fe:	2301      	movs	r3, #1
 8001400:	e022      	b.n	8001448 <HAL_I2C_Init+0x1c4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10e      	bne.n	8001428 <HAL_I2C_Init+0x1a4>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e58      	subs	r0, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6859      	ldr	r1, [r3, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	440b      	add	r3, r1
 8001418:	fbb0 f3f3 	udiv	r3, r0, r3
 800141c:	3301      	adds	r3, #1
 800141e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001426:	e00f      	b.n	8001448 <HAL_I2C_Init+0x1c4>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	0099      	lsls	r1, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6809      	ldr	r1, [r1, #0]
 800144c:	4313      	orrs	r3, r2
 800144e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6911      	ldr	r1, [r2, #16]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68d2      	ldr	r2, [r2, #12]
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	430b      	orrs	r3, r1
 800148a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	000186a0 	.word	0x000186a0
 80014e4:	001e847f 	.word	0x001e847f
 80014e8:	003d08ff 	.word	0x003d08ff
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	461a      	mov	r2, r3
 8001500:	460b      	mov	r3, r1
 8001502:	817b      	strh	r3, [r7, #10]
 8001504:	4613      	mov	r3, r2
 8001506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff f870 	bl	80005ec <HAL_GetTick>
 800150c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b20      	cmp	r3, #32
 8001518:	f040 80e0 	bne.w	80016dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2319      	movs	r3, #25
 8001522:	2201      	movs	r2, #1
 8001524:	4970      	ldr	r1, [pc, #448]	; (80016e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f964 	bl	80017f4 <I2C_WaitOnFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001532:	2302      	movs	r3, #2
 8001534:	e0d3      	b.n	80016de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_I2C_Master_Transmit+0x50>
 8001540:	2302      	movs	r3, #2
 8001542:	e0cc      	b.n	80016de <HAL_I2C_Master_Transmit+0x1ea>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b01      	cmp	r3, #1
 8001558:	d007      	beq.n	800156a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0201 	orr.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2221      	movs	r2, #33	; 0x21
 800157e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2210      	movs	r2, #16
 8001586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	893a      	ldrh	r2, [r7, #8]
 800159a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4a50      	ldr	r2, [pc, #320]	; (80016ec <HAL_I2C_Master_Transmit+0x1f8>)
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015ac:	8979      	ldrh	r1, [r7, #10]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	6a3a      	ldr	r2, [r7, #32]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f89c 	bl	80016f0 <I2C_MasterRequestWrite>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e08d      	b.n	80016de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015d8:	e066      	b.n	80016a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	6a39      	ldr	r1, [r7, #32]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 f9de 	bl	80019a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00d      	beq.n	8001606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d107      	bne.n	8001602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e06b      	b.n	80016de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001620:	b29b      	uxth	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162e:	3b01      	subs	r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b04      	cmp	r3, #4
 8001642:	d11b      	bne.n	800167c <HAL_I2C_Master_Transmit+0x188>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001648:	2b00      	cmp	r3, #0
 800164a:	d017      	beq.n	800167c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	6a39      	ldr	r1, [r7, #32]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f9ce 	bl	8001a22 <I2C_WaitOnBTFFlagUntilTimeout>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00d      	beq.n	80016a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	2b04      	cmp	r3, #4
 8001692:	d107      	bne.n	80016a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01a      	b.n	80016de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d194      	bne.n	80015da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2220      	movs	r2, #32
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016dc:	2302      	movs	r3, #2
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	00100002 	.word	0x00100002
 80016ec:	ffff0000 	.word	0xffff0000

080016f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	460b      	mov	r3, r1
 80016fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d006      	beq.n	800171a <I2C_MasterRequestWrite+0x2a>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d003      	beq.n	800171a <I2C_MasterRequestWrite+0x2a>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001718:	d108      	bne.n	800172c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e00b      	b.n	8001744 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	2b12      	cmp	r3, #18
 8001732:	d107      	bne.n	8001744 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f84f 	bl	80017f4 <I2C_WaitOnFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e035      	b.n	80017e2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800177e:	d108      	bne.n	8001792 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	e01b      	b.n	80017ca <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001792:	897b      	ldrh	r3, [r7, #10]
 8001794:	11db      	asrs	r3, r3, #7
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f003 0306 	and.w	r3, r3, #6
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f063 030f 	orn	r3, r3, #15
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	490f      	ldr	r1, [pc, #60]	; (80017ec <I2C_MasterRequestWrite+0xfc>)
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f876 	bl	80018a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e010      	b.n	80017e2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017c0:	897b      	ldrh	r3, [r7, #10]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <I2C_MasterRequestWrite+0x100>)
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f866 	bl	80018a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	00010008 	.word	0x00010008
 80017f0:	00010002 	.word	0x00010002

080017f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001804:	e025      	b.n	8001852 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d021      	beq.n	8001852 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180e:	f7fe feed 	bl	80005ec <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d302      	bcc.n	8001824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d116      	bne.n	8001852 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f043 0220 	orr.w	r2, r3, #32
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e023      	b.n	800189a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d10d      	bne.n	8001878 <I2C_WaitOnFlagUntilTimeout+0x84>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4013      	ands	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf0c      	ite	eq
 800186e:	2301      	moveq	r3, #1
 8001870:	2300      	movne	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	e00c      	b.n	8001892 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4013      	ands	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf0c      	ite	eq
 800188a:	2301      	moveq	r3, #1
 800188c:	2300      	movne	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	429a      	cmp	r2, r3
 8001896:	d0b6      	beq.n	8001806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018b0:	e051      	b.n	8001956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c0:	d123      	bne.n	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f043 0204 	orr.w	r2, r3, #4
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e046      	b.n	8001998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d021      	beq.n	8001956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001912:	f7fe fe6b 	bl	80005ec <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	d302      	bcc.n	8001928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d116      	bne.n	8001956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f043 0220 	orr.w	r2, r3, #32
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e020      	b.n	8001998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d10c      	bne.n	800197a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4013      	ands	r3, r2
 800196c:	b29b      	uxth	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	e00b      	b.n	8001992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	43da      	mvns	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4013      	ands	r3, r2
 8001986:	b29b      	uxth	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d18d      	bne.n	80018b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ac:	e02d      	b.n	8001a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f878 	bl	8001aa4 <I2C_IsAcknowledgeFailed>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e02d      	b.n	8001a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d021      	beq.n	8001a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c6:	f7fe fe11 	bl	80005ec <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d302      	bcc.n	80019dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d116      	bne.n	8001a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a14:	2b80      	cmp	r3, #128	; 0x80
 8001a16:	d1ca      	bne.n	80019ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a2e:	e02d      	b.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f837 	bl	8001aa4 <I2C_IsAcknowledgeFailed>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e02d      	b.n	8001a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a46:	d021      	beq.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a48:	f7fe fdd0 	bl	80005ec <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d302      	bcc.n	8001a5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e007      	b.n	8001a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d1ca      	bne.n	8001a30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d11b      	bne.n	8001af4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ac4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e25b      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d075      	beq.n	8001c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b22:	4ba3      	ldr	r3, [pc, #652]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d00c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2e:	4ba0      	ldr	r3, [pc, #640]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d112      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4b9d      	ldr	r3, [pc, #628]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b46:	d10b      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	4b99      	ldr	r3, [pc, #612]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x108>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d157      	bne.n	8001c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e236      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x74>
 8001b6a:	4b91      	ldr	r3, [pc, #580]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a90      	ldr	r2, [pc, #576]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a8a      	ldr	r2, [pc, #552]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b88      	ldr	r3, [pc, #544]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a87      	ldr	r2, [pc, #540]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b9c:	4b84      	ldr	r3, [pc, #528]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a83      	ldr	r2, [pc, #524]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b81      	ldr	r3, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a80      	ldr	r2, [pc, #512]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fd16 	bl	80005ec <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7fe fd12 	bl	80005ec <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1fb      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b76      	ldr	r3, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xc0>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7fe fd02 	bl	80005ec <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7fe fcfe 	bl	80005ec <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1e7      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0xe8>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c1a:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c26:	4b62      	ldr	r3, [pc, #392]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b5c      	ldr	r3, [pc, #368]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x152>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1bb      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4952      	ldr	r1, [pc, #328]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e03a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_RCC_OscConfig+0x2b0>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fcb7 	bl	80005ec <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c82:	f7fe fcb3 	bl	80005ec <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e19c      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4940      	ldr	r1, [pc, #256]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_OscConfig+0x2b0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fc96 	bl	80005ec <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7fe fc92 	bl	80005ec <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e17b      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d030      	beq.n	8001d50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_RCC_OscConfig+0x2b4>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7fe fc76 	bl	80005ec <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d04:	f7fe fc72 	bl	80005ec <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e15b      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x200>
 8001d22:	e015      	b.n	8001d50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x2b4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe fc5f 	bl	80005ec <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d32:	f7fe fc5b 	bl	80005ec <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e144      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a0 	beq.w	8001e9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_OscConfig+0x2b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d121      	bne.n	8001dde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_RCC_OscConfig+0x2b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_RCC_OscConfig+0x2b8>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7fe fc21 	bl	80005ec <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	e011      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2ce>
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470000 	.word	0x42470000
 8001db8:	42470e80 	.word	0x42470e80
 8001dbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7fe fc14 	bl	80005ec <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0fd      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_OscConfig+0x4d4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a7c      	ldr	r2, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	e01c      	b.n	8001e2e <HAL_RCC_OscConfig+0x32a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x312>
 8001dfc:	4b77      	ldr	r3, [pc, #476]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a76      	ldr	r2, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
 8001e08:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a73      	ldr	r2, [pc, #460]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x32a>
 8001e16:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a70      	ldr	r2, [pc, #448]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
 8001e22:	4b6e      	ldr	r3, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a6d      	ldr	r2, [pc, #436]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7fe fbd9 	bl	80005ec <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fbd5 	bl	80005ec <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0bc      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ee      	beq.n	8001e3e <HAL_RCC_OscConfig+0x33a>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fbc3 	bl	80005ec <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe fbbf 	bl	80005ec <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0a6      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b52      	ldr	r3, [pc, #328]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8092 	beq.w	8001fcc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d05c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d141      	bne.n	8001f40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fb93 	bl	80005ec <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eca:	f7fe fb8f 	bl	80005ec <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e078      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001edc:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	019b      	lsls	r3, r3, #6
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	3b01      	subs	r3, #1
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	061b      	lsls	r3, r3, #24
 8001f0c:	4933      	ldr	r1, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f12:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe fb68 	bl	80005ec <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe fb64 	bl	80005ec <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e04d      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x41c>
 8001f3e:	e045      	b.n	8001fcc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fb51 	bl	80005ec <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7fe fb4d 	bl	80005ec <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e036      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x44a>
 8001f6c:	e02e      	b.n	8001fcc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e029      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCC_OscConfig+0x4d8>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d115      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d10d      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470060 	.word	0x42470060

08001fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0cc      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d90c      	bls.n	8002020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b65      	ldr	r3, [pc, #404]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b8      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002042:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800205a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	494d      	ldr	r1, [pc, #308]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d044      	beq.n	8002104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d119      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e067      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4934      	ldr	r1, [pc, #208]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fa8a 	bl	80005ec <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7fe fa86 	bl	80005ec <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e04f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d20c      	bcs.n	800212c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e032      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4916      	ldr	r1, [pc, #88]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4601      	mov	r1, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	fa21 f303 	lsr.w	r3, r1, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f006 f942 	bl	8008414 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00
 80021a0:	40023800 	.word	0x40023800
 80021a4:	0800c4d8 	.word	0x0800c4d8
 80021a8:	200000f4 	.word	0x200000f4
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c6:	4b63      	ldr	r3, [pc, #396]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d007      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x32>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d008      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x38>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80b4 	bne.w	8002344 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021de:	60bb      	str	r3, [r7, #8]
       break;
 80021e0:	e0b3      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4b5e      	ldr	r3, [pc, #376]	; (800235c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021e4:	60bb      	str	r3, [r7, #8]
      break;
 80021e6:	e0b0      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4b58      	ldr	r3, [pc, #352]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d04a      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b55      	ldr	r3, [pc, #340]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	ea03 0501 	and.w	r5, r3, r1
 8002214:	ea04 0602 	and.w	r6, r4, r2
 8002218:	4629      	mov	r1, r5
 800221a:	4632      	mov	r2, r6
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f04f 0400 	mov.w	r4, #0
 8002224:	0154      	lsls	r4, r2, #5
 8002226:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800222a:	014b      	lsls	r3, r1, #5
 800222c:	4619      	mov	r1, r3
 800222e:	4622      	mov	r2, r4
 8002230:	1b49      	subs	r1, r1, r5
 8002232:	eb62 0206 	sbc.w	r2, r2, r6
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	0194      	lsls	r4, r2, #6
 8002240:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002244:	018b      	lsls	r3, r1, #6
 8002246:	1a5b      	subs	r3, r3, r1
 8002248:	eb64 0402 	sbc.w	r4, r4, r2
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	00e2      	lsls	r2, r4, #3
 8002256:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800225a:	00d9      	lsls	r1, r3, #3
 800225c:	460b      	mov	r3, r1
 800225e:	4614      	mov	r4, r2
 8002260:	195b      	adds	r3, r3, r5
 8002262:	eb44 0406 	adc.w	r4, r4, r6
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	0262      	lsls	r2, r4, #9
 8002270:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002274:	0259      	lsls	r1, r3, #9
 8002276:	460b      	mov	r3, r1
 8002278:	4614      	mov	r4, r2
 800227a:	4618      	mov	r0, r3
 800227c:	4621      	mov	r1, r4
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f04f 0400 	mov.w	r4, #0
 8002284:	461a      	mov	r2, r3
 8002286:	4623      	mov	r3, r4
 8002288:	f7fd fffa 	bl	8000280 <__aeabi_uldivmod>
 800228c:	4603      	mov	r3, r0
 800228e:	460c      	mov	r4, r1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e049      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	f04f 0400 	mov.w	r4, #0
 800229e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	ea03 0501 	and.w	r5, r3, r1
 80022aa:	ea04 0602 	and.w	r6, r4, r2
 80022ae:	4629      	mov	r1, r5
 80022b0:	4632      	mov	r2, r6
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	f04f 0400 	mov.w	r4, #0
 80022ba:	0154      	lsls	r4, r2, #5
 80022bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022c0:	014b      	lsls	r3, r1, #5
 80022c2:	4619      	mov	r1, r3
 80022c4:	4622      	mov	r2, r4
 80022c6:	1b49      	subs	r1, r1, r5
 80022c8:	eb62 0206 	sbc.w	r2, r2, r6
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	0194      	lsls	r4, r2, #6
 80022d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022da:	018b      	lsls	r3, r1, #6
 80022dc:	1a5b      	subs	r3, r3, r1
 80022de:	eb64 0402 	sbc.w	r4, r4, r2
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	00e2      	lsls	r2, r4, #3
 80022ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022f0:	00d9      	lsls	r1, r3, #3
 80022f2:	460b      	mov	r3, r1
 80022f4:	4614      	mov	r4, r2
 80022f6:	195b      	adds	r3, r3, r5
 80022f8:	eb44 0406 	adc.w	r4, r4, r6
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	02a2      	lsls	r2, r4, #10
 8002306:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800230a:	0299      	lsls	r1, r3, #10
 800230c:	460b      	mov	r3, r1
 800230e:	4614      	mov	r4, r2
 8002310:	4618      	mov	r0, r3
 8002312:	4621      	mov	r1, r4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f04f 0400 	mov.w	r4, #0
 800231a:	461a      	mov	r2, r3
 800231c:	4623      	mov	r3, r4
 800231e:	f7fd ffaf 	bl	8000280 <__aeabi_uldivmod>
 8002322:	4603      	mov	r3, r0
 8002324:	460c      	mov	r4, r1
 8002326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	60bb      	str	r3, [r7, #8]
      break;
 8002342:	e002      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002346:	60bb      	str	r3, [r7, #8]
      break;
 8002348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234a:	68bb      	ldr	r3, [r7, #8]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_RCC_GetHCLKFreq+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	200000f4 	.word	0x200000f4

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800237c:	f7ff fff0 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8002380:	4601      	mov	r1, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0a9b      	lsrs	r3, r3, #10
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4a03      	ldr	r2, [pc, #12]	; (800239c <HAL_RCC_GetPCLK1Freq+0x24>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	0800c4e8 	.word	0x0800c4e8

080023a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a4:	f7ff ffdc 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a8:	4601      	mov	r1, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	0800c4e8 	.word	0x0800c4e8

080023c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	220f      	movs	r2, #15
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_RCC_GetClockConfig+0x60>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e056      	b.n	80024ec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f005 fbbd 	bl	8007bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002474:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	ea42 0103 	orr.w	r1, r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	f003 0104 	and.w	r1, r3, #4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002502:	2301      	movs	r3, #1
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_SPI_TransmitReceive+0x26>
 8002516:	2302      	movs	r3, #2
 8002518:	e18a      	b.n	8002830 <HAL_SPI_TransmitReceive+0x33c>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002522:	f7fe f863 	bl	80005ec <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800252e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800253c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002540:	2b01      	cmp	r3, #1
 8002542:	d00f      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x70>
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254a:	d107      	bne.n	800255c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_SPI_TransmitReceive+0x68>
 8002554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002558:	2b04      	cmp	r3, #4
 800255a:	d003      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002562:	e15b      	b.n	800281c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_SPI_TransmitReceive+0x82>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_SPI_TransmitReceive+0x82>
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800257c:	e14e      	b.n	800281c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2205      	movs	r2, #5
 800258e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	887a      	ldrh	r2, [r7, #2]
 80025a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b40      	cmp	r3, #64	; 0x40
 80025d4:	d007      	beq.n	80025e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ee:	d178      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_SPI_TransmitReceive+0x10a>
 80025f8:	8b7b      	ldrh	r3, [r7, #26]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d166      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002622:	e053      	b.n	80026cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d11b      	bne.n	800266a <HAL_SPI_TransmitReceive+0x176>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d016      	beq.n	800266a <HAL_SPI_TransmitReceive+0x176>
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d113      	bne.n	800266a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	881a      	ldrh	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	1c9a      	adds	r2, r3, #2
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d119      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x1b8>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d014      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	b292      	uxth	r2, r2
 800268e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	1c9a      	adds	r2, r3, #2
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026a8:	2301      	movs	r3, #1
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026ac:	f7fd ff9e 	bl	80005ec <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d807      	bhi.n	80026cc <HAL_SPI_TransmitReceive+0x1d8>
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d003      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026ca:	e0a7      	b.n	800281c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1a6      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x130>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1a1      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x130>
 80026e0:	e07c      	b.n	80027dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_SPI_TransmitReceive+0x1fc>
 80026ea:	8b7b      	ldrh	r3, [r7, #26]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d16b      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002716:	e057      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d11c      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x26c>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d017      	beq.n	8002760 <HAL_SPI_TransmitReceive+0x26c>
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	2b01      	cmp	r3, #1
 8002734:	d114      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d119      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x2ae>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d014      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800279e:	2301      	movs	r3, #1
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027a2:	f7fd ff23 	bl	80005ec <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d803      	bhi.n	80027ba <HAL_SPI_TransmitReceive+0x2c6>
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d102      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x2cc>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027c6:	e029      	b.n	800281c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1a2      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x224>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d19d      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f893 	bl	800290c <SPI_EndRxTxTransaction>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027f8:	e010      	b.n	800281c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	e000      	b.n	800281c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800281a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800282c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002830:	4618      	mov	r0, r3
 8002832:	3730      	adds	r7, #48	; 0x30
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002848:	e04c      	b.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d048      	beq.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002852:	f7fd fecb 	bl	80005ec <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d902      	bls.n	8002868 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d13d      	bne.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002876:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002880:	d111      	bne.n	80028a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288a:	d004      	beq.n	8002896 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002894:	d107      	bne.n	80028a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ae:	d10f      	bne.n	80028d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e00f      	b.n	8002904 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d1a3      	bne.n	800284a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <SPI_EndRxTxTransaction+0x7c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <SPI_EndRxTxTransaction+0x80>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0d5b      	lsrs	r3, r3, #21
 8002924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002936:	d112      	bne.n	800295e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2200      	movs	r2, #0
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff ff78 	bl	8002838 <SPI_WaitFlagStateUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e00f      	b.n	800297e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3b01      	subs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d0f2      	beq.n	800295e <SPI_EndRxTxTransaction+0x52>
 8002978:	e000      	b.n	800297c <SPI_EndRxTxTransaction+0x70>
        break;
 800297a:	bf00      	nop
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200000f4 	.word	0x200000f4
 800298c:	165e9f81 	.word	0x165e9f81

08002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e01d      	b.n	80029de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 fe9a 	bl	80086f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 f95e 	bl	8002c90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d122      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d11b      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0202 	mvn.w	r2, #2
 8002a5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8ee 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 8002a76:	e005      	b.n	8002a84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8e0 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8f1 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d122      	bne.n	8002ade <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d11b      	bne.n	8002ade <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0204 	mvn.w	r2, #4
 8002aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f8c4 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 8002aca:	e005      	b.n	8002ad8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8b6 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8c7 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d122      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11b      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f06f 0208 	mvn.w	r2, #8
 8002b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2204      	movs	r2, #4
 8002b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f89a 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 8002b1e:	e005      	b.n	8002b2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f88c 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f89d 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d122      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d11b      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 0210 	mvn.w	r2, #16
 8002b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f870 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 8002b72:	e005      	b.n	8002b80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f862 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f873 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10e      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d107      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0201 	mvn.w	r2, #1
 8002baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f004 ffbd 	bl	8007b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d10e      	bne.n	8002bde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f97f 	bl	8002edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d10e      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d107      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f838 	bl	8002c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d10e      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f06f 0220 	mvn.w	r2, #32
 8002c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f949 	bl	8002ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <TIM_Base_SetConfig+0x114>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d00f      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <TIM_Base_SetConfig+0x118>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3c      	ldr	r2, [pc, #240]	; (8002dac <TIM_Base_SetConfig+0x11c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3b      	ldr	r2, [pc, #236]	; (8002db0 <TIM_Base_SetConfig+0x120>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3a      	ldr	r2, [pc, #232]	; (8002db4 <TIM_Base_SetConfig+0x124>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	; (8002da4 <TIM_Base_SetConfig+0x114>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02b      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d027      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2c      	ldr	r2, [pc, #176]	; (8002da8 <TIM_Base_SetConfig+0x118>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d023      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <TIM_Base_SetConfig+0x11c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <TIM_Base_SetConfig+0x120>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01b      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <TIM_Base_SetConfig+0x124>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d017      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <TIM_Base_SetConfig+0x128>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <TIM_Base_SetConfig+0x12c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00f      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <TIM_Base_SetConfig+0x130>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <TIM_Base_SetConfig+0x134>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <TIM_Base_SetConfig+0x138>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a23      	ldr	r2, [pc, #140]	; (8002dcc <TIM_Base_SetConfig+0x13c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <TIM_Base_SetConfig+0x114>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0xf8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <TIM_Base_SetConfig+0x124>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d103      	bne.n	8002d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	615a      	str	r2, [r3, #20]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800
 8002db0:	40000c00 	.word	0x40000c00
 8002db4:	40010400 	.word	0x40010400
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800
 8002dc4:	40001800 	.word	0x40001800
 8002dc8:	40001c00 	.word	0x40001c00
 8002dcc:	40002000 	.word	0x40002000

08002dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e05a      	b.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d01d      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d018      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00e      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d004      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10c      	bne.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40010400 	.word	0x40010400
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40001800 	.word	0x40001800

08002ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e03f      	b.n	8002f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f005 fc36 	bl	8008788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fc57 	bl	80037e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b088      	sub	sp, #32
 8002f8e:	af02      	add	r7, sp, #8
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	f040 8083 	bne.w	80030b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_UART_Transmit+0x2e>
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e07b      	b.n	80030b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Transmit+0x40>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e074      	b.n	80030b4 <HAL_UART_Transmit+0x12a>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2221      	movs	r2, #33	; 0x21
 8002fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fe0:	f7fd fb04 	bl	80005ec <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ffa:	e042      	b.n	8003082 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	d122      	bne.n	800305a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fa61 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e042      	b.n	80030b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003040:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3302      	adds	r3, #2
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	e017      	b.n	8003082 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3301      	adds	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	e013      	b.n	8003082 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fa3e 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e01f      	b.n	80030b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	60ba      	str	r2, [r7, #8]
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1b7      	bne.n	8002ffc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fa25 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e006      	b.n	80030b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
  }
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d153      	bne.n	800317e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_UART_Transmit_DMA+0x26>
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e04c      	b.n	8003180 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Transmit_DMA+0x38>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e045      	b.n	8003180 <HAL_UART_Transmit_DMA+0xc4>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2221      	movs	r2, #33	; 0x21
 8003118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4a19      	ldr	r2, [pc, #100]	; (8003188 <HAL_UART_Transmit_DMA+0xcc>)
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_UART_Transmit_DMA+0xd0>)
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a17      	ldr	r2, [pc, #92]	; (8003190 <HAL_UART_Transmit_DMA+0xd4>)
 8003132:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3304      	adds	r3, #4
 8003150:	461a      	mov	r2, r3
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	f7fd fbe6 	bl	8000924 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003160:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003178:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	080033e5 	.word	0x080033e5
 800318c:	08003437 	.word	0x08003437
 8003190:	08003453 	.word	0x08003453

08003194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_UART_IRQHandler+0x52>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa81 	bl	80036e6 <UART_Receive_IT>
      return;
 80031e4:	e0d1      	b.n	800338a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80b0 	beq.w	800334e <HAL_UART_IRQHandler+0x1ba>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_UART_IRQHandler+0x70>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80a5 	beq.w	800334e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_UART_IRQHandler+0x90>
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_UART_IRQHandler+0xb0>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	f043 0202 	orr.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_UART_IRQHandler+0xd0>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00f      	beq.n	800328e <HAL_UART_IRQHandler+0xfa>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_UART_IRQHandler+0xee>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	f043 0208 	orr.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d078      	beq.n	8003388 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_UART_IRQHandler+0x11c>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa1b 	bl	80036e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <HAL_UART_IRQHandler+0x144>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d031      	beq.n	800333c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f964 	bl	80035a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d123      	bne.n	8003334 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <HAL_UART_IRQHandler+0x1fc>)
 800330a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fb5f 	bl	80009d4 <HAL_DMA_Abort_IT>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d016      	beq.n	800334a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003326:	4610      	mov	r0, r2
 8003328:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332a:	e00e      	b.n	800334a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f84f 	bl	80033d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003332:	e00a      	b.n	800334a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f84b 	bl	80033d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	e006      	b.n	800334a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f847 	bl	80033d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003348:	e01e      	b.n	8003388 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334a:	bf00      	nop
    return;
 800334c:	e01c      	b.n	8003388 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_UART_IRQHandler+0x1d6>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f951 	bl	800360a <UART_Transmit_IT>
    return;
 8003368:	e00f      	b.n	800338a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_UART_IRQHandler+0x1f6>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f999 	bl	80036b6 <UART_EndTransmit_IT>
    return;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003388:	bf00      	nop
  }
}
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	080035e3 	.word	0x080035e3

08003394 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d113      	bne.n	8003428 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003414:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003424:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003426:	e002      	b.n	800342e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff ffb3 	bl	8003394 <HAL_UART_TxCpltCallback>
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff ffaf 	bl	80033a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b21      	cmp	r3, #33	; 0x21
 8003484:	d108      	bne.n	8003498 <UART_DMAError+0x46>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003492:	68b8      	ldr	r0, [r7, #8]
 8003494:	f000 f871 	bl	800357a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b22      	cmp	r3, #34	; 0x22
 80034b8:	d108      	bne.n	80034cc <UART_DMAError+0x7a>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80034c6:	68b8      	ldr	r0, [r7, #8]
 80034c8:	f000 f86d 	bl	80035a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	f043 0210 	orr.w	r2, r3, #16
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d8:	68b8      	ldr	r0, [r7, #8]
 80034da:	f7ff ff79 	bl	80033d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f6:	e02c      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d028      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0x30>
 8003506:	f7fd f871 	bl	80005ec <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	429a      	cmp	r2, r3
 8003514:	d21d      	bcs.n	8003552 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003524:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00f      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d0c3      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003590:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fee7 	bl	80033d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b21      	cmp	r3, #33	; 0x21
 800361c:	d144      	bne.n	80036a8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	d11a      	bne.n	800365e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800363c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	1c9a      	adds	r2, r3, #2
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	621a      	str	r2, [r3, #32]
 8003650:	e00e      	b.n	8003670 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	621a      	str	r2, [r3, #32]
 800365c:	e008      	b.n	8003670 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	1c59      	adds	r1, r3, #1
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6211      	str	r1, [r2, #32]
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4619      	mov	r1, r3
 800367e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10f      	bne.n	80036a4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003692:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fe5c 	bl	8003394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b22      	cmp	r3, #34	; 0x22
 80036f8:	d171      	bne.n	80037de <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d123      	bne.n	800374c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	1c9a      	adds	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	629a      	str	r2, [r3, #40]	; 0x28
 800372e:	e029      	b.n	8003784 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b29b      	uxth	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
 800374a:	e01b      	b.n	8003784 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6858      	ldr	r0, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6291      	str	r1, [r2, #40]	; 0x28
 8003764:	b2c2      	uxtb	r2, r0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e00c      	b.n	8003784 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	1c58      	adds	r0, r3, #1
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	6288      	str	r0, [r1, #40]	; 0x28
 800377c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29b      	uxth	r3, r3
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4619      	mov	r1, r3
 8003792:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003794:	2b00      	cmp	r3, #0
 8003796:	d120      	bne.n	80037da <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0220 	bic.w	r2, r2, #32
 80037a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fdf3 	bl	80033bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e002      	b.n	80037e0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800382a:	f023 030c 	bic.w	r3, r3, #12
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	430b      	orrs	r3, r1
 8003836:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003856:	f040 818b 	bne.w	8003b70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4ac1      	ldr	r2, [pc, #772]	; (8003b64 <UART_SetConfig+0x37c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d005      	beq.n	8003870 <UART_SetConfig+0x88>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4abf      	ldr	r2, [pc, #764]	; (8003b68 <UART_SetConfig+0x380>)
 800386a:	4293      	cmp	r3, r2
 800386c:	f040 80bd 	bne.w	80039ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003870:	f7fe fd96 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 8003874:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	461d      	mov	r5, r3
 800387a:	f04f 0600 	mov.w	r6, #0
 800387e:	46a8      	mov	r8, r5
 8003880:	46b1      	mov	r9, r6
 8003882:	eb18 0308 	adds.w	r3, r8, r8
 8003886:	eb49 0409 	adc.w	r4, r9, r9
 800388a:	4698      	mov	r8, r3
 800388c:	46a1      	mov	r9, r4
 800388e:	eb18 0805 	adds.w	r8, r8, r5
 8003892:	eb49 0906 	adc.w	r9, r9, r6
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038aa:	4688      	mov	r8, r1
 80038ac:	4691      	mov	r9, r2
 80038ae:	eb18 0005 	adds.w	r0, r8, r5
 80038b2:	eb49 0106 	adc.w	r1, r9, r6
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	461d      	mov	r5, r3
 80038bc:	f04f 0600 	mov.w	r6, #0
 80038c0:	196b      	adds	r3, r5, r5
 80038c2:	eb46 0406 	adc.w	r4, r6, r6
 80038c6:	461a      	mov	r2, r3
 80038c8:	4623      	mov	r3, r4
 80038ca:	f7fc fcd9 	bl	8000280 <__aeabi_uldivmod>
 80038ce:	4603      	mov	r3, r0
 80038d0:	460c      	mov	r4, r1
 80038d2:	461a      	mov	r2, r3
 80038d4:	4ba5      	ldr	r3, [pc, #660]	; (8003b6c <UART_SetConfig+0x384>)
 80038d6:	fba3 2302 	umull	r2, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	461d      	mov	r5, r3
 80038e4:	f04f 0600 	mov.w	r6, #0
 80038e8:	46a9      	mov	r9, r5
 80038ea:	46b2      	mov	sl, r6
 80038ec:	eb19 0309 	adds.w	r3, r9, r9
 80038f0:	eb4a 040a 	adc.w	r4, sl, sl
 80038f4:	4699      	mov	r9, r3
 80038f6:	46a2      	mov	sl, r4
 80038f8:	eb19 0905 	adds.w	r9, r9, r5
 80038fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800390c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003914:	4689      	mov	r9, r1
 8003916:	4692      	mov	sl, r2
 8003918:	eb19 0005 	adds.w	r0, r9, r5
 800391c:	eb4a 0106 	adc.w	r1, sl, r6
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	461d      	mov	r5, r3
 8003926:	f04f 0600 	mov.w	r6, #0
 800392a:	196b      	adds	r3, r5, r5
 800392c:	eb46 0406 	adc.w	r4, r6, r6
 8003930:	461a      	mov	r2, r3
 8003932:	4623      	mov	r3, r4
 8003934:	f7fc fca4 	bl	8000280 <__aeabi_uldivmod>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	461a      	mov	r2, r3
 800393e:	4b8b      	ldr	r3, [pc, #556]	; (8003b6c <UART_SetConfig+0x384>)
 8003940:	fba3 1302 	umull	r1, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	2164      	movs	r1, #100	; 0x64
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	3332      	adds	r3, #50	; 0x32
 8003952:	4a86      	ldr	r2, [pc, #536]	; (8003b6c <UART_SetConfig+0x384>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003960:	4498      	add	r8, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	461d      	mov	r5, r3
 8003966:	f04f 0600 	mov.w	r6, #0
 800396a:	46a9      	mov	r9, r5
 800396c:	46b2      	mov	sl, r6
 800396e:	eb19 0309 	adds.w	r3, r9, r9
 8003972:	eb4a 040a 	adc.w	r4, sl, sl
 8003976:	4699      	mov	r9, r3
 8003978:	46a2      	mov	sl, r4
 800397a:	eb19 0905 	adds.w	r9, r9, r5
 800397e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800398e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003992:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003996:	4689      	mov	r9, r1
 8003998:	4692      	mov	sl, r2
 800399a:	eb19 0005 	adds.w	r0, r9, r5
 800399e:	eb4a 0106 	adc.w	r1, sl, r6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	461d      	mov	r5, r3
 80039a8:	f04f 0600 	mov.w	r6, #0
 80039ac:	196b      	adds	r3, r5, r5
 80039ae:	eb46 0406 	adc.w	r4, r6, r6
 80039b2:	461a      	mov	r2, r3
 80039b4:	4623      	mov	r3, r4
 80039b6:	f7fc fc63 	bl	8000280 <__aeabi_uldivmod>
 80039ba:	4603      	mov	r3, r0
 80039bc:	460c      	mov	r4, r1
 80039be:	461a      	mov	r2, r3
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <UART_SetConfig+0x384>)
 80039c2:	fba3 1302 	umull	r1, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2164      	movs	r1, #100	; 0x64
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a65      	ldr	r2, [pc, #404]	; (8003b6c <UART_SetConfig+0x384>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 0207 	and.w	r2, r3, #7
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4442      	add	r2, r8
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e26f      	b.n	8003eca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ea:	f7fe fcc5 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80039ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	461d      	mov	r5, r3
 80039f4:	f04f 0600 	mov.w	r6, #0
 80039f8:	46a8      	mov	r8, r5
 80039fa:	46b1      	mov	r9, r6
 80039fc:	eb18 0308 	adds.w	r3, r8, r8
 8003a00:	eb49 0409 	adc.w	r4, r9, r9
 8003a04:	4698      	mov	r8, r3
 8003a06:	46a1      	mov	r9, r4
 8003a08:	eb18 0805 	adds.w	r8, r8, r5
 8003a0c:	eb49 0906 	adc.w	r9, r9, r6
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a24:	4688      	mov	r8, r1
 8003a26:	4691      	mov	r9, r2
 8003a28:	eb18 0005 	adds.w	r0, r8, r5
 8003a2c:	eb49 0106 	adc.w	r1, r9, r6
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	461d      	mov	r5, r3
 8003a36:	f04f 0600 	mov.w	r6, #0
 8003a3a:	196b      	adds	r3, r5, r5
 8003a3c:	eb46 0406 	adc.w	r4, r6, r6
 8003a40:	461a      	mov	r2, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	f7fc fc1c 	bl	8000280 <__aeabi_uldivmod>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <UART_SetConfig+0x384>)
 8003a50:	fba3 2302 	umull	r2, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	f04f 0600 	mov.w	r6, #0
 8003a62:	46a9      	mov	r9, r5
 8003a64:	46b2      	mov	sl, r6
 8003a66:	eb19 0309 	adds.w	r3, r9, r9
 8003a6a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a6e:	4699      	mov	r9, r3
 8003a70:	46a2      	mov	sl, r4
 8003a72:	eb19 0905 	adds.w	r9, r9, r5
 8003a76:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a8e:	4689      	mov	r9, r1
 8003a90:	4692      	mov	sl, r2
 8003a92:	eb19 0005 	adds.w	r0, r9, r5
 8003a96:	eb4a 0106 	adc.w	r1, sl, r6
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	f04f 0600 	mov.w	r6, #0
 8003aa4:	196b      	adds	r3, r5, r5
 8003aa6:	eb46 0406 	adc.w	r4, r6, r6
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4623      	mov	r3, r4
 8003aae:	f7fc fbe7 	bl	8000280 <__aeabi_uldivmod>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <UART_SetConfig+0x384>)
 8003aba:	fba3 1302 	umull	r1, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2164      	movs	r1, #100	; 0x64
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	3332      	adds	r3, #50	; 0x32
 8003acc:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <UART_SetConfig+0x384>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ada:	4498      	add	r8, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	461d      	mov	r5, r3
 8003ae0:	f04f 0600 	mov.w	r6, #0
 8003ae4:	46a9      	mov	r9, r5
 8003ae6:	46b2      	mov	sl, r6
 8003ae8:	eb19 0309 	adds.w	r3, r9, r9
 8003aec:	eb4a 040a 	adc.w	r4, sl, sl
 8003af0:	4699      	mov	r9, r3
 8003af2:	46a2      	mov	sl, r4
 8003af4:	eb19 0905 	adds.w	r9, r9, r5
 8003af8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003afc:	f04f 0100 	mov.w	r1, #0
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b10:	4689      	mov	r9, r1
 8003b12:	4692      	mov	sl, r2
 8003b14:	eb19 0005 	adds.w	r0, r9, r5
 8003b18:	eb4a 0106 	adc.w	r1, sl, r6
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	461d      	mov	r5, r3
 8003b22:	f04f 0600 	mov.w	r6, #0
 8003b26:	196b      	adds	r3, r5, r5
 8003b28:	eb46 0406 	adc.w	r4, r6, r6
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4623      	mov	r3, r4
 8003b30:	f7fc fba6 	bl	8000280 <__aeabi_uldivmod>
 8003b34:	4603      	mov	r3, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <UART_SetConfig+0x384>)
 8003b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	3332      	adds	r3, #50	; 0x32
 8003b4e:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <UART_SetConfig+0x384>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 0207 	and.w	r2, r3, #7
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4442      	add	r2, r8
 8003b60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b62:	e1b2      	b.n	8003eca <UART_SetConfig+0x6e2>
 8003b64:	40011000 	.word	0x40011000
 8003b68:	40011400 	.word	0x40011400
 8003b6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4ad7      	ldr	r2, [pc, #860]	; (8003ed4 <UART_SetConfig+0x6ec>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d005      	beq.n	8003b86 <UART_SetConfig+0x39e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4ad6      	ldr	r2, [pc, #856]	; (8003ed8 <UART_SetConfig+0x6f0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	f040 80d1 	bne.w	8003d28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b86:	f7fe fc0b 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 8003b8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	469a      	mov	sl, r3
 8003b90:	f04f 0b00 	mov.w	fp, #0
 8003b94:	46d0      	mov	r8, sl
 8003b96:	46d9      	mov	r9, fp
 8003b98:	eb18 0308 	adds.w	r3, r8, r8
 8003b9c:	eb49 0409 	adc.w	r4, r9, r9
 8003ba0:	4698      	mov	r8, r3
 8003ba2:	46a1      	mov	r9, r4
 8003ba4:	eb18 080a 	adds.w	r8, r8, sl
 8003ba8:	eb49 090b 	adc.w	r9, r9, fp
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bc0:	4688      	mov	r8, r1
 8003bc2:	4691      	mov	r9, r2
 8003bc4:	eb1a 0508 	adds.w	r5, sl, r8
 8003bc8:	eb4b 0609 	adc.w	r6, fp, r9
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	f04f 0400 	mov.w	r4, #0
 8003bde:	0094      	lsls	r4, r2, #2
 8003be0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be4:	008b      	lsls	r3, r1, #2
 8003be6:	461a      	mov	r2, r3
 8003be8:	4623      	mov	r3, r4
 8003bea:	4628      	mov	r0, r5
 8003bec:	4631      	mov	r1, r6
 8003bee:	f7fc fb47 	bl	8000280 <__aeabi_uldivmod>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4bb8      	ldr	r3, [pc, #736]	; (8003edc <UART_SetConfig+0x6f4>)
 8003bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	469b      	mov	fp, r3
 8003c08:	f04f 0c00 	mov.w	ip, #0
 8003c0c:	46d9      	mov	r9, fp
 8003c0e:	46e2      	mov	sl, ip
 8003c10:	eb19 0309 	adds.w	r3, r9, r9
 8003c14:	eb4a 040a 	adc.w	r4, sl, sl
 8003c18:	4699      	mov	r9, r3
 8003c1a:	46a2      	mov	sl, r4
 8003c1c:	eb19 090b 	adds.w	r9, r9, fp
 8003c20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c38:	4689      	mov	r9, r1
 8003c3a:	4692      	mov	sl, r2
 8003c3c:	eb1b 0509 	adds.w	r5, fp, r9
 8003c40:	eb4c 060a 	adc.w	r6, ip, sl
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	f04f 0400 	mov.w	r4, #0
 8003c56:	0094      	lsls	r4, r2, #2
 8003c58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c5c:	008b      	lsls	r3, r1, #2
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4623      	mov	r3, r4
 8003c62:	4628      	mov	r0, r5
 8003c64:	4631      	mov	r1, r6
 8003c66:	f7fc fb0b 	bl	8000280 <__aeabi_uldivmod>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b9a      	ldr	r3, [pc, #616]	; (8003edc <UART_SetConfig+0x6f4>)
 8003c72:	fba3 1302 	umull	r1, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2164      	movs	r1, #100	; 0x64
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	3332      	adds	r3, #50	; 0x32
 8003c84:	4a95      	ldr	r2, [pc, #596]	; (8003edc <UART_SetConfig+0x6f4>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c90:	4498      	add	r8, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	469b      	mov	fp, r3
 8003c96:	f04f 0c00 	mov.w	ip, #0
 8003c9a:	46d9      	mov	r9, fp
 8003c9c:	46e2      	mov	sl, ip
 8003c9e:	eb19 0309 	adds.w	r3, r9, r9
 8003ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	46a2      	mov	sl, r4
 8003caa:	eb19 090b 	adds.w	r9, r9, fp
 8003cae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc6:	4689      	mov	r9, r1
 8003cc8:	4692      	mov	sl, r2
 8003cca:	eb1b 0509 	adds.w	r5, fp, r9
 8003cce:	eb4c 060a 	adc.w	r6, ip, sl
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	0094      	lsls	r4, r2, #2
 8003ce6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cea:	008b      	lsls	r3, r1, #2
 8003cec:	461a      	mov	r2, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	f7fc fac4 	bl	8000280 <__aeabi_uldivmod>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b77      	ldr	r3, [pc, #476]	; (8003edc <UART_SetConfig+0x6f4>)
 8003d00:	fba3 1302 	umull	r1, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	2164      	movs	r1, #100	; 0x64
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	3332      	adds	r3, #50	; 0x32
 8003d12:	4a72      	ldr	r2, [pc, #456]	; (8003edc <UART_SetConfig+0x6f4>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f003 020f 	and.w	r2, r3, #15
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4442      	add	r2, r8
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	e0d0      	b.n	8003eca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe fb26 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	469a      	mov	sl, r3
 8003d32:	f04f 0b00 	mov.w	fp, #0
 8003d36:	46d0      	mov	r8, sl
 8003d38:	46d9      	mov	r9, fp
 8003d3a:	eb18 0308 	adds.w	r3, r8, r8
 8003d3e:	eb49 0409 	adc.w	r4, r9, r9
 8003d42:	4698      	mov	r8, r3
 8003d44:	46a1      	mov	r9, r4
 8003d46:	eb18 080a 	adds.w	r8, r8, sl
 8003d4a:	eb49 090b 	adc.w	r9, r9, fp
 8003d4e:	f04f 0100 	mov.w	r1, #0
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d62:	4688      	mov	r8, r1
 8003d64:	4691      	mov	r9, r2
 8003d66:	eb1a 0508 	adds.w	r5, sl, r8
 8003d6a:	eb4b 0609 	adc.w	r6, fp, r9
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4619      	mov	r1, r3
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	0094      	lsls	r4, r2, #2
 8003d82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d86:	008b      	lsls	r3, r1, #2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4623      	mov	r3, r4
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	4631      	mov	r1, r6
 8003d90:	f7fc fa76 	bl	8000280 <__aeabi_uldivmod>
 8003d94:	4603      	mov	r3, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b50      	ldr	r3, [pc, #320]	; (8003edc <UART_SetConfig+0x6f4>)
 8003d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	469b      	mov	fp, r3
 8003daa:	f04f 0c00 	mov.w	ip, #0
 8003dae:	46d9      	mov	r9, fp
 8003db0:	46e2      	mov	sl, ip
 8003db2:	eb19 0309 	adds.w	r3, r9, r9
 8003db6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dba:	4699      	mov	r9, r3
 8003dbc:	46a2      	mov	sl, r4
 8003dbe:	eb19 090b 	adds.w	r9, r9, fp
 8003dc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dc6:	f04f 0100 	mov.w	r1, #0
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dda:	4689      	mov	r9, r1
 8003ddc:	4692      	mov	sl, r2
 8003dde:	eb1b 0509 	adds.w	r5, fp, r9
 8003de2:	eb4c 060a 	adc.w	r6, ip, sl
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4619      	mov	r1, r3
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	f04f 0400 	mov.w	r4, #0
 8003df8:	0094      	lsls	r4, r2, #2
 8003dfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dfe:	008b      	lsls	r3, r1, #2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	4631      	mov	r1, r6
 8003e08:	f7fc fa3a 	bl	8000280 <__aeabi_uldivmod>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b32      	ldr	r3, [pc, #200]	; (8003edc <UART_SetConfig+0x6f4>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a2d      	ldr	r2, [pc, #180]	; (8003edc <UART_SetConfig+0x6f4>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e32:	4498      	add	r8, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	469b      	mov	fp, r3
 8003e38:	f04f 0c00 	mov.w	ip, #0
 8003e3c:	46d9      	mov	r9, fp
 8003e3e:	46e2      	mov	sl, ip
 8003e40:	eb19 0309 	adds.w	r3, r9, r9
 8003e44:	eb4a 040a 	adc.w	r4, sl, sl
 8003e48:	4699      	mov	r9, r3
 8003e4a:	46a2      	mov	sl, r4
 8003e4c:	eb19 090b 	adds.w	r9, r9, fp
 8003e50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e54:	f04f 0100 	mov.w	r1, #0
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e68:	4689      	mov	r9, r1
 8003e6a:	4692      	mov	sl, r2
 8003e6c:	eb1b 0509 	adds.w	r5, fp, r9
 8003e70:	eb4c 060a 	adc.w	r6, ip, sl
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	f04f 0400 	mov.w	r4, #0
 8003e86:	0094      	lsls	r4, r2, #2
 8003e88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e8c:	008b      	lsls	r3, r1, #2
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4623      	mov	r3, r4
 8003e92:	4628      	mov	r0, r5
 8003e94:	4631      	mov	r1, r6
 8003e96:	f7fc f9f3 	bl	8000280 <__aeabi_uldivmod>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <UART_SetConfig+0x6f4>)
 8003ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2164      	movs	r1, #100	; 0x64
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	; 0x32
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <UART_SetConfig+0x6f4>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4442      	add	r2, r8
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	e7ff      	b.n	8003eca <UART_SetConfig+0x6e2>
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed4:	40011000 	.word	0x40011000
 8003ed8:	40011400 	.word	0x40011400
 8003edc:	51eb851f 	.word	0x51eb851f

08003ee0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ef6:	f3ef 8305 	mrs	r3, IPSR
 8003efa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003efc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10f      	bne.n	8003f22 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f02:	f3ef 8310 	mrs	r3, PRIMASK
 8003f06:	607b      	str	r3, [r7, #4]
  return(result);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f12:	603b      	str	r3, [r7, #0]
  return(result);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <osKernelInitialize+0x3a>
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <osKernelInitialize+0x64>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d103      	bne.n	8003f2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f22:	f06f 0305 	mvn.w	r3, #5
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e00c      	b.n	8003f44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <osKernelInitialize+0x64>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <osKernelInitialize+0x64>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e002      	b.n	8003f44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f44:	68fb      	ldr	r3, [r7, #12]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000178 	.word	0x20000178

08003f58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f5e:	f3ef 8305 	mrs	r3, IPSR
 8003f62:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	607b      	str	r3, [r7, #4]
  return(result);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f76:	f3ef 8311 	mrs	r3, BASEPRI
 8003f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <osKernelStart+0x3a>
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <osKernelStart+0x68>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d103      	bne.n	8003f92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f8a:	f06f 0305 	mvn.w	r3, #5
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e010      	b.n	8003fb4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <osKernelStart+0x68>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d109      	bne.n	8003fae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f9a:	f7ff ffa1 	bl	8003ee0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <osKernelStart+0x68>)
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fa4:	f001 f870 	bl	8005088 <vTaskStartScheduler>
      stat = osOK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e002      	b.n	8003fb4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000178 	.word	0x20000178

08003fc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b090      	sub	sp, #64	; 0x40
 8003fc8:	af04      	add	r7, sp, #16
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd4:	f3ef 8305 	mrs	r3, IPSR
 8003fd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fda:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f040 808f 	bne.w	8004100 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fee:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff2:	617b      	str	r3, [r7, #20]
  return(result);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <osThreadNew+0x3e>
 8003ffa:	4b44      	ldr	r3, [pc, #272]	; (800410c <osThreadNew+0x148>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d07e      	beq.n	8004100 <osThreadNew+0x13c>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d07b      	beq.n	8004100 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800400c:	2318      	movs	r3, #24
 800400e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d045      	beq.n	80040ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <osThreadNew+0x6a>
        name = attr->name;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <osThreadNew+0x90>
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b38      	cmp	r3, #56	; 0x38
 8004046:	d805      	bhi.n	8004054 <osThreadNew+0x90>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <osThreadNew+0x94>
        return (NULL);
 8004054:	2300      	movs	r3, #0
 8004056:	e054      	b.n	8004102 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <osThreadNew+0xca>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b5b      	cmp	r3, #91	; 0x5b
 8004076:	d90a      	bls.n	800408e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <osThreadNew+0xca>
        mem = 1;
 8004088:	2301      	movs	r3, #1
 800408a:	623b      	str	r3, [r7, #32]
 800408c:	e010      	b.n	80040b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10c      	bne.n	80040b0 <osThreadNew+0xec>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <osThreadNew+0xec>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <osThreadNew+0xec>
          mem = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	623b      	str	r3, [r7, #32]
 80040aa:	e001      	b.n	80040b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d110      	bne.n	80040d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040be:	9202      	str	r2, [sp, #8]
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fe09 	bl	8004ce4 <xTaskCreateStatic>
 80040d2:	4603      	mov	r3, r0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	e013      	b.n	8004100 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d110      	bne.n	8004100 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	f107 0310 	add.w	r3, r7, #16
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fe51 	bl	8004d98 <xTaskCreate>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <osThreadNew+0x13c>
          hTask = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004100:	693b      	ldr	r3, [r7, #16]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3730      	adds	r7, #48	; 0x30
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000178 	.word	0x20000178

08004110 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004118:	f3ef 8305 	mrs	r3, IPSR
 800411c:	613b      	str	r3, [r7, #16]
  return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10f      	bne.n	8004144 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004124:	f3ef 8310 	mrs	r3, PRIMASK
 8004128:	60fb      	str	r3, [r7, #12]
  return(result);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004130:	f3ef 8311 	mrs	r3, BASEPRI
 8004134:	60bb      	str	r3, [r7, #8]
  return(result);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <osDelay+0x3c>
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <osDelay+0x58>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d103      	bne.n	800414c <osDelay+0x3c>
    stat = osErrorISR;
 8004144:	f06f 0305 	mvn.w	r3, #5
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e007      	b.n	800415c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 ff62 	bl	8005020 <vTaskDelay>
    }
  }

  return (stat);
 800415c:	697b      	ldr	r3, [r7, #20]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000178 	.word	0x20000178

0800416c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <vApplicationGetIdleTaskMemory+0x2c>)
 800417c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4a06      	ldr	r2, [pc, #24]	; (800419c <vApplicationGetIdleTaskMemory+0x30>)
 8004182:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000017c 	.word	0x2000017c
 800419c:	200001d8 	.word	0x200001d8

080041a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a07      	ldr	r2, [pc, #28]	; (80041cc <vApplicationGetTimerTaskMemory+0x2c>)
 80041b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4a06      	ldr	r2, [pc, #24]	; (80041d0 <vApplicationGetTimerTaskMemory+0x30>)
 80041b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	200003d8 	.word	0x200003d8
 80041d0:	20000434 	.word	0x20000434

080041d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f103 0208 	add.w	r2, r3, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f103 0208 	add.w	r2, r3, #8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f103 0208 	add.w	r2, r3, #8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d103      	bne.n	8004296 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e00c      	b.n	80042b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3308      	adds	r3, #8
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e002      	b.n	80042a4 <vListInsert+0x2e>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d2f6      	bcs.n	800429e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6892      	ldr	r2, [r2, #8]
 80042fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6852      	ldr	r2, [r2, #4]
 8004308:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	d103      	bne.n	800431c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1e5a      	subs	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	e7fe      	b.n	8004362 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004364:	f002 f812 	bl	800638c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	441a      	add	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	3b01      	subs	r3, #1
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	441a      	add	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	22ff      	movs	r2, #255	; 0xff
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d114      	bne.n	80043e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01a      	beq.n	80043f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3310      	adds	r3, #16
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 f8de 	bl	8005588 <xTaskRemoveFromEventList>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d012      	beq.n	80043f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <xQueueGenericReset+0xcc>)
 80043d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	e009      	b.n	80043f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3310      	adds	r3, #16
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fef3 	bl	80041d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3324      	adds	r3, #36	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff feee 	bl	80041d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043f8:	f001 fff6 	bl	80063e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043fc:	2301      	movs	r3, #1
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <xQueueGenericCreateStatic+0x28>
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
 8004432:	e7fe      	b.n	8004432 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <xQueueGenericCreateStatic+0x42>
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e7fe      	b.n	800444c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <xQueueGenericCreateStatic+0x4e>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <xQueueGenericCreateStatic+0x52>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueGenericCreateStatic+0x54>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <xQueueGenericCreateStatic+0x6c>
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	623b      	str	r3, [r7, #32]
 8004476:	e7fe      	b.n	8004476 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <xQueueGenericCreateStatic+0x78>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <xQueueGenericCreateStatic+0x7c>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <xQueueGenericCreateStatic+0x7e>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <xQueueGenericCreateStatic+0x96>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044a2:	2350      	movs	r3, #80	; 0x50
 80044a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d009      	beq.n	80044c0 <xQueueGenericCreateStatic+0xb4>
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e7fe      	b.n	80044be <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00d      	beq.n	80044e8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f805 	bl	80044f2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3730      	adds	r7, #48	; 0x30
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e002      	b.n	8004514 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004520:	2101      	movs	r1, #1
 8004522:	69b8      	ldr	r0, [r7, #24]
 8004524:	f7ff ff0a 	bl	800433c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08e      	sub	sp, #56	; 0x38
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004546:	2300      	movs	r3, #0
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <xQueueGenericSend+0x30>
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
 8004566:	e7fe      	b.n	8004566 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <xQueueGenericSend+0x3e>
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <xQueueGenericSend+0x42>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <xQueueGenericSend+0x44>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <xQueueGenericSend+0x5c>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
 8004592:	e7fe      	b.n	8004592 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d103      	bne.n	80045a2 <xQueueGenericSend+0x6a>
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <xQueueGenericSend+0x6e>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <xQueueGenericSend+0x70>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <xQueueGenericSend+0x88>
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	e7fe      	b.n	80045be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045c0:	f001 f998 	bl	80058f4 <xTaskGetSchedulerState>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <xQueueGenericSend+0x98>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <xQueueGenericSend+0x9c>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <xQueueGenericSend+0x9e>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <xQueueGenericSend+0xb6>
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ee:	f001 fecd 	bl	800638c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <xQueueGenericSend+0xcc>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d129      	bne.n	8004658 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460a:	f000 f9ff 	bl	8004a0c <prvCopyDataToQueue>
 800460e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	4618      	mov	r0, r3
 800461e:	f000 ffb3 	bl	8005588 <xTaskRemoveFromEventList>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004628:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <xQueueGenericSend+0x1f0>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	e00a      	b.n	8004650 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <xQueueGenericSend+0x1f0>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004650:	f001 feca 	bl	80063e8 <vPortExitCritical>
				return pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	e063      	b.n	8004720 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800465e:	f001 fec3 	bl	80063e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004662:	2300      	movs	r3, #0
 8004664:	e05c      	b.n	8004720 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4618      	mov	r0, r3
 8004672:	f000 ffeb 	bl	800564c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004676:	2301      	movs	r3, #1
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800467a:	f001 feb5 	bl	80063e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800467e:	f000 fd67 	bl	8005150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004682:	f001 fe83 	bl	800638c <vPortEnterCritical>
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800468c:	b25b      	sxtb	r3, r3
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d103      	bne.n	800469c <xQueueGenericSend+0x164>
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d103      	bne.n	80046b2 <xQueueGenericSend+0x17a>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b2:	f001 fe99 	bl	80063e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046b6:	1d3a      	adds	r2, r7, #4
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 ffda 	bl	8005678 <xTaskCheckForTimeOut>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d124      	bne.n	8004714 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046cc:	f000 fa96 	bl	8004bfc <prvIsQueueFull>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	3310      	adds	r3, #16
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 ff04 	bl	80054ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e6:	f000 fa21 	bl	8004b2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ea:	f000 fd3f 	bl	800516c <xTaskResumeAll>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f47f af7c 	bne.w	80045ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <xQueueGenericSend+0x1f0>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	e772      	b.n	80045ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470a:	f000 fa0f 	bl	8004b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800470e:	f000 fd2d 	bl	800516c <xTaskResumeAll>
 8004712:	e76c      	b.n	80045ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004716:	f000 fa09 	bl	8004b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800471a:	f000 fd27 	bl	800516c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800471e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004720:	4618      	mov	r0, r3
 8004722:	3738      	adds	r7, #56	; 0x38
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08e      	sub	sp, #56	; 0x38
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <xQueueGenericSendFromISR+0x2c>
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	e7fe      	b.n	8004756 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <xQueueGenericSendFromISR+0x3a>
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <xQueueGenericSendFromISR+0x3e>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <xQueueGenericSendFromISR+0x40>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <xQueueGenericSendFromISR+0x58>
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	e7fe      	b.n	8004782 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d103      	bne.n	8004792 <xQueueGenericSendFromISR+0x66>
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <xQueueGenericSendFromISR+0x6a>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <xQueueGenericSendFromISR+0x6c>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <xQueueGenericSendFromISR+0x84>
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	e7fe      	b.n	80047ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047b0:	f001 fec8 	bl	8006544 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047b4:	f3ef 8211 	mrs	r2, BASEPRI
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	61ba      	str	r2, [r7, #24]
 80047ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	429a      	cmp	r2, r3
 80047da:	d302      	bcc.n	80047e2 <xQueueGenericSendFromISR+0xb6>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d12c      	bne.n	800483c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f2:	f000 f90b 	bl	8004a0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d112      	bne.n	8004826 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d016      	beq.n	8004836 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	3324      	adds	r3, #36	; 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f000 febb 	bl	8005588 <xTaskRemoveFromEventList>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e007      	b.n	8004836 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800482a:	3301      	adds	r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	b25a      	sxtb	r2, r3
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004836:	2301      	movs	r3, #1
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800483a:	e001      	b.n	8004840 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800483c:	2300      	movs	r3, #0
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800484c:	4618      	mov	r0, r3
 800484e:	3738      	adds	r7, #56	; 0x38
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004860:	2300      	movs	r3, #0
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <xQueueReceive+0x2e>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	e7fe      	b.n	8004880 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <xQueueReceive+0x3c>
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <xQueueReceive+0x40>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <xQueueReceive+0x42>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <xQueueReceive+0x5a>
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e7fe      	b.n	80048ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ae:	f001 f821 	bl	80058f4 <xTaskGetSchedulerState>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <xQueueReceive+0x6a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <xQueueReceive+0x6e>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <xQueueReceive+0x70>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <xQueueReceive+0x88>
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e7fe      	b.n	80048da <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048dc:	f001 fd56 	bl	800638c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01f      	beq.n	800492c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f0:	f000 f8f6 	bl	8004ae0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	1e5a      	subs	r2, r3, #1
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00f      	beq.n	8004924 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	3310      	adds	r3, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe3d 	bl	8005588 <xTaskRemoveFromEventList>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004914:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <xQueueReceive+0x1b4>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004924:	f001 fd60 	bl	80063e8 <vPortExitCritical>
				return pdPASS;
 8004928:	2301      	movs	r3, #1
 800492a:	e069      	b.n	8004a00 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004932:	f001 fd59 	bl	80063e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004936:	2300      	movs	r3, #0
 8004938:	e062      	b.n	8004a00 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fe81 	bl	800564c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800494e:	f001 fd4b 	bl	80063e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004952:	f000 fbfd 	bl	8005150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004956:	f001 fd19 	bl	800638c <vPortEnterCritical>
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004960:	b25b      	sxtb	r3, r3
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d103      	bne.n	8004970 <xQueueReceive+0x11c>
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <xQueueReceive+0x132>
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004986:	f001 fd2f 	bl	80063e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800498a:	1d3a      	adds	r2, r7, #4
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fe70 	bl	8005678 <xTaskCheckForTimeOut>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d123      	bne.n	80049e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800499e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a0:	f000 f916 	bl	8004bd0 <prvIsQueueEmpty>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	3324      	adds	r3, #36	; 0x24
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fd9a 	bl	80054ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ba:	f000 f8b7 	bl	8004b2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049be:	f000 fbd5 	bl	800516c <xTaskResumeAll>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d189      	bne.n	80048dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <xQueueReceive+0x1b4>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	e780      	b.n	80048dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049dc:	f000 f8a6 	bl	8004b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049e0:	f000 fbc4 	bl	800516c <xTaskResumeAll>
 80049e4:	e77a      	b.n	80048dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e8:	f000 f8a0 	bl	8004b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ec:	f000 fbbe 	bl	800516c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 f8ed 	bl	8004bd0 <prvIsQueueEmpty>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f43f af6f 	beq.w	80048dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3730      	adds	r7, #48	; 0x30
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d14d      	bne.n	8004ace <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 ff7a 	bl	8005930 <xTaskPriorityDisinherit>
 8004a3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	e043      	b.n	8004ace <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d119      	bne.n	8004a80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6858      	ldr	r0, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	461a      	mov	r2, r3
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	f006 f9f0 	bl	800ae3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d32b      	bcc.n	8004ace <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e026      	b.n	8004ace <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68d8      	ldr	r0, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	f006 f9d6 	bl	800ae3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	425b      	negs	r3, r3
 8004a9a:	441a      	add	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d207      	bcs.n	8004abc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	441a      	add	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d105      	bne.n	8004ace <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ad6:	697b      	ldr	r3, [r7, #20]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d018      	beq.n	8004b24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	441a      	add	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d303      	bcc.n	8004b14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68d9      	ldr	r1, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6838      	ldr	r0, [r7, #0]
 8004b20:	f006 f98c 	bl	800ae3c <memcpy>
	}
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b34:	f001 fc2a 	bl	800638c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b40:	e011      	b.n	8004b66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3324      	adds	r3, #36	; 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd1a 	bl	8005588 <xTaskRemoveFromEventList>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b5a:	f000 fded 	bl	8005738 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dce9      	bgt.n	8004b42 <prvUnlockQueue+0x16>
 8004b6e:	e000      	b.n	8004b72 <prvUnlockQueue+0x46>
					break;
 8004b70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	22ff      	movs	r2, #255	; 0xff
 8004b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b7a:	f001 fc35 	bl	80063e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b7e:	f001 fc05 	bl	800638c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b8a:	e011      	b.n	8004bb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d012      	beq.n	8004bba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3310      	adds	r3, #16
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fcf5 	bl	8005588 <xTaskRemoveFromEventList>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ba4:	f000 fdc8 	bl	8005738 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ba8:	7bbb      	ldrb	r3, [r7, #14]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	dce9      	bgt.n	8004b8c <prvUnlockQueue+0x60>
 8004bb8:	e000      	b.n	8004bbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	22ff      	movs	r2, #255	; 0xff
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bc4:	f001 fc10 	bl	80063e8 <vPortExitCritical>
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bd8:	f001 fbd8 	bl	800638c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e001      	b.n	8004bee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bee:	f001 fbfb 	bl	80063e8 <vPortExitCritical>

	return xReturn;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c04:	f001 fbc2 	bl	800638c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d102      	bne.n	8004c1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e001      	b.n	8004c1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c1e:	f001 fbe3 	bl	80063e8 <vPortExitCritical>

	return xReturn;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e014      	b.n	8004c66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <vQueueAddToRegistry+0x4c>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c48:	490b      	ldr	r1, [pc, #44]	; (8004c78 <vQueueAddToRegistry+0x4c>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <vQueueAddToRegistry+0x4c>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c5e:	e005      	b.n	8004c6c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b07      	cmp	r3, #7
 8004c6a:	d9e7      	bls.n	8004c3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	2000d42c 	.word	0x2000d42c

08004c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c8c:	f001 fb7e 	bl	800638c <vPortEnterCritical>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c96:	b25b      	sxtb	r3, r3
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d103      	bne.n	8004ca6 <vQueueWaitForMessageRestricted+0x2a>
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d103      	bne.n	8004cbc <vQueueWaitForMessageRestricted+0x40>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cbc:	f001 fb94 	bl	80063e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3324      	adds	r3, #36	; 0x24
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fc2f 	bl	8005534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff28 	bl	8004b2c <prvUnlockQueue>
	}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08e      	sub	sp, #56	; 0x38
 8004ce8:	af04      	add	r7, sp, #16
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <xTaskCreateStatic+0x28>
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	e7fe      	b.n	8004d0a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <xTaskCreateStatic+0x42>
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	e7fe      	b.n	8004d24 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d26:	235c      	movs	r3, #92	; 0x5c
 8004d28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b5c      	cmp	r3, #92	; 0x5c
 8004d2e:	d009      	beq.n	8004d44 <xTaskCreateStatic+0x60>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e7fe      	b.n	8004d42 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01e      	beq.n	8004d8a <xTaskCreateStatic+0xa6>
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01b      	beq.n	8004d8a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d64:	2300      	movs	r3, #0
 8004d66:	9303      	str	r3, [sp, #12]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	9302      	str	r3, [sp, #8]
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f850 	bl	8004e22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d84:	f000 f8dc 	bl	8004f40 <prvAddNewTaskToReadyList>
 8004d88:	e001      	b.n	8004d8e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d8e:	697b      	ldr	r3, [r7, #20]
	}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3728      	adds	r7, #40	; 0x28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	; 0x30
 8004d9c:	af04      	add	r7, sp, #16
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fc07 	bl	80065c0 <pvPortMalloc>
 8004db2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00e      	beq.n	8004dd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dba:	205c      	movs	r0, #92	; 0x5c
 8004dbc:	f001 fc00 	bl	80065c0 <pvPortMalloc>
 8004dc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dce:	e005      	b.n	8004ddc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dd0:	6978      	ldr	r0, [r7, #20]
 8004dd2:	f001 fcb7 	bl	8006744 <vPortFree>
 8004dd6:	e001      	b.n	8004ddc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d017      	beq.n	8004e12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	2300      	movs	r3, #0
 8004dee:	9303      	str	r3, [sp, #12]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	9302      	str	r3, [sp, #8]
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f80e 	bl	8004e22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e06:	69f8      	ldr	r0, [r7, #28]
 8004e08:	f000 f89a 	bl	8004f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e002      	b.n	8004e18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e18:	69bb      	ldr	r3, [r7, #24]
	}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3720      	adds	r7, #32
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b088      	sub	sp, #32
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	21a5      	movs	r1, #165	; 0xa5
 8004e3c:	f006 f809 	bl	800ae52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f023 0307 	bic.w	r3, r3, #7
 8004e58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <prvInitialiseNewTask+0x56>
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e7fe      	b.n	8004e76 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01f      	beq.n	8004ebe <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	e012      	b.n	8004eaa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	7819      	ldrb	r1, [r3, #0]
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	3334      	adds	r3, #52	; 0x34
 8004e94:	460a      	mov	r2, r1
 8004e96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2b0f      	cmp	r3, #15
 8004eae:	d9e9      	bls.n	8004e84 <prvInitialiseNewTask+0x62>
 8004eb0:	e000      	b.n	8004eb4 <prvInitialiseNewTask+0x92>
			{
				break;
 8004eb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ebc:	e003      	b.n	8004ec6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	2b37      	cmp	r3, #55	; 0x37
 8004eca:	d901      	bls.n	8004ed0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ecc:	2337      	movs	r3, #55	; 0x37
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	2200      	movs	r2, #0
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff f994 	bl	8004214 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	3318      	adds	r3, #24
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff f98f 	bl	8004214 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	68f9      	ldr	r1, [r7, #12]
 8004f1e:	69b8      	ldr	r0, [r7, #24]
 8004f20:	f001 f90c 	bl	800613c <pxPortInitialiseStack>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f36:	bf00      	nop
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f48:	f001 fa20 	bl	800638c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <prvAddNewTaskToReadyList+0xc4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <prvAddNewTaskToReadyList+0xc4>)
 8004f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f56:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <prvAddNewTaskToReadyList+0xc8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f5e:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <prvAddNewTaskToReadyList+0xc8>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f64:	4b27      	ldr	r3, [pc, #156]	; (8005004 <prvAddNewTaskToReadyList+0xc4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d110      	bne.n	8004f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f6c:	f000 fc08 	bl	8005780 <prvInitialiseTaskLists>
 8004f70:	e00d      	b.n	8004f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <prvAddNewTaskToReadyList+0xcc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <prvAddNewTaskToReadyList+0xc8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d802      	bhi.n	8004f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f88:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <prvAddNewTaskToReadyList+0xc8>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <prvAddNewTaskToReadyList+0xd0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <prvAddNewTaskToReadyList+0xd0>)
 8004f96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <prvAddNewTaskToReadyList+0xd0>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <prvAddNewTaskToReadyList+0xd4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d903      	bls.n	8004fb4 <prvAddNewTaskToReadyList+0x74>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a18      	ldr	r2, [pc, #96]	; (8005014 <prvAddNewTaskToReadyList+0xd4>)
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <prvAddNewTaskToReadyList+0xd8>)
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7ff f92f 	bl	800422e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fd0:	f001 fa0a 	bl	80063e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <prvAddNewTaskToReadyList+0xcc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <prvAddNewTaskToReadyList+0xc8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d207      	bcs.n	8004ffa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fea:	4b0c      	ldr	r3, [pc, #48]	; (800501c <prvAddNewTaskToReadyList+0xdc>)
 8004fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000d08 	.word	0x20000d08
 8005008:	20000834 	.word	0x20000834
 800500c:	20000d14 	.word	0x20000d14
 8005010:	20000d24 	.word	0x20000d24
 8005014:	20000d10 	.word	0x20000d10
 8005018:	20000838 	.word	0x20000838
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <vTaskDelay+0x60>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d009      	beq.n	800504e <vTaskDelay+0x2e>
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	e7fe      	b.n	800504c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800504e:	f000 f87f 	bl	8005150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005052:	2100      	movs	r1, #0
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fcd7 	bl	8005a08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800505a:	f000 f887 	bl	800516c <xTaskResumeAll>
 800505e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <vTaskDelay+0x64>)
 8005068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000d30 	.word	0x20000d30
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	; 0x28
 800508c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005096:	463a      	mov	r2, r7
 8005098:	1d39      	adds	r1, r7, #4
 800509a:	f107 0308 	add.w	r3, r7, #8
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff f864 	bl	800416c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	9202      	str	r2, [sp, #8]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	2300      	movs	r3, #0
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	460a      	mov	r2, r1
 80050b6:	4920      	ldr	r1, [pc, #128]	; (8005138 <vTaskStartScheduler+0xb0>)
 80050b8:	4820      	ldr	r0, [pc, #128]	; (800513c <vTaskStartScheduler+0xb4>)
 80050ba:	f7ff fe13 	bl	8004ce4 <xTaskCreateStatic>
 80050be:	4602      	mov	r2, r0
 80050c0:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <vTaskStartScheduler+0xb8>)
 80050c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050c4:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <vTaskStartScheduler+0xb8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050cc:	2301      	movs	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e001      	b.n	80050d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d102      	bne.n	80050e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050dc:	f000 fce8 	bl	8005ab0 <xTimerCreateTimerTask>
 80050e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d115      	bne.n	8005114 <vTaskStartScheduler+0x8c>
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <vTaskStartScheduler+0xbc>)
 80050fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005100:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <vTaskStartScheduler+0xc0>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <vTaskStartScheduler+0xc4>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800510e:	f001 f89f 	bl	8006250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005112:	e00d      	b.n	8005130 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d109      	bne.n	8005130 <vTaskStartScheduler+0xa8>
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e7fe      	b.n	800512e <vTaskStartScheduler+0xa6>
}
 8005130:	bf00      	nop
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	0800bcec 	.word	0x0800bcec
 800513c:	08005751 	.word	0x08005751
 8005140:	20000d2c 	.word	0x20000d2c
 8005144:	20000d28 	.word	0x20000d28
 8005148:	20000d14 	.word	0x20000d14
 800514c:	20000d0c 	.word	0x20000d0c

08005150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <vTaskSuspendAll+0x18>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3301      	adds	r3, #1
 800515a:	4a03      	ldr	r2, [pc, #12]	; (8005168 <vTaskSuspendAll+0x18>)
 800515c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800515e:	bf00      	nop
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	20000d30 	.word	0x20000d30

0800516c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <xTaskResumeAll+0x114>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <xTaskResumeAll+0x2a>
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	e7fe      	b.n	8005194 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005196:	f001 f8f9 	bl	800638c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800519a:	4b39      	ldr	r3, [pc, #228]	; (8005280 <xTaskResumeAll+0x114>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3b01      	subs	r3, #1
 80051a0:	4a37      	ldr	r2, [pc, #220]	; (8005280 <xTaskResumeAll+0x114>)
 80051a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a4:	4b36      	ldr	r3, [pc, #216]	; (8005280 <xTaskResumeAll+0x114>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d162      	bne.n	8005272 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051ac:	4b35      	ldr	r3, [pc, #212]	; (8005284 <xTaskResumeAll+0x118>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d05e      	beq.n	8005272 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b4:	e02f      	b.n	8005216 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b6:	4b34      	ldr	r3, [pc, #208]	; (8005288 <xTaskResumeAll+0x11c>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3318      	adds	r3, #24
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff f890 	bl	80042e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff f88b 	bl	80042e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <xTaskResumeAll+0x120>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d903      	bls.n	80051e6 <xTaskResumeAll+0x7a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a2a      	ldr	r2, [pc, #168]	; (800528c <xTaskResumeAll+0x120>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4a27      	ldr	r2, [pc, #156]	; (8005290 <xTaskResumeAll+0x124>)
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7ff f816 	bl	800422e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <xTaskResumeAll+0x128>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005210:	4b21      	ldr	r3, [pc, #132]	; (8005298 <xTaskResumeAll+0x12c>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <xTaskResumeAll+0x11c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1cb      	bne.n	80051b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005224:	f000 fb46 	bl	80058b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005228:	4b1c      	ldr	r3, [pc, #112]	; (800529c <xTaskResumeAll+0x130>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d010      	beq.n	8005256 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005234:	f000 f846 	bl	80052c4 <xTaskIncrementTick>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <xTaskResumeAll+0x12c>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3b01      	subs	r3, #1
 8005248:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f1      	bne.n	8005234 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <xTaskResumeAll+0x130>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <xTaskResumeAll+0x12c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800525e:	2301      	movs	r3, #1
 8005260:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <xTaskResumeAll+0x134>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005272:	f001 f8b9 	bl	80063e8 <vPortExitCritical>

	return xAlreadyYielded;
 8005276:	68bb      	ldr	r3, [r7, #8]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000d30 	.word	0x20000d30
 8005284:	20000d08 	.word	0x20000d08
 8005288:	20000cc8 	.word	0x20000cc8
 800528c:	20000d10 	.word	0x20000d10
 8005290:	20000838 	.word	0x20000838
 8005294:	20000834 	.word	0x20000834
 8005298:	20000d1c 	.word	0x20000d1c
 800529c:	20000d18 	.word	0x20000d18
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <xTaskGetTickCount+0x1c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052b0:	687b      	ldr	r3, [r7, #4]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000d0c 	.word	0x20000d0c

080052c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ce:	4b4e      	ldr	r3, [pc, #312]	; (8005408 <xTaskIncrementTick+0x144>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f040 8088 	bne.w	80053e8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052d8:	4b4c      	ldr	r3, [pc, #304]	; (800540c <xTaskIncrementTick+0x148>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052e0:	4a4a      	ldr	r2, [pc, #296]	; (800540c <xTaskIncrementTick+0x148>)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d11f      	bne.n	800532c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80052ec:	4b48      	ldr	r3, [pc, #288]	; (8005410 <xTaskIncrementTick+0x14c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <xTaskIncrementTick+0x46>
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	e7fe      	b.n	8005308 <xTaskIncrementTick+0x44>
 800530a:	4b41      	ldr	r3, [pc, #260]	; (8005410 <xTaskIncrementTick+0x14c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	4b40      	ldr	r3, [pc, #256]	; (8005414 <xTaskIncrementTick+0x150>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <xTaskIncrementTick+0x14c>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4a3e      	ldr	r2, [pc, #248]	; (8005414 <xTaskIncrementTick+0x150>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <xTaskIncrementTick+0x154>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a3c      	ldr	r2, [pc, #240]	; (8005418 <xTaskIncrementTick+0x154>)
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	f000 fac4 	bl	80058b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800532c:	4b3b      	ldr	r3, [pc, #236]	; (800541c <xTaskIncrementTick+0x158>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d349      	bcc.n	80053ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005336:	4b36      	ldr	r3, [pc, #216]	; (8005410 <xTaskIncrementTick+0x14c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005340:	4b36      	ldr	r3, [pc, #216]	; (800541c <xTaskIncrementTick+0x158>)
 8005342:	f04f 32ff 	mov.w	r2, #4294967295
 8005346:	601a      	str	r2, [r3, #0]
					break;
 8005348:	e03f      	b.n	80053ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534a:	4b31      	ldr	r3, [pc, #196]	; (8005410 <xTaskIncrementTick+0x14c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d203      	bcs.n	800536a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005362:	4a2e      	ldr	r2, [pc, #184]	; (800541c <xTaskIncrementTick+0x158>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005368:	e02f      	b.n	80053ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3304      	adds	r3, #4
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe ffba 	bl	80042e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	3318      	adds	r3, #24
 8005380:	4618      	mov	r0, r3
 8005382:	f7fe ffb1 	bl	80042e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	4b25      	ldr	r3, [pc, #148]	; (8005420 <xTaskIncrementTick+0x15c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d903      	bls.n	800539a <xTaskIncrementTick+0xd6>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	4a22      	ldr	r2, [pc, #136]	; (8005420 <xTaskIncrementTick+0x15c>)
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <xTaskIncrementTick+0x160>)
 80053a8:	441a      	add	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f7fe ff3c 	bl	800422e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <xTaskIncrementTick+0x164>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3b8      	bcc.n	8005336 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c8:	e7b5      	b.n	8005336 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053ca:	4b17      	ldr	r3, [pc, #92]	; (8005428 <xTaskIncrementTick+0x164>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4914      	ldr	r1, [pc, #80]	; (8005424 <xTaskIncrementTick+0x160>)
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d907      	bls.n	80053f2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e004      	b.n	80053f2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <xTaskIncrementTick+0x168>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	4a0f      	ldr	r2, [pc, #60]	; (800542c <xTaskIncrementTick+0x168>)
 80053f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <xTaskIncrementTick+0x16c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053fe:	697b      	ldr	r3, [r7, #20]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000d30 	.word	0x20000d30
 800540c:	20000d0c 	.word	0x20000d0c
 8005410:	20000cc0 	.word	0x20000cc0
 8005414:	20000cc4 	.word	0x20000cc4
 8005418:	20000d20 	.word	0x20000d20
 800541c:	20000d28 	.word	0x20000d28
 8005420:	20000d10 	.word	0x20000d10
 8005424:	20000838 	.word	0x20000838
 8005428:	20000834 	.word	0x20000834
 800542c:	20000d18 	.word	0x20000d18
 8005430:	20000d1c 	.word	0x20000d1c

08005434 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800543a:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <vTaskSwitchContext+0xa4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005442:	4b26      	ldr	r3, [pc, #152]	; (80054dc <vTaskSwitchContext+0xa8>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005448:	e040      	b.n	80054cc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <vTaskSwitchContext+0xa8>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005450:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <vTaskSwitchContext+0xac>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e00f      	b.n	8005478 <vTaskSwitchContext+0x44>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <vTaskSwitchContext+0x3e>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	e7fe      	b.n	8005470 <vTaskSwitchContext+0x3c>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3b01      	subs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	491a      	ldr	r1, [pc, #104]	; (80054e4 <vTaskSwitchContext+0xb0>)
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0e5      	beq.n	8005458 <vTaskSwitchContext+0x24>
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <vTaskSwitchContext+0xb0>)
 8005498:	4413      	add	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	3308      	adds	r3, #8
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d104      	bne.n	80054bc <vTaskSwitchContext+0x88>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <vTaskSwitchContext+0xb4>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4a06      	ldr	r2, [pc, #24]	; (80054e0 <vTaskSwitchContext+0xac>)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6013      	str	r3, [r2, #0]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	20000d30 	.word	0x20000d30
 80054dc:	20000d1c 	.word	0x20000d1c
 80054e0:	20000d10 	.word	0x20000d10
 80054e4:	20000838 	.word	0x20000838
 80054e8:	20000834 	.word	0x20000834

080054ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <vTaskPlaceOnEventList+0x24>
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e7fe      	b.n	800550e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <vTaskPlaceOnEventList+0x44>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3318      	adds	r3, #24
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fe feac 	bl	8004276 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800551e:	2101      	movs	r1, #1
 8005520:	6838      	ldr	r0, [r7, #0]
 8005522:	f000 fa71 	bl	8005a08 <prvAddCurrentTaskToDelayedList>
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000834 	.word	0x20000834

08005534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <vTaskPlaceOnEventListRestricted+0x26>
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e7fe      	b.n	8005558 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <vTaskPlaceOnEventListRestricted+0x50>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3318      	adds	r3, #24
 8005560:	4619      	mov	r1, r3
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7fe fe63 	bl	800422e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800556e:	f04f 33ff 	mov.w	r3, #4294967295
 8005572:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	68b8      	ldr	r0, [r7, #8]
 8005578:	f000 fa46 	bl	8005a08 <prvAddCurrentTaskToDelayedList>
	}
 800557c:	bf00      	nop
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000834 	.word	0x20000834

08005588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <xTaskRemoveFromEventList+0x2a>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e7fe      	b.n	80055b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3318      	adds	r3, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fe96 	bl	80042e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055bc:	4b1d      	ldr	r3, [pc, #116]	; (8005634 <xTaskRemoveFromEventList+0xac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11d      	bne.n	8005600 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fe8d 	bl	80042e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <xTaskRemoveFromEventList+0xb0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d903      	bls.n	80055e2 <xTaskRemoveFromEventList+0x5a>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4a16      	ldr	r2, [pc, #88]	; (8005638 <xTaskRemoveFromEventList+0xb0>)
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4a13      	ldr	r2, [pc, #76]	; (800563c <xTaskRemoveFromEventList+0xb4>)
 80055f0:	441a      	add	r2, r3
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fe fe18 	bl	800422e <vListInsertEnd>
 80055fe:	e005      	b.n	800560c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3318      	adds	r3, #24
 8005604:	4619      	mov	r1, r3
 8005606:	480e      	ldr	r0, [pc, #56]	; (8005640 <xTaskRemoveFromEventList+0xb8>)
 8005608:	f7fe fe11 	bl	800422e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <xTaskRemoveFromEventList+0xbc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d905      	bls.n	8005626 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <xTaskRemoveFromEventList+0xc0>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e001      	b.n	800562a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000d30 	.word	0x20000d30
 8005638:	20000d10 	.word	0x20000d10
 800563c:	20000838 	.word	0x20000838
 8005640:	20000cc8 	.word	0x20000cc8
 8005644:	20000834 	.word	0x20000834
 8005648:	20000d1c 	.word	0x20000d1c

0800564c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <vTaskInternalSetTimeOutState+0x24>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <vTaskInternalSetTimeOutState+0x28>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20000d20 	.word	0x20000d20
 8005674:	20000d0c 	.word	0x20000d0c

08005678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <xTaskCheckForTimeOut+0x24>
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	e7fe      	b.n	800569a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <xTaskCheckForTimeOut+0x3e>
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e7fe      	b.n	80056b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80056b6:	f000 fe69 	bl	800638c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056ba:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <xTaskCheckForTimeOut+0xb8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d102      	bne.n	80056da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	e023      	b.n	8005722 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <xTaskCheckForTimeOut+0xbc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d007      	beq.n	80056f6 <xTaskCheckForTimeOut+0x7e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	e015      	b.n	8005722 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d20b      	bcs.n	8005718 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff ff9d 	bl	800564c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	e004      	b.n	8005722 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800571e:	2301      	movs	r3, #1
 8005720:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005722:	f000 fe61 	bl	80063e8 <vPortExitCritical>

	return xReturn;
 8005726:	69fb      	ldr	r3, [r7, #28]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000d0c 	.word	0x20000d0c
 8005734:	20000d20 	.word	0x20000d20

08005738 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <vTaskMissedYield+0x14>)
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]
}
 8005742:	bf00      	nop
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000d1c 	.word	0x20000d1c

08005750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005758:	f000 f852 	bl	8005800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <prvIdleTask+0x28>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d9f9      	bls.n	8005758 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <prvIdleTask+0x2c>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005774:	e7f0      	b.n	8005758 <prvIdleTask+0x8>
 8005776:	bf00      	nop
 8005778:	20000838 	.word	0x20000838
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005786:	2300      	movs	r3, #0
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	e00c      	b.n	80057a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <prvInitialiseTaskLists+0x60>)
 8005798:	4413      	add	r3, r2
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fd1a 	bl	80041d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3301      	adds	r3, #1
 80057a4:	607b      	str	r3, [r7, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b37      	cmp	r3, #55	; 0x37
 80057aa:	d9ef      	bls.n	800578c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057ac:	480d      	ldr	r0, [pc, #52]	; (80057e4 <prvInitialiseTaskLists+0x64>)
 80057ae:	f7fe fd11 	bl	80041d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057b2:	480d      	ldr	r0, [pc, #52]	; (80057e8 <prvInitialiseTaskLists+0x68>)
 80057b4:	f7fe fd0e 	bl	80041d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057b8:	480c      	ldr	r0, [pc, #48]	; (80057ec <prvInitialiseTaskLists+0x6c>)
 80057ba:	f7fe fd0b 	bl	80041d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057be:	480c      	ldr	r0, [pc, #48]	; (80057f0 <prvInitialiseTaskLists+0x70>)
 80057c0:	f7fe fd08 	bl	80041d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057c4:	480b      	ldr	r0, [pc, #44]	; (80057f4 <prvInitialiseTaskLists+0x74>)
 80057c6:	f7fe fd05 	bl	80041d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <prvInitialiseTaskLists+0x78>)
 80057cc:	4a05      	ldr	r2, [pc, #20]	; (80057e4 <prvInitialiseTaskLists+0x64>)
 80057ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <prvInitialiseTaskLists+0x7c>)
 80057d2:	4a05      	ldr	r2, [pc, #20]	; (80057e8 <prvInitialiseTaskLists+0x68>)
 80057d4:	601a      	str	r2, [r3, #0]
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000838 	.word	0x20000838
 80057e4:	20000c98 	.word	0x20000c98
 80057e8:	20000cac 	.word	0x20000cac
 80057ec:	20000cc8 	.word	0x20000cc8
 80057f0:	20000cdc 	.word	0x20000cdc
 80057f4:	20000cf4 	.word	0x20000cf4
 80057f8:	20000cc0 	.word	0x20000cc0
 80057fc:	20000cc4 	.word	0x20000cc4

08005800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005806:	e019      	b.n	800583c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005808:	f000 fdc0 	bl	800638c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <prvCheckTasksWaitingTermination+0x4c>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3304      	adds	r3, #4
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fd65 	bl	80042e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <prvCheckTasksWaitingTermination+0x50>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3b01      	subs	r3, #1
 8005824:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <prvCheckTasksWaitingTermination+0x50>)
 8005826:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <prvCheckTasksWaitingTermination+0x54>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <prvCheckTasksWaitingTermination+0x54>)
 8005830:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005832:	f000 fdd9 	bl	80063e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f80e 	bl	8005858 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <prvCheckTasksWaitingTermination+0x54>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e1      	bne.n	8005808 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000cdc 	.word	0x20000cdc
 8005850:	20000d08 	.word	0x20000d08
 8005854:	20000cf0 	.word	0x20000cf0

08005858 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005866:	2b00      	cmp	r3, #0
 8005868:	d108      	bne.n	800587c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	4618      	mov	r0, r3
 8005870:	f000 ff68 	bl	8006744 <vPortFree>
				vPortFree( pxTCB );
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 ff65 	bl	8006744 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800587a:	e017      	b.n	80058ac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005882:	2b01      	cmp	r3, #1
 8005884:	d103      	bne.n	800588e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 ff5c 	bl	8006744 <vPortFree>
	}
 800588c:	e00e      	b.n	80058ac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005894:	2b02      	cmp	r3, #2
 8005896:	d009      	beq.n	80058ac <prvDeleteTCB+0x54>
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e7fe      	b.n	80058aa <prvDeleteTCB+0x52>
	}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <prvResetNextTaskUnblockTime+0x38>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <prvResetNextTaskUnblockTime+0x3c>)
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058cc:	e008      	b.n	80058e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <prvResetNextTaskUnblockTime+0x38>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4a04      	ldr	r2, [pc, #16]	; (80058f0 <prvResetNextTaskUnblockTime+0x3c>)
 80058de:	6013      	str	r3, [r2, #0]
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	20000cc0 	.word	0x20000cc0
 80058f0:	20000d28 	.word	0x20000d28

080058f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <xTaskGetSchedulerState+0x34>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005902:	2301      	movs	r3, #1
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	e008      	b.n	800591a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005908:	4b08      	ldr	r3, [pc, #32]	; (800592c <xTaskGetSchedulerState+0x38>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005910:	2302      	movs	r3, #2
 8005912:	607b      	str	r3, [r7, #4]
 8005914:	e001      	b.n	800591a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005916:	2300      	movs	r3, #0
 8005918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800591a:	687b      	ldr	r3, [r7, #4]
	}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000d14 	.word	0x20000d14
 800592c:	20000d30 	.word	0x20000d30

08005930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d054      	beq.n	80059f0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005946:	4b2d      	ldr	r3, [pc, #180]	; (80059fc <xTaskPriorityDisinherit+0xcc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d009      	beq.n	8005964 <xTaskPriorityDisinherit+0x34>
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	e7fe      	b.n	8005962 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <xTaskPriorityDisinherit+0x50>
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	e7fe      	b.n	800597e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005984:	1e5a      	subs	r2, r3, #1
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	429a      	cmp	r2, r3
 8005994:	d02c      	beq.n	80059f0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599a:	2b00      	cmp	r3, #0
 800599c:	d128      	bne.n	80059f0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fca0 	bl	80042e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <xTaskPriorityDisinherit+0xd0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d903      	bls.n	80059d0 <xTaskPriorityDisinherit+0xa0>
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <xTaskPriorityDisinherit+0xd0>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <xTaskPriorityDisinherit+0xd4>)
 80059de:	441a      	add	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7fe fc21 	bl	800422e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059ec:	2301      	movs	r3, #1
 80059ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059f0:	697b      	ldr	r3, [r7, #20]
	}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000834 	.word	0x20000834
 8005a00:	20000d10 	.word	0x20000d10
 8005a04:	20000838 	.word	0x20000838

08005a08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a12:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a18:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fc62 	bl	80042e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d10a      	bne.n	8005a42 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a32:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4819      	ldr	r0, [pc, #100]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a3c:	f7fe fbf7 	bl	800422e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a40:	e026      	b.n	8005a90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4413      	add	r3, r2
 8005a48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a4a:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d209      	bcs.n	8005a6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe fc05 	bl	8004276 <vListInsert>
}
 8005a6c:	e010      	b.n	8005a90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a6e:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f7fe fbfb 	bl	8004276 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d202      	bcs.n	8005a90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a8a:	4a08      	ldr	r2, [pc, #32]	; (8005aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6013      	str	r3, [r2, #0]
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000d0c 	.word	0x20000d0c
 8005a9c:	20000834 	.word	0x20000834
 8005aa0:	20000cf4 	.word	0x20000cf4
 8005aa4:	20000cc4 	.word	0x20000cc4
 8005aa8:	20000cc0 	.word	0x20000cc0
 8005aac:	20000d28 	.word	0x20000d28

08005ab0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005aba:	f000 faff 	bl	80060bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005abe:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <xTimerCreateTimerTask+0x80>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d021      	beq.n	8005b0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ace:	1d3a      	adds	r2, r7, #4
 8005ad0:	f107 0108 	add.w	r1, r7, #8
 8005ad4:	f107 030c 	add.w	r3, r7, #12
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe fb61 	bl	80041a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	9202      	str	r2, [sp, #8]
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	2302      	movs	r3, #2
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	460a      	mov	r2, r1
 8005af0:	4910      	ldr	r1, [pc, #64]	; (8005b34 <xTimerCreateTimerTask+0x84>)
 8005af2:	4811      	ldr	r0, [pc, #68]	; (8005b38 <xTimerCreateTimerTask+0x88>)
 8005af4:	f7ff f8f6 	bl	8004ce4 <xTaskCreateStatic>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <xTimerCreateTimerTask+0x8c>)
 8005afc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <xTimerCreateTimerTask+0x8c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b06:	2301      	movs	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <xTimerCreateTimerTask+0x74>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e7fe      	b.n	8005b22 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005b24:	697b      	ldr	r3, [r7, #20]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000d64 	.word	0x20000d64
 8005b34:	0800bcf4 	.word	0x0800bcf4
 8005b38:	08005c71 	.word	0x08005c71
 8005b3c:	20000d68 	.word	0x20000d68

08005b40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <xTimerGenericCommand+0x2c>
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	e7fe      	b.n	8005b6a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b6c:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <xTimerGenericCommand+0x94>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02a      	beq.n	8005bca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	dc18      	bgt.n	8005bb8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b86:	f7ff feb5 	bl	80058f4 <xTaskGetSchedulerState>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d109      	bne.n	8005ba4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b90:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <xTimerGenericCommand+0x94>)
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	f107 0110 	add.w	r1, r7, #16
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9c:	f7fe fccc 	bl	8004538 <xQueueGenericSend>
 8005ba0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ba2:	e012      	b.n	8005bca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <xTimerGenericCommand+0x94>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	f107 0110 	add.w	r1, r7, #16
 8005bac:	2300      	movs	r3, #0
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f7fe fcc2 	bl	8004538 <xQueueGenericSend>
 8005bb4:	6278      	str	r0, [r7, #36]	; 0x24
 8005bb6:	e008      	b.n	8005bca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <xTimerGenericCommand+0x94>)
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	f107 0110 	add.w	r1, r7, #16
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	f7fe fdb2 	bl	800472c <xQueueGenericSendFromISR>
 8005bc8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3728      	adds	r7, #40	; 0x28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000d64 	.word	0x20000d64

08005bd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be2:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <prvProcessExpiredTimer+0x94>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe fb79 	bl	80042e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d021      	beq.n	8005c48 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	18d1      	adds	r1, r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	6978      	ldr	r0, [r7, #20]
 8005c12:	f000 f8d1 	bl	8005db8 <prvInsertTimerInActiveList>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01e      	beq.n	8005c5a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	2300      	movs	r3, #0
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	2100      	movs	r1, #0
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f7ff ff8a 	bl	8005b40 <xTimerGenericCommand>
 8005c2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d112      	bne.n	8005c5a <prvProcessExpiredTimer+0x82>
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e7fe      	b.n	8005c46 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	4798      	blx	r3
}
 8005c62:	bf00      	nop
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000d5c 	.word	0x20000d5c

08005c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f857 	bl	8005d30 <prvGetNextExpireTime>
 8005c82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f803 	bl	8005c94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c8e:	f000 f8d5 	bl	8005e3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c92:	e7f1      	b.n	8005c78 <prvTimerTask+0x8>

08005c94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c9e:	f7ff fa57 	bl	8005150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ca2:	f107 0308 	add.w	r3, r7, #8
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f866 	bl	8005d78 <prvSampleTimeNow>
 8005cac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d130      	bne.n	8005d16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <prvProcessTimerOrBlockTask+0x3c>
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d806      	bhi.n	8005cd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cc2:	f7ff fa53 	bl	800516c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff85 	bl	8005bd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cce:	e024      	b.n	8005d1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cd6:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <prvProcessTimerOrBlockTask+0x90>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <prvProcessTimerOrBlockTask+0x50>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <prvProcessTimerOrBlockTask+0x52>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <prvProcessTimerOrBlockTask+0x94>)
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f7fe ffc1 	bl	8004c7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cfa:	f7ff fa37 	bl	800516c <xTaskResumeAll>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d04:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <prvProcessTimerOrBlockTask+0x98>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
}
 8005d14:	e001      	b.n	8005d1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d16:	f7ff fa29 	bl	800516c <xTaskResumeAll>
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000d60 	.word	0x20000d60
 8005d28:	20000d64 	.word	0x20000d64
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d38:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <prvGetNextExpireTime+0x44>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <prvGetNextExpireTime+0x16>
 8005d42:	2201      	movs	r2, #1
 8005d44:	e000      	b.n	8005d48 <prvGetNextExpireTime+0x18>
 8005d46:	2200      	movs	r2, #0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <prvGetNextExpireTime+0x44>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e001      	b.n	8005d64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d64:	68fb      	ldr	r3, [r7, #12]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000d5c 	.word	0x20000d5c

08005d78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d80:	f7ff fa90 	bl	80052a4 <xTaskGetTickCount>
 8005d84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <prvSampleTimeNow+0x3c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d205      	bcs.n	8005d9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d90:	f000 f930 	bl	8005ff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005da2:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <prvSampleTimeNow+0x3c>)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005da8:	68fb      	ldr	r3, [r7, #12]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000d6c 	.word	0x20000d6c

08005db8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d812      	bhi.n	8005e04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	e01b      	b.n	8005e2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005df2:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <prvInsertTimerInActiveList+0x7c>)
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f7fe fa3a 	bl	8004276 <vListInsert>
 8005e02:	e012      	b.n	8005e2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d206      	bcs.n	8005e1a <prvInsertTimerInActiveList+0x62>
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d302      	bcc.n	8005e1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e007      	b.n	8005e2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <prvInsertTimerInActiveList+0x80>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f7fe fa26 	bl	8004276 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e2a:	697b      	ldr	r3, [r7, #20]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000d60 	.word	0x20000d60
 8005e38:	20000d5c 	.word	0x20000d5c

08005e3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	; 0x38
 8005e40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e42:	e0c6      	b.n	8005fd2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da17      	bge.n	8005e7a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <prvProcessReceivedCommands+0x2e>
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e7fe      	b.n	8005e68 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e70:	6850      	ldr	r0, [r2, #4]
 8005e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e74:	6892      	ldr	r2, [r2, #8]
 8005e76:	4611      	mov	r1, r2
 8005e78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f2c0 80a7 	blt.w	8005fd0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fa28 	bl	80042e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e98:	463b      	mov	r3, r7
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff ff6c 	bl	8005d78 <prvSampleTimeNow>
 8005ea0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b09      	cmp	r3, #9
 8005ea6:	f200 8094 	bhi.w	8005fd2 <prvProcessReceivedCommands+0x196>
 8005eaa:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <prvProcessReceivedCommands+0x74>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ed9 	.word	0x08005ed9
 8005ebc:	08005f4b 	.word	0x08005f4b
 8005ec0:	08005f5f 	.word	0x08005f5f
 8005ec4:	08005fa7 	.word	0x08005fa7
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005ed9 	.word	0x08005ed9
 8005ed0:	08005f4b 	.word	0x08005f4b
 8005ed4:	08005f5f 	.word	0x08005f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	18d1      	adds	r1, r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef8:	f7ff ff5e 	bl	8005db8 <prvInsertTimerInActiveList>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d067      	beq.n	8005fd2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05c      	beq.n	8005fd2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	441a      	add	r2, r3
 8005f20:	2300      	movs	r3, #0
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	2300      	movs	r3, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2a:	f7ff fe09 	bl	8005b40 <xTimerGenericCommand>
 8005f2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d14d      	bne.n	8005fd2 <prvProcessReceivedCommands+0x196>
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	e7fe      	b.n	8005f48 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f5c:	e039      	b.n	8005fd2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <prvProcessReceivedCommands+0x156>
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e7fe      	b.n	8005f90 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	18d1      	adds	r1, r2, r3
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa0:	f7ff ff0a 	bl	8005db8 <prvInsertTimerInActiveList>
					break;
 8005fa4:	e015      	b.n	8005fd2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb6:	f000 fbc5 	bl	8006744 <vPortFree>
 8005fba:	e00a      	b.n	8005fd2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005fce:	e000      	b.n	8005fd2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005fd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <prvProcessReceivedCommands+0x1b4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1d39      	adds	r1, r7, #4
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fc3a 	bl	8004854 <xQueueReceive>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f47f af2e 	bne.w	8005e44 <prvProcessReceivedCommands+0x8>
	}
}
 8005fe8:	bf00      	nop
 8005fea:	3730      	adds	r7, #48	; 0x30
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000d64 	.word	0x20000d64

08005ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ffa:	e047      	b.n	800608c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ffc:	4b2d      	ldr	r3, [pc, #180]	; (80060b4 <prvSwitchTimerLists+0xc0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006006:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <prvSwitchTimerLists+0xc0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3304      	adds	r3, #4
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe f967 	bl	80042e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d02d      	beq.n	800608c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	429a      	cmp	r2, r3
 8006040:	d90e      	bls.n	8006060 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800604e:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <prvSwitchTimerLists+0xc0>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f7fe f90c 	bl	8004276 <vListInsert>
 800605e:	e015      	b.n	800608c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006060:	2300      	movs	r3, #0
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	2100      	movs	r1, #0
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff fd68 	bl	8005b40 <xTimerGenericCommand>
 8006070:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <prvSwitchTimerLists+0x98>
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	e7fe      	b.n	800608a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <prvSwitchTimerLists+0xc0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1b2      	bne.n	8005ffc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006096:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <prvSwitchTimerLists+0xc0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <prvSwitchTimerLists+0xc4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <prvSwitchTimerLists+0xc0>)
 80060a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060a4:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <prvSwitchTimerLists+0xc4>)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6013      	str	r3, [r2, #0]
}
 80060aa:	bf00      	nop
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000d5c 	.word	0x20000d5c
 80060b8:	20000d60 	.word	0x20000d60

080060bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060c2:	f000 f963 	bl	800638c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <prvCheckForValidListAndQueue+0x60>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d120      	bne.n	8006110 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060ce:	4814      	ldr	r0, [pc, #80]	; (8006120 <prvCheckForValidListAndQueue+0x64>)
 80060d0:	f7fe f880 	bl	80041d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060d4:	4813      	ldr	r0, [pc, #76]	; (8006124 <prvCheckForValidListAndQueue+0x68>)
 80060d6:	f7fe f87d 	bl	80041d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <prvCheckForValidListAndQueue+0x6c>)
 80060dc:	4a10      	ldr	r2, [pc, #64]	; (8006120 <prvCheckForValidListAndQueue+0x64>)
 80060de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060e0:	4b12      	ldr	r3, [pc, #72]	; (800612c <prvCheckForValidListAndQueue+0x70>)
 80060e2:	4a10      	ldr	r2, [pc, #64]	; (8006124 <prvCheckForValidListAndQueue+0x68>)
 80060e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060e6:	2300      	movs	r3, #0
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <prvCheckForValidListAndQueue+0x74>)
 80060ec:	4a11      	ldr	r2, [pc, #68]	; (8006134 <prvCheckForValidListAndQueue+0x78>)
 80060ee:	2110      	movs	r1, #16
 80060f0:	200a      	movs	r0, #10
 80060f2:	f7fe f98b 	bl	800440c <xQueueGenericCreateStatic>
 80060f6:	4602      	mov	r2, r0
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <prvCheckForValidListAndQueue+0x60>)
 80060fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <prvCheckForValidListAndQueue+0x60>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <prvCheckForValidListAndQueue+0x60>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	490b      	ldr	r1, [pc, #44]	; (8006138 <prvCheckForValidListAndQueue+0x7c>)
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fd8e 	bl	8004c2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006110:	f000 f96a 	bl	80063e8 <vPortExitCritical>
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000d64 	.word	0x20000d64
 8006120:	20000d34 	.word	0x20000d34
 8006124:	20000d48 	.word	0x20000d48
 8006128:	20000d5c 	.word	0x20000d5c
 800612c:	20000d60 	.word	0x20000d60
 8006130:	20000e10 	.word	0x20000e10
 8006134:	20000d70 	.word	0x20000d70
 8006138:	0800bcfc 	.word	0x0800bcfc

0800613c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3b04      	subs	r3, #4
 800614c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3b04      	subs	r3, #4
 800615a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f023 0201 	bic.w	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b04      	subs	r3, #4
 800616a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800616c:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <pxPortInitialiseStack+0x64>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3b14      	subs	r3, #20
 8006176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3b04      	subs	r3, #4
 8006182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f06f 0202 	mvn.w	r2, #2
 800618a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3b20      	subs	r3, #32
 8006190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006192:	68fb      	ldr	r3, [r7, #12]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	080061a5 	.word	0x080061a5

080061a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ae:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <prvTaskExitError+0x50>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d009      	beq.n	80061cc <prvTaskExitError+0x28>
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e7fe      	b.n	80061ca <prvTaskExitError+0x26>
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061de:	bf00      	nop
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0fc      	beq.n	80061e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000008 	.word	0x20000008
	...

08006200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <pxCurrentTCBConst2>)
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6808      	ldr	r0, [r1, #0]
 8006206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	f380 8809 	msr	PSP, r0
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8811 	msr	BASEPRI, r0
 800621a:	4770      	bx	lr
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst2>:
 8006220:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <prvPortStartFirstTask+0x24>)
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f380 8808 	msr	MSP, r0
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8814 	msr	CONTROL, r0
 800623a:	b662      	cpsie	i
 800623c:	b661      	cpsie	f
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	df00      	svc	0
 8006248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800624a:	bf00      	nop
 800624c:	e000ed08 	.word	0xe000ed08

08006250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006256:	4b44      	ldr	r3, [pc, #272]	; (8006368 <xPortStartScheduler+0x118>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a44      	ldr	r2, [pc, #272]	; (800636c <xPortStartScheduler+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <xPortStartScheduler+0x24>
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	e7fe      	b.n	8006272 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006274:	4b3c      	ldr	r3, [pc, #240]	; (8006368 <xPortStartScheduler+0x118>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a3d      	ldr	r2, [pc, #244]	; (8006370 <xPortStartScheduler+0x120>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d109      	bne.n	8006292 <xPortStartScheduler+0x42>
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e7fe      	b.n	8006290 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006292:	4b38      	ldr	r3, [pc, #224]	; (8006374 <xPortStartScheduler+0x124>)
 8006294:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	4b30      	ldr	r3, [pc, #192]	; (8006378 <xPortStartScheduler+0x128>)
 80062b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062ba:	4b30      	ldr	r3, [pc, #192]	; (800637c <xPortStartScheduler+0x12c>)
 80062bc:	2207      	movs	r2, #7
 80062be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062c0:	e009      	b.n	80062d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80062c2:	4b2e      	ldr	r3, [pc, #184]	; (800637c <xPortStartScheduler+0x12c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	4a2c      	ldr	r2, [pc, #176]	; (800637c <xPortStartScheduler+0x12c>)
 80062ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d0ef      	beq.n	80062c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062e2:	4b26      	ldr	r3, [pc, #152]	; (800637c <xPortStartScheduler+0x12c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f1c3 0307 	rsb	r3, r3, #7
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d009      	beq.n	8006302 <xPortStartScheduler+0xb2>
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60bb      	str	r3, [r7, #8]
 8006300:	e7fe      	b.n	8006300 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <xPortStartScheduler+0x12c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <xPortStartScheduler+0x12c>)
 800630a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800630c:	4b1b      	ldr	r3, [pc, #108]	; (800637c <xPortStartScheduler+0x12c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006314:	4a19      	ldr	r2, [pc, #100]	; (800637c <xPortStartScheduler+0x12c>)
 8006316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006320:	4b17      	ldr	r3, [pc, #92]	; (8006380 <xPortStartScheduler+0x130>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a16      	ldr	r2, [pc, #88]	; (8006380 <xPortStartScheduler+0x130>)
 8006326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800632a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800632c:	4b14      	ldr	r3, [pc, #80]	; (8006380 <xPortStartScheduler+0x130>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a13      	ldr	r2, [pc, #76]	; (8006380 <xPortStartScheduler+0x130>)
 8006332:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006338:	f000 f8d6 	bl	80064e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800633c:	4b11      	ldr	r3, [pc, #68]	; (8006384 <xPortStartScheduler+0x134>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006342:	f000 f8f5 	bl	8006530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <xPortStartScheduler+0x138>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0f      	ldr	r2, [pc, #60]	; (8006388 <xPortStartScheduler+0x138>)
 800634c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006350:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006352:	f7ff ff69 	bl	8006228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006356:	f7ff f86d 	bl	8005434 <vTaskSwitchContext>
	prvTaskExitError();
 800635a:	f7ff ff23 	bl	80061a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed00 	.word	0xe000ed00
 800636c:	410fc271 	.word	0x410fc271
 8006370:	410fc270 	.word	0x410fc270
 8006374:	e000e400 	.word	0xe000e400
 8006378:	20000e60 	.word	0x20000e60
 800637c:	20000e64 	.word	0x20000e64
 8006380:	e000ed20 	.word	0xe000ed20
 8006384:	20000008 	.word	0x20000008
 8006388:	e000ef34 	.word	0xe000ef34

0800638c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <vPortEnterCritical+0x54>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a0d      	ldr	r2, [pc, #52]	; (80063e0 <vPortEnterCritical+0x54>)
 80063ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063ae:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <vPortEnterCritical+0x54>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10e      	bne.n	80063d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <vPortEnterCritical+0x58>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <vPortEnterCritical+0x48>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	e7fe      	b.n	80063d2 <vPortEnterCritical+0x46>
	}
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20000008 	.word	0x20000008
 80063e4:	e000ed04 	.word	0xe000ed04

080063e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <vPortExitCritical+0x4c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <vPortExitCritical+0x22>
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	e7fe      	b.n	8006408 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <vPortExitCritical+0x4c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3b01      	subs	r3, #1
 8006410:	4a08      	ldr	r2, [pc, #32]	; (8006434 <vPortExitCritical+0x4c>)
 8006412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <vPortExitCritical+0x4c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <vPortExitCritical+0x3e>
 800641c:	2300      	movs	r3, #0
 800641e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000008 	.word	0x20000008
	...

08006440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006440:	f3ef 8009 	mrs	r0, PSP
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <pxCurrentTCBConst>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f01e 0f10 	tst.w	lr, #16
 8006450:	bf08      	it	eq
 8006452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006464:	f380 8811 	msr	BASEPRI, r0
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f7fe ffe0 	bl	8005434 <vTaskSwitchContext>
 8006474:	f04f 0000 	mov.w	r0, #0
 8006478:	f380 8811 	msr	BASEPRI, r0
 800647c:	bc09      	pop	{r0, r3}
 800647e:	6819      	ldr	r1, [r3, #0]
 8006480:	6808      	ldr	r0, [r1, #0]
 8006482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006486:	f01e 0f10 	tst.w	lr, #16
 800648a:	bf08      	it	eq
 800648c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006490:	f380 8809 	msr	PSP, r0
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w

080064a0 <pxCurrentTCBConst>:
 80064a0:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop

080064a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064c0:	f7fe ff00 	bl	80052c4 <xTaskIncrementTick>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <SysTick_Handler+0x3c>)
 80064cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064ec:	4b0b      	ldr	r3, [pc, #44]	; (800651c <vPortSetupTimerInterrupt+0x34>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <vPortSetupTimerInterrupt+0x38>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064f8:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <vPortSetupTimerInterrupt+0x3c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a0a      	ldr	r2, [pc, #40]	; (8006528 <vPortSetupTimerInterrupt+0x40>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	099b      	lsrs	r3, r3, #6
 8006504:	4a09      	ldr	r2, [pc, #36]	; (800652c <vPortSetupTimerInterrupt+0x44>)
 8006506:	3b01      	subs	r3, #1
 8006508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800650a:	4b04      	ldr	r3, [pc, #16]	; (800651c <vPortSetupTimerInterrupt+0x34>)
 800650c:	2207      	movs	r2, #7
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	e000e010 	.word	0xe000e010
 8006520:	e000e018 	.word	0xe000e018
 8006524:	200000f4 	.word	0x200000f4
 8006528:	10624dd3 	.word	0x10624dd3
 800652c:	e000e014 	.word	0xe000e014

08006530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006540 <vPortEnableVFP+0x10>
 8006534:	6801      	ldr	r1, [r0, #0]
 8006536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800653a:	6001      	str	r1, [r0, #0]
 800653c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800653e:	bf00      	nop
 8006540:	e000ed88 	.word	0xe000ed88

08006544 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800654a:	f3ef 8305 	mrs	r3, IPSR
 800654e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d913      	bls.n	800657e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006556:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <vPortValidateInterruptPriority+0x6c>)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006560:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <vPortValidateInterruptPriority+0x70>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	7afa      	ldrb	r2, [r7, #11]
 8006566:	429a      	cmp	r2, r3
 8006568:	d209      	bcs.n	800657e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	e7fe      	b.n	800657c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800657e:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <vPortValidateInterruptPriority+0x74>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <vPortValidateInterruptPriority+0x78>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d909      	bls.n	80065a2 <vPortValidateInterruptPriority+0x5e>
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	e7fe      	b.n	80065a0 <vPortValidateInterruptPriority+0x5c>
	}
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	e000e3f0 	.word	0xe000e3f0
 80065b4:	20000e60 	.word	0x20000e60
 80065b8:	e000ed0c 	.word	0xe000ed0c
 80065bc:	20000e64 	.word	0x20000e64

080065c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	; 0x28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065cc:	f7fe fdc0 	bl	8005150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065d0:	4b57      	ldr	r3, [pc, #348]	; (8006730 <pvPortMalloc+0x170>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065d8:	f000 f90c 	bl	80067f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065dc:	4b55      	ldr	r3, [pc, #340]	; (8006734 <pvPortMalloc+0x174>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 808c 	bne.w	8006702 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01c      	beq.n	800662a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80065f0:	2208      	movs	r2, #8
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d013      	beq.n	800662a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f023 0307 	bic.w	r3, r3, #7
 8006608:	3308      	adds	r3, #8
 800660a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <pvPortMalloc+0x6a>
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e7fe      	b.n	8006628 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d068      	beq.n	8006702 <pvPortMalloc+0x142>
 8006630:	4b41      	ldr	r3, [pc, #260]	; (8006738 <pvPortMalloc+0x178>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d863      	bhi.n	8006702 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800663a:	4b40      	ldr	r3, [pc, #256]	; (800673c <pvPortMalloc+0x17c>)
 800663c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800663e:	4b3f      	ldr	r3, [pc, #252]	; (800673c <pvPortMalloc+0x17c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006644:	e004      	b.n	8006650 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d903      	bls.n	8006662 <pvPortMalloc+0xa2>
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f1      	bne.n	8006646 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006662:	4b33      	ldr	r3, [pc, #204]	; (8006730 <pvPortMalloc+0x170>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	429a      	cmp	r2, r3
 800666a:	d04a      	beq.n	8006702 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2208      	movs	r2, #8
 8006672:	4413      	add	r3, r2
 8006674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	1ad2      	subs	r2, r2, r3
 8006686:	2308      	movs	r3, #8
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	429a      	cmp	r2, r3
 800668c:	d91e      	bls.n	80066cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <pvPortMalloc+0xf4>
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	e7fe      	b.n	80066b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066c6:	69b8      	ldr	r0, [r7, #24]
 80066c8:	f000 f8f6 	bl	80068b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <pvPortMalloc+0x178>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	4a18      	ldr	r2, [pc, #96]	; (8006738 <pvPortMalloc+0x178>)
 80066d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066da:	4b17      	ldr	r3, [pc, #92]	; (8006738 <pvPortMalloc+0x178>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <pvPortMalloc+0x180>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d203      	bcs.n	80066ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066e6:	4b14      	ldr	r3, [pc, #80]	; (8006738 <pvPortMalloc+0x178>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a15      	ldr	r2, [pc, #84]	; (8006740 <pvPortMalloc+0x180>)
 80066ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	4b10      	ldr	r3, [pc, #64]	; (8006734 <pvPortMalloc+0x174>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006702:	f7fe fd33 	bl	800516c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <pvPortMalloc+0x164>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e7fe      	b.n	8006722 <pvPortMalloc+0x162>
	return pvReturn;
 8006724:	69fb      	ldr	r3, [r7, #28]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3728      	adds	r7, #40	; 0x28
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2000c270 	.word	0x2000c270
 8006734:	2000c27c 	.word	0x2000c27c
 8006738:	2000c274 	.word	0x2000c274
 800673c:	2000c268 	.word	0x2000c268
 8006740:	2000c278 	.word	0x2000c278

08006744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d046      	beq.n	80067e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006756:	2308      	movs	r3, #8
 8006758:	425b      	negs	r3, r3
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	4b20      	ldr	r3, [pc, #128]	; (80067ec <vPortFree+0xa8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4013      	ands	r3, r2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <vPortFree+0x42>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e7fe      	b.n	8006784 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <vPortFree+0x5e>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	e7fe      	b.n	80067a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <vPortFree+0xa8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d019      	beq.n	80067e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d115      	bne.n	80067e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <vPortFree+0xa8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	401a      	ands	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067c8:	f7fe fcc2 	bl	8005150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <vPortFree+0xac>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4413      	add	r3, r2
 80067d6:	4a06      	ldr	r2, [pc, #24]	; (80067f0 <vPortFree+0xac>)
 80067d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067da:	6938      	ldr	r0, [r7, #16]
 80067dc:	f000 f86c 	bl	80068b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067e0:	f7fe fcc4 	bl	800516c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067e4:	bf00      	nop
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	2000c27c 	.word	0x2000c27c
 80067f0:	2000c274 	.word	0x2000c274

080067f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067fa:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 80067fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <prvHeapInit+0xac>)
 8006802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3307      	adds	r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0307 	bic.w	r3, r3, #7
 800681a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <prvHeapInit+0xac>)
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <prvHeapInit+0xb0>)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <prvHeapInit+0xb0>)
 8006834:	2200      	movs	r2, #0
 8006836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4413      	add	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006840:	2208      	movs	r2, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <prvHeapInit+0xb4>)
 8006854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <prvHeapInit+0xb4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <prvHeapInit+0xb4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvHeapInit+0xb4>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <prvHeapInit+0xb8>)
 8006882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <prvHeapInit+0xbc>)
 800688a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <prvHeapInit+0xc0>)
 800688e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000e68 	.word	0x20000e68
 80068a4:	2000c268 	.word	0x2000c268
 80068a8:	2000c270 	.word	0x2000c270
 80068ac:	2000c278 	.word	0x2000c278
 80068b0:	2000c274 	.word	0x2000c274
 80068b4:	2000c27c 	.word	0x2000c27c

080068b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <prvInsertBlockIntoFreeList+0xac>)
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e002      	b.n	80068cc <prvInsertBlockIntoFreeList+0x14>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d8f7      	bhi.n	80068c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d108      	bne.n	80068fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	441a      	add	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	441a      	add	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d118      	bne.n	8006940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d00d      	beq.n	8006936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	441a      	add	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e008      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e003      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d002      	beq.n	8006956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000c268 	.word	0x2000c268
 8006968:	2000c270 	.word	0x2000c270

0800696c <cc110_spi_xfer>:
void cc110_getConfig(void);
void cc110_dumpRegisters(void);

/* Public function definitions -----------------------------------------------*/
void cc110_spi_xfer(uint8_t* txData, uint8_t* rxData, uint16_t len)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&hspi2, txData, rxData, len, HAL_MAX_DELAY);
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	f04f 33ff 	mov.w	r3, #4294967295
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	4613      	mov	r3, r2
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	4803      	ldr	r0, [pc, #12]	; (8006998 <cc110_spi_xfer+0x2c>)
 800698a:	f7fb fdb3 	bl	80024f4 <HAL_SPI_TransmitReceive>
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2000d594 	.word	0x2000d594

0800699c <cc110_init>:

int8_t cc110_init(void)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
    int8_t retval = CC110_FAIL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	71fb      	strb	r3, [r7, #7]
    // TODO: Init code

    return (retval);
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <cc110_test>:

void cc110_test(void)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	af00      	add	r7, sp, #0
    cc110_dumpRegisters();
 80069ba:	f000 f81f 	bl	80069fc <cc110_dumpRegisters>
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <cc110_readByte>:

/* Private function definitions ----------------------------------------------*/
uint8_t cc110_readByte(uint8_t addr)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	4603      	mov	r3, r0
 80069ca:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
    uint8_t tx_buf[2] = {
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	733b      	strb	r3, [r7, #12]
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	737b      	strb	r3, [r7, #13]
            CC110_BYTE_READ | addr,
            tmp };
    uint8_t rx_buf[2] = { 0 };
 80069de:	2300      	movs	r3, #0
 80069e0:	813b      	strh	r3, [r7, #8]

    cc110_spi_xfer(tx_buf, rx_buf, 2);
 80069e2:	f107 0108 	add.w	r1, r7, #8
 80069e6:	f107 030c 	add.w	r3, r7, #12
 80069ea:	2202      	movs	r2, #2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff ffbd 	bl	800696c <cc110_spi_xfer>

    return (rx_buf[1]);
 80069f2:	7a7b      	ldrb	r3, [r7, #9]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <cc110_dumpRegisters>:

void cc110_dumpRegisters(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af02      	add	r7, sp, #8
    cc110_getStatus();
 8006a02:	f000 fa7b 	bl	8006efc <cc110_getStatus>
    cc110_getConfig();
 8006a06:	f000 facf 	bl	8006fa8 <cc110_getConfig>

    // Dump status registers
    log_info("CC110_PARTNUM_DATA: %x", CC110_PARTNUM_DATA.data);
 8006a0a:	4ba3      	ldr	r3, [pc, #652]	; (8006c98 <cc110_dumpRegisters+0x29c>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	4ba2      	ldr	r3, [pc, #648]	; (8006c9c <cc110_dumpRegisters+0x2a0>)
 8006a12:	226f      	movs	r2, #111	; 0x6f
 8006a14:	49a2      	ldr	r1, [pc, #648]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a16:	2003      	movs	r0, #3
 8006a18:	f000 fde8 	bl	80075ec <log_event>
    log_info("CC110_VERSION_DATA: %x", CC110_VERSION_DATA.data);
 8006a1c:	4ba1      	ldr	r3, [pc, #644]	; (8006ca4 <cc110_dumpRegisters+0x2a8>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	4ba1      	ldr	r3, [pc, #644]	; (8006ca8 <cc110_dumpRegisters+0x2ac>)
 8006a24:	2270      	movs	r2, #112	; 0x70
 8006a26:	499e      	ldr	r1, [pc, #632]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a28:	2003      	movs	r0, #3
 8006a2a:	f000 fddf 	bl	80075ec <log_event>
    log_info("CC110_FREQEST_DATA: %x", CC110_FREQEST_DATA.data);
 8006a2e:	4b9f      	ldr	r3, [pc, #636]	; (8006cac <cc110_dumpRegisters+0x2b0>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4b9e      	ldr	r3, [pc, #632]	; (8006cb0 <cc110_dumpRegisters+0x2b4>)
 8006a36:	2271      	movs	r2, #113	; 0x71
 8006a38:	4999      	ldr	r1, [pc, #612]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a3a:	2003      	movs	r0, #3
 8006a3c:	f000 fdd6 	bl	80075ec <log_event>
    log_info("CC110_CRCOK_DATA: %x", CC110_CRCOK_DATA.data);
 8006a40:	4b9c      	ldr	r3, [pc, #624]	; (8006cb4 <cc110_dumpRegisters+0x2b8>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4b9c      	ldr	r3, [pc, #624]	; (8006cb8 <cc110_dumpRegisters+0x2bc>)
 8006a48:	2272      	movs	r2, #114	; 0x72
 8006a4a:	4995      	ldr	r1, [pc, #596]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a4c:	2003      	movs	r0, #3
 8006a4e:	f000 fdcd 	bl	80075ec <log_event>
    log_info("CC110_RSSI_DATA: %x", CC110_RSSI_DATA.data);
 8006a52:	4b9a      	ldr	r3, [pc, #616]	; (8006cbc <cc110_dumpRegisters+0x2c0>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	4b99      	ldr	r3, [pc, #612]	; (8006cc0 <cc110_dumpRegisters+0x2c4>)
 8006a5a:	2273      	movs	r2, #115	; 0x73
 8006a5c:	4990      	ldr	r1, [pc, #576]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a5e:	2003      	movs	r0, #3
 8006a60:	f000 fdc4 	bl	80075ec <log_event>
    log_info("CC110_MARCSTATE_DATA: %x", CC110_MARCSTATE_DATA.data);
 8006a64:	4b97      	ldr	r3, [pc, #604]	; (8006cc4 <cc110_dumpRegisters+0x2c8>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4b97      	ldr	r3, [pc, #604]	; (8006cc8 <cc110_dumpRegisters+0x2cc>)
 8006a6c:	2274      	movs	r2, #116	; 0x74
 8006a6e:	498c      	ldr	r1, [pc, #560]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a70:	2003      	movs	r0, #3
 8006a72:	f000 fdbb 	bl	80075ec <log_event>
    log_info("CC110_PKTSTATUS_DATA: %x", CC110_PKTSTATUS_DATA.data);
 8006a76:	4b95      	ldr	r3, [pc, #596]	; (8006ccc <cc110_dumpRegisters+0x2d0>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4b94      	ldr	r3, [pc, #592]	; (8006cd0 <cc110_dumpRegisters+0x2d4>)
 8006a7e:	2275      	movs	r2, #117	; 0x75
 8006a80:	4987      	ldr	r1, [pc, #540]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a82:	2003      	movs	r0, #3
 8006a84:	f000 fdb2 	bl	80075ec <log_event>
    log_info("CC110_TXBYTES_DATA: %x", CC110_TXBYTES_DATA.data);
 8006a88:	4b92      	ldr	r3, [pc, #584]	; (8006cd4 <cc110_dumpRegisters+0x2d8>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	4b92      	ldr	r3, [pc, #584]	; (8006cd8 <cc110_dumpRegisters+0x2dc>)
 8006a90:	2276      	movs	r2, #118	; 0x76
 8006a92:	4983      	ldr	r1, [pc, #524]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006a94:	2003      	movs	r0, #3
 8006a96:	f000 fda9 	bl	80075ec <log_event>
    log_info("CC110_RXBYTES_DATA: %x", CC110_RXBYTES_DATA.data);
 8006a9a:	4b90      	ldr	r3, [pc, #576]	; (8006cdc <cc110_dumpRegisters+0x2e0>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4b8f      	ldr	r3, [pc, #572]	; (8006ce0 <cc110_dumpRegisters+0x2e4>)
 8006aa2:	2277      	movs	r2, #119	; 0x77
 8006aa4:	497e      	ldr	r1, [pc, #504]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006aa6:	2003      	movs	r0, #3
 8006aa8:	f000 fda0 	bl	80075ec <log_event>

    // Dump config registers
    log_info("CC110_IOCFG2_DATA: %x", CC110_IOCFG2_DATA.data);
 8006aac:	4b8d      	ldr	r3, [pc, #564]	; (8006ce4 <cc110_dumpRegisters+0x2e8>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4b8d      	ldr	r3, [pc, #564]	; (8006ce8 <cc110_dumpRegisters+0x2ec>)
 8006ab4:	227a      	movs	r2, #122	; 0x7a
 8006ab6:	497a      	ldr	r1, [pc, #488]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006ab8:	2003      	movs	r0, #3
 8006aba:	f000 fd97 	bl	80075ec <log_event>
    log_info("CC110_IOCFG1_DATA: %x", CC110_IOCFG1_DATA.data);
 8006abe:	4b8b      	ldr	r3, [pc, #556]	; (8006cec <cc110_dumpRegisters+0x2f0>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4b8a      	ldr	r3, [pc, #552]	; (8006cf0 <cc110_dumpRegisters+0x2f4>)
 8006ac6:	227b      	movs	r2, #123	; 0x7b
 8006ac8:	4975      	ldr	r1, [pc, #468]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006aca:	2003      	movs	r0, #3
 8006acc:	f000 fd8e 	bl	80075ec <log_event>
    log_info("CC110_IOCFG0_DATA: %x", CC110_IOCFG0_DATA.data);
 8006ad0:	4b88      	ldr	r3, [pc, #544]	; (8006cf4 <cc110_dumpRegisters+0x2f8>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4b88      	ldr	r3, [pc, #544]	; (8006cf8 <cc110_dumpRegisters+0x2fc>)
 8006ad8:	227c      	movs	r2, #124	; 0x7c
 8006ada:	4971      	ldr	r1, [pc, #452]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006adc:	2003      	movs	r0, #3
 8006ade:	f000 fd85 	bl	80075ec <log_event>
    log_info("CC110_FIFOTHR_DATA: %x", CC110_FIFOTHR_DATA.data);
 8006ae2:	4b86      	ldr	r3, [pc, #536]	; (8006cfc <cc110_dumpRegisters+0x300>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	4b85      	ldr	r3, [pc, #532]	; (8006d00 <cc110_dumpRegisters+0x304>)
 8006aea:	227d      	movs	r2, #125	; 0x7d
 8006aec:	496c      	ldr	r1, [pc, #432]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006aee:	2003      	movs	r0, #3
 8006af0:	f000 fd7c 	bl	80075ec <log_event>
    log_info("CC110_SYNC1_DATA: %x", CC110_SYNC1_DATA.data);
 8006af4:	4b83      	ldr	r3, [pc, #524]	; (8006d04 <cc110_dumpRegisters+0x308>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4b83      	ldr	r3, [pc, #524]	; (8006d08 <cc110_dumpRegisters+0x30c>)
 8006afc:	227e      	movs	r2, #126	; 0x7e
 8006afe:	4968      	ldr	r1, [pc, #416]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b00:	2003      	movs	r0, #3
 8006b02:	f000 fd73 	bl	80075ec <log_event>
    log_info("CC110_SYNC2_DATA: %x", CC110_SYNC2_DATA.data);
 8006b06:	4b81      	ldr	r3, [pc, #516]	; (8006d0c <cc110_dumpRegisters+0x310>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4b80      	ldr	r3, [pc, #512]	; (8006d10 <cc110_dumpRegisters+0x314>)
 8006b0e:	227f      	movs	r2, #127	; 0x7f
 8006b10:	4963      	ldr	r1, [pc, #396]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b12:	2003      	movs	r0, #3
 8006b14:	f000 fd6a 	bl	80075ec <log_event>
    log_info("CC110_PKTLEN_DATA: %x", CC110_PKTLEN_DATA.data);
 8006b18:	4b7e      	ldr	r3, [pc, #504]	; (8006d14 <cc110_dumpRegisters+0x318>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	4b7e      	ldr	r3, [pc, #504]	; (8006d18 <cc110_dumpRegisters+0x31c>)
 8006b20:	2280      	movs	r2, #128	; 0x80
 8006b22:	495f      	ldr	r1, [pc, #380]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b24:	2003      	movs	r0, #3
 8006b26:	f000 fd61 	bl	80075ec <log_event>
    log_info("CC110_PKTCTRL1_DATA: %x", CC110_PKTCTRL1_DATA.data);
 8006b2a:	4b7c      	ldr	r3, [pc, #496]	; (8006d1c <cc110_dumpRegisters+0x320>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	4b7b      	ldr	r3, [pc, #492]	; (8006d20 <cc110_dumpRegisters+0x324>)
 8006b32:	2281      	movs	r2, #129	; 0x81
 8006b34:	495a      	ldr	r1, [pc, #360]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b36:	2003      	movs	r0, #3
 8006b38:	f000 fd58 	bl	80075ec <log_event>
    log_info("CC110_PKTCTRL0_DATA: %x", CC110_PKTCTRL0_DATA.data);
 8006b3c:	4b79      	ldr	r3, [pc, #484]	; (8006d24 <cc110_dumpRegisters+0x328>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	4b79      	ldr	r3, [pc, #484]	; (8006d28 <cc110_dumpRegisters+0x32c>)
 8006b44:	2282      	movs	r2, #130	; 0x82
 8006b46:	4956      	ldr	r1, [pc, #344]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b48:	2003      	movs	r0, #3
 8006b4a:	f000 fd4f 	bl	80075ec <log_event>
    log_info("CC110_ADDR_DATA: %x", CC110_ADDR_DATA.data);
 8006b4e:	4b77      	ldr	r3, [pc, #476]	; (8006d2c <cc110_dumpRegisters+0x330>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	4b76      	ldr	r3, [pc, #472]	; (8006d30 <cc110_dumpRegisters+0x334>)
 8006b56:	2283      	movs	r2, #131	; 0x83
 8006b58:	4951      	ldr	r1, [pc, #324]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b5a:	2003      	movs	r0, #3
 8006b5c:	f000 fd46 	bl	80075ec <log_event>
    log_info("CC110_CHANNR_DATA: %x", CC110_CHANNR_DATA.data);
 8006b60:	4b74      	ldr	r3, [pc, #464]	; (8006d34 <cc110_dumpRegisters+0x338>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	4b74      	ldr	r3, [pc, #464]	; (8006d38 <cc110_dumpRegisters+0x33c>)
 8006b68:	2284      	movs	r2, #132	; 0x84
 8006b6a:	494d      	ldr	r1, [pc, #308]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b6c:	2003      	movs	r0, #3
 8006b6e:	f000 fd3d 	bl	80075ec <log_event>
    log_info("CC110_FSCTRL1_DATA: %x", CC110_FSCTRL1_DATA.data);
 8006b72:	4b72      	ldr	r3, [pc, #456]	; (8006d3c <cc110_dumpRegisters+0x340>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4b71      	ldr	r3, [pc, #452]	; (8006d40 <cc110_dumpRegisters+0x344>)
 8006b7a:	2285      	movs	r2, #133	; 0x85
 8006b7c:	4948      	ldr	r1, [pc, #288]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b7e:	2003      	movs	r0, #3
 8006b80:	f000 fd34 	bl	80075ec <log_event>
    log_info("CC110_FSCTRL0_DATA: %x", CC110_FSCTRL0_DATA.data);
 8006b84:	4b6f      	ldr	r3, [pc, #444]	; (8006d44 <cc110_dumpRegisters+0x348>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	4b6f      	ldr	r3, [pc, #444]	; (8006d48 <cc110_dumpRegisters+0x34c>)
 8006b8c:	2286      	movs	r2, #134	; 0x86
 8006b8e:	4944      	ldr	r1, [pc, #272]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006b90:	2003      	movs	r0, #3
 8006b92:	f000 fd2b 	bl	80075ec <log_event>
    log_info("CC110_FREQ2_DATA: %x", CC110_FREQ2_DATA.data);
 8006b96:	4b6d      	ldr	r3, [pc, #436]	; (8006d4c <cc110_dumpRegisters+0x350>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	4b6c      	ldr	r3, [pc, #432]	; (8006d50 <cc110_dumpRegisters+0x354>)
 8006b9e:	2287      	movs	r2, #135	; 0x87
 8006ba0:	493f      	ldr	r1, [pc, #252]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006ba2:	2003      	movs	r0, #3
 8006ba4:	f000 fd22 	bl	80075ec <log_event>
    log_info("CC110_FREQ1_DATA: %x", CC110_FREQ1_DATA.data);
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <cc110_dumpRegisters+0x358>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	4b6a      	ldr	r3, [pc, #424]	; (8006d58 <cc110_dumpRegisters+0x35c>)
 8006bb0:	2288      	movs	r2, #136	; 0x88
 8006bb2:	493b      	ldr	r1, [pc, #236]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006bb4:	2003      	movs	r0, #3
 8006bb6:	f000 fd19 	bl	80075ec <log_event>
    log_info("CC110_FREQ0_DATA: %x", CC110_FREQ0_DATA.data);
 8006bba:	4b68      	ldr	r3, [pc, #416]	; (8006d5c <cc110_dumpRegisters+0x360>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4b67      	ldr	r3, [pc, #412]	; (8006d60 <cc110_dumpRegisters+0x364>)
 8006bc2:	2289      	movs	r2, #137	; 0x89
 8006bc4:	4936      	ldr	r1, [pc, #216]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006bc6:	2003      	movs	r0, #3
 8006bc8:	f000 fd10 	bl	80075ec <log_event>
    log_info("CC110_MDMCFG4_DATA: %x", CC110_MDMCFG4_DATA.data);
 8006bcc:	4b65      	ldr	r3, [pc, #404]	; (8006d64 <cc110_dumpRegisters+0x368>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4b65      	ldr	r3, [pc, #404]	; (8006d68 <cc110_dumpRegisters+0x36c>)
 8006bd4:	228a      	movs	r2, #138	; 0x8a
 8006bd6:	4932      	ldr	r1, [pc, #200]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006bd8:	2003      	movs	r0, #3
 8006bda:	f000 fd07 	bl	80075ec <log_event>
    log_info("CC110_MDMCFG3_DATA: %x", CC110_MDMCFG3_DATA.data);
 8006bde:	4b63      	ldr	r3, [pc, #396]	; (8006d6c <cc110_dumpRegisters+0x370>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	4b62      	ldr	r3, [pc, #392]	; (8006d70 <cc110_dumpRegisters+0x374>)
 8006be6:	228b      	movs	r2, #139	; 0x8b
 8006be8:	492d      	ldr	r1, [pc, #180]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006bea:	2003      	movs	r0, #3
 8006bec:	f000 fcfe 	bl	80075ec <log_event>
    log_info("CC110_MDMCFG2_DATA: %x", CC110_MDMCFG2_DATA.data);
 8006bf0:	4b60      	ldr	r3, [pc, #384]	; (8006d74 <cc110_dumpRegisters+0x378>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4b60      	ldr	r3, [pc, #384]	; (8006d78 <cc110_dumpRegisters+0x37c>)
 8006bf8:	228c      	movs	r2, #140	; 0x8c
 8006bfa:	4929      	ldr	r1, [pc, #164]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006bfc:	2003      	movs	r0, #3
 8006bfe:	f000 fcf5 	bl	80075ec <log_event>
    log_info("CC110_MDMCFG1_DATA: %x", CC110_MDMCFG1_DATA.data);
 8006c02:	4b5e      	ldr	r3, [pc, #376]	; (8006d7c <cc110_dumpRegisters+0x380>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4b5d      	ldr	r3, [pc, #372]	; (8006d80 <cc110_dumpRegisters+0x384>)
 8006c0a:	228d      	movs	r2, #141	; 0x8d
 8006c0c:	4924      	ldr	r1, [pc, #144]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c0e:	2003      	movs	r0, #3
 8006c10:	f000 fcec 	bl	80075ec <log_event>
    log_info("CC110_MDMCFG0_DATA: %x", CC110_MDMCFG0_DATA.data);
 8006c14:	4b5b      	ldr	r3, [pc, #364]	; (8006d84 <cc110_dumpRegisters+0x388>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	4b5b      	ldr	r3, [pc, #364]	; (8006d88 <cc110_dumpRegisters+0x38c>)
 8006c1c:	228e      	movs	r2, #142	; 0x8e
 8006c1e:	4920      	ldr	r1, [pc, #128]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c20:	2003      	movs	r0, #3
 8006c22:	f000 fce3 	bl	80075ec <log_event>
    log_info("CC110_DEVIATN_DATA: %x", CC110_DEVIATN_DATA.data);
 8006c26:	4b59      	ldr	r3, [pc, #356]	; (8006d8c <cc110_dumpRegisters+0x390>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	4b58      	ldr	r3, [pc, #352]	; (8006d90 <cc110_dumpRegisters+0x394>)
 8006c2e:	228f      	movs	r2, #143	; 0x8f
 8006c30:	491b      	ldr	r1, [pc, #108]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c32:	2003      	movs	r0, #3
 8006c34:	f000 fcda 	bl	80075ec <log_event>
    log_info("CC110_MCSM2_DATA: %x", CC110_MCSM2_DATA.data);
 8006c38:	4b56      	ldr	r3, [pc, #344]	; (8006d94 <cc110_dumpRegisters+0x398>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4b56      	ldr	r3, [pc, #344]	; (8006d98 <cc110_dumpRegisters+0x39c>)
 8006c40:	2290      	movs	r2, #144	; 0x90
 8006c42:	4917      	ldr	r1, [pc, #92]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c44:	2003      	movs	r0, #3
 8006c46:	f000 fcd1 	bl	80075ec <log_event>
    log_info("CC110_MCSM1_DATA: %x", CC110_MCSM1_DATA.data);
 8006c4a:	4b54      	ldr	r3, [pc, #336]	; (8006d9c <cc110_dumpRegisters+0x3a0>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <cc110_dumpRegisters+0x3a4>)
 8006c52:	2291      	movs	r2, #145	; 0x91
 8006c54:	4912      	ldr	r1, [pc, #72]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c56:	2003      	movs	r0, #3
 8006c58:	f000 fcc8 	bl	80075ec <log_event>
    log_info("CC110_MCSM0_DATA: %x", CC110_MCSM0_DATA.data);
 8006c5c:	4b51      	ldr	r3, [pc, #324]	; (8006da4 <cc110_dumpRegisters+0x3a8>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	4b51      	ldr	r3, [pc, #324]	; (8006da8 <cc110_dumpRegisters+0x3ac>)
 8006c64:	2292      	movs	r2, #146	; 0x92
 8006c66:	490e      	ldr	r1, [pc, #56]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c68:	2003      	movs	r0, #3
 8006c6a:	f000 fcbf 	bl	80075ec <log_event>
    log_info("CC110_FOCCFG_DATA: %x", CC110_FOCCFG_DATA.data);
 8006c6e:	4b4f      	ldr	r3, [pc, #316]	; (8006dac <cc110_dumpRegisters+0x3b0>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	4b4e      	ldr	r3, [pc, #312]	; (8006db0 <cc110_dumpRegisters+0x3b4>)
 8006c76:	2293      	movs	r2, #147	; 0x93
 8006c78:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c7a:	2003      	movs	r0, #3
 8006c7c:	f000 fcb6 	bl	80075ec <log_event>
    log_info("CC110_BSCFG_DATA: %x", CC110_BSCFG_DATA.data);
 8006c80:	4b4c      	ldr	r3, [pc, #304]	; (8006db4 <cc110_dumpRegisters+0x3b8>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4b4c      	ldr	r3, [pc, #304]	; (8006db8 <cc110_dumpRegisters+0x3bc>)
 8006c88:	2294      	movs	r2, #148	; 0x94
 8006c8a:	4905      	ldr	r1, [pc, #20]	; (8006ca0 <cc110_dumpRegisters+0x2a4>)
 8006c8c:	2003      	movs	r0, #3
 8006c8e:	f000 fcad 	bl	80075ec <log_event>
    log_info("CC110_AGCCTRL2_DATA: %x", CC110_AGCCTRL2_DATA.data);
 8006c92:	4b4a      	ldr	r3, [pc, #296]	; (8006dbc <cc110_dumpRegisters+0x3c0>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	e093      	b.n	8006dc0 <cc110_dumpRegisters+0x3c4>
 8006c98:	2000d4f8 	.word	0x2000d4f8
 8006c9c:	0800bd04 	.word	0x0800bd04
 8006ca0:	0800bd1c 	.word	0x0800bd1c
 8006ca4:	2000d50c 	.word	0x2000d50c
 8006ca8:	0800bd2c 	.word	0x0800bd2c
 8006cac:	2000d4ac 	.word	0x2000d4ac
 8006cb0:	0800bd44 	.word	0x0800bd44
 8006cb4:	2000d4d4 	.word	0x2000d4d4
 8006cb8:	0800bd5c 	.word	0x0800bd5c
 8006cbc:	2000d4a0 	.word	0x2000d4a0
 8006cc0:	0800bd74 	.word	0x0800bd74
 8006cc4:	2000d514 	.word	0x2000d514
 8006cc8:	0800bd88 	.word	0x0800bd88
 8006ccc:	2000d49c 	.word	0x2000d49c
 8006cd0:	0800bda4 	.word	0x0800bda4
 8006cd4:	2000d4f0 	.word	0x2000d4f0
 8006cd8:	0800bdc0 	.word	0x0800bdc0
 8006cdc:	2000d490 	.word	0x2000d490
 8006ce0:	0800bdd8 	.word	0x0800bdd8
 8006ce4:	2000d478 	.word	0x2000d478
 8006ce8:	0800bdf0 	.word	0x0800bdf0
 8006cec:	2000d480 	.word	0x2000d480
 8006cf0:	0800be08 	.word	0x0800be08
 8006cf4:	2000d484 	.word	0x2000d484
 8006cf8:	0800be20 	.word	0x0800be20
 8006cfc:	2000d4e0 	.word	0x2000d4e0
 8006d00:	0800be38 	.word	0x0800be38
 8006d04:	2000d4b0 	.word	0x2000d4b0
 8006d08:	0800be50 	.word	0x0800be50
 8006d0c:	2000d504 	.word	0x2000d504
 8006d10:	0800be68 	.word	0x0800be68
 8006d14:	2000d4b8 	.word	0x2000d4b8
 8006d18:	0800be80 	.word	0x0800be80
 8006d1c:	2000d4fc 	.word	0x2000d4fc
 8006d20:	0800be98 	.word	0x0800be98
 8006d24:	2000d508 	.word	0x2000d508
 8006d28:	0800beb0 	.word	0x0800beb0
 8006d2c:	2000d4c4 	.word	0x2000d4c4
 8006d30:	0800bec8 	.word	0x0800bec8
 8006d34:	2000d4c8 	.word	0x2000d4c8
 8006d38:	0800bedc 	.word	0x0800bedc
 8006d3c:	2000d4c0 	.word	0x2000d4c0
 8006d40:	0800bef4 	.word	0x0800bef4
 8006d44:	2000d4cc 	.word	0x2000d4cc
 8006d48:	0800bf0c 	.word	0x0800bf0c
 8006d4c:	2000d51c 	.word	0x2000d51c
 8006d50:	0800bf24 	.word	0x0800bf24
 8006d54:	2000d4d8 	.word	0x2000d4d8
 8006d58:	0800bf3c 	.word	0x0800bf3c
 8006d5c:	2000d4b4 	.word	0x2000d4b4
 8006d60:	0800bf54 	.word	0x0800bf54
 8006d64:	2000d4a4 	.word	0x2000d4a4
 8006d68:	0800bf6c 	.word	0x0800bf6c
 8006d6c:	2000d488 	.word	0x2000d488
 8006d70:	0800bf84 	.word	0x0800bf84
 8006d74:	2000d4a8 	.word	0x2000d4a8
 8006d78:	0800bf9c 	.word	0x0800bf9c
 8006d7c:	2000d4e8 	.word	0x2000d4e8
 8006d80:	0800bfb4 	.word	0x0800bfb4
 8006d84:	2000d4dc 	.word	0x2000d4dc
 8006d88:	0800bfcc 	.word	0x0800bfcc
 8006d8c:	2000d474 	.word	0x2000d474
 8006d90:	0800bfe4 	.word	0x0800bfe4
 8006d94:	2000d4f4 	.word	0x2000d4f4
 8006d98:	0800bffc 	.word	0x0800bffc
 8006d9c:	2000d4e4 	.word	0x2000d4e4
 8006da0:	0800c014 	.word	0x0800c014
 8006da4:	2000d510 	.word	0x2000d510
 8006da8:	0800c02c 	.word	0x0800c02c
 8006dac:	2000d494 	.word	0x2000d494
 8006db0:	0800c044 	.word	0x0800c044
 8006db4:	2000d4ec 	.word	0x2000d4ec
 8006db8:	0800c05c 	.word	0x0800c05c
 8006dbc:	2000d500 	.word	0x2000d500
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <cc110_dumpRegisters+0x4a0>)
 8006dc4:	2295      	movs	r2, #149	; 0x95
 8006dc6:	4936      	ldr	r1, [pc, #216]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006dc8:	2003      	movs	r0, #3
 8006dca:	f000 fc0f 	bl	80075ec <log_event>
    log_info("CC110_AGCCTRL1_DATA: %x", CC110_AGCCTRL1_DATA.data);
 8006dce:	4b35      	ldr	r3, [pc, #212]	; (8006ea4 <cc110_dumpRegisters+0x4a8>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	4b34      	ldr	r3, [pc, #208]	; (8006ea8 <cc110_dumpRegisters+0x4ac>)
 8006dd6:	2296      	movs	r2, #150	; 0x96
 8006dd8:	4931      	ldr	r1, [pc, #196]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006dda:	2003      	movs	r0, #3
 8006ddc:	f000 fc06 	bl	80075ec <log_event>
    log_info("CC110_AGCCTRL0_DATA: %x", CC110_AGCCTRL0_DATA.data);
 8006de0:	4b32      	ldr	r3, [pc, #200]	; (8006eac <cc110_dumpRegisters+0x4b0>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <cc110_dumpRegisters+0x4b4>)
 8006de8:	2297      	movs	r2, #151	; 0x97
 8006dea:	492d      	ldr	r1, [pc, #180]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006dec:	2003      	movs	r0, #3
 8006dee:	f000 fbfd 	bl	80075ec <log_event>
    log_info("CC110_FREND1_DATA: %x", CC110_FREND1_DATA.data);
 8006df2:	4b30      	ldr	r3, [pc, #192]	; (8006eb4 <cc110_dumpRegisters+0x4b8>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <cc110_dumpRegisters+0x4bc>)
 8006dfa:	2298      	movs	r2, #152	; 0x98
 8006dfc:	4928      	ldr	r1, [pc, #160]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006dfe:	2003      	movs	r0, #3
 8006e00:	f000 fbf4 	bl	80075ec <log_event>
    log_info("CC110_FREND0_DATA: %x", CC110_FREND0_DATA.data);
 8006e04:	4b2d      	ldr	r3, [pc, #180]	; (8006ebc <cc110_dumpRegisters+0x4c0>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	4b2d      	ldr	r3, [pc, #180]	; (8006ec0 <cc110_dumpRegisters+0x4c4>)
 8006e0c:	2299      	movs	r2, #153	; 0x99
 8006e0e:	4924      	ldr	r1, [pc, #144]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e10:	2003      	movs	r0, #3
 8006e12:	f000 fbeb 	bl	80075ec <log_event>
    log_info("CC110_FSCAL3_DATA: %x", CC110_FSCAL3_DATA.data);
 8006e16:	4b2b      	ldr	r3, [pc, #172]	; (8006ec4 <cc110_dumpRegisters+0x4c8>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ec8 <cc110_dumpRegisters+0x4cc>)
 8006e1e:	229a      	movs	r2, #154	; 0x9a
 8006e20:	491f      	ldr	r1, [pc, #124]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e22:	2003      	movs	r0, #3
 8006e24:	f000 fbe2 	bl	80075ec <log_event>
    log_info("CC110_FSCAL2_DATA: %x", CC110_FSCAL2_DATA.data);
 8006e28:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <cc110_dumpRegisters+0x4d0>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <cc110_dumpRegisters+0x4d4>)
 8006e30:	229b      	movs	r2, #155	; 0x9b
 8006e32:	491b      	ldr	r1, [pc, #108]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e34:	2003      	movs	r0, #3
 8006e36:	f000 fbd9 	bl	80075ec <log_event>
    log_info("CC110_FSCAL1_DATA: %x", CC110_FSCAL1_DATA.data);
 8006e3a:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <cc110_dumpRegisters+0x4d8>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4b25      	ldr	r3, [pc, #148]	; (8006ed8 <cc110_dumpRegisters+0x4dc>)
 8006e42:	229c      	movs	r2, #156	; 0x9c
 8006e44:	4916      	ldr	r1, [pc, #88]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e46:	2003      	movs	r0, #3
 8006e48:	f000 fbd0 	bl	80075ec <log_event>
    log_info("CC110_FSCAL0_DATA: %x", CC110_FSCAL0_DATA.data);
 8006e4c:	4b23      	ldr	r3, [pc, #140]	; (8006edc <cc110_dumpRegisters+0x4e0>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <cc110_dumpRegisters+0x4e4>)
 8006e54:	229d      	movs	r2, #157	; 0x9d
 8006e56:	4912      	ldr	r1, [pc, #72]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e58:	2003      	movs	r0, #3
 8006e5a:	f000 fbc7 	bl	80075ec <log_event>
    log_info("CC110_TEST2_DATA: %x", CC110_TEST2_DATA.data);
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <cc110_dumpRegisters+0x4e8>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <cc110_dumpRegisters+0x4ec>)
 8006e66:	229e      	movs	r2, #158	; 0x9e
 8006e68:	490d      	ldr	r1, [pc, #52]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e6a:	2003      	movs	r0, #3
 8006e6c:	f000 fbbe 	bl	80075ec <log_event>
    log_info("CC110_TEST1_DATA: %x", CC110_TEST1_DATA.data);
 8006e70:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <cc110_dumpRegisters+0x4f0>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <cc110_dumpRegisters+0x4f4>)
 8006e78:	229f      	movs	r2, #159	; 0x9f
 8006e7a:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e7c:	2003      	movs	r0, #3
 8006e7e:	f000 fbb5 	bl	80075ec <log_event>
    log_info("CC110_TEST0_DATA: %x", CC110_TEST0_DATA.data);
 8006e82:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <cc110_dumpRegisters+0x4f8>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <cc110_dumpRegisters+0x4fc>)
 8006e8a:	22a0      	movs	r2, #160	; 0xa0
 8006e8c:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <cc110_dumpRegisters+0x4a4>)
 8006e8e:	2003      	movs	r0, #3
 8006e90:	f000 fbac 	bl	80075ec <log_event>
}
 8006e94:	bf00      	nop
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	0800c074 	.word	0x0800c074
 8006ea0:	0800bd1c 	.word	0x0800bd1c
 8006ea4:	2000d470 	.word	0x2000d470
 8006ea8:	0800c08c 	.word	0x0800c08c
 8006eac:	2000d48c 	.word	0x2000d48c
 8006eb0:	0800c0a4 	.word	0x0800c0a4
 8006eb4:	2000d4bc 	.word	0x2000d4bc
 8006eb8:	0800c0bc 	.word	0x0800c0bc
 8006ebc:	2000d524 	.word	0x2000d524
 8006ec0:	0800c0d4 	.word	0x0800c0d4
 8006ec4:	2000d528 	.word	0x2000d528
 8006ec8:	0800c0ec 	.word	0x0800c0ec
 8006ecc:	2000d4d0 	.word	0x2000d4d0
 8006ed0:	0800c104 	.word	0x0800c104
 8006ed4:	2000d520 	.word	0x2000d520
 8006ed8:	0800c11c 	.word	0x0800c11c
 8006edc:	2000d46c 	.word	0x2000d46c
 8006ee0:	0800c134 	.word	0x0800c134
 8006ee4:	2000d518 	.word	0x2000d518
 8006ee8:	0800c14c 	.word	0x0800c14c
 8006eec:	2000d498 	.word	0x2000d498
 8006ef0:	0800c164 	.word	0x0800c164
 8006ef4:	2000d47c 	.word	0x2000d47c
 8006ef8:	0800c17c 	.word	0x0800c17c

08006efc <cc110_getStatus>:

void cc110_getStatus(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
    CC110_PARTNUM_DATA.data = cc110_readByte(CC110_PARTNUM_ADDR);
 8006f00:	2030      	movs	r0, #48	; 0x30
 8006f02:	f7ff fd5e 	bl	80069c2 <cc110_readByte>
 8006f06:	4603      	mov	r3, r0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	; (8006f84 <cc110_getStatus+0x88>)
 8006f0c:	701a      	strb	r2, [r3, #0]
    CC110_VERSION_DATA.data = cc110_readByte(CC110_VERSION_ADDR);
 8006f0e:	2031      	movs	r0, #49	; 0x31
 8006f10:	f7ff fd57 	bl	80069c2 <cc110_readByte>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <cc110_getStatus+0x8c>)
 8006f1a:	701a      	strb	r2, [r3, #0]
    CC110_FREQEST_DATA.data = cc110_readByte(CC110_FREQEST_ADDR);
 8006f1c:	2032      	movs	r0, #50	; 0x32
 8006f1e:	f7ff fd50 	bl	80069c2 <cc110_readByte>
 8006f22:	4603      	mov	r3, r0
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <cc110_getStatus+0x90>)
 8006f28:	701a      	strb	r2, [r3, #0]
    CC110_CRCOK_DATA.data = cc110_readByte(CC110_CRCOK_ADDR);
 8006f2a:	2033      	movs	r0, #51	; 0x33
 8006f2c:	f7ff fd49 	bl	80069c2 <cc110_readByte>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <cc110_getStatus+0x94>)
 8006f36:	701a      	strb	r2, [r3, #0]
    CC110_RSSI_DATA.data = cc110_readByte(CC110_RSSI_ADDR);
 8006f38:	2034      	movs	r0, #52	; 0x34
 8006f3a:	f7ff fd42 	bl	80069c2 <cc110_readByte>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <cc110_getStatus+0x98>)
 8006f44:	701a      	strb	r2, [r3, #0]
    CC110_MARCSTATE_DATA.data = cc110_readByte(CC110_MARCSTATE_ADDR);
 8006f46:	2035      	movs	r0, #53	; 0x35
 8006f48:	f7ff fd3b 	bl	80069c2 <cc110_readByte>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <cc110_getStatus+0x9c>)
 8006f52:	701a      	strb	r2, [r3, #0]
    CC110_PKTSTATUS_DATA.data = cc110_readByte(CC110_PKTSTATUS_ADDR);
 8006f54:	2038      	movs	r0, #56	; 0x38
 8006f56:	f7ff fd34 	bl	80069c2 <cc110_readByte>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <cc110_getStatus+0xa0>)
 8006f60:	701a      	strb	r2, [r3, #0]
    CC110_TXBYTES_DATA.data = cc110_readByte(CC110_TXBYTES_ADDR);
 8006f62:	203a      	movs	r0, #58	; 0x3a
 8006f64:	f7ff fd2d 	bl	80069c2 <cc110_readByte>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <cc110_getStatus+0xa4>)
 8006f6e:	701a      	strb	r2, [r3, #0]
    CC110_RXBYTES_DATA.data = cc110_readByte(CC110_RXBYTES_ADDR);
 8006f70:	203b      	movs	r0, #59	; 0x3b
 8006f72:	f7ff fd26 	bl	80069c2 <cc110_readByte>
 8006f76:	4603      	mov	r3, r0
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <cc110_getStatus+0xa8>)
 8006f7c:	701a      	strb	r2, [r3, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	2000d4f8 	.word	0x2000d4f8
 8006f88:	2000d50c 	.word	0x2000d50c
 8006f8c:	2000d4ac 	.word	0x2000d4ac
 8006f90:	2000d4d4 	.word	0x2000d4d4
 8006f94:	2000d4a0 	.word	0x2000d4a0
 8006f98:	2000d514 	.word	0x2000d514
 8006f9c:	2000d49c 	.word	0x2000d49c
 8006fa0:	2000d4f0 	.word	0x2000d4f0
 8006fa4:	2000d490 	.word	0x2000d490

08006fa8 <cc110_getConfig>:

void cc110_getConfig(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
    CC110_IOCFG2_DATA.data = cc110_readByte(CC110_IOCFG2_ADDR);
 8006fac:	2000      	movs	r0, #0
 8006fae:	f7ff fd08 	bl	80069c2 <cc110_readByte>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4b87      	ldr	r3, [pc, #540]	; (80071d4 <cc110_getConfig+0x22c>)
 8006fb8:	701a      	strb	r2, [r3, #0]
    CC110_IOCFG1_DATA.data = cc110_readByte(CC110_IOCFG1_ADDR);
 8006fba:	2001      	movs	r0, #1
 8006fbc:	f7ff fd01 	bl	80069c2 <cc110_readByte>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4b84      	ldr	r3, [pc, #528]	; (80071d8 <cc110_getConfig+0x230>)
 8006fc6:	701a      	strb	r2, [r3, #0]
    CC110_IOCFG0_DATA.data = cc110_readByte(CC110_IOCFG0_ADDR);
 8006fc8:	2002      	movs	r0, #2
 8006fca:	f7ff fcfa 	bl	80069c2 <cc110_readByte>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4b82      	ldr	r3, [pc, #520]	; (80071dc <cc110_getConfig+0x234>)
 8006fd4:	701a      	strb	r2, [r3, #0]
    CC110_FIFOTHR_DATA.data = cc110_readByte(CC110_FIFOTHR_ADDR);
 8006fd6:	2003      	movs	r0, #3
 8006fd8:	f7ff fcf3 	bl	80069c2 <cc110_readByte>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4b7f      	ldr	r3, [pc, #508]	; (80071e0 <cc110_getConfig+0x238>)
 8006fe2:	701a      	strb	r2, [r3, #0]
    CC110_SYNC1_DATA.data = cc110_readByte(CC110_SYNC1_ADDR);
 8006fe4:	2004      	movs	r0, #4
 8006fe6:	f7ff fcec 	bl	80069c2 <cc110_readByte>
 8006fea:	4603      	mov	r3, r0
 8006fec:	461a      	mov	r2, r3
 8006fee:	4b7d      	ldr	r3, [pc, #500]	; (80071e4 <cc110_getConfig+0x23c>)
 8006ff0:	701a      	strb	r2, [r3, #0]
    CC110_SYNC2_DATA.data = cc110_readByte(CC110_SYNC2_ADDR);
 8006ff2:	2005      	movs	r0, #5
 8006ff4:	f7ff fce5 	bl	80069c2 <cc110_readByte>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4b7a      	ldr	r3, [pc, #488]	; (80071e8 <cc110_getConfig+0x240>)
 8006ffe:	701a      	strb	r2, [r3, #0]
    CC110_PKTLEN_DATA.data = cc110_readByte(CC110_PKTLEN_ADDR);
 8007000:	2006      	movs	r0, #6
 8007002:	f7ff fcde 	bl	80069c2 <cc110_readByte>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
 800700a:	4b78      	ldr	r3, [pc, #480]	; (80071ec <cc110_getConfig+0x244>)
 800700c:	701a      	strb	r2, [r3, #0]
    CC110_PKTCTRL1_DATA.data = cc110_readByte(CC110_PKTCTRL1_ADDR);
 800700e:	2007      	movs	r0, #7
 8007010:	f7ff fcd7 	bl	80069c2 <cc110_readByte>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	4b75      	ldr	r3, [pc, #468]	; (80071f0 <cc110_getConfig+0x248>)
 800701a:	701a      	strb	r2, [r3, #0]
    CC110_PKTCTRL0_DATA.data = cc110_readByte(CC110_PKTCTRL0_ADDR);
 800701c:	2008      	movs	r0, #8
 800701e:	f7ff fcd0 	bl	80069c2 <cc110_readByte>
 8007022:	4603      	mov	r3, r0
 8007024:	461a      	mov	r2, r3
 8007026:	4b73      	ldr	r3, [pc, #460]	; (80071f4 <cc110_getConfig+0x24c>)
 8007028:	701a      	strb	r2, [r3, #0]
    CC110_ADDR_DATA.data = cc110_readByte(CC110_ADDR_ADDR);
 800702a:	2009      	movs	r0, #9
 800702c:	f7ff fcc9 	bl	80069c2 <cc110_readByte>
 8007030:	4603      	mov	r3, r0
 8007032:	461a      	mov	r2, r3
 8007034:	4b70      	ldr	r3, [pc, #448]	; (80071f8 <cc110_getConfig+0x250>)
 8007036:	701a      	strb	r2, [r3, #0]
    CC110_CHANNR_DATA.data = cc110_readByte(CC110_CHANNR_ADDR);
 8007038:	20da      	movs	r0, #218	; 0xda
 800703a:	f7ff fcc2 	bl	80069c2 <cc110_readByte>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	4b6e      	ldr	r3, [pc, #440]	; (80071fc <cc110_getConfig+0x254>)
 8007044:	701a      	strb	r2, [r3, #0]
    CC110_FSCTRL1_DATA.data = cc110_readByte(CC110_FSCTRL1_ADDR);
 8007046:	20db      	movs	r0, #219	; 0xdb
 8007048:	f7ff fcbb 	bl	80069c2 <cc110_readByte>
 800704c:	4603      	mov	r3, r0
 800704e:	461a      	mov	r2, r3
 8007050:	4b6b      	ldr	r3, [pc, #428]	; (8007200 <cc110_getConfig+0x258>)
 8007052:	701a      	strb	r2, [r3, #0]
    CC110_FSCTRL0_DATA.data = cc110_readByte(CC110_FSCTRL0_ADDR);
 8007054:	200c      	movs	r0, #12
 8007056:	f7ff fcb4 	bl	80069c2 <cc110_readByte>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	4b69      	ldr	r3, [pc, #420]	; (8007204 <cc110_getConfig+0x25c>)
 8007060:	701a      	strb	r2, [r3, #0]
    CC110_FREQ2_DATA.data = cc110_readByte(CC110_FREQ2_ADDR);
 8007062:	200d      	movs	r0, #13
 8007064:	f7ff fcad 	bl	80069c2 <cc110_readByte>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	4b66      	ldr	r3, [pc, #408]	; (8007208 <cc110_getConfig+0x260>)
 800706e:	701a      	strb	r2, [r3, #0]
    CC110_FREQ1_DATA.data = cc110_readByte(CC110_FREQ1_ADDR);
 8007070:	200e      	movs	r0, #14
 8007072:	f7ff fca6 	bl	80069c2 <cc110_readByte>
 8007076:	4603      	mov	r3, r0
 8007078:	461a      	mov	r2, r3
 800707a:	4b64      	ldr	r3, [pc, #400]	; (800720c <cc110_getConfig+0x264>)
 800707c:	701a      	strb	r2, [r3, #0]
    CC110_FREQ0_DATA.data = cc110_readByte(CC110_FREQ0_ADDR);
 800707e:	200f      	movs	r0, #15
 8007080:	f7ff fc9f 	bl	80069c2 <cc110_readByte>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	4b61      	ldr	r3, [pc, #388]	; (8007210 <cc110_getConfig+0x268>)
 800708a:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG4_DATA.data = cc110_readByte(CC110_MDMCFG4_ADDR);
 800708c:	2010      	movs	r0, #16
 800708e:	f7ff fc98 	bl	80069c2 <cc110_readByte>
 8007092:	4603      	mov	r3, r0
 8007094:	461a      	mov	r2, r3
 8007096:	4b5f      	ldr	r3, [pc, #380]	; (8007214 <cc110_getConfig+0x26c>)
 8007098:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG3_DATA.data = cc110_readByte(CC110_MDMCFG3_ADDR);
 800709a:	2011      	movs	r0, #17
 800709c:	f7ff fc91 	bl	80069c2 <cc110_readByte>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	4b5c      	ldr	r3, [pc, #368]	; (8007218 <cc110_getConfig+0x270>)
 80070a6:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG2_DATA.data = cc110_readByte(CC110_MDMCFG2_ADDR);
 80070a8:	2012      	movs	r0, #18
 80070aa:	f7ff fc8a 	bl	80069c2 <cc110_readByte>
 80070ae:	4603      	mov	r3, r0
 80070b0:	461a      	mov	r2, r3
 80070b2:	4b5a      	ldr	r3, [pc, #360]	; (800721c <cc110_getConfig+0x274>)
 80070b4:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG1_DATA.data = cc110_readByte(CC110_MDMCFG1_ADDR);
 80070b6:	2013      	movs	r0, #19
 80070b8:	f7ff fc83 	bl	80069c2 <cc110_readByte>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	4b57      	ldr	r3, [pc, #348]	; (8007220 <cc110_getConfig+0x278>)
 80070c2:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG0_DATA.data = cc110_readByte(CC110_MDMCFG0_ADDR);
 80070c4:	2014      	movs	r0, #20
 80070c6:	f7ff fc7c 	bl	80069c2 <cc110_readByte>
 80070ca:	4603      	mov	r3, r0
 80070cc:	461a      	mov	r2, r3
 80070ce:	4b55      	ldr	r3, [pc, #340]	; (8007224 <cc110_getConfig+0x27c>)
 80070d0:	701a      	strb	r2, [r3, #0]
    CC110_DEVIATN_DATA.data = cc110_readByte(CC110_DEVIATN_ADDR);
 80070d2:	2015      	movs	r0, #21
 80070d4:	f7ff fc75 	bl	80069c2 <cc110_readByte>
 80070d8:	4603      	mov	r3, r0
 80070da:	461a      	mov	r2, r3
 80070dc:	4b52      	ldr	r3, [pc, #328]	; (8007228 <cc110_getConfig+0x280>)
 80070de:	701a      	strb	r2, [r3, #0]
    CC110_MCSM2_DATA.data = cc110_readByte(CC110_MCSM2_ADDR);
 80070e0:	2016      	movs	r0, #22
 80070e2:	f7ff fc6e 	bl	80069c2 <cc110_readByte>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	4b50      	ldr	r3, [pc, #320]	; (800722c <cc110_getConfig+0x284>)
 80070ec:	701a      	strb	r2, [r3, #0]
    CC110_MCSM1_DATA.data = cc110_readByte(CC110_MCSM1_ADDR);
 80070ee:	2017      	movs	r0, #23
 80070f0:	f7ff fc67 	bl	80069c2 <cc110_readByte>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
 80070f8:	4b4d      	ldr	r3, [pc, #308]	; (8007230 <cc110_getConfig+0x288>)
 80070fa:	701a      	strb	r2, [r3, #0]
    CC110_MCSM0_DATA.data = cc110_readByte(CC110_MCSM0_ADDR);
 80070fc:	2018      	movs	r0, #24
 80070fe:	f7ff fc60 	bl	80069c2 <cc110_readByte>
 8007102:	4603      	mov	r3, r0
 8007104:	461a      	mov	r2, r3
 8007106:	4b4b      	ldr	r3, [pc, #300]	; (8007234 <cc110_getConfig+0x28c>)
 8007108:	701a      	strb	r2, [r3, #0]
    CC110_FOCCFG_DATA.data = cc110_readByte(CC110_FOCCFG_ADDR);
 800710a:	2019      	movs	r0, #25
 800710c:	f7ff fc59 	bl	80069c2 <cc110_readByte>
 8007110:	4603      	mov	r3, r0
 8007112:	461a      	mov	r2, r3
 8007114:	4b48      	ldr	r3, [pc, #288]	; (8007238 <cc110_getConfig+0x290>)
 8007116:	701a      	strb	r2, [r3, #0]
    CC110_BSCFG_DATA.data = cc110_readByte(CC110_BSCFG_ADDR);
 8007118:	201a      	movs	r0, #26
 800711a:	f7ff fc52 	bl	80069c2 <cc110_readByte>
 800711e:	4603      	mov	r3, r0
 8007120:	461a      	mov	r2, r3
 8007122:	4b46      	ldr	r3, [pc, #280]	; (800723c <cc110_getConfig+0x294>)
 8007124:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL2_DATA.data = cc110_readByte(CC110_AGCCTRL2_ADDR);
 8007126:	201b      	movs	r0, #27
 8007128:	f7ff fc4b 	bl	80069c2 <cc110_readByte>
 800712c:	4603      	mov	r3, r0
 800712e:	461a      	mov	r2, r3
 8007130:	4b43      	ldr	r3, [pc, #268]	; (8007240 <cc110_getConfig+0x298>)
 8007132:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL1_DATA.data = cc110_readByte(CC110_AGCCTRL1_ADDR);
 8007134:	201c      	movs	r0, #28
 8007136:	f7ff fc44 	bl	80069c2 <cc110_readByte>
 800713a:	4603      	mov	r3, r0
 800713c:	461a      	mov	r2, r3
 800713e:	4b41      	ldr	r3, [pc, #260]	; (8007244 <cc110_getConfig+0x29c>)
 8007140:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL0_DATA.data = cc110_readByte(CC110_AGCCTRL0_ADDR);
 8007142:	201d      	movs	r0, #29
 8007144:	f7ff fc3d 	bl	80069c2 <cc110_readByte>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	4b3e      	ldr	r3, [pc, #248]	; (8007248 <cc110_getConfig+0x2a0>)
 800714e:	701a      	strb	r2, [r3, #0]
    CC110_FREND1_DATA.data = cc110_readByte(CC110_FREND1_ADDR);
 8007150:	2021      	movs	r0, #33	; 0x21
 8007152:	f7ff fc36 	bl	80069c2 <cc110_readByte>
 8007156:	4603      	mov	r3, r0
 8007158:	461a      	mov	r2, r3
 800715a:	4b3c      	ldr	r3, [pc, #240]	; (800724c <cc110_getConfig+0x2a4>)
 800715c:	701a      	strb	r2, [r3, #0]
    CC110_FREND0_DATA.data = cc110_readByte(CC110_FREND0_ADDR);
 800715e:	2022      	movs	r0, #34	; 0x22
 8007160:	f7ff fc2f 	bl	80069c2 <cc110_readByte>
 8007164:	4603      	mov	r3, r0
 8007166:	461a      	mov	r2, r3
 8007168:	4b39      	ldr	r3, [pc, #228]	; (8007250 <cc110_getConfig+0x2a8>)
 800716a:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL3_DATA.data = cc110_readByte(CC110_FSCAL3_ADDR);
 800716c:	2023      	movs	r0, #35	; 0x23
 800716e:	f7ff fc28 	bl	80069c2 <cc110_readByte>
 8007172:	4603      	mov	r3, r0
 8007174:	461a      	mov	r2, r3
 8007176:	4b37      	ldr	r3, [pc, #220]	; (8007254 <cc110_getConfig+0x2ac>)
 8007178:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL2_DATA.data = cc110_readByte(CC110_FSCAL2_ADDR);
 800717a:	2024      	movs	r0, #36	; 0x24
 800717c:	f7ff fc21 	bl	80069c2 <cc110_readByte>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	4b34      	ldr	r3, [pc, #208]	; (8007258 <cc110_getConfig+0x2b0>)
 8007186:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL1_DATA.data = cc110_readByte(CC110_FSCAL1_ADDR);
 8007188:	2025      	movs	r0, #37	; 0x25
 800718a:	f7ff fc1a 	bl	80069c2 <cc110_readByte>
 800718e:	4603      	mov	r3, r0
 8007190:	461a      	mov	r2, r3
 8007192:	4b32      	ldr	r3, [pc, #200]	; (800725c <cc110_getConfig+0x2b4>)
 8007194:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL0_DATA.data = cc110_readByte(CC110_FSCAL0_ADDR);
 8007196:	2026      	movs	r0, #38	; 0x26
 8007198:	f7ff fc13 	bl	80069c2 <cc110_readByte>
 800719c:	4603      	mov	r3, r0
 800719e:	461a      	mov	r2, r3
 80071a0:	4b2f      	ldr	r3, [pc, #188]	; (8007260 <cc110_getConfig+0x2b8>)
 80071a2:	701a      	strb	r2, [r3, #0]
    CC110_TEST2_DATA.data = cc110_readByte(CC110_TEST2_ADDR);
 80071a4:	202c      	movs	r0, #44	; 0x2c
 80071a6:	f7ff fc0c 	bl	80069c2 <cc110_readByte>
 80071aa:	4603      	mov	r3, r0
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <cc110_getConfig+0x2bc>)
 80071b0:	701a      	strb	r2, [r3, #0]
    CC110_TEST1_DATA.data = cc110_readByte(CC110_TEST1_ADDR);
 80071b2:	202d      	movs	r0, #45	; 0x2d
 80071b4:	f7ff fc05 	bl	80069c2 <cc110_readByte>
 80071b8:	4603      	mov	r3, r0
 80071ba:	461a      	mov	r2, r3
 80071bc:	4b2a      	ldr	r3, [pc, #168]	; (8007268 <cc110_getConfig+0x2c0>)
 80071be:	701a      	strb	r2, [r3, #0]
    CC110_TEST0_DATA.data = cc110_readByte(CC110_TEST0_ADDR);
 80071c0:	202e      	movs	r0, #46	; 0x2e
 80071c2:	f7ff fbfe 	bl	80069c2 <cc110_readByte>
 80071c6:	4603      	mov	r3, r0
 80071c8:	461a      	mov	r2, r3
 80071ca:	4b28      	ldr	r3, [pc, #160]	; (800726c <cc110_getConfig+0x2c4>)
 80071cc:	701a      	strb	r2, [r3, #0]
}
 80071ce:	bf00      	nop
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	2000d478 	.word	0x2000d478
 80071d8:	2000d480 	.word	0x2000d480
 80071dc:	2000d484 	.word	0x2000d484
 80071e0:	2000d4e0 	.word	0x2000d4e0
 80071e4:	2000d4b0 	.word	0x2000d4b0
 80071e8:	2000d504 	.word	0x2000d504
 80071ec:	2000d4b8 	.word	0x2000d4b8
 80071f0:	2000d4fc 	.word	0x2000d4fc
 80071f4:	2000d508 	.word	0x2000d508
 80071f8:	2000d4c4 	.word	0x2000d4c4
 80071fc:	2000d4c8 	.word	0x2000d4c8
 8007200:	2000d4c0 	.word	0x2000d4c0
 8007204:	2000d4cc 	.word	0x2000d4cc
 8007208:	2000d51c 	.word	0x2000d51c
 800720c:	2000d4d8 	.word	0x2000d4d8
 8007210:	2000d4b4 	.word	0x2000d4b4
 8007214:	2000d4a4 	.word	0x2000d4a4
 8007218:	2000d488 	.word	0x2000d488
 800721c:	2000d4a8 	.word	0x2000d4a8
 8007220:	2000d4e8 	.word	0x2000d4e8
 8007224:	2000d4dc 	.word	0x2000d4dc
 8007228:	2000d474 	.word	0x2000d474
 800722c:	2000d4f4 	.word	0x2000d4f4
 8007230:	2000d4e4 	.word	0x2000d4e4
 8007234:	2000d510 	.word	0x2000d510
 8007238:	2000d494 	.word	0x2000d494
 800723c:	2000d4ec 	.word	0x2000d4ec
 8007240:	2000d500 	.word	0x2000d500
 8007244:	2000d470 	.word	0x2000d470
 8007248:	2000d48c 	.word	0x2000d48c
 800724c:	2000d4bc 	.word	0x2000d4bc
 8007250:	2000d524 	.word	0x2000d524
 8007254:	2000d528 	.word	0x2000d528
 8007258:	2000d4d0 	.word	0x2000d4d0
 800725c:	2000d520 	.word	0x2000d520
 8007260:	2000d46c 	.word	0x2000d46c
 8007264:	2000d518 	.word	0x2000d518
 8007268:	2000d498 	.word	0x2000d498
 800726c:	2000d47c 	.word	0x2000d47c

08007270 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <MX_DMA_Init+0x3c>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	4a0b      	ldr	r2, [pc, #44]	; (80072ac <MX_DMA_Init+0x3c>)
 8007280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007284:	6313      	str	r3, [r2, #48]	; 0x30
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <MX_DMA_Init+0x3c>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007292:	2200      	movs	r2, #0
 8007294:	2105      	movs	r1, #5
 8007296:	2046      	movs	r0, #70	; 0x46
 8007298:	f7f9 fa6c 	bl	8000774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800729c:	2046      	movs	r0, #70	; 0x46
 800729e:	f7f9 fa85 	bl	80007ac <HAL_NVIC_EnableIRQ>

}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800

080072b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of heartbeatTask */
  heartbeatTaskHandle = osThreadNew(StartHeartbeatTask, NULL, &heartbeatTask_attributes);
 80072b4:	4a10      	ldr	r2, [pc, #64]	; (80072f8 <MX_FREERTOS_Init+0x48>)
 80072b6:	2100      	movs	r1, #0
 80072b8:	4810      	ldr	r0, [pc, #64]	; (80072fc <MX_FREERTOS_Init+0x4c>)
 80072ba:	f7fc fe83 	bl	8003fc4 <osThreadNew>
 80072be:	4602      	mov	r2, r0
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <MX_FREERTOS_Init+0x50>)
 80072c2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    consoleTaskHandle = osThreadNew(StartConsoleTask, NULL, &consoleTask_attributes);
 80072c4:	4a0f      	ldr	r2, [pc, #60]	; (8007304 <MX_FREERTOS_Init+0x54>)
 80072c6:	2100      	movs	r1, #0
 80072c8:	480f      	ldr	r0, [pc, #60]	; (8007308 <MX_FREERTOS_Init+0x58>)
 80072ca:	f7fc fe7b 	bl	8003fc4 <osThreadNew>
 80072ce:	4602      	mov	r2, r0
 80072d0:	4b0e      	ldr	r3, [pc, #56]	; (800730c <MX_FREERTOS_Init+0x5c>)
 80072d2:	601a      	str	r2, [r3, #0]
    displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80072d4:	4a0e      	ldr	r2, [pc, #56]	; (8007310 <MX_FREERTOS_Init+0x60>)
 80072d6:	2100      	movs	r1, #0
 80072d8:	480e      	ldr	r0, [pc, #56]	; (8007314 <MX_FREERTOS_Init+0x64>)
 80072da:	f7fc fe73 	bl	8003fc4 <osThreadNew>
 80072de:	4602      	mov	r2, r0
 80072e0:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <MX_FREERTOS_Init+0x68>)
 80072e2:	601a      	str	r2, [r3, #0]
    radioTaskHandle = osThreadNew(StartRadioTask, NULL, &radioTask_attributes);
 80072e4:	4a0d      	ldr	r2, [pc, #52]	; (800731c <MX_FREERTOS_Init+0x6c>)
 80072e6:	2100      	movs	r1, #0
 80072e8:	480d      	ldr	r0, [pc, #52]	; (8007320 <MX_FREERTOS_Init+0x70>)
 80072ea:	f7fc fe6b 	bl	8003fc4 <osThreadNew>
 80072ee:	4602      	mov	r2, r0
 80072f0:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <MX_FREERTOS_Init+0x74>)
 80072f2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80072f4:	bf00      	nop
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	0800c4b4 	.word	0x0800c4b4
 80072fc:	08007329 	.word	0x08007329
 8007300:	2000d52c 	.word	0x2000d52c
 8007304:	0800c448 	.word	0x0800c448
 8007308:	08007359 	.word	0x08007359
 800730c:	2000d530 	.word	0x2000d530
 8007310:	0800c46c 	.word	0x0800c46c
 8007314:	08007381 	.word	0x08007381
 8007318:	2000d534 	.word	0x2000d534
 800731c:	0800c490 	.word	0x0800c490
 8007320:	080073ad 	.word	0x080073ad
 8007324:	2000d538 	.word	0x2000d538

08007328 <StartHeartbeatTask>:
 * @param  argument: Not used 
 * @retval None
 */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
    log_info("Starting heartbeat task");
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <StartHeartbeatTask+0x24>)
 8007332:	2283      	movs	r2, #131	; 0x83
 8007334:	4906      	ldr	r1, [pc, #24]	; (8007350 <StartHeartbeatTask+0x28>)
 8007336:	2003      	movs	r0, #3
 8007338:	f000 f958 	bl	80075ec <log_event>
    /* Infinite loop */
    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800733c:	2140      	movs	r1, #64	; 0x40
 800733e:	4805      	ldr	r0, [pc, #20]	; (8007354 <StartHeartbeatTask+0x2c>)
 8007340:	f7f9 ff85 	bl	800124e <HAL_GPIO_TogglePin>
        osDelay(100);
 8007344:	2064      	movs	r0, #100	; 0x64
 8007346:	f7fc fee3 	bl	8004110 <osDelay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800734a:	e7f7      	b.n	800733c <StartHeartbeatTask+0x14>
 800734c:	0800c1c8 	.word	0x0800c1c8
 8007350:	0800c1e0 	.word	0x0800c1e0
 8007354:	40020000 	.word	0x40020000

08007358 <StartConsoleTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartConsoleTask(void* argument)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
    log_info("Starting console task");
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <StartConsoleTask+0x20>)
 8007362:	2291      	movs	r2, #145	; 0x91
 8007364:	4905      	ldr	r1, [pc, #20]	; (800737c <StartConsoleTask+0x24>)
 8007366:	2003      	movs	r0, #3
 8007368:	f000 f940 	bl	80075ec <log_event>
    while (1)
    {
        log_read();
 800736c:	f000 fa46 	bl	80077fc <log_read>
        osDelay(1);
 8007370:	2001      	movs	r0, #1
 8007372:	f7fc fecd 	bl	8004110 <osDelay>
        log_read();
 8007376:	e7f9      	b.n	800736c <StartConsoleTask+0x14>
 8007378:	0800c1f4 	.word	0x0800c1f4
 800737c:	0800c1e0 	.word	0x0800c1e0

08007380 <StartDisplayTask>:
    }
}

void StartDisplayTask(void* argument)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
    // Init display
    log_info("Starting display task");
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <StartDisplayTask+0x24>)
 800738a:	229c      	movs	r2, #156	; 0x9c
 800738c:	4906      	ldr	r1, [pc, #24]	; (80073a8 <StartDisplayTask+0x28>)
 800738e:	2003      	movs	r0, #3
 8007390:	f000 f92c 	bl	80075ec <log_event>
    ssd1315_init();
 8007394:	f000 fc88 	bl	8007ca8 <ssd1315_init>
    while (1)
    {
        ssd1315_demo();
 8007398:	f000 fca0 	bl	8007cdc <ssd1315_demo>
        osDelay(100); // Do nothing
 800739c:	2064      	movs	r0, #100	; 0x64
 800739e:	f7fc feb7 	bl	8004110 <osDelay>
        ssd1315_demo();
 80073a2:	e7f9      	b.n	8007398 <StartDisplayTask+0x18>
 80073a4:	0800c20c 	.word	0x0800c20c
 80073a8:	0800c1e0 	.word	0x0800c1e0

080073ac <StartRadioTask>:
    }
}

void StartRadioTask(void* argument)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
    // Init display
    log_info("Starting radio task");
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <StartRadioTask+0x24>)
 80073b6:	22a8      	movs	r2, #168	; 0xa8
 80073b8:	4906      	ldr	r1, [pc, #24]	; (80073d4 <StartRadioTask+0x28>)
 80073ba:	2003      	movs	r0, #3
 80073bc:	f000 f916 	bl	80075ec <log_event>
    cc110_init();
 80073c0:	f7ff faec 	bl	800699c <cc110_init>
    cc110_test();
 80073c4:	f7ff faf7 	bl	80069b6 <cc110_test>
    while (1)
    {
        osDelay(100); // Do nothing
 80073c8:	2064      	movs	r0, #100	; 0x64
 80073ca:	f7fc fea1 	bl	8004110 <osDelay>
 80073ce:	e7fb      	b.n	80073c8 <StartRadioTask+0x1c>
 80073d0:	0800c224 	.word	0x0800c224
 80073d4:	0800c1e0 	.word	0x0800c1e0

080073d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	605a      	str	r2, [r3, #4]
 80073e8:	609a      	str	r2, [r3, #8]
 80073ea:	60da      	str	r2, [r3, #12]
 80073ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <MX_GPIO_Init+0x100>)
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	4a38      	ldr	r2, [pc, #224]	; (80074d8 <MX_GPIO_Init+0x100>)
 80073f8:	f043 0310 	orr.w	r3, r3, #16
 80073fc:	6313      	str	r3, [r2, #48]	; 0x30
 80073fe:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	4b32      	ldr	r3, [pc, #200]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	4a31      	ldr	r2, [pc, #196]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	6313      	str	r3, [r2, #48]	; 0x30
 800741a:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <MX_GPIO_Init+0x100>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007426:	2300      	movs	r3, #0
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <MX_GPIO_Init+0x100>)
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007430:	f043 0304 	orr.w	r3, r3, #4
 8007434:	6313      	str	r3, [r2, #48]	; 0x30
 8007436:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	4a23      	ldr	r2, [pc, #140]	; (80074d8 <MX_GPIO_Init+0x100>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6313      	str	r3, [r2, #48]	; 0x30
 8007452:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800745e:	2300      	movs	r3, #0
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007468:	f043 0302 	orr.w	r3, r3, #2
 800746c:	6313      	str	r3, [r2, #48]	; 0x30
 800746e:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <MX_GPIO_Init+0x100>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800747a:	2200      	movs	r2, #0
 800747c:	2140      	movs	r1, #64	; 0x40
 800747e:	4817      	ldr	r0, [pc, #92]	; (80074dc <MX_GPIO_Init+0x104>)
 8007480:	f7f9 fecc 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007484:	2308      	movs	r3, #8
 8007486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748c:	2300      	movs	r3, #0
 800748e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007490:	f107 0314 	add.w	r3, r7, #20
 8007494:	4619      	mov	r1, r3
 8007496:	4812      	ldr	r0, [pc, #72]	; (80074e0 <MX_GPIO_Init+0x108>)
 8007498:	f7f9 fd26 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800749c:	2310      	movs	r3, #16
 800749e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074a4:	2301      	movs	r3, #1
 80074a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80074a8:	f107 0314 	add.w	r3, r7, #20
 80074ac:	4619      	mov	r1, r3
 80074ae:	480c      	ldr	r0, [pc, #48]	; (80074e0 <MX_GPIO_Init+0x108>)
 80074b0:	f7f9 fd1a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80074b4:	2340      	movs	r3, #64	; 0x40
 80074b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074b8:	2301      	movs	r3, #1
 80074ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074c0:	2300      	movs	r3, #0
 80074c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	4619      	mov	r1, r3
 80074ca:	4804      	ldr	r0, [pc, #16]	; (80074dc <MX_GPIO_Init+0x104>)
 80074cc:	f7f9 fd0c 	bl	8000ee8 <HAL_GPIO_Init>

}
 80074d0:	bf00      	nop
 80074d2:	3728      	adds	r7, #40	; 0x28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40020000 	.word	0x40020000
 80074e0:	40021000 	.word	0x40021000

080074e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80074e8:	4b12      	ldr	r3, [pc, #72]	; (8007534 <MX_I2C1_Init+0x50>)
 80074ea:	4a13      	ldr	r2, [pc, #76]	; (8007538 <MX_I2C1_Init+0x54>)
 80074ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80074ee:	4b11      	ldr	r3, [pc, #68]	; (8007534 <MX_I2C1_Init+0x50>)
 80074f0:	4a12      	ldr	r2, [pc, #72]	; (800753c <MX_I2C1_Init+0x58>)
 80074f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80074f4:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <MX_I2C1_Init+0x50>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80074fa:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <MX_I2C1_Init+0x50>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007500:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <MX_I2C1_Init+0x50>)
 8007502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <MX_I2C1_Init+0x50>)
 800750a:	2200      	movs	r2, #0
 800750c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <MX_I2C1_Init+0x50>)
 8007510:	2200      	movs	r2, #0
 8007512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007514:	4b07      	ldr	r3, [pc, #28]	; (8007534 <MX_I2C1_Init+0x50>)
 8007516:	2200      	movs	r2, #0
 8007518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800751a:	4b06      	ldr	r3, [pc, #24]	; (8007534 <MX_I2C1_Init+0x50>)
 800751c:	2200      	movs	r2, #0
 800751e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007520:	4804      	ldr	r0, [pc, #16]	; (8007534 <MX_I2C1_Init+0x50>)
 8007522:	f7f9 feaf 	bl	8001284 <HAL_I2C_Init>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800752c:	f000 fb10 	bl	8007b50 <Error_Handler>
  }

}
 8007530:	bf00      	nop
 8007532:	bd80      	pop	{r7, pc}
 8007534:	2000d53c 	.word	0x2000d53c
 8007538:	40005400 	.word	0x40005400
 800753c:	000186a0 	.word	0x000186a0

08007540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	; 0x28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	609a      	str	r2, [r3, #8]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <HAL_I2C_MspInit+0x84>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d12b      	bne.n	80075ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	4b18      	ldr	r3, [pc, #96]	; (80075c8 <HAL_I2C_MspInit+0x88>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <HAL_I2C_MspInit+0x88>)
 800756c:	f043 0302 	orr.w	r3, r3, #2
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <HAL_I2C_MspInit+0x88>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800757e:	23c0      	movs	r3, #192	; 0xc0
 8007580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007582:	2312      	movs	r3, #18
 8007584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758a:	2303      	movs	r3, #3
 800758c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800758e:	2304      	movs	r3, #4
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	4619      	mov	r1, r3
 8007598:	480c      	ldr	r0, [pc, #48]	; (80075cc <HAL_I2C_MspInit+0x8c>)
 800759a:	f7f9 fca5 	bl	8000ee8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <HAL_I2C_MspInit+0x88>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <HAL_I2C_MspInit+0x88>)
 80075a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075ac:	6413      	str	r3, [r2, #64]	; 0x40
 80075ae:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <HAL_I2C_MspInit+0x88>)
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80075ba:	bf00      	nop
 80075bc:	3728      	adds	r7, #40	; 0x28
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40005400 	.word	0x40005400
 80075c8:	40023800 	.word	0x40023800
 80075cc:	40020400 	.word	0x40020400

080075d0 <ustrlen>:
    return (uint8_t*)strcat((char *)dst, (char *)src);
}

// Unsigned string length function (equivalent to strlen from string.h)
static inline uint8_t ustrlen(uint8_t *str)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
    return (uint8_t)strlen((char *)str);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7f8 fdf9 	bl	80001d0 <strlen>
 80075de:	4603      	mov	r3, r0
 80075e0:	b2db      	uxtb	r3, r3
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <log_event>:
int8_t log_write(char* str, uint32_t len);
int8_t log_writeByte(uint8_t byte);

/* Public Function Definitions -----------------------------------------------*/
void log_event(uint8_t level, const char* file, unsigned int line, const char* format, ...)
{
 80075ec:	b408      	push	{r3}
 80075ee:	b580      	push	{r7, lr}
 80075f0:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	f107 0308 	add.w	r3, r7, #8
 80075fa:	6019      	str	r1, [r3, #0]
 80075fc:	1d3b      	adds	r3, r7, #4
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f107 030f 	add.w	r3, r7, #15
 8007604:	4602      	mov	r2, r0
 8007606:	701a      	strb	r2, [r3, #0]
    // Temporary buffers
    char msg[LOG_MSG_MAX_SIZE] = { 0 };
 8007608:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800760c:	4618      	mov	r0, r3
 800760e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007612:	461a      	mov	r2, r3
 8007614:	2100      	movs	r1, #0
 8007616:	f003 fc1c 	bl	800ae52 <memset>
    char tag[LOG_MSG_MAX_SIZE] = { 0 };
 800761a:	f107 0318 	add.w	r3, r7, #24
 800761e:	4618      	mov	r0, r3
 8007620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007624:	461a      	mov	r2, r3
 8007626:	2100      	movs	r1, #0
 8007628:	f003 fc13 	bl	800ae52 <memset>

    // Get and format current time in ss:ms
    unsigned int timeMs = HAL_GetTick();
 800762c:	f7f8 ffde 	bl	80005ec <HAL_GetTick>
 8007630:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    unsigned int timeS = timeMs / 1000;
 8007634:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007638:	4a54      	ldr	r2, [pc, #336]	; (800778c <log_event+0x1a0>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	099b      	lsrs	r3, r3, #6
 8007640:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    timeMs = timeMs % 1000;
 8007644:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007648:	4a50      	ldr	r2, [pc, #320]	; (800778c <log_event+0x1a0>)
 800764a:	fba2 1203 	umull	r1, r2, r2, r3
 800764e:	0992      	lsrs	r2, r2, #6
 8007650:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007654:	fb01 f202 	mul.w	r2, r1, r2
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    if (level <= LOG_LEVEL)
 800765e:	f107 030f 	add.w	r3, r7, #15
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b04      	cmp	r3, #4
 8007666:	f200 8089 	bhi.w	800777c <log_event+0x190>
    {
        // Create tag for log message
        switch (level)
 800766a:	f107 030f 	add.w	r3, r7, #15
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	3b01      	subs	r3, #1
 8007672:	2b03      	cmp	r3, #3
 8007674:	d85a      	bhi.n	800772c <log_event+0x140>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <log_event+0x90>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	0800768d 	.word	0x0800768d
 8007680:	080076b5 	.word	0x080076b5
 8007684:	080076dd 	.word	0x080076dd
 8007688:	08007705 	.word	0x08007705
        {
            case LOG_ERROR:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [ERROR] %s(%u) ", timeS, timeMs,
 800768c:	f107 0018 	add.w	r0, r7, #24
 8007690:	1d3b      	adds	r3, r7, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	9302      	str	r3, [sp, #8]
 8007696:	f107 0308 	add.w	r3, r7, #8
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80076a8:	4a39      	ldr	r2, [pc, #228]	; (8007790 <log_event+0x1a4>)
 80076aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076ae:	f003 fc8f 	bl	800afd0 <sniprintf>
                         file, line);
                break;
 80076b2:	e03c      	b.n	800772e <log_event+0x142>

            case LOG_WARN:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [WARN] %s(%u) ", timeS, timeMs, file,
 80076b4:	f107 0018 	add.w	r0, r7, #24
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	9302      	str	r3, [sp, #8]
 80076be:	f107 0308 	add.w	r3, r7, #8
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80076d0:	4a30      	ldr	r2, [pc, #192]	; (8007794 <log_event+0x1a8>)
 80076d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076d6:	f003 fc7b 	bl	800afd0 <sniprintf>
                         line);
                break;
 80076da:	e028      	b.n	800772e <log_event+0x142>

            case LOG_INFO:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [INFO] %s(%u) ", timeS, timeMs, file,
 80076dc:	f107 0018 	add.w	r0, r7, #24
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	f107 0308 	add.w	r3, r7, #8
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80076f8:	4a27      	ldr	r2, [pc, #156]	; (8007798 <log_event+0x1ac>)
 80076fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076fe:	f003 fc67 	bl	800afd0 <sniprintf>
                         line);
                break;
 8007702:	e014      	b.n	800772e <log_event+0x142>

            case LOG_DEBUG:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [DEBUG] %s(%u) ", timeS, timeMs,
 8007704:	f107 0018 	add.w	r0, r7, #24
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	9302      	str	r3, [sp, #8]
 800770e:	f107 0308 	add.w	r3, r7, #8
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007720:	4a1e      	ldr	r2, [pc, #120]	; (800779c <log_event+0x1b0>)
 8007722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007726:	f003 fc53 	bl	800afd0 <sniprintf>
                         file, line);
                break;
 800772a:	e000      	b.n	800772e <log_event+0x142>

            default:
                // Do nothing
                break;
 800772c:	bf00      	nop
        }

        // Copy log message
        va_list arg;
        va_start(arg, format);
 800772e:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8007732:	f107 0314 	add.w	r3, r7, #20
 8007736:	601a      	str	r2, [r3, #0]
        vsprintf(msg, format, arg);
 8007738:	f107 0314 	add.w	r3, r7, #20
 800773c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8007746:	f003 fc9d 	bl	800b084 <vsiprintf>
        va_end(arg);

        // Prepend tag to message
        strcat(tag, msg);
 800774a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800774e:	f107 0318 	add.w	r3, r7, #24
 8007752:	4611      	mov	r1, r2
 8007754:	4618      	mov	r0, r3
 8007756:	f003 fc6f 	bl	800b038 <strcat>

        // Write to the log buffer
        while (log_writeLock == LOG_WRITE_BUSY)
 800775a:	bf00      	nop
 800775c:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <log_event+0x1b4>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d0fb      	beq.n	800775c <log_event+0x170>
        {
            // Do nothing
        }
        log_write(tag, strlen(tag));
 8007764:	f107 0318 	add.w	r3, r7, #24
 8007768:	4618      	mov	r0, r3
 800776a:	f7f8 fd31 	bl	80001d0 <strlen>
 800776e:	4602      	mov	r2, r0
 8007770:	f107 0318 	add.w	r3, r7, #24
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f8b8 	bl	80078ec <log_write>
    }
}
 800777c:	bf00      	nop
 800777e:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8007782:	46bd      	mov	sp, r7
 8007784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007788:	b001      	add	sp, #4
 800778a:	4770      	bx	lr
 800778c:	10624dd3 	.word	0x10624dd3
 8007790:	0800c238 	.word	0x0800c238
 8007794:	0800c254 	.word	0x0800c254
 8007798:	0800c270 	.word	0x0800c270
 800779c:	0800c28c 	.word	0x0800c28c
 80077a0:	2000d288 	.word	0x2000d288

080077a4 <log_bufReadByte>:

int8_t log_bufReadByte(uint8_t* ret_byte)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
    if (log_writeIndex == log_readIndex)
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <log_bufReadByte+0x48>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	4b0f      	ldr	r3, [pc, #60]	; (80077f0 <log_bufReadByte+0x4c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d103      	bne.n	80077c0 <log_bufReadByte+0x1c>
    {
        log_status = LOG_EMPTY;
 80077b8:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <log_bufReadByte+0x50>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e00c      	b.n	80077da <log_bufReadByte+0x36>
    }
    else
    {
        *ret_byte = log_buf[log_readIndex];
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <log_bufReadByte+0x4c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0c      	ldr	r2, [pc, #48]	; (80077f8 <log_bufReadByte+0x54>)
 80077c6:	5cd2      	ldrb	r2, [r2, r3]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	701a      	strb	r2, [r3, #0]
        log_readIndex = (log_readIndex + 1) % LOG_BUF_SIZE;
 80077cc:	4b08      	ldr	r3, [pc, #32]	; (80077f0 <log_bufReadByte+0x4c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d6:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <log_bufReadByte+0x4c>)
 80077d8:	6013      	str	r3, [r2, #0]
    }

    return (log_status);
 80077da:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <log_bufReadByte+0x50>)
 80077dc:	f993 3000 	ldrsb.w	r3, [r3]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	2000d284 	.word	0x2000d284
 80077f0:	2000d280 	.word	0x2000d280
 80077f4:	2000000c 	.word	0x2000000c
 80077f8:	2000c280 	.word	0x2000c280

080077fc <log_read>:

// Example log_read implementation sending logs to a UART over DMA
void log_read(void)
{
 80077fc:	b5b0      	push	{r4, r5, r7, lr}
 80077fe:	b0ca      	sub	sp, #296	; 0x128
 8007800:	af00      	add	r7, sp, #0
    uint8_t tmp[LOG_MSG_MAX_SIZE] = { 0 };
 8007802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007806:	4618      	mov	r0, r3
 8007808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800780c:	461a      	mov	r2, r3
 800780e:	2100      	movs	r1, #0
 8007810:	f003 fb1f 	bl	800ae52 <memset>
    uint8_t log_errorMsg[] = "\n\r\ERROR: Log buffer overflow!\n\r";
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	4a2f      	ldr	r2, [pc, #188]	; (80078d4 <log_read+0xd8>)
 8007818:	461c      	mov	r4, r3
 800781a:	4615      	mov	r5, r2
 800781c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007820:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t i = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    // Read out string from log buffer, stopping when reaching a null character
    if (log_status != LOG_EMPTY)
 800782e:	4b2a      	ldr	r3, [pc, #168]	; (80078d8 <log_read+0xdc>)
 8007830:	f993 3000 	ldrsb.w	r3, [r3]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d048      	beq.n	80078ca <log_read+0xce>
    {
        // If the log got full, output an error immediately
        if (log_status == LOG_FULL)
 8007838:	4b27      	ldr	r3, [pc, #156]	; (80078d8 <log_read+0xdc>)
 800783a:	f993 3000 	ldrsb.w	r3, [r3]
 800783e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007842:	d10c      	bne.n	800785e <log_read+0x62>
        {
            HAL_UART_Transmit(&huart1, log_errorMsg, ustrlen(log_errorMsg), HAL_MAX_DELAY);
 8007844:	1d3b      	adds	r3, r7, #4
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff fec2 	bl	80075d0 <ustrlen>
 800784c:	4603      	mov	r3, r0
 800784e:	b29a      	uxth	r2, r3
 8007850:	1d39      	adds	r1, r7, #4
 8007852:	f04f 33ff 	mov.w	r3, #4294967295
 8007856:	4821      	ldr	r0, [pc, #132]	; (80078dc <log_read+0xe0>)
 8007858:	f7fb fb97 	bl	8002f8a <HAL_UART_Transmit>
 800785c:	e014      	b.n	8007888 <log_read+0x8c>

        else            // Otherwise continue as normal
        {
            do          // Copy last string
            {
                log_bufReadByte(&tmp[i]);
 800785e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007862:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007866:	4413      	add	r3, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ff9b 	bl	80077a4 <log_bufReadByte>
                i++;
 800786e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007872:	3301      	adds	r3, #1
 8007874:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            }
            while (tmp[i] != '\0');
 8007878:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800787c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007880:	4413      	add	r3, r2
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1ea      	bne.n	800785e <log_read+0x62>
        }

        // Wait for previous transfer to complete if it hasn't already
        if (Usart_DmaTxComplete != 1)
 8007888:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <log_read+0xe4>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d005      	beq.n	800789e <log_read+0xa2>
        {
            log_warn("Waiting on DMA Tx Complete");
 8007892:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <log_read+0xe8>)
 8007894:	2282      	movs	r2, #130	; 0x82
 8007896:	4914      	ldr	r1, [pc, #80]	; (80078e8 <log_read+0xec>)
 8007898:	2002      	movs	r0, #2
 800789a:	f7ff fea7 	bl	80075ec <log_event>
        }
        while (Usart_DmaTxComplete != 1)
 800789e:	bf00      	nop
 80078a0:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <log_read+0xe4>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d1fa      	bne.n	80078a0 <log_read+0xa4>
        {
            // Do nothing
        }

        // Reset transfer flag and send new string via DMA to UART
        Usart_DmaTxComplete = 0;
 80078aa:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <log_read+0xe4>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, tmp, ustrlen(tmp));
 80078b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fe8b 	bl	80075d0 <ustrlen>
 80078ba:	4603      	mov	r3, r0
 80078bc:	b29a      	uxth	r2, r3
 80078be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c2:	4619      	mov	r1, r3
 80078c4:	4805      	ldr	r0, [pc, #20]	; (80078dc <log_read+0xe0>)
 80078c6:	f7fb fbf9 	bl	80030bc <HAL_UART_Transmit_DMA>
    }
}
 80078ca:	bf00      	nop
 80078cc:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bdb0      	pop	{r4, r5, r7, pc}
 80078d4:	0800c2d4 	.word	0x0800c2d4
 80078d8:	2000000c 	.word	0x2000000c
 80078dc:	2000d66c 	.word	0x2000d66c
 80078e0:	2000d590 	.word	0x2000d590
 80078e4:	0800c2a8 	.word	0x0800c2a8
 80078e8:	0800c2c4 	.word	0x0800c2c4

080078ec <log_write>:

/* Private Function Definitions ----------------------------------------------*/
int8_t log_write(char* str, uint32_t len)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]

    // Write data to buffer, terminating if log is full
    while ((i < len) && (log_status != LOG_FULL))
 80078fa:	e009      	b.n	8007910 <log_write+0x24>
    {
        log_writeByte(str[i]);
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f817 	bl	8007938 <log_writeByte>
        i++;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	60fb      	str	r3, [r7, #12]
    while ((i < len) && (log_status != LOG_FULL))
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d205      	bcs.n	8007924 <log_write+0x38>
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <log_write+0x48>)
 800791a:	f993 3000 	ldrsb.w	r3, [r3]
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d1eb      	bne.n	80078fc <log_write+0x10>
    }

    return (log_status);
 8007924:	4b03      	ldr	r3, [pc, #12]	; (8007934 <log_write+0x48>)
 8007926:	f993 3000 	ldrsb.w	r3, [r3]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	2000000c 	.word	0x2000000c

08007938 <log_writeByte>:

int8_t log_writeByte(uint8_t byte)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
    // Check to see if log buffer is full
    if (log_writeIndex == ((log_readIndex - 1 + LOG_BUF_SIZE) % LOG_BUF_SIZE))
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <log_writeByte+0x64>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800794a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800794e:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <log_writeByte+0x68>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d103      	bne.n	800795e <log_writeByte+0x26>
    {
        log_status = LOG_FULL;
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <log_writeByte+0x6c>)
 8007958:	22ff      	movs	r2, #255	; 0xff
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e014      	b.n	8007988 <log_writeByte+0x50>
    }
    else    // Copy byte if not full
    {
        log_status = LOG_OK;
 800795e:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <log_writeByte+0x6c>)
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]
        log_writeLock = LOG_WRITE_BUSY;
 8007964:	4b10      	ldr	r3, [pc, #64]	; (80079a8 <log_writeByte+0x70>)
 8007966:	2201      	movs	r2, #1
 8007968:	701a      	strb	r2, [r3, #0]
        log_buf[log_writeIndex] = byte;
 800796a:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <log_writeByte+0x68>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	490f      	ldr	r1, [pc, #60]	; (80079ac <log_writeByte+0x74>)
 8007970:	79fa      	ldrb	r2, [r7, #7]
 8007972:	54ca      	strb	r2, [r1, r3]
        log_writeLock = LOG_WRITE_FREE;
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <log_writeByte+0x70>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        log_writeIndex = (log_writeIndex + 1) % LOG_BUF_SIZE;
 800797a:	4b09      	ldr	r3, [pc, #36]	; (80079a0 <log_writeByte+0x68>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007984:	4a06      	ldr	r2, [pc, #24]	; (80079a0 <log_writeByte+0x68>)
 8007986:	6013      	str	r3, [r2, #0]
    }

    return (log_status);
 8007988:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <log_writeByte+0x6c>)
 800798a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	2000d280 	.word	0x2000d280
 80079a0:	2000d284 	.word	0x2000d284
 80079a4:	2000000c 	.word	0x2000000c
 80079a8:	2000d288 	.word	0x2000d288
 80079ac:	2000c280 	.word	0x2000c280

080079b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  log_info("\n\r\n\rSTM32F407VETx Running\n\r");
 80079b4:	4b20      	ldr	r3, [pc, #128]	; (8007a38 <main+0x88>)
 80079b6:	224b      	movs	r2, #75	; 0x4b
 80079b8:	4920      	ldr	r1, [pc, #128]	; (8007a3c <main+0x8c>)
 80079ba:	2003      	movs	r0, #3
 80079bc:	f7ff fe16 	bl	80075ec <log_event>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80079c0:	f7f8 fdde 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079c4:	f000 f848 	bl	8007a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80079c8:	f7ff fd06 	bl	80073d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80079cc:	f7ff fc50 	bl	8007270 <MX_DMA_Init>
  MX_TIM6_Init();
 80079d0:	f000 fe5a 	bl	8008688 <MX_TIM6_Init>
  MX_I2C1_Init();
 80079d4:	f7ff fd86 	bl	80074e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80079d8:	f000 feac 	bl	8008734 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80079dc:	f000 f8c6 	bl	8007b6c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 80079e0:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <main+0x90>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f003 fa3a 	bl	800ae62 <setbuf>
  log_info("GPIO Initialized");
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <main+0x94>)
 80079f0:	2267      	movs	r2, #103	; 0x67
 80079f2:	4912      	ldr	r1, [pc, #72]	; (8007a3c <main+0x8c>)
 80079f4:	2003      	movs	r0, #3
 80079f6:	f7ff fdf9 	bl	80075ec <log_event>
  log_info("TIM6 Initialized");
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <main+0x98>)
 80079fc:	2268      	movs	r2, #104	; 0x68
 80079fe:	490f      	ldr	r1, [pc, #60]	; (8007a3c <main+0x8c>)
 8007a00:	2003      	movs	r0, #3
 8007a02:	f7ff fdf3 	bl	80075ec <log_event>
  log_info("I2C1 Initialized");
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <main+0x9c>)
 8007a08:	2269      	movs	r2, #105	; 0x69
 8007a0a:	490c      	ldr	r1, [pc, #48]	; (8007a3c <main+0x8c>)
 8007a0c:	2003      	movs	r0, #3
 8007a0e:	f7ff fded 	bl	80075ec <log_event>
  log_info("USART1 Initialized");
 8007a12:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <main+0xa0>)
 8007a14:	226a      	movs	r2, #106	; 0x6a
 8007a16:	4909      	ldr	r1, [pc, #36]	; (8007a3c <main+0x8c>)
 8007a18:	2003      	movs	r0, #3
 8007a1a:	f7ff fde7 	bl	80075ec <log_event>
  log_info("Starting OS...");
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <main+0xa4>)
 8007a20:	226b      	movs	r2, #107	; 0x6b
 8007a22:	4906      	ldr	r1, [pc, #24]	; (8007a3c <main+0x8c>)
 8007a24:	2003      	movs	r0, #3
 8007a26:	f7ff fde1 	bl	80075ec <log_event>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8007a2a:	f7fc fa61 	bl	8003ef0 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8007a2e:	f7ff fc3f 	bl	80072b0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8007a32:	f7fc fa91 	bl	8003f58 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007a36:	e7fe      	b.n	8007a36 <main+0x86>
 8007a38:	0800c2f4 	.word	0x0800c2f4
 8007a3c:	0800c310 	.word	0x0800c310
 8007a40:	200000f8 	.word	0x200000f8
 8007a44:	0800c320 	.word	0x0800c320
 8007a48:	0800c334 	.word	0x0800c334
 8007a4c:	0800c348 	.word	0x0800c348
 8007a50:	0800c35c 	.word	0x0800c35c
 8007a54:	0800c370 	.word	0x0800c370

08007a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b094      	sub	sp, #80	; 0x50
 8007a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a5e:	f107 0320 	add.w	r3, r7, #32
 8007a62:	2230      	movs	r2, #48	; 0x30
 8007a64:	2100      	movs	r1, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f003 f9f3 	bl	800ae52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a6c:	f107 030c 	add.w	r3, r7, #12
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	609a      	str	r2, [r3, #8]
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60bb      	str	r3, [r7, #8]
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <SystemClock_Config+0xcc>)
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	4a27      	ldr	r2, [pc, #156]	; (8007b24 <SystemClock_Config+0xcc>)
 8007a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8007a8c:	4b25      	ldr	r3, [pc, #148]	; (8007b24 <SystemClock_Config+0xcc>)
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	607b      	str	r3, [r7, #4]
 8007a9c:	4b22      	ldr	r3, [pc, #136]	; (8007b28 <SystemClock_Config+0xd0>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a21      	ldr	r2, [pc, #132]	; (8007b28 <SystemClock_Config+0xd0>)
 8007aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4b1f      	ldr	r3, [pc, #124]	; (8007b28 <SystemClock_Config+0xd0>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ab0:	607b      	str	r3, [r7, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007ac8:	2304      	movs	r3, #4
 8007aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007acc:	23a8      	movs	r3, #168	; 0xa8
 8007ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007ad4:	2307      	movs	r3, #7
 8007ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ad8:	f107 0320 	add.w	r3, r7, #32
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fa f811 	bl	8001b04 <HAL_RCC_OscConfig>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007ae8:	f000 f832 	bl	8007b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007aec:	230f      	movs	r3, #15
 8007aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007af0:	2302      	movs	r3, #2
 8007af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007af8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007b04:	f107 030c 	add.w	r3, r7, #12
 8007b08:	2105      	movs	r1, #5
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fa fa6a 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007b16:	f000 f81b 	bl	8007b50 <Error_Handler>
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	3750      	adds	r7, #80	; 0x50
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40023800 	.word	0x40023800
 8007b28:	40007000 	.word	0x40007000

08007b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d101      	bne.n	8007b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007b3e:	f7f8 fd41 	bl	80005c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40001400 	.word	0x40001400

08007b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    log_error("\n\r\n\rERROR Handler Caught an Exception!\n\r\n\r");
 8007b54:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <Error_Handler+0x14>)
 8007b56:	22cb      	movs	r2, #203	; 0xcb
 8007b58:	4903      	ldr	r1, [pc, #12]	; (8007b68 <Error_Handler+0x18>)
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	f7ff fd46 	bl	80075ec <log_event>
  /* USER CODE END Error_Handler_Debug */
}
 8007b60:	bf00      	nop
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	0800c380 	.word	0x0800c380
 8007b68:	0800c310 	.word	0x0800c310

08007b6c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007b72:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <MX_SPI2_Init+0x68>)
 8007b74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007b76:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007b7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007b7e:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007b84:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b8a:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007b90:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007b98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007b9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007b9e:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007bb8:	220a      	movs	r2, #10
 8007bba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007bbc:	4804      	ldr	r0, [pc, #16]	; (8007bd0 <MX_SPI2_Init+0x64>)
 8007bbe:	f7fa fc35 	bl	800242c <HAL_SPI_Init>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007bc8:	f7ff ffc2 	bl	8007b50 <Error_Handler>
  }

}
 8007bcc:	bf00      	nop
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	2000d594 	.word	0x2000d594
 8007bd4:	40003800 	.word	0x40003800

08007bd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	; 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	609a      	str	r2, [r3, #8]
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a28      	ldr	r2, [pc, #160]	; (8007c98 <HAL_SPI_MspInit+0xc0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d14a      	bne.n	8007c90 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	4b27      	ldr	r3, [pc, #156]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	4a26      	ldr	r2, [pc, #152]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c08:	6413      	str	r3, [r2, #64]	; 0x40
 8007c0a:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	4a1f      	ldr	r2, [pc, #124]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c20:	f043 0304 	orr.w	r3, r3, #4
 8007c24:	6313      	str	r3, [r2, #48]	; 0x30
 8007c26:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	4a18      	ldr	r2, [pc, #96]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c3c:	f043 0302 	orr.w	r3, r3, #2
 8007c40:	6313      	str	r3, [r2, #48]	; 0x30
 8007c42:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <HAL_SPI_MspInit+0xc4>)
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	60bb      	str	r3, [r7, #8]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007c4e:	230c      	movs	r3, #12
 8007c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c52:	2302      	movs	r3, #2
 8007c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007c5e:	2305      	movs	r3, #5
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c62:	f107 0314 	add.w	r3, r7, #20
 8007c66:	4619      	mov	r1, r3
 8007c68:	480d      	ldr	r0, [pc, #52]	; (8007ca0 <HAL_SPI_MspInit+0xc8>)
 8007c6a:	f7f9 f93d 	bl	8000ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8007c6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c74:	2302      	movs	r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007c80:	2305      	movs	r3, #5
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c84:	f107 0314 	add.w	r3, r7, #20
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4806      	ldr	r0, [pc, #24]	; (8007ca4 <HAL_SPI_MspInit+0xcc>)
 8007c8c:	f7f9 f92c 	bl	8000ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007c90:	bf00      	nop
 8007c92:	3728      	adds	r7, #40	; 0x28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40003800 	.word	0x40003800
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	40020800 	.word	0x40020800
 8007ca4:	40020400 	.word	0x40020400

08007ca8 <ssd1315_init>:
void u8g2_hare(uint8_t a);
void draw(void);

/* Public function definitions -----------------------------------------------*/
int8_t ssd1315_init(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
    u8g2_Setup_ssd1306_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c,
 8007cac:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <ssd1315_init+0x24>)
 8007cae:	4a08      	ldr	r2, [pc, #32]	; (8007cd0 <ssd1315_init+0x28>)
 8007cb0:	4908      	ldr	r1, [pc, #32]	; (8007cd4 <ssd1315_init+0x2c>)
 8007cb2:	4809      	ldr	r0, [pc, #36]	; (8007cd8 <ssd1315_init+0x30>)
 8007cb4:	f001 fa7e 	bl	80091b4 <u8g2_Setup_ssd1306_i2c_128x64_noname_1>
                                           u8x8_stm32_gpio_and_delay_cb); // init u8g2 structure
    u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8007cb8:	4807      	ldr	r0, [pc, #28]	; (8007cd8 <ssd1315_init+0x30>)
 8007cba:	f002 fff7 	bl	800acac <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4805      	ldr	r0, [pc, #20]	; (8007cd8 <ssd1315_init+0x30>)
 8007cc2:	f003 f802 	bl	800acca <u8x8_SetPowerSave>
    return (SSD1315_OK);
 8007cc6:	2301      	movs	r3, #1
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	08008225 	.word	0x08008225
 8007cd0:	080082f5 	.word	0x080082f5
 8007cd4:	0800f36c 	.word	0x0800f36c
 8007cd8:	2000d28c 	.word	0x2000d28c

08007cdc <ssd1315_demo>:

void ssd1315_demo(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
    u8g2_FirstPage(&u8g2);
 8007ce0:	4814      	ldr	r0, [pc, #80]	; (8007d34 <ssd1315_demo+0x58>)
 8007ce2:	f000 ffd6 	bl	8008c92 <u8g2_FirstPage>
    do
    {
        draw();
 8007ce6:	f000 fa41 	bl	800816c <draw>
    }
    while (u8g2_NextPage(&u8g2)); // 8 times running
 8007cea:	4812      	ldr	r0, [pc, #72]	; (8007d34 <ssd1315_demo+0x58>)
 8007cec:	f000 ffe5 	bl	8008cba <u8g2_NextPage>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f7      	bne.n	8007ce6 <ssd1315_demo+0xa>

    if (step <= max)
 8007cf6:	4b10      	ldr	r3, [pc, #64]	; (8007d38 <ssd1315_demo+0x5c>)
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	4b10      	ldr	r3, [pc, #64]	; (8007d3c <ssd1315_demo+0x60>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d806      	bhi.n	8007d10 <ssd1315_demo+0x34>
        step += 3;
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <ssd1315_demo+0x5c>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	3303      	adds	r3, #3
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	4b0b      	ldr	r3, [pc, #44]	; (8007d38 <ssd1315_demo+0x5c>)
 8007d0c:	701a      	strb	r2, [r3, #0]
        if (picture >= 7)
        {
            picture = 0;
        }
    }
}
 8007d0e:	e00f      	b.n	8007d30 <ssd1315_demo+0x54>
        step = 0;
 8007d10:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <ssd1315_demo+0x5c>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
        picture++;
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <ssd1315_demo+0x64>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <ssd1315_demo+0x64>)
 8007d20:	701a      	strb	r2, [r3, #0]
        if (picture >= 7)
 8007d22:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <ssd1315_demo+0x64>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b06      	cmp	r3, #6
 8007d28:	d902      	bls.n	8007d30 <ssd1315_demo+0x54>
            picture = 0;
 8007d2a:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <ssd1315_demo+0x64>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
}
 8007d30:	bf00      	nop
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	2000d28c 	.word	0x2000d28c
 8007d38:	200000f0 	.word	0x200000f0
 8007d3c:	2000d310 	.word	0x2000d310
 8007d40:	200000f1 	.word	0x200000f1

08007d44 <u8g2_prepare>:

/* Private function definitions ----------------------------------------------*/
void u8g2_prepare()
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
    u8g2_SetFont(&u8g2, u8g2_font_courB10_tr);
 8007d48:	4909      	ldr	r1, [pc, #36]	; (8007d70 <u8g2_prepare+0x2c>)
 8007d4a:	480a      	ldr	r0, [pc, #40]	; (8007d74 <u8g2_prepare+0x30>)
 8007d4c:	f002 f802 	bl	8009d54 <u8g2_SetFont>
    u8g2_SetFontRefHeightExtendedText(&u8g2);
 8007d50:	4808      	ldr	r0, [pc, #32]	; (8007d74 <u8g2_prepare+0x30>)
 8007d52:	f001 ffb3 	bl	8009cbc <u8g2_SetFontRefHeightExtendedText>
    u8g2_SetDrawColor(&u8g2, 1);
 8007d56:	2101      	movs	r1, #1
 8007d58:	4806      	ldr	r0, [pc, #24]	; (8007d74 <u8g2_prepare+0x30>)
 8007d5a:	f002 f97e 	bl	800a05a <u8g2_SetDrawColor>
    u8g2_SetFontPosTop(&u8g2);
 8007d5e:	4805      	ldr	r0, [pc, #20]	; (8007d74 <u8g2_prepare+0x30>)
 8007d60:	f001 ffe8 	bl	8009d34 <u8g2_SetFontPosTop>
    u8g2_SetFontDirection(&u8g2, 0);
 8007d64:	2100      	movs	r1, #0
 8007d66:	4803      	ldr	r0, [pc, #12]	; (8007d74 <u8g2_prepare+0x30>)
 8007d68:	f002 f80e 	bl	8009d88 <u8g2_SetFontDirection>
}
 8007d6c:	bf00      	nop
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	0800c868 	.word	0x0800c868
 8007d74:	2000d28c 	.word	0x2000d28c

08007d78 <u8g2_me>:

void u8g2_me(uint8_t a)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	4603      	mov	r3, r0
 8007d80:	71fb      	strb	r3, [r7, #7]
    u8g2_DrawStr(&u8g2, 0, 0, "DrawDisc");
 8007d82:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <u8g2_me+0x7c>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	481b      	ldr	r0, [pc, #108]	; (8007df8 <u8g2_me+0x80>)
 8007d8a:	f001 ff11 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawDisc(&u8g2, 10, 22, 7, U8G2_DRAW_ALL);
 8007d8e:	230f      	movs	r3, #15
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	2307      	movs	r3, #7
 8007d94:	2216      	movs	r2, #22
 8007d96:	210a      	movs	r1, #10
 8007d98:	4817      	ldr	r0, [pc, #92]	; (8007df8 <u8g2_me+0x80>)
 8007d9a:	f001 f9c2 	bl	8009122 <u8g2_DrawDisc>
    u8g2_DrawDisc(&u8g2, 24 + 5*a, 20, 5, U8G2_DRAW_ALL);
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	461a      	mov	r2, r3
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	3318      	adds	r3, #24
 8007daa:	b2d9      	uxtb	r1, r3
 8007dac:	230f      	movs	r3, #15
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	2305      	movs	r3, #5
 8007db2:	2214      	movs	r2, #20
 8007db4:	4810      	ldr	r0, [pc, #64]	; (8007df8 <u8g2_me+0x80>)
 8007db6:	f001 f9b4 	bl	8009122 <u8g2_DrawDisc>
    u8g2_DrawStr(&u8g2, 0, 32, "Hello World!!!");
 8007dba:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <u8g2_me+0x84>)
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	480d      	ldr	r0, [pc, #52]	; (8007df8 <u8g2_me+0x80>)
 8007dc2:	f001 fef5 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawCircle(&u8g2, 10, 22 + 32, 7, U8G2_DRAW_ALL);
 8007dc6:	230f      	movs	r3, #15
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	2307      	movs	r3, #7
 8007dcc:	2236      	movs	r2, #54	; 0x36
 8007dce:	210a      	movs	r1, #10
 8007dd0:	4809      	ldr	r0, [pc, #36]	; (8007df8 <u8g2_me+0x80>)
 8007dd2:	f001 f885 	bl	8008ee0 <u8g2_DrawCircle>
    u8g2_DrawCircle(&u8g2, 24 + a, 20 + 32, 5, U8G2_DRAW_ALL);
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	3318      	adds	r3, #24
 8007dda:	b2d9      	uxtb	r1, r3
 8007ddc:	230f      	movs	r3, #15
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	2305      	movs	r3, #5
 8007de2:	2234      	movs	r2, #52	; 0x34
 8007de4:	4804      	ldr	r0, [pc, #16]	; (8007df8 <u8g2_me+0x80>)
 8007de6:	f001 f87b 	bl	8008ee0 <u8g2_DrawCircle>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	0800c3ac 	.word	0x0800c3ac
 8007df8:	2000d28c 	.word	0x2000d28c
 8007dfc:	0800c3b8 	.word	0x0800c3b8

08007e00 <u8g2_drawLogo>:

void u8g2_drawLogo(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
    u8g2_SetFontMode(&u8g2, 1);  // Transparent
 8007e04:	2101      	movs	r1, #1
 8007e06:	482d      	ldr	r0, [pc, #180]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e08:	f001 fe13 	bl	8009a32 <u8g2_SetFontMode>
    u8g2_SetDrawColor(&u8g2, 1);
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	482b      	ldr	r0, [pc, #172]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e10:	f002 f923 	bl	800a05a <u8g2_SetDrawColor>

    u8g2_SetFontDirection(&u8g2, 0);
 8007e14:	2100      	movs	r1, #0
 8007e16:	4829      	ldr	r0, [pc, #164]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e18:	f001 ffb6 	bl	8009d88 <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 8007e1c:	4928      	ldr	r1, [pc, #160]	; (8007ec0 <u8g2_drawLogo+0xc0>)
 8007e1e:	4827      	ldr	r0, [pc, #156]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e20:	f001 ff98 	bl	8009d54 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 0, 5, "U");
 8007e24:	4b27      	ldr	r3, [pc, #156]	; (8007ec4 <u8g2_drawLogo+0xc4>)
 8007e26:	2205      	movs	r2, #5
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4824      	ldr	r0, [pc, #144]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e2c:	f001 fec0 	bl	8009bb0 <u8g2_DrawStr>

    u8g2_SetFontDirection(&u8g2, 1);
 8007e30:	2101      	movs	r1, #1
 8007e32:	4822      	ldr	r0, [pc, #136]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e34:	f001 ffa8 	bl	8009d88 <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_inb30_mn);
 8007e38:	4923      	ldr	r1, [pc, #140]	; (8007ec8 <u8g2_drawLogo+0xc8>)
 8007e3a:	4820      	ldr	r0, [pc, #128]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e3c:	f001 ff8a 	bl	8009d54 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 51, 8, "8");
 8007e40:	4b22      	ldr	r3, [pc, #136]	; (8007ecc <u8g2_drawLogo+0xcc>)
 8007e42:	2208      	movs	r2, #8
 8007e44:	2133      	movs	r1, #51	; 0x33
 8007e46:	481d      	ldr	r0, [pc, #116]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e48:	f001 feb2 	bl	8009bb0 <u8g2_DrawStr>

    u8g2_SetFontDirection(&u8g2, 0);
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	481b      	ldr	r0, [pc, #108]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e50:	f001 ff9a 	bl	8009d88 <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 8007e54:	491a      	ldr	r1, [pc, #104]	; (8007ec0 <u8g2_drawLogo+0xc0>)
 8007e56:	4819      	ldr	r0, [pc, #100]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e58:	f001 ff7c 	bl	8009d54 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 51, 5, "g");
 8007e5c:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <u8g2_drawLogo+0xd0>)
 8007e5e:	2205      	movs	r2, #5
 8007e60:	2133      	movs	r1, #51	; 0x33
 8007e62:	4816      	ldr	r0, [pc, #88]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e64:	f001 fea4 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 67, 5, "\xb2");
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <u8g2_drawLogo+0xd4>)
 8007e6a:	2205      	movs	r2, #5
 8007e6c:	2143      	movs	r1, #67	; 0x43
 8007e6e:	4813      	ldr	r0, [pc, #76]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e70:	f001 fe9e 	bl	8009bb0 <u8g2_DrawStr>

    u8g2_DrawHLine(&u8g2, 2, 35, 47);
 8007e74:	232f      	movs	r3, #47	; 0x2f
 8007e76:	2223      	movs	r2, #35	; 0x23
 8007e78:	2102      	movs	r1, #2
 8007e7a:	4810      	ldr	r0, [pc, #64]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e7c:	f002 f886 	bl	8009f8c <u8g2_DrawHLine>
    u8g2_DrawHLine(&u8g2, 3, 36, 47);
 8007e80:	232f      	movs	r3, #47	; 0x2f
 8007e82:	2224      	movs	r2, #36	; 0x24
 8007e84:	2103      	movs	r1, #3
 8007e86:	480d      	ldr	r0, [pc, #52]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e88:	f002 f880 	bl	8009f8c <u8g2_DrawHLine>
    u8g2_DrawVLine(&u8g2, 45, 32, 12);
 8007e8c:	230c      	movs	r3, #12
 8007e8e:	2220      	movs	r2, #32
 8007e90:	212d      	movs	r1, #45	; 0x2d
 8007e92:	480a      	ldr	r0, [pc, #40]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007e94:	f002 f894 	bl	8009fc0 <u8g2_DrawVLine>
    u8g2_DrawVLine(&u8g2, 46, 33, 12);
 8007e98:	230c      	movs	r3, #12
 8007e9a:	2221      	movs	r2, #33	; 0x21
 8007e9c:	212e      	movs	r1, #46	; 0x2e
 8007e9e:	4807      	ldr	r0, [pc, #28]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007ea0:	f002 f88e 	bl	8009fc0 <u8g2_DrawVLine>

    u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 8007ea4:	490c      	ldr	r1, [pc, #48]	; (8007ed8 <u8g2_drawLogo+0xd8>)
 8007ea6:	4805      	ldr	r0, [pc, #20]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007ea8:	f001 ff54 	bl	8009d54 <u8g2_SetFont>

    u8g2_DrawStr(&u8g2, 1, 54, "github.com/olikraus/u8g2");
 8007eac:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <u8g2_drawLogo+0xdc>)
 8007eae:	2236      	movs	r2, #54	; 0x36
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	4802      	ldr	r0, [pc, #8]	; (8007ebc <u8g2_drawLogo+0xbc>)
 8007eb4:	f001 fe7c 	bl	8009bb0 <u8g2_DrawStr>
}
 8007eb8:	bf00      	nop
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	2000d28c 	.word	0x2000d28c
 8007ec0:	0800cdbc 	.word	0x0800cdbc
 8007ec4:	0800c3c8 	.word	0x0800c3c8
 8007ec8:	0800f038 	.word	0x0800f038
 8007ecc:	0800c3cc 	.word	0x0800c3cc
 8007ed0:	0800c3d0 	.word	0x0800c3d0
 8007ed4:	0800c3d4 	.word	0x0800c3d4
 8007ed8:	0800c4f0 	.word	0x0800c4f0
 8007edc:	0800c3d8 	.word	0x0800c3d8

08007ee0 <u8g2_box_frame>:

void u8g2_box_frame(uint8_t a)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
    u8g2_DrawStr(&u8g2, 0, 0, "DrawBox");
 8007eea:	4b18      	ldr	r3, [pc, #96]	; (8007f4c <u8g2_box_frame+0x6c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4817      	ldr	r0, [pc, #92]	; (8007f50 <u8g2_box_frame+0x70>)
 8007ef2:	f001 fe5d 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawBox(&u8g2, 0, 15, 20, 10);
 8007ef6:	230a      	movs	r3, #10
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	2314      	movs	r3, #20
 8007efc:	220f      	movs	r2, #15
 8007efe:	2100      	movs	r1, #0
 8007f00:	4813      	ldr	r0, [pc, #76]	; (8007f50 <u8g2_box_frame+0x70>)
 8007f02:	f000 fda3 	bl	8008a4c <u8g2_DrawBox>
    u8g2_DrawBox(&u8g2, 0 + a, 15, 30, 7);
 8007f06:	79f9      	ldrb	r1, [r7, #7]
 8007f08:	2307      	movs	r3, #7
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	231e      	movs	r3, #30
 8007f0e:	220f      	movs	r2, #15
 8007f10:	480f      	ldr	r0, [pc, #60]	; (8007f50 <u8g2_box_frame+0x70>)
 8007f12:	f000 fd9b 	bl	8008a4c <u8g2_DrawBox>
    u8g2_DrawStr(&u8g2, 0, 32, "DrawFrame");
 8007f16:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <u8g2_box_frame+0x74>)
 8007f18:	2220      	movs	r2, #32
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	480c      	ldr	r0, [pc, #48]	; (8007f50 <u8g2_box_frame+0x70>)
 8007f1e:	f001 fe47 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawFrame(&u8g2, 0, 15 + 32, 20, 10);
 8007f22:	230a      	movs	r3, #10
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	2314      	movs	r3, #20
 8007f28:	222f      	movs	r2, #47	; 0x2f
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4808      	ldr	r0, [pc, #32]	; (8007f50 <u8g2_box_frame+0x70>)
 8007f2e:	f000 fdc4 	bl	8008aba <u8g2_DrawFrame>
    u8g2_DrawFrame(&u8g2, 0 + a, 15 + 32, 30, 7);
 8007f32:	79f9      	ldrb	r1, [r7, #7]
 8007f34:	2307      	movs	r3, #7
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	231e      	movs	r3, #30
 8007f3a:	222f      	movs	r2, #47	; 0x2f
 8007f3c:	4804      	ldr	r0, [pc, #16]	; (8007f50 <u8g2_box_frame+0x70>)
 8007f3e:	f000 fdbc 	bl	8008aba <u8g2_DrawFrame>
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	0800c3f4 	.word	0x0800c3f4
 8007f50:	2000d28c 	.word	0x2000d28c
 8007f54:	0800c3fc 	.word	0x0800c3fc

08007f58 <u8g2_disc_circle>:

void u8g2_disc_circle(uint8_t a)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	4603      	mov	r3, r0
 8007f60:	71fb      	strb	r3, [r7, #7]
    u8g2_DrawStr(&u8g2, 0, 0, "DrawDisc");
 8007f62:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <u8g2_disc_circle+0x74>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	2100      	movs	r1, #0
 8007f68:	4819      	ldr	r0, [pc, #100]	; (8007fd0 <u8g2_disc_circle+0x78>)
 8007f6a:	f001 fe21 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawDisc(&u8g2, 10, 22, 7, U8G2_DRAW_ALL);
 8007f6e:	230f      	movs	r3, #15
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	2307      	movs	r3, #7
 8007f74:	2216      	movs	r2, #22
 8007f76:	210a      	movs	r1, #10
 8007f78:	4815      	ldr	r0, [pc, #84]	; (8007fd0 <u8g2_disc_circle+0x78>)
 8007f7a:	f001 f8d2 	bl	8009122 <u8g2_DrawDisc>
    u8g2_DrawDisc(&u8g2, 24 + a, 20, 5, U8G2_DRAW_ALL);
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	3318      	adds	r3, #24
 8007f82:	b2d9      	uxtb	r1, r3
 8007f84:	230f      	movs	r3, #15
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	2305      	movs	r3, #5
 8007f8a:	2214      	movs	r2, #20
 8007f8c:	4810      	ldr	r0, [pc, #64]	; (8007fd0 <u8g2_disc_circle+0x78>)
 8007f8e:	f001 f8c8 	bl	8009122 <u8g2_DrawDisc>
    u8g2_DrawStr(&u8g2, 0, 32, "DrawCircle");
 8007f92:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <u8g2_disc_circle+0x7c>)
 8007f94:	2220      	movs	r2, #32
 8007f96:	2100      	movs	r1, #0
 8007f98:	480d      	ldr	r0, [pc, #52]	; (8007fd0 <u8g2_disc_circle+0x78>)
 8007f9a:	f001 fe09 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawCircle(&u8g2, 10, 22 + 32, 7, U8G2_DRAW_ALL);
 8007f9e:	230f      	movs	r3, #15
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2307      	movs	r3, #7
 8007fa4:	2236      	movs	r2, #54	; 0x36
 8007fa6:	210a      	movs	r1, #10
 8007fa8:	4809      	ldr	r0, [pc, #36]	; (8007fd0 <u8g2_disc_circle+0x78>)
 8007faa:	f000 ff99 	bl	8008ee0 <u8g2_DrawCircle>
    u8g2_DrawCircle(&u8g2, 24 + a, 20 + 32, 5, U8G2_DRAW_ALL);
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	b2d9      	uxtb	r1, r3
 8007fb4:	230f      	movs	r3, #15
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2305      	movs	r3, #5
 8007fba:	2234      	movs	r2, #52	; 0x34
 8007fbc:	4804      	ldr	r0, [pc, #16]	; (8007fd0 <u8g2_disc_circle+0x78>)
 8007fbe:	f000 ff8f 	bl	8008ee0 <u8g2_DrawCircle>
}
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	0800c3ac 	.word	0x0800c3ac
 8007fd0:	2000d28c 	.word	0x2000d28c
 8007fd4:	0800c408 	.word	0x0800c408

08007fd8 <u8g2_string>:

void u8g2_string(uint8_t a)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
    u8g2_SetFontDirection(&u8g2, 0);
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4819      	ldr	r0, [pc, #100]	; (800804c <u8g2_string+0x74>)
 8007fe6:	f001 fecf 	bl	8009d88 <u8g2_SetFontDirection>
    u8g2_DrawStr(&u8g2, 70 + a, 31, " 0");
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	3346      	adds	r3, #70	; 0x46
 8007fee:	b2d9      	uxtb	r1, r3
 8007ff0:	4b17      	ldr	r3, [pc, #92]	; (8008050 <u8g2_string+0x78>)
 8007ff2:	221f      	movs	r2, #31
 8007ff4:	4815      	ldr	r0, [pc, #84]	; (800804c <u8g2_string+0x74>)
 8007ff6:	f001 fddb 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_SetFontDirection(&u8g2, 1);
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4813      	ldr	r0, [pc, #76]	; (800804c <u8g2_string+0x74>)
 8007ffe:	f001 fec3 	bl	8009d88 <u8g2_SetFontDirection>
    u8g2_DrawStr(&u8g2, 68, 0 + a, " 90");
 8008002:	79fa      	ldrb	r2, [r7, #7]
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <u8g2_string+0x7c>)
 8008006:	2144      	movs	r1, #68	; 0x44
 8008008:	4810      	ldr	r0, [pc, #64]	; (800804c <u8g2_string+0x74>)
 800800a:	f001 fdd1 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_SetFontDirection(&u8g2, 2);
 800800e:	2102      	movs	r1, #2
 8008010:	480e      	ldr	r0, [pc, #56]	; (800804c <u8g2_string+0x74>)
 8008012:	f001 feb9 	bl	8009d88 <u8g2_SetFontDirection>
    u8g2_DrawStr(&u8g2, 70 - a, 31, " 180");
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	f1c3 0346 	rsb	r3, r3, #70	; 0x46
 800801c:	b2d9      	uxtb	r1, r3
 800801e:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <u8g2_string+0x80>)
 8008020:	221f      	movs	r2, #31
 8008022:	480a      	ldr	r0, [pc, #40]	; (800804c <u8g2_string+0x74>)
 8008024:	f001 fdc4 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_SetFontDirection(&u8g2, 3);
 8008028:	2103      	movs	r1, #3
 800802a:	4808      	ldr	r0, [pc, #32]	; (800804c <u8g2_string+0x74>)
 800802c:	f001 feac 	bl	8009d88 <u8g2_SetFontDirection>
    u8g2_DrawStr(&u8g2, 72, 64 - a, " 270");
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008036:	b2da      	uxtb	r2, r3
 8008038:	4b08      	ldr	r3, [pc, #32]	; (800805c <u8g2_string+0x84>)
 800803a:	2148      	movs	r1, #72	; 0x48
 800803c:	4803      	ldr	r0, [pc, #12]	; (800804c <u8g2_string+0x74>)
 800803e:	f001 fdb7 	bl	8009bb0 <u8g2_DrawStr>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000d28c 	.word	0x2000d28c
 8008050:	0800c414 	.word	0x0800c414
 8008054:	0800c418 	.word	0x0800c418
 8008058:	0800c41c 	.word	0x0800c41c
 800805c:	0800c424 	.word	0x0800c424

08008060 <u8g2_line>:

void u8g2_line(uint8_t a)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af02      	add	r7, sp, #8
 8008066:	4603      	mov	r3, r0
 8008068:	71fb      	strb	r3, [r7, #7]
    u8g2_DrawStr(&u8g2, 0, 0, "DrawLine");
 800806a:	4b25      	ldr	r3, [pc, #148]	; (8008100 <u8g2_line+0xa0>)
 800806c:	2200      	movs	r2, #0
 800806e:	2100      	movs	r1, #0
 8008070:	4824      	ldr	r0, [pc, #144]	; (8008104 <u8g2_line+0xa4>)
 8008072:	f001 fd9d 	bl	8009bb0 <u8g2_DrawStr>
    u8g2_DrawLine(&u8g2, 7 + a, 15, 60 - a, 60);
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	3307      	adds	r3, #7
 800807a:	b2d9      	uxtb	r1, r3
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8008082:	b2da      	uxtb	r2, r3
 8008084:	233c      	movs	r3, #60	; 0x3c
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	4613      	mov	r3, r2
 800808a:	220f      	movs	r2, #15
 800808c:	481d      	ldr	r0, [pc, #116]	; (8008104 <u8g2_line+0xa4>)
 800808e:	f002 f859 	bl	800a144 <u8g2_DrawLine>
    u8g2_DrawLine(&u8g2, 7 + a * 2, 15, 80 - a, 60);
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	3307      	adds	r3, #7
 800809a:	b2d9      	uxtb	r1, r3
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	233c      	movs	r3, #60	; 0x3c
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	4613      	mov	r3, r2
 80080aa:	220f      	movs	r2, #15
 80080ac:	4815      	ldr	r0, [pc, #84]	; (8008104 <u8g2_line+0xa4>)
 80080ae:	f002 f849 	bl	800a144 <u8g2_DrawLine>
    u8g2_DrawLine(&u8g2, 7 + a * 3, 15, 100 - a, 60);
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	461a      	mov	r2, r3
 80080b6:	0052      	lsls	r2, r2, #1
 80080b8:	4413      	add	r3, r2
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	3307      	adds	r3, #7
 80080be:	b2d9      	uxtb	r1, r3
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	233c      	movs	r3, #60	; 0x3c
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	220f      	movs	r2, #15
 80080d0:	480c      	ldr	r0, [pc, #48]	; (8008104 <u8g2_line+0xa4>)
 80080d2:	f002 f837 	bl	800a144 <u8g2_DrawLine>
    u8g2_DrawLine(&u8g2, 7 + a * 4, 15, 120 - a, 60);
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	3307      	adds	r3, #7
 80080de:	b2d9      	uxtb	r1, r3
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	233c      	movs	r3, #60	; 0x3c
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	220f      	movs	r2, #15
 80080f0:	4804      	ldr	r0, [pc, #16]	; (8008104 <u8g2_line+0xa4>)
 80080f2:	f002 f827 	bl	800a144 <u8g2_DrawLine>
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	0800c42c 	.word	0x0800c42c
 8008104:	2000d28c 	.word	0x2000d28c

08008108 <u8g2_hare>:

void u8g2_hare(uint8_t a)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af02      	add	r7, sp, #8
 800810e:	4603      	mov	r3, r0
 8008110:	71fb      	strb	r3, [r7, #7]
    u8g2_DrawStr(&u8g2, 0, 0, "DrawXBM");
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <u8g2_hare+0x54>)
 8008114:	2200      	movs	r2, #0
 8008116:	2100      	movs	r1, #0
 8008118:	4811      	ldr	r0, [pc, #68]	; (8008160 <u8g2_hare+0x58>)
 800811a:	f001 fd49 	bl	8009bb0 <u8g2_DrawStr>
    if ((a & 1) == 0)
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <u8g2_hare+0x36>
    {
        u8g2_DrawXBM(&u8g2, 0 + a, 30, hare1_width, hare1_height, hare1_bits);
 8008128:	79f9      	ldrb	r1, [r7, #7]
 800812a:	4b0e      	ldr	r3, [pc, #56]	; (8008164 <u8g2_hare+0x5c>)
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	231c      	movs	r3, #28
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	2319      	movs	r3, #25
 8008134:	221e      	movs	r2, #30
 8008136:	480a      	ldr	r0, [pc, #40]	; (8008160 <u8g2_hare+0x58>)
 8008138:	f000 fc45 	bl	80089c6 <u8g2_DrawXBM>
    }
    else
    {
        u8g2_DrawXBM(&u8g2, 0 + a, 30, hare2_width, hare2_height, hare2_bits);
    }
}
 800813c:	e009      	b.n	8008152 <u8g2_hare+0x4a>
        u8g2_DrawXBM(&u8g2, 0 + a, 30, hare2_width, hare2_height, hare2_bits);
 800813e:	79f9      	ldrb	r1, [r7, #7]
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <u8g2_hare+0x60>)
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	231c      	movs	r3, #28
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	231e      	movs	r3, #30
 800814a:	221e      	movs	r2, #30
 800814c:	4804      	ldr	r0, [pc, #16]	; (8008160 <u8g2_hare+0x58>)
 800814e:	f000 fc3a 	bl	80089c6 <u8g2_DrawXBM>
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	0800c438 	.word	0x0800c438
 8008160:	2000d28c 	.word	0x2000d28c
 8008164:	20000010 	.word	0x20000010
 8008168:	20000080 	.word	0x20000080

0800816c <draw>:
    u8g2_prepare();
    u8g2_DrawXBM(&u8g2, 0, 64, testImg_width, testImg_height, testImg_bits);
}

void draw(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
    u8g2_prepare();
 8008170:	f7ff fde8 	bl	8007d44 <u8g2_prepare>
    switch (picture)
 8008174:	4b28      	ldr	r3, [pc, #160]	; (8008218 <draw+0xac>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b06      	cmp	r3, #6
 800817a:	d84a      	bhi.n	8008212 <draw+0xa6>
 800817c:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <draw+0x18>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	080081a1 	.word	0x080081a1
 8008188:	080081b3 	.word	0x080081b3
 800818c:	080081b9 	.word	0x080081b9
 8008190:	080081cb 	.word	0x080081cb
 8008194:	080081dd 	.word	0x080081dd
 8008198:	080081ef 	.word	0x080081ef
 800819c:	08008201 	.word	0x08008201
    {
        case 0:
            max = 150;
 80081a0:	4b1e      	ldr	r3, [pc, #120]	; (800821c <draw+0xb0>)
 80081a2:	2296      	movs	r2, #150	; 0x96
 80081a4:	701a      	strb	r2, [r3, #0]
            u8g2_me(step);
 80081a6:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <draw+0xb4>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fde4 	bl	8007d78 <u8g2_me>
            break;
 80081b0:	e02f      	b.n	8008212 <draw+0xa6>
        case 1:
            u8g2_drawLogo();
 80081b2:	f7ff fe25 	bl	8007e00 <u8g2_drawLogo>
            break;
 80081b6:	e02c      	b.n	8008212 <draw+0xa6>
        case 2:
            max = 150;
 80081b8:	4b18      	ldr	r3, [pc, #96]	; (800821c <draw+0xb0>)
 80081ba:	2296      	movs	r2, #150	; 0x96
 80081bc:	701a      	strb	r2, [r3, #0]
            u8g2_box_frame(step);
 80081be:	4b18      	ldr	r3, [pc, #96]	; (8008220 <draw+0xb4>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fe8c 	bl	8007ee0 <u8g2_box_frame>
            break;
 80081c8:	e023      	b.n	8008212 <draw+0xa6>
        case 3:
            max = 150;
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <draw+0xb0>)
 80081cc:	2296      	movs	r2, #150	; 0x96
 80081ce:	701a      	strb	r2, [r3, #0]
            u8g2_disc_circle(step);
 80081d0:	4b13      	ldr	r3, [pc, #76]	; (8008220 <draw+0xb4>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff febf 	bl	8007f58 <u8g2_disc_circle>
            break;
 80081da:	e01a      	b.n	8008212 <draw+0xa6>
        case 4:
            max = 60;
 80081dc:	4b0f      	ldr	r3, [pc, #60]	; (800821c <draw+0xb0>)
 80081de:	223c      	movs	r2, #60	; 0x3c
 80081e0:	701a      	strb	r2, [r3, #0]
            u8g2_string(step);
 80081e2:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <draw+0xb4>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fef6 	bl	8007fd8 <u8g2_string>
            break;
 80081ec:	e011      	b.n	8008212 <draw+0xa6>
        case 5:
            max = 120;
 80081ee:	4b0b      	ldr	r3, [pc, #44]	; (800821c <draw+0xb0>)
 80081f0:	2278      	movs	r2, #120	; 0x78
 80081f2:	701a      	strb	r2, [r3, #0]
            u8g2_line(step);
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <draw+0xb4>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff ff31 	bl	8008060 <u8g2_line>
            break;
 80081fe:	e008      	b.n	8008212 <draw+0xa6>
        case 6:
            max = 120;
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <draw+0xb0>)
 8008202:	2278      	movs	r2, #120	; 0x78
 8008204:	701a      	strb	r2, [r3, #0]
            u8g2_hare(step);
 8008206:	4b06      	ldr	r3, [pc, #24]	; (8008220 <draw+0xb4>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff ff7c 	bl	8008108 <u8g2_hare>
            break;
 8008210:	bf00      	nop
    }
}
 8008212:	bf00      	nop
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	200000f1 	.word	0x200000f1
 800821c:	2000d310 	.word	0x2000d310
 8008220:	200000f0 	.word	0x200000f0

08008224 <u8x8_stm32_gpio_and_delay_cb>:

uint8_t u8x8_stm32_gpio_and_delay_cb(U8X8_UNUSED u8x8_t* u8x8, U8X8_UNUSED uint8_t msg,
        U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void* arg_ptr)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	607b      	str	r3, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	72fb      	strb	r3, [r7, #11]
 8008232:	4613      	mov	r3, r2
 8008234:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 8008236:	7afb      	ldrb	r3, [r7, #11]
 8008238:	3b28      	subs	r3, #40	; 0x28
 800823a:	2b27      	cmp	r3, #39	; 0x27
 800823c:	d852      	bhi.n	80082e4 <u8x8_stm32_gpio_and_delay_cb+0xc0>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <u8x8_stm32_gpio_and_delay_cb+0x20>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	080082e5 	.word	0x080082e5
 8008248:	080082e5 	.word	0x080082e5
 800824c:	080082e5 	.word	0x080082e5
 8008250:	080082e5 	.word	0x080082e5
 8008254:	080082e5 	.word	0x080082e5
 8008258:	080082e5 	.word	0x080082e5
 800825c:	080082e5 	.word	0x080082e5
 8008260:	080082e5 	.word	0x080082e5
 8008264:	080082e5 	.word	0x080082e5
 8008268:	080082e5 	.word	0x080082e5
 800826c:	080082e5 	.word	0x080082e5
 8008270:	080082e5 	.word	0x080082e5
 8008274:	080082e5 	.word	0x080082e5
 8008278:	080082e5 	.word	0x080082e5
 800827c:	080082e5 	.word	0x080082e5
 8008280:	080082e5 	.word	0x080082e5
 8008284:	080082e5 	.word	0x080082e5
 8008288:	080082e5 	.word	0x080082e5
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082e5 	.word	0x080082e5
 8008294:	080082e5 	.word	0x080082e5
 8008298:	080082e5 	.word	0x080082e5
 800829c:	080082e5 	.word	0x080082e5
 80082a0:	080082e5 	.word	0x080082e5
 80082a4:	080082e5 	.word	0x080082e5
 80082a8:	080082e5 	.word	0x080082e5
 80082ac:	080082e5 	.word	0x080082e5
 80082b0:	080082e5 	.word	0x080082e5
 80082b4:	080082e5 	.word	0x080082e5
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	080082e5 	.word	0x080082e5
 80082cc:	080082e5 	.word	0x080082e5
 80082d0:	080082e5 	.word	0x080082e5
 80082d4:	080082e5 	.word	0x080082e5
 80082d8:	080082e5 	.word	0x080082e5
 80082dc:	080082e5 	.word	0x080082e5
 80082e0:	080082e5 	.word	0x080082e5
            break;                        // arg_int=1: Input dir with pullup high for I2C clock pin
        case U8X8_MSG_GPIO_I2C_DATA:                        // arg_int=0: Output low at I2C data pin
            break;                         // arg_int=1: Input dir with pullup high for I2C data pin

    }
    return 1;
 80082e4:	2301      	movs	r3, #1
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop

080082f4 <u8x8_byte_hw_i2c>:
//     break;
//   default:
//     u8x8_SetGPIOResult(u8x8, 1);    */              // default return value

uint8_t u8x8_byte_hw_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	607b      	str	r3, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	72fb      	strb	r3, [r7, #11]
 8008302:	4613      	mov	r3, r2
 8008304:	72bb      	strb	r3, [r7, #10]
    uint8_t* ptr;
    static uint8_t buffer_count;
    static uint8_t buffer[DATA_BUFFER_SIZE + 1]; //the size of buffer depends on how many pages are transfered at once
                                                 //e.g. one page are 128byte and one byte more for command

    switch (msg)
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	3b14      	subs	r3, #20
 800830a:	2b0c      	cmp	r3, #12
 800830c:	d848      	bhi.n	80083a0 <u8x8_byte_hw_i2c+0xac>
 800830e:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <u8x8_byte_hw_i2c+0x20>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	080083a5 	.word	0x080083a5
 8008318:	080083a1 	.word	0x080083a1
 800831c:	080083a1 	.word	0x080083a1
 8008320:	08008349 	.word	0x08008349
 8008324:	0800837f 	.word	0x0800837f
 8008328:	08008387 	.word	0x08008387
 800832c:	080083a1 	.word	0x080083a1
 8008330:	080083a1 	.word	0x080083a1
 8008334:	080083a1 	.word	0x080083a1
 8008338:	080083a1 	.word	0x080083a1
 800833c:	080083a1 	.word	0x080083a1
 8008340:	080083a1 	.word	0x080083a1
 8008344:	080083a5 	.word	0x080083a5
    {
        case U8X8_MSG_BYTE_SEND:                                    //collect
        {
            ptr = arg_ptr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
            for (int i = 1; i <= arg_int; i++)
 800834c:	2301      	movs	r3, #1
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	e010      	b.n	8008374 <u8x8_byte_hw_i2c+0x80>
            {
                buffer[buffer_count] = *(ptr++);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	617a      	str	r2, [r7, #20]
 8008358:	4a15      	ldr	r2, [pc, #84]	; (80083b0 <u8x8_byte_hw_i2c+0xbc>)
 800835a:	7812      	ldrb	r2, [r2, #0]
 800835c:	7819      	ldrb	r1, [r3, #0]
 800835e:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <u8x8_byte_hw_i2c+0xc0>)
 8008360:	5499      	strb	r1, [r3, r2]
                buffer_count++;
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <u8x8_byte_hw_i2c+0xbc>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	3301      	adds	r3, #1
 8008368:	b2da      	uxtb	r2, r3
 800836a:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <u8x8_byte_hw_i2c+0xbc>)
 800836c:	701a      	strb	r2, [r3, #0]
            for (int i = 1; i <= arg_int; i++)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	7abb      	ldrb	r3, [r7, #10]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	ddea      	ble.n	8008352 <u8x8_byte_hw_i2c+0x5e>
            }
        }
            break;
 800837c:	e013      	b.n	80083a6 <u8x8_byte_hw_i2c+0xb2>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            break;
        case U8X8_MSG_BYTE_START_TRANSFER:
            buffer_count = 0;                                               // start
 800837e:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <u8x8_byte_hw_i2c+0xbc>)
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
            break;
 8008384:	e00f      	b.n	80083a6 <u8x8_byte_hw_i2c+0xb2>
        case U8X8_MSG_BYTE_END_TRANSFER:                    // send all at once
            HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, buffer_count, I2C_TIMEOUT);
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <u8x8_byte_hw_i2c+0xbc>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b29a      	uxth	r2, r3
 800838c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	4613      	mov	r3, r2
 8008394:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <u8x8_byte_hw_i2c+0xc0>)
 8008396:	2178      	movs	r1, #120	; 0x78
 8008398:	4807      	ldr	r0, [pc, #28]	; (80083b8 <u8x8_byte_hw_i2c+0xc4>)
 800839a:	f7f9 f8ab 	bl	80014f4 <HAL_I2C_Master_Transmit>
            break;
 800839e:	e002      	b.n	80083a6 <u8x8_byte_hw_i2c+0xb2>
        default:
            return 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e001      	b.n	80083a8 <u8x8_byte_hw_i2c+0xb4>
            break;
 80083a4:	bf00      	nop
    }
    return 1;
 80083a6:	2301      	movs	r3, #1
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	2000d311 	.word	0x2000d311
 80083b4:	2000d314 	.word	0x2000d314
 80083b8:	2000d53c 	.word	0x2000d53c

080083bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083c2:	2300      	movs	r3, #0
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	4b12      	ldr	r3, [pc, #72]	; (8008410 <HAL_MspInit+0x54>)
 80083c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ca:	4a11      	ldr	r2, [pc, #68]	; (8008410 <HAL_MspInit+0x54>)
 80083cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083d0:	6453      	str	r3, [r2, #68]	; 0x44
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <HAL_MspInit+0x54>)
 80083d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083da:	607b      	str	r3, [r7, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083de:	2300      	movs	r3, #0
 80083e0:	603b      	str	r3, [r7, #0]
 80083e2:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <HAL_MspInit+0x54>)
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <HAL_MspInit+0x54>)
 80083e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ec:	6413      	str	r3, [r2, #64]	; 0x40
 80083ee:	4b08      	ldr	r3, [pc, #32]	; (8008410 <HAL_MspInit+0x54>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80083fa:	2200      	movs	r2, #0
 80083fc:	210f      	movs	r1, #15
 80083fe:	f06f 0001 	mvn.w	r0, #1
 8008402:	f7f8 f9b7 	bl	8000774 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40023800 	.word	0x40023800

08008414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b08c      	sub	sp, #48	; 0x30
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8008424:	2200      	movs	r2, #0
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	2037      	movs	r0, #55	; 0x37
 800842a:	f7f8 f9a3 	bl	8000774 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 800842e:	2037      	movs	r0, #55	; 0x37
 8008430:	f7f8 f9bc 	bl	80007ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	4b1f      	ldr	r3, [pc, #124]	; (80084b8 <HAL_InitTick+0xa4>)
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <HAL_InitTick+0xa4>)
 800843e:	f043 0320 	orr.w	r3, r3, #32
 8008442:	6413      	str	r3, [r2, #64]	; 0x40
 8008444:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <HAL_InitTick+0xa4>)
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008450:	f107 0210 	add.w	r2, r7, #16
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7f9 ffb4 	bl	80023c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008460:	f7f9 ff8a 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8008464:	4603      	mov	r3, r0
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	4a13      	ldr	r2, [pc, #76]	; (80084bc <HAL_InitTick+0xa8>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	0c9b      	lsrs	r3, r3, #18
 8008474:	3b01      	subs	r3, #1
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8008478:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <HAL_InitTick+0xac>)
 800847a:	4a12      	ldr	r2, [pc, #72]	; (80084c4 <HAL_InitTick+0xb0>)
 800847c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <HAL_InitTick+0xac>)
 8008480:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008484:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8008486:	4a0e      	ldr	r2, [pc, #56]	; (80084c0 <HAL_InitTick+0xac>)
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <HAL_InitTick+0xac>)
 800848e:	2200      	movs	r2, #0
 8008490:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008492:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <HAL_InitTick+0xac>)
 8008494:	2200      	movs	r2, #0
 8008496:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8008498:	4809      	ldr	r0, [pc, #36]	; (80084c0 <HAL_InitTick+0xac>)
 800849a:	f7fa fa79 	bl	8002990 <HAL_TIM_Base_Init>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80084a4:	4806      	ldr	r0, [pc, #24]	; (80084c0 <HAL_InitTick+0xac>)
 80084a6:	f7fa fa9e 	bl	80029e6 <HAL_TIM_Base_Start_IT>
 80084aa:	4603      	mov	r3, r0
 80084ac:	e000      	b.n	80084b0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3730      	adds	r7, #48	; 0x30
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40023800 	.word	0x40023800
 80084bc:	431bde83 	.word	0x431bde83
 80084c0:	2000d5ec 	.word	0x2000d5ec
 80084c4:	40001400 	.word	0x40001400

080084c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80084cc:	bf00      	nop
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084d6:	b480      	push	{r7}
 80084d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084da:	e7fe      	b.n	80084da <HardFault_Handler+0x4>

080084dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084e0:	e7fe      	b.n	80084e0 <MemManage_Handler+0x4>

080084e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084e2:	b480      	push	{r7}
 80084e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084e6:	e7fe      	b.n	80084e6 <BusFault_Handler+0x4>

080084e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084ec:	e7fe      	b.n	80084ec <UsageFault_Handler+0x4>

080084ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084ee:	b480      	push	{r7}
 80084f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084f2:	bf00      	nop
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008500:	4802      	ldr	r0, [pc, #8]	; (800850c <USART1_IRQHandler+0x10>)
 8008502:	f7fa fe47 	bl	8003194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008506:	bf00      	nop
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	2000d66c 	.word	0x2000d66c

08008510 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008514:	4802      	ldr	r0, [pc, #8]	; (8008520 <TIM7_IRQHandler+0x10>)
 8008516:	f7fa fa8a 	bl	8002a2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800851a:	bf00      	nop
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000d5ec 	.word	0x2000d5ec

08008524 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008528:	4803      	ldr	r0, [pc, #12]	; (8008538 <DMA2_Stream7_IRQHandler+0x14>)
 800852a:	f7f8 fa75 	bl	8000a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
  Usart_DmaTxComplete = 1;
 800852e:	4b03      	ldr	r3, [pc, #12]	; (800853c <DMA2_Stream7_IRQHandler+0x18>)
 8008530:	2201      	movs	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008534:	bf00      	nop
 8008536:	bd80      	pop	{r7, pc}
 8008538:	2000d6ac 	.word	0x2000d6ac
 800853c:	2000d590 	.word	0x2000d590

08008540 <_read>:
    {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char* ptr, int len)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e00a      	b.n	8008568 <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8008552:	f3af 8000 	nop.w
 8008556:	4601      	mov	r1, r0
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	60ba      	str	r2, [r7, #8]
 800855e:	b2ca      	uxtb	r2, r1
 8008560:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	3301      	adds	r3, #1
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	dbf0      	blt.n	8008552 <_read+0x12>
    }

    return len;
 8008570:	687b      	ldr	r3, [r7, #4]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <_write>:

__attribute__((weak)) int _write(int file, char* ptr, int len)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]
 800858a:	e009      	b.n	80085a0 <_write+0x26>
    {
        __io_putchar(*ptr++);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	60ba      	str	r2, [r7, #8]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	3301      	adds	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	dbf1      	blt.n	800858c <_write+0x12>
    }
    return len;
 80085a8:	687b      	ldr	r3, [r7, #4]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <_close>:

int _close(int file)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
    return -1;
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <_fstat>:

int _fstat(int file, struct stat* st)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80085da:	605a      	str	r2, [r3, #4]
    return 0;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <_lseek>:
{
    return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
    return 0;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
 **/
caddr_t _sbrk(int incr)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char* heap_end;
    char* prev_heap_end;

    if (heap_end == 0)
 800860c:	4b11      	ldr	r3, [pc, #68]	; (8008654 <_sbrk+0x50>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <_sbrk+0x16>
        heap_end = &end;
 8008614:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <_sbrk+0x50>)
 8008616:	4a10      	ldr	r2, [pc, #64]	; (8008658 <_sbrk+0x54>)
 8008618:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <_sbrk+0x50>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8008620:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <_sbrk+0x50>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4413      	add	r3, r2
 8008628:	466a      	mov	r2, sp
 800862a:	4293      	cmp	r3, r2
 800862c:	d907      	bls.n	800863e <_sbrk+0x3a>
    {
        errno = ENOMEM;
 800862e:	f002 fbdb 	bl	800ade8 <__errno>
 8008632:	4602      	mov	r2, r0
 8008634:	230c      	movs	r3, #12
 8008636:	6013      	str	r3, [r2, #0]
        return (caddr_t) -1;
 8008638:	f04f 33ff 	mov.w	r3, #4294967295
 800863c:	e006      	b.n	800864c <_sbrk+0x48>
    }

    heap_end += incr;
 800863e:	4b05      	ldr	r3, [pc, #20]	; (8008654 <_sbrk+0x50>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	4a03      	ldr	r2, [pc, #12]	; (8008654 <_sbrk+0x50>)
 8008648:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
 800864a:	68fb      	ldr	r3, [r7, #12]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	2000d398 	.word	0x2000d398
 8008658:	2000d710 	.word	0x2000d710

0800865c <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008660:	4b08      	ldr	r3, [pc, #32]	; (8008684 <SystemInit+0x28>)
 8008662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008666:	4a07      	ldr	r2, [pc, #28]	; (8008684 <SystemInit+0x28>)
 8008668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800866c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008670:	4b04      	ldr	r3, [pc, #16]	; (8008684 <SystemInit+0x28>)
 8008672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008676:	609a      	str	r2, [r3, #8]
#endif
}
 8008678:	bf00      	nop
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	e000ed00 	.word	0xe000ed00

08008688 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800868e:	463b      	mov	r3, r7
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <MX_TIM6_Init+0x60>)
 8008698:	4a14      	ldr	r2, [pc, #80]	; (80086ec <MX_TIM6_Init+0x64>)
 800869a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800869c:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <MX_TIM6_Init+0x60>)
 800869e:	2200      	movs	r2, #0
 80086a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <MX_TIM6_Init+0x60>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <MX_TIM6_Init+0x60>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086ae:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <MX_TIM6_Init+0x60>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80086b4:	480c      	ldr	r0, [pc, #48]	; (80086e8 <MX_TIM6_Init+0x60>)
 80086b6:	f7fa f96b 	bl	8002990 <HAL_TIM_Base_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80086c0:	f7ff fa46 	bl	8007b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80086cc:	463b      	mov	r3, r7
 80086ce:	4619      	mov	r1, r3
 80086d0:	4805      	ldr	r0, [pc, #20]	; (80086e8 <MX_TIM6_Init+0x60>)
 80086d2:	f7fa fb7d 	bl	8002dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80086dc:	f7ff fa38 	bl	8007b50 <Error_Handler>
  }

}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	2000d62c 	.word	0x2000d62c
 80086ec:	40001000 	.word	0x40001000

080086f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a0b      	ldr	r2, [pc, #44]	; (800872c <HAL_TIM_Base_MspInit+0x3c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d10d      	bne.n	800871e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <HAL_TIM_Base_MspInit+0x40>)
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	4a09      	ldr	r2, [pc, #36]	; (8008730 <HAL_TIM_Base_MspInit+0x40>)
 800870c:	f043 0310 	orr.w	r3, r3, #16
 8008710:	6413      	str	r3, [r2, #64]	; 0x40
 8008712:	4b07      	ldr	r3, [pc, #28]	; (8008730 <HAL_TIM_Base_MspInit+0x40>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40001000 	.word	0x40001000
 8008730:	40023800 	.word	0x40023800

08008734 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008738:	4b11      	ldr	r3, [pc, #68]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 800873a:	4a12      	ldr	r2, [pc, #72]	; (8008784 <MX_USART1_UART_Init+0x50>)
 800873c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 8008740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008746:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 8008748:	2200      	movs	r2, #0
 800874a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800874c:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 800874e:	2200      	movs	r2, #0
 8008750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 8008754:	2200      	movs	r2, #0
 8008756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008758:	4b09      	ldr	r3, [pc, #36]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 800875a:	220c      	movs	r2, #12
 800875c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 8008760:	2200      	movs	r2, #0
 8008762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 8008766:	2200      	movs	r2, #0
 8008768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800876a:	4805      	ldr	r0, [pc, #20]	; (8008780 <MX_USART1_UART_Init+0x4c>)
 800876c:	f7fa fbc0 	bl	8002ef0 <HAL_UART_Init>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008776:	f7ff f9eb 	bl	8007b50 <Error_Handler>
  }

}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	2000d66c 	.word	0x2000d66c
 8008784:	40011000 	.word	0x40011000

08008788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008790:	f107 0314 	add.w	r3, r7, #20
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a36      	ldr	r2, [pc, #216]	; (8008880 <HAL_UART_MspInit+0xf8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d165      	bne.n	8008876 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80087aa:	2300      	movs	r3, #0
 80087ac:	613b      	str	r3, [r7, #16]
 80087ae:	4b35      	ldr	r3, [pc, #212]	; (8008884 <HAL_UART_MspInit+0xfc>)
 80087b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b2:	4a34      	ldr	r2, [pc, #208]	; (8008884 <HAL_UART_MspInit+0xfc>)
 80087b4:	f043 0310 	orr.w	r3, r3, #16
 80087b8:	6453      	str	r3, [r2, #68]	; 0x44
 80087ba:	4b32      	ldr	r3, [pc, #200]	; (8008884 <HAL_UART_MspInit+0xfc>)
 80087bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087be:	f003 0310 	and.w	r3, r3, #16
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	4b2e      	ldr	r3, [pc, #184]	; (8008884 <HAL_UART_MspInit+0xfc>)
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	4a2d      	ldr	r2, [pc, #180]	; (8008884 <HAL_UART_MspInit+0xfc>)
 80087d0:	f043 0301 	orr.w	r3, r3, #1
 80087d4:	6313      	str	r3, [r2, #48]	; 0x30
 80087d6:	4b2b      	ldr	r3, [pc, #172]	; (8008884 <HAL_UART_MspInit+0xfc>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80087e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80087e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e8:	2302      	movs	r3, #2
 80087ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ec:	2300      	movs	r3, #0
 80087ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f0:	2303      	movs	r3, #3
 80087f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80087f4:	2307      	movs	r3, #7
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087f8:	f107 0314 	add.w	r3, r7, #20
 80087fc:	4619      	mov	r1, r3
 80087fe:	4822      	ldr	r0, [pc, #136]	; (8008888 <HAL_UART_MspInit+0x100>)
 8008800:	f7f8 fb72 	bl	8000ee8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008804:	4b21      	ldr	r3, [pc, #132]	; (800888c <HAL_UART_MspInit+0x104>)
 8008806:	4a22      	ldr	r2, [pc, #136]	; (8008890 <HAL_UART_MspInit+0x108>)
 8008808:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800880a:	4b20      	ldr	r3, [pc, #128]	; (800888c <HAL_UART_MspInit+0x104>)
 800880c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008810:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008812:	4b1e      	ldr	r3, [pc, #120]	; (800888c <HAL_UART_MspInit+0x104>)
 8008814:	2240      	movs	r2, #64	; 0x40
 8008816:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008818:	4b1c      	ldr	r3, [pc, #112]	; (800888c <HAL_UART_MspInit+0x104>)
 800881a:	2200      	movs	r2, #0
 800881c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800881e:	4b1b      	ldr	r3, [pc, #108]	; (800888c <HAL_UART_MspInit+0x104>)
 8008820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008824:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008826:	4b19      	ldr	r3, [pc, #100]	; (800888c <HAL_UART_MspInit+0x104>)
 8008828:	2200      	movs	r2, #0
 800882a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800882c:	4b17      	ldr	r3, [pc, #92]	; (800888c <HAL_UART_MspInit+0x104>)
 800882e:	2200      	movs	r2, #0
 8008830:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008832:	4b16      	ldr	r3, [pc, #88]	; (800888c <HAL_UART_MspInit+0x104>)
 8008834:	2200      	movs	r2, #0
 8008836:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008838:	4b14      	ldr	r3, [pc, #80]	; (800888c <HAL_UART_MspInit+0x104>)
 800883a:	2200      	movs	r2, #0
 800883c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <HAL_UART_MspInit+0x104>)
 8008840:	2200      	movs	r2, #0
 8008842:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008844:	4811      	ldr	r0, [pc, #68]	; (800888c <HAL_UART_MspInit+0x104>)
 8008846:	f7f7 ffbf 	bl	80007c8 <HAL_DMA_Init>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008850:	f7ff f97e 	bl	8007b50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a0d      	ldr	r2, [pc, #52]	; (800888c <HAL_UART_MspInit+0x104>)
 8008858:	631a      	str	r2, [r3, #48]	; 0x30
 800885a:	4a0c      	ldr	r2, [pc, #48]	; (800888c <HAL_UART_MspInit+0x104>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8008860:	2200      	movs	r2, #0
 8008862:	2105      	movs	r1, #5
 8008864:	2025      	movs	r0, #37	; 0x25
 8008866:	f7f7 ff85 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800886a:	2025      	movs	r0, #37	; 0x25
 800886c:	f7f7 ff9e 	bl	80007ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    Usart_DmaTxComplete = 1;
 8008870:	4b08      	ldr	r3, [pc, #32]	; (8008894 <HAL_UART_MspInit+0x10c>)
 8008872:	2201      	movs	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008876:	bf00      	nop
 8008878:	3728      	adds	r7, #40	; 0x28
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40011000 	.word	0x40011000
 8008884:	40023800 	.word	0x40023800
 8008888:	40020000 	.word	0x40020000
 800888c:	2000d6ac 	.word	0x2000d6ac
 8008890:	400264b8 	.word	0x400264b8
 8008894:	2000d590 	.word	0x2000d590

08008898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80088d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800889c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800889e:	e003      	b.n	80088a8 <LoopCopyDataInit>

080088a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80088a0:	4b0c      	ldr	r3, [pc, #48]	; (80088d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80088a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80088a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80088a6:	3104      	adds	r1, #4

080088a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80088a8:	480b      	ldr	r0, [pc, #44]	; (80088d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80088ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80088ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80088b0:	d3f6      	bcc.n	80088a0 <CopyDataInit>
  ldr  r2, =_sbss
 80088b2:	4a0b      	ldr	r2, [pc, #44]	; (80088e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80088b4:	e002      	b.n	80088bc <LoopFillZerobss>

080088b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80088b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80088b8:	f842 3b04 	str.w	r3, [r2], #4

080088bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80088bc:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80088be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80088c0:	d3f9      	bcc.n	80088b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80088c2:	f7ff fecb 	bl	800865c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80088c6:	f002 fa95 	bl	800adf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088ca:	f7ff f871 	bl	80079b0 <main>
  bx  lr    
 80088ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80088d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80088d4:	0800f490 	.word	0x0800f490
  ldr  r0, =_sdata
 80088d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80088dc:	2000015c 	.word	0x2000015c
  ldr  r2, =_sbss
 80088e0:	2000015c 	.word	0x2000015c
  ldr  r3, = _ebss
 80088e4:	2000d710 	.word	0x2000d710

080088e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80088e8:	e7fe      	b.n	80088e8 <ADC_IRQHandler>

080088ea <u8g2_DrawHXBM>:
        h--;
    }
}

void u8g2_DrawHXBM(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t* b)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af02      	add	r7, sp, #8
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	4608      	mov	r0, r1
 80088f4:	4611      	mov	r1, r2
 80088f6:	461a      	mov	r2, r3
 80088f8:	4603      	mov	r3, r0
 80088fa:	70fb      	strb	r3, [r7, #3]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70bb      	strb	r3, [r7, #2]
 8008900:	4613      	mov	r3, r2
 8008902:	707b      	strb	r3, [r7, #1]
    uint8_t mask;
    uint8_t color = u8g2->draw_color;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800890a:	73bb      	strb	r3, [r7, #14]
    uint8_t ncolor = (color == 0 ? 1 : 0);
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bf0c      	ite	eq
 8008912:	2301      	moveq	r3, #1
 8008914:	2300      	movne	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
    if (u8g2_IsIntersection(u8g2, x, y, x + len, y + 1) == 0)
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	787b      	ldrb	r3, [r7, #1]
 800891e:	4413      	add	r3, r2
 8008920:	b2d8      	uxtb	r0, r3
 8008922:	78bb      	ldrb	r3, [r7, #2]
 8008924:	3301      	adds	r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	78ba      	ldrb	r2, [r7, #2]
 800892a:	78f9      	ldrb	r1, [r7, #3]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	4603      	mov	r3, r0
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 fbdc 	bl	800a0ee <u8g2_IsIntersection>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d040      	beq.n	80089be <u8g2_DrawHXBM+0xd4>
        return;
#endif /* U8G2_WITH_INTERSECTION */

    mask = 1;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
    while (len > 0)
 8008940:	e035      	b.n	80089ae <u8g2_DrawHXBM+0xc4>
    {
        if (*b & mask)
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	781a      	ldrb	r2, [r3, #0]
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	4013      	ands	r3, r2
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00c      	beq.n	800896a <u8g2_DrawHXBM+0x80>
        {
            u8g2->draw_color = color;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	7bba      	ldrb	r2, [r7, #14]
 8008954:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8008958:	78ba      	ldrb	r2, [r7, #2]
 800895a:	78f9      	ldrb	r1, [r7, #3]
 800895c:	2300      	movs	r3, #0
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2301      	movs	r3, #1
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 fa8f 	bl	8009e86 <u8g2_DrawHVLine>
 8008968:	e010      	b.n	800898c <u8g2_DrawHXBM+0xa2>
        }
        else if (u8g2->bitmap_transparency == 0)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <u8g2_DrawHXBM+0xa2>
        {
            u8g2->draw_color = ncolor;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	7b7a      	ldrb	r2, [r7, #13]
 8008978:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800897c:	78ba      	ldrb	r2, [r7, #2]
 800897e:	78f9      	ldrb	r1, [r7, #3]
 8008980:	2300      	movs	r3, #0
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2301      	movs	r3, #1
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fa7d 	bl	8009e86 <u8g2_DrawHVLine>
        }
        x++;
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	3301      	adds	r3, #1
 8008990:	70fb      	strb	r3, [r7, #3]
        mask <<= 1;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	73fb      	strb	r3, [r7, #15]
        if (mask == 0)
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <u8g2_DrawHXBM+0xbe>
        {
            mask = 1;
 800899e:	2301      	movs	r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
            b++;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	3301      	adds	r3, #1
 80089a6:	61bb      	str	r3, [r7, #24]
        }
        len--;
 80089a8:	787b      	ldrb	r3, [r7, #1]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	707b      	strb	r3, [r7, #1]
    while (len > 0)
 80089ae:	787b      	ldrb	r3, [r7, #1]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1c6      	bne.n	8008942 <u8g2_DrawHXBM+0x58>
    }
    u8g2->draw_color = color;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7bba      	ldrb	r2, [r7, #14]
 80089b8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80089bc:	e000      	b.n	80089c0 <u8g2_DrawHXBM+0xd6>
        return;
 80089be:	bf00      	nop
}
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <u8g2_DrawXBM>:

void u8g2_DrawXBM(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h,
        const uint8_t* bitmap)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af02      	add	r7, sp, #8
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	4608      	mov	r0, r1
 80089d0:	4611      	mov	r1, r2
 80089d2:	461a      	mov	r2, r3
 80089d4:	4603      	mov	r3, r0
 80089d6:	70fb      	strb	r3, [r7, #3]
 80089d8:	460b      	mov	r3, r1
 80089da:	70bb      	strb	r3, [r7, #2]
 80089dc:	4613      	mov	r3, r2
 80089de:	707b      	strb	r3, [r7, #1]
    u8g2_uint_t blen;
    blen = w;
 80089e0:	787b      	ldrb	r3, [r7, #1]
 80089e2:	73fb      	strb	r3, [r7, #15]
    blen += 7;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	3307      	adds	r3, #7
 80089e8:	73fb      	strb	r3, [r7, #15]
    blen >>= 3;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
    if (u8g2_IsIntersection(u8g2, x, y, x + w, y + h) == 0)
 80089f0:	78fa      	ldrb	r2, [r7, #3]
 80089f2:	787b      	ldrb	r3, [r7, #1]
 80089f4:	4413      	add	r3, r2
 80089f6:	b2d8      	uxtb	r0, r3
 80089f8:	78ba      	ldrb	r2, [r7, #2]
 80089fa:	7e3b      	ldrb	r3, [r7, #24]
 80089fc:	4413      	add	r3, r2
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	78ba      	ldrb	r2, [r7, #2]
 8008a02:	78f9      	ldrb	r1, [r7, #3]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4603      	mov	r3, r0
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fb70 	bl	800a0ee <u8g2_IsIntersection>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d017      	beq.n	8008a44 <u8g2_DrawXBM+0x7e>
        return;
#endif /* U8G2_WITH_INTERSECTION */

    while (h > 0)
 8008a14:	e012      	b.n	8008a3c <u8g2_DrawXBM+0x76>
    {
        u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8008a16:	7878      	ldrb	r0, [r7, #1]
 8008a18:	78ba      	ldrb	r2, [r7, #2]
 8008a1a:	78f9      	ldrb	r1, [r7, #3]
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	4603      	mov	r3, r0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7ff ff61 	bl	80088ea <u8g2_DrawHXBM>
        bitmap += blen;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	61fb      	str	r3, [r7, #28]
        y++;
 8008a30:	78bb      	ldrb	r3, [r7, #2]
 8008a32:	3301      	adds	r3, #1
 8008a34:	70bb      	strb	r3, [r7, #2]
        h--;
 8008a36:	7e3b      	ldrb	r3, [r7, #24]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	763b      	strb	r3, [r7, #24]
    while (h > 0)
 8008a3c:	7e3b      	ldrb	r3, [r7, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e9      	bne.n	8008a16 <u8g2_DrawXBM+0x50>
 8008a42:	e000      	b.n	8008a46 <u8g2_DrawXBM+0x80>
        return;
 8008a44:	bf00      	nop
    }
}
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	4608      	mov	r0, r1
 8008a56:	4611      	mov	r1, r2
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	70fb      	strb	r3, [r7, #3]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70bb      	strb	r3, [r7, #2]
 8008a62:	4613      	mov	r3, r2
 8008a64:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	787b      	ldrb	r3, [r7, #1]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	b2d8      	uxtb	r0, r3
 8008a6e:	78ba      	ldrb	r2, [r7, #2]
 8008a70:	7c3b      	ldrb	r3, [r7, #16]
 8008a72:	4413      	add	r3, r2
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	78ba      	ldrb	r2, [r7, #2]
 8008a78:	78f9      	ldrb	r1, [r7, #3]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fb35 	bl	800a0ee <u8g2_IsIntersection>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d013      	beq.n	8008ab2 <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8008a8a:	e00e      	b.n	8008aaa <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8008a8c:	7878      	ldrb	r0, [r7, #1]
 8008a8e:	78ba      	ldrb	r2, [r7, #2]
 8008a90:	78f9      	ldrb	r1, [r7, #3]
 8008a92:	2300      	movs	r3, #0
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4603      	mov	r3, r0
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 f9f4 	bl	8009e86 <u8g2_DrawHVLine>
    y++;    
 8008a9e:	78bb      	ldrb	r3, [r7, #2]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	70bb      	strb	r3, [r7, #2]
    h--;
 8008aa4:	7c3b      	ldrb	r3, [r7, #16]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8008aaa:	7c3b      	ldrb	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1ed      	bne.n	8008a8c <u8g2_DrawBox+0x40>
 8008ab0:	e000      	b.n	8008ab4 <u8g2_DrawBox+0x68>
    return;
 8008ab2:	bf00      	nop
  }
}
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b086      	sub	sp, #24
 8008abe:	af02      	add	r7, sp, #8
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	70fb      	strb	r3, [r7, #3]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70bb      	strb	r3, [r7, #2]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	787b      	ldrb	r3, [r7, #1]
 8008adc:	4413      	add	r3, r2
 8008ade:	b2d8      	uxtb	r0, r3
 8008ae0:	78ba      	ldrb	r2, [r7, #2]
 8008ae2:	7e3b      	ldrb	r3, [r7, #24]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	78ba      	ldrb	r2, [r7, #2]
 8008aea:	78f9      	ldrb	r1, [r7, #3]
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	4603      	mov	r3, r0
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 fafc 	bl	800a0ee <u8g2_IsIntersection>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d03b      	beq.n	8008b74 <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8008afc:	7878      	ldrb	r0, [r7, #1]
 8008afe:	78ba      	ldrb	r2, [r7, #2]
 8008b00:	78f9      	ldrb	r1, [r7, #3]
 8008b02:	2300      	movs	r3, #0
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	4603      	mov	r3, r0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f9bc 	bl	8009e86 <u8g2_DrawHVLine>
  if (h >= 2) {
 8008b0e:	7e3b      	ldrb	r3, [r7, #24]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d930      	bls.n	8008b76 <u8g2_DrawFrame+0xbc>
    h-=2;
 8008b14:	7e3b      	ldrb	r3, [r7, #24]
 8008b16:	3b02      	subs	r3, #2
 8008b18:	763b      	strb	r3, [r7, #24]
    y++;
 8008b1a:	78bb      	ldrb	r3, [r7, #2]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8008b20:	7e3b      	ldrb	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01c      	beq.n	8008b60 <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8008b26:	7e38      	ldrb	r0, [r7, #24]
 8008b28:	78ba      	ldrb	r2, [r7, #2]
 8008b2a:	78f9      	ldrb	r1, [r7, #3]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4603      	mov	r3, r0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f9a7 	bl	8009e86 <u8g2_DrawHVLine>
      x+=w;
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	787b      	ldrb	r3, [r7, #1]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	70fb      	strb	r3, [r7, #3]
      x--;
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8008b46:	7e38      	ldrb	r0, [r7, #24]
 8008b48:	78ba      	ldrb	r2, [r7, #2]
 8008b4a:	78f9      	ldrb	r1, [r7, #3]
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4603      	mov	r3, r0
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f997 	bl	8009e86 <u8g2_DrawHVLine>
      y+=h;
 8008b58:	78ba      	ldrb	r2, [r7, #2]
 8008b5a:	7e3b      	ldrb	r3, [r7, #24]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8008b60:	7878      	ldrb	r0, [r7, #1]
 8008b62:	78ba      	ldrb	r2, [r7, #2]
 8008b64:	7bf9      	ldrb	r1, [r7, #15]
 8008b66:	2300      	movs	r3, #0
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 f98a 	bl	8009e86 <u8g2_DrawHVLine>
 8008b72:	e000      	b.n	8008b76 <u8g2_DrawFrame+0xbc>
    return;
 8008b74:	bf00      	nop
  }
}
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t* u8g2)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
    size_t cnt;
    cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	7c1b      	ldrb	r3, [r3, #16]
 8008b8a:	60fb      	str	r3, [r7, #12]
    cnt *= u8g2->tile_buf_height;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b92:	461a      	mov	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	fb02 f303 	mul.w	r3, r2, r3
 8008b9a:	60fb      	str	r3, [r7, #12]
    cnt *= 8;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	60fb      	str	r3, [r7, #12]
    memset(u8g2->tile_buf_ptr, 0, cnt);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f002 f951 	bl	800ae52 <memset>
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t* u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	70bb      	strb	r3, [r7, #2]
    uint8_t* ptr;
    uint16_t offset;
    uint8_t w;

    w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	7c1b      	ldrb	r3, [r3, #16]
 8008bce:	73fb      	strb	r3, [r7, #15]
    offset = src_tile_row;
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	81bb      	strh	r3, [r7, #12]
    ptr = u8g2->tile_buf_ptr;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd8:	60bb      	str	r3, [r7, #8]
    offset *= w;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	89ba      	ldrh	r2, [r7, #12]
 8008be0:	fb12 f303 	smulbb	r3, r2, r3
 8008be4:	81bb      	strh	r3, [r7, #12]
    offset *= 8;
 8008be6:	89bb      	ldrh	r3, [r7, #12]
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	81bb      	strh	r3, [r7, #12]
    ptr += offset;
 8008bec:	89bb      	ldrh	r3, [r7, #12]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]
    u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8008bf4:	7bf9      	ldrb	r1, [r7, #15]
 8008bf6:	78ba      	ldrb	r2, [r7, #2]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	2100      	movs	r1, #0
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f002 f822 	bl	800ac4a <u8x8_DrawTile>
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <u8g2_send_buffer>:
 For most displays, this will make the content visible to the user.
 Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
 */
static void u8g2_send_buffer(u8g2_t* u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t* u8g2)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
    uint8_t src_row;
    uint8_t src_max;
    uint8_t dest_row;
    uint8_t dest_max;

    src_row = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
    src_max = u8g2->tile_buf_height;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c20:	737b      	strb	r3, [r7, #13]
    dest_row = u8g2->tile_curr_row;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c28:	73bb      	strb	r3, [r7, #14]
    dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	7c5b      	ldrb	r3, [r3, #17]
 8008c30:	733b      	strb	r3, [r7, #12]

    do
    {
        u8g2_send_tile_row(u8g2, src_row, dest_row);
 8008c32:	7bba      	ldrb	r2, [r7, #14]
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff ffbd 	bl	8008bb8 <u8g2_send_tile_row>
        src_row++;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	3301      	adds	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
        dest_row++;
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	3301      	adds	r3, #1
 8008c48:	73bb      	strb	r3, [r7, #14]
    }
    while (src_row < src_max && dest_row < dest_max);
 8008c4a:	7bfa      	ldrb	r2, [r7, #15]
 8008c4c:	7b7b      	ldrb	r3, [r7, #13]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d203      	bcs.n	8008c5a <u8g2_send_buffer+0x4c>
 8008c52:	7bba      	ldrb	r2, [r7, #14]
 8008c54:	7b3b      	ldrb	r3, [r7, #12]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d3eb      	bcc.n	8008c32 <u8g2_send_buffer+0x24>
}
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <u8g2_SetBufferCurrTileRow>:
    u8x8_RefreshDisplay(u8g2_GetU8x8(u8g2));
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t* u8g2, uint8_t row)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
    u8g2->tile_curr_row = row;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    u8g2->cb->update_dimension(u8g2);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
    u8g2->cb->update_page_win(u8g2);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	4798      	blx	r3
}
 8008c8a:	bf00      	nop
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t* u8g2)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
    if (u8g2->is_auto_page_clear)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <u8g2_FirstPage+0x18>
    {
        u8g2_ClearBuffer(u8g2);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff ff69 	bl	8008b7c <u8g2_ClearBuffer>
    }
    u8g2_SetBufferCurrTileRow(u8g2, 0);
 8008caa:	2100      	movs	r1, #0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ffd8 	bl	8008c62 <u8g2_SetBufferCurrTileRow>
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t* u8g2)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
    uint8_t row;
    u8g2_send_buffer(u8g2);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff ffa3 	bl	8008c0e <u8g2_send_buffer>
    row = u8g2->tile_curr_row;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008cce:	73fb      	strb	r3, [r7, #15]
    row += u8g2->tile_buf_height;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4413      	add	r3, r2
 8008cda:	73fb      	strb	r3, [r7, #15]
    if (row >= u8g2_GetU8x8(u8g2)->display_info->tile_height)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	7c5b      	ldrb	r3, [r3, #17]
 8008ce2:	7bfa      	ldrb	r2, [r7, #15]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d304      	bcc.n	8008cf2 <u8g2_NextPage+0x38>
    {
        u8x8_RefreshDisplay(u8g2_GetU8x8(u8g2));
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 ffff 	bl	800acec <u8x8_RefreshDisplay>
        return 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e00d      	b.n	8008d0e <u8g2_NextPage+0x54>
    }
    if (u8g2->is_auto_page_clear)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <u8g2_NextPage+0x48>
    {
        u8g2_ClearBuffer(u8g2);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff ff3d 	bl	8008b7c <u8g2_ClearBuffer>
    }
    u8g2_SetBufferCurrTileRow(u8g2, row);
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ffab 	bl	8008c62 <u8g2_SetBufferCurrTileRow>
    return 1;
 8008d0c:	2301      	movs	r3, #1
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <u8g2_draw_circle_section>:
static void u8g2_draw_circle_section(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0,
        u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0,
        u8g2_uint_t y0, uint8_t option)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	4608      	mov	r0, r1
 8008d20:	4611      	mov	r1, r2
 8008d22:	461a      	mov	r2, r3
 8008d24:	4603      	mov	r3, r0
 8008d26:	70fb      	strb	r3, [r7, #3]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70bb      	strb	r3, [r7, #2]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if (option & U8G2_DRAW_UPPER_RIGHT)
 8008d30:	7d3b      	ldrb	r3, [r7, #20]
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d017      	beq.n	8008d6a <u8g2_draw_circle_section+0x54>
    {
        u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8008d3a:	787a      	ldrb	r2, [r7, #1]
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	4413      	add	r3, r2
 8008d40:	b2d9      	uxtb	r1, r3
 8008d42:	7c3a      	ldrb	r2, [r7, #16]
 8008d44:	78bb      	ldrb	r3, [r7, #2]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f951 	bl	8009ff4 <u8g2_DrawPixel>
        u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8008d52:	787a      	ldrb	r2, [r7, #1]
 8008d54:	78bb      	ldrb	r3, [r7, #2]
 8008d56:	4413      	add	r3, r2
 8008d58:	b2d9      	uxtb	r1, r3
 8008d5a:	7c3a      	ldrb	r2, [r7, #16]
 8008d5c:	78fb      	ldrb	r3, [r7, #3]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	461a      	mov	r2, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 f945 	bl	8009ff4 <u8g2_DrawPixel>
    }

    /* upper left */
    if (option & U8G2_DRAW_UPPER_LEFT)
 8008d6a:	7d3b      	ldrb	r3, [r7, #20]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <u8g2_draw_circle_section+0x8e>
    {
        u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8008d74:	787a      	ldrb	r2, [r7, #1]
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	b2d9      	uxtb	r1, r3
 8008d7c:	7c3a      	ldrb	r2, [r7, #16]
 8008d7e:	78bb      	ldrb	r3, [r7, #2]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 f934 	bl	8009ff4 <u8g2_DrawPixel>
        u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8008d8c:	787a      	ldrb	r2, [r7, #1]
 8008d8e:	78bb      	ldrb	r3, [r7, #2]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	b2d9      	uxtb	r1, r3
 8008d94:	7c3a      	ldrb	r2, [r7, #16]
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 f928 	bl	8009ff4 <u8g2_DrawPixel>
    }

    /* lower right */
    if (option & U8G2_DRAW_LOWER_RIGHT)
 8008da4:	7d3b      	ldrb	r3, [r7, #20]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d017      	beq.n	8008dde <u8g2_draw_circle_section+0xc8>
    {
        u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8008dae:	787a      	ldrb	r2, [r7, #1]
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	4413      	add	r3, r2
 8008db4:	b2d9      	uxtb	r1, r3
 8008db6:	7c3a      	ldrb	r2, [r7, #16]
 8008db8:	78bb      	ldrb	r3, [r7, #2]
 8008dba:	4413      	add	r3, r2
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 f917 	bl	8009ff4 <u8g2_DrawPixel>
        u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8008dc6:	787a      	ldrb	r2, [r7, #1]
 8008dc8:	78bb      	ldrb	r3, [r7, #2]
 8008dca:	4413      	add	r3, r2
 8008dcc:	b2d9      	uxtb	r1, r3
 8008dce:	7c3a      	ldrb	r2, [r7, #16]
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 f90b 	bl	8009ff4 <u8g2_DrawPixel>
    }

    /* lower left */
    if (option & U8G2_DRAW_LOWER_LEFT)
 8008dde:	7d3b      	ldrb	r3, [r7, #20]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d017      	beq.n	8008e18 <u8g2_draw_circle_section+0x102>
    {
        u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8008de8:	787a      	ldrb	r2, [r7, #1]
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	b2d9      	uxtb	r1, r3
 8008df0:	7c3a      	ldrb	r2, [r7, #16]
 8008df2:	78bb      	ldrb	r3, [r7, #2]
 8008df4:	4413      	add	r3, r2
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 f8fa 	bl	8009ff4 <u8g2_DrawPixel>
        u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8008e00:	787a      	ldrb	r2, [r7, #1]
 8008e02:	78bb      	ldrb	r3, [r7, #2]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	b2d9      	uxtb	r1, r3
 8008e08:	7c3a      	ldrb	r2, [r7, #16]
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 f8ee 	bl	8009ff4 <u8g2_DrawPixel>
    }
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad,
        uint8_t option)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4603      	mov	r3, r0
 8008e30:	70fb      	strb	r3, [r7, #3]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70bb      	strb	r3, [r7, #2]
 8008e36:	4613      	mov	r3, r2
 8008e38:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8008e3e:	7bfa      	ldrb	r2, [r7, #15]
 8008e40:	787b      	ldrb	r3, [r7, #1]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8008e50:	7b7a      	ldrb	r2, [r7, #13]
 8008e52:	787b      	ldrb	r3, [r7, #1]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8008e5a:	7b7b      	ldrb	r3, [r7, #13]
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	737b      	strb	r3, [r7, #13]
    x = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	733b      	strb	r3, [r7, #12]
    y = rad;
 8008e66:	787b      	ldrb	r3, [r7, #1]
 8008e68:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8008e6a:	78f8      	ldrb	r0, [r7, #3]
 8008e6c:	7afa      	ldrb	r2, [r7, #11]
 8008e6e:	7b39      	ldrb	r1, [r7, #12]
 8008e70:	7e3b      	ldrb	r3, [r7, #24]
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	78bb      	ldrb	r3, [r7, #2]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	4603      	mov	r3, r0
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff ff4b 	bl	8008d16 <u8g2_draw_circle_section>

    while (x < y)
 8008e80:	e026      	b.n	8008ed0 <u8g2_draw_circle+0xb0>
    {
        if (f >= 0)
 8008e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	db0b      	blt.n	8008ea2 <u8g2_draw_circle+0x82>
        {
            y--;
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	72fb      	strb	r3, [r7, #11]
            ddF_y += 2;
 8008e90:	7b7b      	ldrb	r3, [r7, #13]
 8008e92:	3302      	adds	r3, #2
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	737b      	strb	r3, [r7, #13]
            f += ddF_y;
 8008e98:	7bfa      	ldrb	r2, [r7, #15]
 8008e9a:	7b7b      	ldrb	r3, [r7, #13]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	73fb      	strb	r3, [r7, #15]
        }
        x++;
 8008ea2:	7b3b      	ldrb	r3, [r7, #12]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	733b      	strb	r3, [r7, #12]
        ddF_x += 2;
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	3302      	adds	r3, #2
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	73bb      	strb	r3, [r7, #14]
        f += ddF_x;
 8008eb0:	7bfa      	ldrb	r2, [r7, #15]
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	73fb      	strb	r3, [r7, #15]

        u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8008eba:	78f8      	ldrb	r0, [r7, #3]
 8008ebc:	7afa      	ldrb	r2, [r7, #11]
 8008ebe:	7b39      	ldrb	r1, [r7, #12]
 8008ec0:	7e3b      	ldrb	r3, [r7, #24]
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	78bb      	ldrb	r3, [r7, #2]
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	4603      	mov	r3, r0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff ff23 	bl	8008d16 <u8g2_draw_circle_section>
    while (x < y)
 8008ed0:	7b3a      	ldrb	r2, [r7, #12]
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d3d4      	bcc.n	8008e82 <u8g2_draw_circle+0x62>
    }
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	4608      	mov	r0, r1
 8008eea:	4611      	mov	r1, r2
 8008eec:	461a      	mov	r2, r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	70fb      	strb	r3, [r7, #3]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70bb      	strb	r3, [r7, #2]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	707b      	strb	r3, [r7, #1]
    /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
    {
        if (u8g2_IsIntersection(u8g2, x0 - rad, y0 - rad, x0 + rad + 1, y0 + rad + 1) == 0)
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	787b      	ldrb	r3, [r7, #1]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	b2d9      	uxtb	r1, r3
 8008f02:	78ba      	ldrb	r2, [r7, #2]
 8008f04:	787b      	ldrb	r3, [r7, #1]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	b2d8      	uxtb	r0, r3
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	787b      	ldrb	r3, [r7, #1]
 8008f0e:	4413      	add	r3, r2
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	3301      	adds	r3, #1
 8008f14:	b2dc      	uxtb	r4, r3
 8008f16:	78ba      	ldrb	r2, [r7, #2]
 8008f18:	787b      	ldrb	r3, [r7, #1]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	3301      	adds	r3, #1
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	4623      	mov	r3, r4
 8008f26:	4602      	mov	r2, r0
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 f8e0 	bl	800a0ee <u8g2_IsIntersection>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <u8g2_DrawCircle+0x68>
            return;
    }
#endif /* U8G2_WITH_INTERSECTION */

    /* draw circle */
    u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8008f34:	7878      	ldrb	r0, [r7, #1]
 8008f36:	78ba      	ldrb	r2, [r7, #2]
 8008f38:	78f9      	ldrb	r1, [r7, #3]
 8008f3a:	7e3b      	ldrb	r3, [r7, #24]
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff ff6d 	bl	8008e20 <u8g2_draw_circle>
 8008f46:	e000      	b.n	8008f4a <u8g2_DrawCircle+0x6a>
            return;
 8008f48:	bf00      	nop
}
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd90      	pop	{r4, r7, pc}

08008f50 <u8g2_draw_disc_section>:
static void u8g2_draw_disc_section(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0,
        u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0,
        u8g2_uint_t y0, uint8_t option)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	4608      	mov	r0, r1
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4603      	mov	r3, r0
 8008f60:	70fb      	strb	r3, [r7, #3]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70bb      	strb	r3, [r7, #2]
 8008f66:	4613      	mov	r3, r2
 8008f68:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if (option & U8G2_DRAW_UPPER_RIGHT)
 8008f6a:	7d3b      	ldrb	r3, [r7, #20]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <u8g2_draw_disc_section+0x5c>
    {
        u8g2_DrawVLine(u8g2, x0 + x, y0 - y, y + 1);
 8008f74:	787a      	ldrb	r2, [r7, #1]
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	4413      	add	r3, r2
 8008f7a:	b2d9      	uxtb	r1, r3
 8008f7c:	7c3a      	ldrb	r2, [r7, #16]
 8008f7e:	78bb      	ldrb	r3, [r7, #2]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	78bb      	ldrb	r3, [r7, #2]
 8008f86:	3301      	adds	r3, #1
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f818 	bl	8009fc0 <u8g2_DrawVLine>
        u8g2_DrawVLine(u8g2, x0 + y, y0 - x, x + 1);
 8008f90:	787a      	ldrb	r2, [r7, #1]
 8008f92:	78bb      	ldrb	r3, [r7, #2]
 8008f94:	4413      	add	r3, r2
 8008f96:	b2d9      	uxtb	r1, r3
 8008f98:	7c3a      	ldrb	r2, [r7, #16]
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 f80a 	bl	8009fc0 <u8g2_DrawVLine>
    }

    /* upper left */
    if (option & U8G2_DRAW_UPPER_LEFT)
 8008fac:	7d3b      	ldrb	r3, [r7, #20]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01b      	beq.n	8008fee <u8g2_draw_disc_section+0x9e>
    {
        u8g2_DrawVLine(u8g2, x0 - x, y0 - y, y + 1);
 8008fb6:	787a      	ldrb	r2, [r7, #1]
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	b2d9      	uxtb	r1, r3
 8008fbe:	7c3a      	ldrb	r2, [r7, #16]
 8008fc0:	78bb      	ldrb	r3, [r7, #2]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	78bb      	ldrb	r3, [r7, #2]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fff7 	bl	8009fc0 <u8g2_DrawVLine>
        u8g2_DrawVLine(u8g2, x0 - y, y0 - x, x + 1);
 8008fd2:	787a      	ldrb	r2, [r7, #1]
 8008fd4:	78bb      	ldrb	r3, [r7, #2]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	b2d9      	uxtb	r1, r3
 8008fda:	7c3a      	ldrb	r2, [r7, #16]
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 ffe9 	bl	8009fc0 <u8g2_DrawVLine>
    }

    /* lower right */
    if (option & U8G2_DRAW_LOWER_RIGHT)
 8008fee:	7d3b      	ldrb	r3, [r7, #20]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d015      	beq.n	8009024 <u8g2_draw_disc_section+0xd4>
    {
        u8g2_DrawVLine(u8g2, x0 + x, y0, y + 1);
 8008ff8:	787a      	ldrb	r2, [r7, #1]
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	b2d9      	uxtb	r1, r3
 8009000:	78bb      	ldrb	r3, [r7, #2]
 8009002:	3301      	adds	r3, #1
 8009004:	b2db      	uxtb	r3, r3
 8009006:	7c3a      	ldrb	r2, [r7, #16]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 ffd9 	bl	8009fc0 <u8g2_DrawVLine>
        u8g2_DrawVLine(u8g2, x0 + y, y0, x + 1);
 800900e:	787a      	ldrb	r2, [r7, #1]
 8009010:	78bb      	ldrb	r3, [r7, #2]
 8009012:	4413      	add	r3, r2
 8009014:	b2d9      	uxtb	r1, r3
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	3301      	adds	r3, #1
 800901a:	b2db      	uxtb	r3, r3
 800901c:	7c3a      	ldrb	r2, [r7, #16]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 ffce 	bl	8009fc0 <u8g2_DrawVLine>
    }

    /* lower left */
    if (option & U8G2_DRAW_LOWER_LEFT)
 8009024:	7d3b      	ldrb	r3, [r7, #20]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d015      	beq.n	800905a <u8g2_draw_disc_section+0x10a>
    {
        u8g2_DrawVLine(u8g2, x0 - x, y0, y + 1);
 800902e:	787a      	ldrb	r2, [r7, #1]
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	b2d9      	uxtb	r1, r3
 8009036:	78bb      	ldrb	r3, [r7, #2]
 8009038:	3301      	adds	r3, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	7c3a      	ldrb	r2, [r7, #16]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 ffbe 	bl	8009fc0 <u8g2_DrawVLine>
        u8g2_DrawVLine(u8g2, x0 - y, y0, x + 1);
 8009044:	787a      	ldrb	r2, [r7, #1]
 8009046:	78bb      	ldrb	r3, [r7, #2]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	b2d9      	uxtb	r1, r3
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	3301      	adds	r3, #1
 8009050:	b2db      	uxtb	r3, r3
 8009052:	7c3a      	ldrb	r2, [r7, #16]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 ffb3 	bl	8009fc0 <u8g2_DrawVLine>
    }
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad,
        uint8_t option)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af02      	add	r7, sp, #8
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	4608      	mov	r0, r1
 800906c:	4611      	mov	r1, r2
 800906e:	461a      	mov	r2, r3
 8009070:	4603      	mov	r3, r0
 8009072:	70fb      	strb	r3, [r7, #3]
 8009074:	460b      	mov	r3, r1
 8009076:	70bb      	strb	r3, [r7, #2]
 8009078:	4613      	mov	r3, r2
 800907a:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 800907c:	2301      	movs	r3, #1
 800907e:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8009080:	7bfa      	ldrb	r2, [r7, #15]
 8009082:	787b      	ldrb	r3, [r7, #1]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	b2db      	uxtb	r3, r3
 8009088:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800908a:	2301      	movs	r3, #1
 800908c:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8009092:	7b7a      	ldrb	r2, [r7, #13]
 8009094:	787b      	ldrb	r3, [r7, #1]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	b2db      	uxtb	r3, r3
 800909a:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 800909c:	7b7b      	ldrb	r3, [r7, #13]
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	737b      	strb	r3, [r7, #13]
    x = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	733b      	strb	r3, [r7, #12]
    y = rad;
 80090a8:	787b      	ldrb	r3, [r7, #1]
 80090aa:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80090ac:	78f8      	ldrb	r0, [r7, #3]
 80090ae:	7afa      	ldrb	r2, [r7, #11]
 80090b0:	7b39      	ldrb	r1, [r7, #12]
 80090b2:	7e3b      	ldrb	r3, [r7, #24]
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	78bb      	ldrb	r3, [r7, #2]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	4603      	mov	r3, r0
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff ff47 	bl	8008f50 <u8g2_draw_disc_section>

    while (x < y)
 80090c2:	e026      	b.n	8009112 <u8g2_draw_disc+0xb0>
    {
        if (f >= 0)
 80090c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db0b      	blt.n	80090e4 <u8g2_draw_disc+0x82>
        {
            y--;
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	72fb      	strb	r3, [r7, #11]
            ddF_y += 2;
 80090d2:	7b7b      	ldrb	r3, [r7, #13]
 80090d4:	3302      	adds	r3, #2
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	737b      	strb	r3, [r7, #13]
            f += ddF_y;
 80090da:	7bfa      	ldrb	r2, [r7, #15]
 80090dc:	7b7b      	ldrb	r3, [r7, #13]
 80090de:	4413      	add	r3, r2
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	73fb      	strb	r3, [r7, #15]
        }
        x++;
 80090e4:	7b3b      	ldrb	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	733b      	strb	r3, [r7, #12]
        ddF_x += 2;
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	3302      	adds	r3, #2
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	73bb      	strb	r3, [r7, #14]
        f += ddF_x;
 80090f2:	7bfa      	ldrb	r2, [r7, #15]
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	4413      	add	r3, r2
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	73fb      	strb	r3, [r7, #15]

        u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80090fc:	78f8      	ldrb	r0, [r7, #3]
 80090fe:	7afa      	ldrb	r2, [r7, #11]
 8009100:	7b39      	ldrb	r1, [r7, #12]
 8009102:	7e3b      	ldrb	r3, [r7, #24]
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	78bb      	ldrb	r3, [r7, #2]
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	4603      	mov	r3, r0
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff ff1f 	bl	8008f50 <u8g2_draw_disc_section>
    while (x < y)
 8009112:	7b3a      	ldrb	r2, [r7, #12]
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	429a      	cmp	r2, r3
 8009118:	d3d4      	bcc.n	80090c4 <u8g2_draw_disc+0x62>
    }
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8009122:	b590      	push	{r4, r7, lr}
 8009124:	b085      	sub	sp, #20
 8009126:	af02      	add	r7, sp, #8
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	4608      	mov	r0, r1
 800912c:	4611      	mov	r1, r2
 800912e:	461a      	mov	r2, r3
 8009130:	4603      	mov	r3, r0
 8009132:	70fb      	strb	r3, [r7, #3]
 8009134:	460b      	mov	r3, r1
 8009136:	70bb      	strb	r3, [r7, #2]
 8009138:	4613      	mov	r3, r2
 800913a:	707b      	strb	r3, [r7, #1]
    /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
    {
        if (u8g2_IsIntersection(u8g2, x0 - rad, y0 - rad, x0 + rad + 1, y0 + rad + 1) == 0)
 800913c:	78fa      	ldrb	r2, [r7, #3]
 800913e:	787b      	ldrb	r3, [r7, #1]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	b2d9      	uxtb	r1, r3
 8009144:	78ba      	ldrb	r2, [r7, #2]
 8009146:	787b      	ldrb	r3, [r7, #1]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	b2d8      	uxtb	r0, r3
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	787b      	ldrb	r3, [r7, #1]
 8009150:	4413      	add	r3, r2
 8009152:	b2db      	uxtb	r3, r3
 8009154:	3301      	adds	r3, #1
 8009156:	b2dc      	uxtb	r4, r3
 8009158:	78ba      	ldrb	r2, [r7, #2]
 800915a:	787b      	ldrb	r3, [r7, #1]
 800915c:	4413      	add	r3, r2
 800915e:	b2db      	uxtb	r3, r3
 8009160:	3301      	adds	r3, #1
 8009162:	b2db      	uxtb	r3, r3
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	4623      	mov	r3, r4
 8009168:	4602      	mov	r2, r0
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 ffbf 	bl	800a0ee <u8g2_IsIntersection>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <u8g2_DrawDisc+0x68>
            return;
    }
#endif /* U8G2_WITH_INTERSECTION */

    /* draw disc */
    u8g2_draw_disc(u8g2, x0, y0, rad, option);
 8009176:	7878      	ldrb	r0, [r7, #1]
 8009178:	78ba      	ldrb	r2, [r7, #2]
 800917a:	78f9      	ldrb	r1, [r7, #3]
 800917c:	7e3b      	ldrb	r3, [r7, #24]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	4603      	mov	r3, r0
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ff6d 	bl	8009062 <u8g2_draw_disc>
 8009188:	e000      	b.n	800918c <u8g2_DrawDisc+0x6a>
            return;
 800918a:	bf00      	nop
}
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	bd90      	pop	{r4, r7, pc}
	...

08009194 <u8g2_m_16_8_1>:
    *page_cnt = 4;
    return buf;
#endif
}
uint8_t* u8g2_m_16_8_1(uint8_t* page_cnt)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
#ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
    static uint8_t buf[128];
    *page_cnt = 1;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
    return buf;
 80091a2:	4b03      	ldr	r3, [pc, #12]	; (80091b0 <u8g2_m_16_8_1+0x1c>)
#endif
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	2000d39c 	.word	0x2000d39c

080091b4 <u8g2_Setup_ssd1306_i2c_128x64_noname_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_i2c_128x64_noname_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af02      	add	r7, sp, #8
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a0b      	ldr	r2, [pc, #44]	; (80091f8 <u8g2_Setup_ssd1306_i2c_128x64_noname_1+0x44>)
 80091ca:	490c      	ldr	r1, [pc, #48]	; (80091fc <u8g2_Setup_ssd1306_i2c_128x64_noname_1+0x48>)
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f001 fded 	bl	800adac <u8x8_Setup>
  buf = u8g2_m_16_8_1(&tile_buf_height);
 80091d2:	f107 0313 	add.w	r3, r7, #19
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff ffdc 	bl	8009194 <u8g2_m_16_8_1>
 80091dc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80091de:	7cfa      	ldrb	r2, [r7, #19]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <u8g2_Setup_ssd1306_i2c_128x64_noname_1+0x4c>)
 80091e6:	6979      	ldr	r1, [r7, #20]
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f001 f8ff 	bl	800a3ec <u8g2_SetupBuffer>
}
 80091ee:	bf00      	nop
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	0800a8e9 	.word	0x0800a8e9
 80091fc:	0800ab45 	.word	0x0800ab45
 8009200:	0800a271 	.word	0x0800a271

08009204 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t* font, uint8_t offset)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
    font += offset;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	607b      	str	r3, [r7, #4]
    return u8x8_pgm_read(font);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	781b      	ldrb	r3, [r3, #0]
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t* font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t* font, uint8_t offset)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read(font);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	81fb      	strh	r3, [r7, #14]
    font++;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	3301      	adds	r3, #1
 8009246:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8009248:	89fb      	ldrh	r3, [r7, #14]
 800924a:	021b      	lsls	r3, r3, #8
 800924c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read(font);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	b29a      	uxth	r2, r3
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	4413      	add	r3, r2
 8009258:	81fb      	strh	r3, [r7, #14]
    return pos;
 800925a:	89fb      	ldrh	r3, [r7, #14]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t* font_info, const uint8_t* font)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
    /* offset 0 */
    font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8009272:	2100      	movs	r1, #0
 8009274:	6838      	ldr	r0, [r7, #0]
 8009276:	f7ff ffc5 	bl	8009204 <u8g2_font_get_byte>
 800927a:	4603      	mov	r3, r0
 800927c:	461a      	mov	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	701a      	strb	r2, [r3, #0]
    font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8009282:	2101      	movs	r1, #1
 8009284:	6838      	ldr	r0, [r7, #0]
 8009286:	f7ff ffbd 	bl	8009204 <u8g2_font_get_byte>
 800928a:	4603      	mov	r3, r0
 800928c:	461a      	mov	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	705a      	strb	r2, [r3, #1]
    font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8009292:	2102      	movs	r1, #2
 8009294:	6838      	ldr	r0, [r7, #0]
 8009296:	f7ff ffb5 	bl	8009204 <u8g2_font_get_byte>
 800929a:	4603      	mov	r3, r0
 800929c:	461a      	mov	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	709a      	strb	r2, [r3, #2]
    font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80092a2:	2103      	movs	r1, #3
 80092a4:	6838      	ldr	r0, [r7, #0]
 80092a6:	f7ff ffad 	bl	8009204 <u8g2_font_get_byte>
 80092aa:	4603      	mov	r3, r0
 80092ac:	461a      	mov	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	70da      	strb	r2, [r3, #3]

    /* offset 4 */
    font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80092b2:	2104      	movs	r1, #4
 80092b4:	6838      	ldr	r0, [r7, #0]
 80092b6:	f7ff ffa5 	bl	8009204 <u8g2_font_get_byte>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	711a      	strb	r2, [r3, #4]
    font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80092c2:	2105      	movs	r1, #5
 80092c4:	6838      	ldr	r0, [r7, #0]
 80092c6:	f7ff ff9d 	bl	8009204 <u8g2_font_get_byte>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461a      	mov	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	715a      	strb	r2, [r3, #5]
    font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80092d2:	2106      	movs	r1, #6
 80092d4:	6838      	ldr	r0, [r7, #0]
 80092d6:	f7ff ff95 	bl	8009204 <u8g2_font_get_byte>
 80092da:	4603      	mov	r3, r0
 80092dc:	461a      	mov	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	719a      	strb	r2, [r3, #6]
    font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80092e2:	2107      	movs	r1, #7
 80092e4:	6838      	ldr	r0, [r7, #0]
 80092e6:	f7ff ff8d 	bl	8009204 <u8g2_font_get_byte>
 80092ea:	4603      	mov	r3, r0
 80092ec:	461a      	mov	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	71da      	strb	r2, [r3, #7]
    font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80092f2:	2108      	movs	r1, #8
 80092f4:	6838      	ldr	r0, [r7, #0]
 80092f6:	f7ff ff85 	bl	8009204 <u8g2_font_get_byte>
 80092fa:	4603      	mov	r3, r0
 80092fc:	461a      	mov	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	721a      	strb	r2, [r3, #8]

    /* offset 9 */
    font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8009302:	2109      	movs	r1, #9
 8009304:	6838      	ldr	r0, [r7, #0]
 8009306:	f7ff ff7d 	bl	8009204 <u8g2_font_get_byte>
 800930a:	4603      	mov	r3, r0
 800930c:	b25a      	sxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	725a      	strb	r2, [r3, #9]
    font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8009312:	210a      	movs	r1, #10
 8009314:	6838      	ldr	r0, [r7, #0]
 8009316:	f7ff ff75 	bl	8009204 <u8g2_font_get_byte>
 800931a:	4603      	mov	r3, r0
 800931c:	b25a      	sxtb	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	729a      	strb	r2, [r3, #10]
    font_info->x_offset = u8g2_font_get_byte(font, 11);
 8009322:	210b      	movs	r1, #11
 8009324:	6838      	ldr	r0, [r7, #0]
 8009326:	f7ff ff6d 	bl	8009204 <u8g2_font_get_byte>
 800932a:	4603      	mov	r3, r0
 800932c:	b25a      	sxtb	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	72da      	strb	r2, [r3, #11]
    font_info->y_offset = u8g2_font_get_byte(font, 12);
 8009332:	210c      	movs	r1, #12
 8009334:	6838      	ldr	r0, [r7, #0]
 8009336:	f7ff ff65 	bl	8009204 <u8g2_font_get_byte>
 800933a:	4603      	mov	r3, r0
 800933c:	b25a      	sxtb	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	731a      	strb	r2, [r3, #12]

    /* offset 13 */
    font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8009342:	210d      	movs	r1, #13
 8009344:	6838      	ldr	r0, [r7, #0]
 8009346:	f7ff ff5d 	bl	8009204 <u8g2_font_get_byte>
 800934a:	4603      	mov	r3, r0
 800934c:	b25a      	sxtb	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	735a      	strb	r2, [r3, #13]
    font_info->descent_g = u8g2_font_get_byte(font, 14);
 8009352:	210e      	movs	r1, #14
 8009354:	6838      	ldr	r0, [r7, #0]
 8009356:	f7ff ff55 	bl	8009204 <u8g2_font_get_byte>
 800935a:	4603      	mov	r3, r0
 800935c:	b25a      	sxtb	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	739a      	strb	r2, [r3, #14]
    font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8009362:	210f      	movs	r1, #15
 8009364:	6838      	ldr	r0, [r7, #0]
 8009366:	f7ff ff4d 	bl	8009204 <u8g2_font_get_byte>
 800936a:	4603      	mov	r3, r0
 800936c:	b25a      	sxtb	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	73da      	strb	r2, [r3, #15]
    font_info->descent_para = u8g2_font_get_byte(font, 16);
 8009372:	2110      	movs	r1, #16
 8009374:	6838      	ldr	r0, [r7, #0]
 8009376:	f7ff ff45 	bl	8009204 <u8g2_font_get_byte>
 800937a:	4603      	mov	r3, r0
 800937c:	b25a      	sxtb	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	741a      	strb	r2, [r3, #16]

    /* offset 17 */
    font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8009382:	2111      	movs	r1, #17
 8009384:	6838      	ldr	r0, [r7, #0]
 8009386:	f7ff ff4f 	bl	8009228 <u8g2_font_get_word>
 800938a:	4603      	mov	r3, r0
 800938c:	461a      	mov	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	825a      	strh	r2, [r3, #18]
    font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8009392:	2113      	movs	r1, #19
 8009394:	6838      	ldr	r0, [r7, #0]
 8009396:	f7ff ff47 	bl	8009228 <u8g2_font_get_word>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	829a      	strh	r2, [r3, #20]

    /* offset 21 */
#ifdef U8G2_WITH_UNICODE
    font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 80093a2:	2115      	movs	r1, #21
 80093a4:	6838      	ldr	r0, [r7, #0]
 80093a6:	f7ff ff3f 	bl	8009228 <u8g2_font_get_word>
 80093aa:	4603      	mov	r3, r0
 80093ac:	461a      	mov	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	82da      	strh	r2, [r3, #22]
#endif
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t* f, uint8_t cnt)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
    uint8_t val;
    uint8_t bit_pos = f->decode_bit_pos;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7a9b      	ldrb	r3, [r3, #10]
 80093ca:	737b      	strb	r3, [r7, #13]
    uint8_t bit_pos_plus_cnt;

    //val = *(f->decode_ptr);
    val = u8x8_pgm_read(f->decode_ptr);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	73fb      	strb	r3, [r7, #15]

    val >>= bit_pos;
 80093d4:	7bfa      	ldrb	r2, [r7, #15]
 80093d6:	7b7b      	ldrb	r3, [r7, #13]
 80093d8:	fa42 f303 	asr.w	r3, r2, r3
 80093dc:	73fb      	strb	r3, [r7, #15]
    bit_pos_plus_cnt = bit_pos;
 80093de:	7b7b      	ldrb	r3, [r7, #13]
 80093e0:	73bb      	strb	r3, [r7, #14]
    bit_pos_plus_cnt += cnt;
 80093e2:	7bba      	ldrb	r2, [r7, #14]
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	4413      	add	r3, r2
 80093e8:	73bb      	strb	r3, [r7, #14]
    if (bit_pos_plus_cnt >= 8)
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	2b07      	cmp	r3, #7
 80093ee:	d91a      	bls.n	8009426 <u8g2_font_decode_get_unsigned_bits+0x6c>
    {
        uint8_t s = 8;
 80093f0:	2308      	movs	r3, #8
 80093f2:	733b      	strb	r3, [r7, #12]
        s -= bit_pos;
 80093f4:	7b3a      	ldrb	r2, [r7, #12]
 80093f6:	7b7b      	ldrb	r3, [r7, #13]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	733b      	strb	r3, [r7, #12]
        f->decode_ptr++;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	601a      	str	r2, [r3, #0]
        //val |= *(f->decode_ptr) << (8-bit_pos);
        val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	7b3b      	ldrb	r3, [r7, #12]
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	b25a      	sxtb	r2, r3
 8009416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800941a:	4313      	orrs	r3, r2
 800941c:	b25b      	sxtb	r3, r3
 800941e:	73fb      	strb	r3, [r7, #15]
        //bit_pos -= 8;
        bit_pos_plus_cnt -= 8;
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	3b08      	subs	r3, #8
 8009424:	73bb      	strb	r3, [r7, #14]
    }
    val &= (1U << cnt) - 1;
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	f04f 32ff 	mov.w	r2, #4294967295
 800942c:	fa02 f303 	lsl.w	r3, r2, r3
 8009430:	b2db      	uxtb	r3, r3
 8009432:	43db      	mvns	r3, r3
 8009434:	b2da      	uxtb	r2, r3
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	4013      	ands	r3, r2
 800943a:	73fb      	strb	r3, [r7, #15]
    //bit_pos += cnt;

    f->decode_bit_pos = bit_pos_plus_cnt;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7bba      	ldrb	r2, [r7, #14]
 8009440:	729a      	strb	r2, [r3, #10]
    return val;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <u8g2_font_decode_get_signed_bits>:
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t* f, uint8_t cnt)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
    int8_t v, d;
    v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff ffaa 	bl	80093ba <u8g2_font_decode_get_unsigned_bits>
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]
    d = 1;
 800946a:	2301      	movs	r3, #1
 800946c:	73bb      	strb	r3, [r7, #14]
    cnt--;
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	3b01      	subs	r3, #1
 8009472:	70fb      	strb	r3, [r7, #3]
    d <<= cnt;
 8009474:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	fa02 f303 	lsl.w	r3, r2, r3
 800947e:	73bb      	strb	r3, [r7, #14]
    v -= d;
 8009480:	7bfa      	ldrb	r2, [r7, #15]
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	b2db      	uxtb	r3, r3
 8009488:	73fb      	strb	r3, [r7, #15]
    return v;
 800948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8009496:	b490      	push	{r4, r7}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	461a      	mov	r2, r3
 80094a4:	4623      	mov	r3, r4
 80094a6:	71fb      	strb	r3, [r7, #7]
 80094a8:	4603      	mov	r3, r0
 80094aa:	71bb      	strb	r3, [r7, #6]
 80094ac:	460b      	mov	r3, r1
 80094ae:	717b      	strb	r3, [r7, #5]
 80094b0:	4613      	mov	r3, r2
 80094b2:	713b      	strb	r3, [r7, #4]
    switch (dir)
 80094b4:	793b      	ldrb	r3, [r7, #4]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d008      	beq.n	80094cc <u8g2_add_vector_y+0x36>
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d00b      	beq.n	80094d6 <u8g2_add_vector_y+0x40>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10e      	bne.n	80094e0 <u8g2_add_vector_y+0x4a>
    {
        case 0:
            dy += y;
 80094c2:	797a      	ldrb	r2, [r7, #5]
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	4413      	add	r3, r2
 80094c8:	71fb      	strb	r3, [r7, #7]
            break;
 80094ca:	e00e      	b.n	80094ea <u8g2_add_vector_y+0x54>
        case 1:
            dy += x;
 80094cc:	79ba      	ldrb	r2, [r7, #6]
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	4413      	add	r3, r2
 80094d2:	71fb      	strb	r3, [r7, #7]
            break;
 80094d4:	e009      	b.n	80094ea <u8g2_add_vector_y+0x54>
        case 2:
            dy -= y;
 80094d6:	797b      	ldrb	r3, [r7, #5]
 80094d8:	79fa      	ldrb	r2, [r7, #7]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	71fb      	strb	r3, [r7, #7]
            break;
 80094de:	e004      	b.n	80094ea <u8g2_add_vector_y+0x54>
        default:
            dy -= x;
 80094e0:	79bb      	ldrb	r3, [r7, #6]
 80094e2:	79fa      	ldrb	r2, [r7, #7]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	71fb      	strb	r3, [r7, #7]
            break;
 80094e8:	bf00      	nop
    }
    return dy;
 80094ea:	79fb      	ldrb	r3, [r7, #7]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc90      	pop	{r4, r7}
 80094f4:	4770      	bx	lr

080094f6 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80094f6:	b490      	push	{r4, r7}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	4604      	mov	r4, r0
 80094fe:	4608      	mov	r0, r1
 8009500:	4611      	mov	r1, r2
 8009502:	461a      	mov	r2, r3
 8009504:	4623      	mov	r3, r4
 8009506:	71fb      	strb	r3, [r7, #7]
 8009508:	4603      	mov	r3, r0
 800950a:	71bb      	strb	r3, [r7, #6]
 800950c:	460b      	mov	r3, r1
 800950e:	717b      	strb	r3, [r7, #5]
 8009510:	4613      	mov	r3, r2
 8009512:	713b      	strb	r3, [r7, #4]
    switch (dir)
 8009514:	793b      	ldrb	r3, [r7, #4]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d008      	beq.n	800952c <u8g2_add_vector_x+0x36>
 800951a:	2b02      	cmp	r3, #2
 800951c:	d00b      	beq.n	8009536 <u8g2_add_vector_x+0x40>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10e      	bne.n	8009540 <u8g2_add_vector_x+0x4a>
    {
        case 0:
            dx += x;
 8009522:	79ba      	ldrb	r2, [r7, #6]
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	4413      	add	r3, r2
 8009528:	71fb      	strb	r3, [r7, #7]
            break;
 800952a:	e00e      	b.n	800954a <u8g2_add_vector_x+0x54>
        case 1:
            dx -= y;
 800952c:	797b      	ldrb	r3, [r7, #5]
 800952e:	79fa      	ldrb	r2, [r7, #7]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	71fb      	strb	r3, [r7, #7]
            break;
 8009534:	e009      	b.n	800954a <u8g2_add_vector_x+0x54>
        case 2:
            dx -= x;
 8009536:	79bb      	ldrb	r3, [r7, #6]
 8009538:	79fa      	ldrb	r2, [r7, #7]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	71fb      	strb	r3, [r7, #7]
            break;
 800953e:	e004      	b.n	800954a <u8g2_add_vector_x+0x54>
        default:
            dx += y;
 8009540:	797a      	ldrb	r2, [r7, #5]
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	4413      	add	r3, r2
 8009546:	71fb      	strb	r3, [r7, #7]
            break;
 8009548:	bf00      	nop
    }
    return dx;
 800954a:	79fb      	ldrb	r3, [r7, #7]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bc90      	pop	{r4, r7}
 8009554:	4770      	bx	lr

08009556 <u8g2_font_decode_len>:
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t* u8g2, uint8_t len, uint8_t is_foreground)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b088      	sub	sp, #32
 800955a:	af02      	add	r7, sp, #8
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
 8009562:	4613      	mov	r3, r2
 8009564:	70bb      	strb	r3, [r7, #2]
    uint8_t lx, ly;

    /* target position on the screen */
    u8g2_uint_t x, y;

    u8g2_font_decode_t* decode = &(u8g2->font_decode);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3354      	adds	r3, #84	; 0x54
 800956a:	613b      	str	r3, [r7, #16]

    cnt = len;
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	75fb      	strb	r3, [r7, #23]

    /* get the local position */
    lx = decode->x;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8009576:	757b      	strb	r3, [r7, #21]
    ly = decode->y;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800957e:	753b      	strb	r3, [r7, #20]

    for (;;)
    {
        /* calculate the number of pixel to the right edge of the glyph */
        rem = decode->glyph_width;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009586:	73fb      	strb	r3, [r7, #15]
        rem -= lx;
 8009588:	7bfa      	ldrb	r2, [r7, #15]
 800958a:	7d7b      	ldrb	r3, [r7, #21]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	73fb      	strb	r3, [r7, #15]

        /* calculate how many pixel to draw. This is either to the right edge */
        /* or lesser, if not enough pixel are left */
        current = rem;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	75bb      	strb	r3, [r7, #22]
        if (cnt < rem)
 8009594:	7dfa      	ldrb	r2, [r7, #23]
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	429a      	cmp	r2, r3
 800959a:	d201      	bcs.n	80095a0 <u8g2_font_decode_len+0x4a>
            current = cnt;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	75bb      	strb	r3, [r7, #22]

        /* now draw the line, but apply the rotation around the glyph target position */
        //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
        /* get target position */
        x = decode->target_x;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	791b      	ldrb	r3, [r3, #4]
 80095a4:	73bb      	strb	r3, [r7, #14]
        y = decode->target_y;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	795b      	ldrb	r3, [r3, #5]
 80095aa:	737b      	strb	r3, [r7, #13]

        /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

        x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80095ac:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80095b0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	7b9b      	ldrb	r3, [r3, #14]
 80095b8:	7bb8      	ldrb	r0, [r7, #14]
 80095ba:	f7ff ff9c 	bl	80094f6 <u8g2_add_vector_x>
 80095be:	4603      	mov	r3, r0
 80095c0:	73bb      	strb	r3, [r7, #14]
        y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80095c2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80095c6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	7b9b      	ldrb	r3, [r3, #14]
 80095ce:	7b78      	ldrb	r0, [r7, #13]
 80095d0:	f7ff ff61 	bl	8009496 <u8g2_add_vector_y>
 80095d4:	4603      	mov	r3, r0
 80095d6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif

        /* draw foreground and background (if required) */
        if (is_foreground)
 80095d8:	78bb      	ldrb	r3, [r7, #2]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00f      	beq.n	80095fe <u8g2_font_decode_len+0xa8>
        {
            u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	7b1a      	ldrb	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            u8g2_DrawHVLine(u8g2, x, y, current,
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	7b9b      	ldrb	r3, [r3, #14]
 80095ec:	7db8      	ldrb	r0, [r7, #22]
 80095ee:	7b7a      	ldrb	r2, [r7, #13]
 80095f0:	7bb9      	ldrb	r1, [r7, #14]
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4603      	mov	r3, r0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fc45 	bl	8009e86 <u8g2_DrawHVLine>
 80095fc:	e012      	b.n	8009624 <u8g2_font_decode_len+0xce>
#else
	0
#endif
                            );
        }
        else if (decode->is_transparent == 0)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	7adb      	ldrb	r3, [r3, #11]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10e      	bne.n	8009624 <u8g2_font_decode_len+0xce>
        {
            u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	7b5a      	ldrb	r2, [r3, #13]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            u8g2_DrawHVLine(u8g2, x, y, current,
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	7b9b      	ldrb	r3, [r3, #14]
 8009614:	7db8      	ldrb	r0, [r7, #22]
 8009616:	7b7a      	ldrb	r2, [r7, #13]
 8009618:	7bb9      	ldrb	r1, [r7, #14]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4603      	mov	r3, r0
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fc31 	bl	8009e86 <u8g2_DrawHVLine>
#endif
                            );
        }

        /* check, whether the end of the run length code has been reached */
        if (cnt < rem)
 8009624:	7dfa      	ldrb	r2, [r7, #23]
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	429a      	cmp	r2, r3
 800962a:	d309      	bcc.n	8009640 <u8g2_font_decode_len+0xea>
            break;
        cnt -= rem;
 800962c:	7dfa      	ldrb	r2, [r7, #23]
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	75fb      	strb	r3, [r7, #23]
        lx = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	757b      	strb	r3, [r7, #21]
        ly++;
 8009638:	7d3b      	ldrb	r3, [r7, #20]
 800963a:	3301      	adds	r3, #1
 800963c:	753b      	strb	r3, [r7, #20]
        rem = decode->glyph_width;
 800963e:	e79f      	b.n	8009580 <u8g2_font_decode_len+0x2a>
            break;
 8009640:	bf00      	nop
    }
    lx += cnt;
 8009642:	7d7a      	ldrb	r2, [r7, #21]
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	4413      	add	r3, r2
 8009648:	757b      	strb	r3, [r7, #21]

    decode->x = lx;
 800964a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	719a      	strb	r2, [r3, #6]
    decode->y = ly;
 8009652:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	71da      	strb	r2, [r3, #7]

}
 800965a:	bf00      	nop
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t* u8g2, const uint8_t* glyph_data)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
    u8g2_font_decode_t* decode = &(u8g2->font_decode);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3354      	adds	r3, #84	; 0x54
 8009670:	60fb      	str	r3, [r7, #12]
    decode->decode_ptr = glyph_data;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	601a      	str	r2, [r3, #0]
    decode->decode_bit_pos = 0;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	729a      	strb	r2, [r3, #10]
    /*
     decode->decode_ptr += 1;
     decode->decode_ptr += 1;
     */

    decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8009684:	4619      	mov	r1, r3
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fe97 	bl	80093ba <u8g2_font_decode_get_unsigned_bits>
 800968c:	4603      	mov	r3, r0
 800968e:	b25a      	sxtb	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	721a      	strb	r2, [r3, #8]
                                                             u8g2->font_info.bits_per_char_width);
    decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800969a:	4619      	mov	r1, r3
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff fe8c 	bl	80093ba <u8g2_font_decode_get_unsigned_bits>
 80096a2:	4603      	mov	r3, r0
 80096a4:	b25a      	sxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	725a      	strb	r2, [r3, #9]
                                                              u8g2->font_info.bits_per_char_height);

    decode->fg_color = u8g2->draw_color;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	731a      	strb	r2, [r3, #12]
    decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	7b1b      	ldrb	r3, [r3, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bf0c      	ite	eq
 80096bc:	2301      	moveq	r3, #1
 80096be:	2300      	movne	r3, #0
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	461a      	mov	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	735a      	strb	r2, [r3, #13]
}
 80096c8:	bf00      	nop
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <u8g2_font_decode_glyph>:
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t* u8g2, const uint8_t* glyph_data)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
    uint8_t a, b;
    int8_t x, y;
    int8_t d;
    int8_t h;
    u8g2_font_decode_t* decode = &(u8g2->font_decode);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3354      	adds	r3, #84	; 0x54
 80096de:	613b      	str	r3, [r7, #16]

    u8g2_font_setup_decode(u8g2, glyph_data);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff ffbd 	bl	8009662 <u8g2_font_setup_decode>
    h = u8g2->font_decode.glyph_height;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096ee:	73fb      	strb	r3, [r7, #15]

    x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80096f6:	4619      	mov	r1, r3
 80096f8:	6938      	ldr	r0, [r7, #16]
 80096fa:	f7ff fea9 	bl	8009450 <u8g2_font_decode_get_signed_bits>
 80096fe:	4603      	mov	r3, r0
 8009700:	73bb      	strb	r3, [r7, #14]
    y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8009708:	4619      	mov	r1, r3
 800970a:	6938      	ldr	r0, [r7, #16]
 800970c:	f7ff fea0 	bl	8009450 <u8g2_font_decode_get_signed_bits>
 8009710:	4603      	mov	r3, r0
 8009712:	737b      	strb	r3, [r7, #13]
    d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800971a:	4619      	mov	r1, r3
 800971c:	6938      	ldr	r0, [r7, #16]
 800971e:	f7ff fe97 	bl	8009450 <u8g2_font_decode_get_signed_bits>
 8009722:	4603      	mov	r3, r0
 8009724:	733b      	strb	r3, [r7, #12]

    if (decode->glyph_width > 0)
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	f340 80cf 	ble.w	80098d0 <u8g2_font_decode_glyph+0x200>
    {
#ifdef U8G2_WITH_FONT_ROTATION
        decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y), decode->dir);
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	7918      	ldrb	r0, [r3, #4]
 8009736:	7bfa      	ldrb	r2, [r7, #15]
 8009738:	7b7b      	ldrb	r3, [r7, #13]
 800973a:	4413      	add	r3, r2
 800973c:	b2db      	uxtb	r3, r3
 800973e:	425b      	negs	r3, r3
 8009740:	b2db      	uxtb	r3, r3
 8009742:	b25a      	sxtb	r2, r3
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	7b9b      	ldrb	r3, [r3, #14]
 8009748:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800974c:	f7ff fed3 	bl	80094f6 <u8g2_add_vector_x>
 8009750:	4603      	mov	r3, r0
 8009752:	461a      	mov	r2, r3
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	711a      	strb	r2, [r3, #4]
        decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y), decode->dir);
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	7958      	ldrb	r0, [r3, #5]
 800975c:	7bfa      	ldrb	r2, [r7, #15]
 800975e:	7b7b      	ldrb	r3, [r7, #13]
 8009760:	4413      	add	r3, r2
 8009762:	b2db      	uxtb	r3, r3
 8009764:	425b      	negs	r3, r3
 8009766:	b2db      	uxtb	r3, r3
 8009768:	b25a      	sxtb	r2, r3
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	7b9b      	ldrb	r3, [r3, #14]
 800976e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8009772:	f7ff fe90 	bl	8009496 <u8g2_add_vector_y>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	715a      	strb	r2, [r3, #5]
        //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
        {
            u8g2_uint_t x0, x1, y0, y1;
            x0 = decode->target_x;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	791b      	ldrb	r3, [r3, #4]
 8009782:	75fb      	strb	r3, [r7, #23]
            y0 = decode->target_y;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	795b      	ldrb	r3, [r3, #5]
 8009788:	757b      	strb	r3, [r7, #21]
            x1 = x0;
 800978a:	7dfb      	ldrb	r3, [r7, #23]
 800978c:	75bb      	strb	r3, [r7, #22]
            y1 = y0;
 800978e:	7d7b      	ldrb	r3, [r7, #21]
 8009790:	753b      	strb	r3, [r7, #20]

#ifdef U8G2_WITH_FONT_ROTATION
            switch (decode->dir)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	7b9b      	ldrb	r3, [r3, #14]
 8009796:	2b03      	cmp	r3, #3
 8009798:	d852      	bhi.n	8009840 <u8g2_font_decode_glyph+0x170>
 800979a:	a201      	add	r2, pc, #4	; (adr r2, 80097a0 <u8g2_font_decode_glyph+0xd0>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097ed 	.word	0x080097ed
 80097ac:	0800981d 	.word	0x0800981d
            {
                case 0:
                    x1 += decode->glyph_width;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	7dbb      	ldrb	r3, [r7, #22]
 80097ba:	4413      	add	r3, r2
 80097bc:	75bb      	strb	r3, [r7, #22]
                    y1 += h;
 80097be:	7bfa      	ldrb	r2, [r7, #15]
 80097c0:	7d3b      	ldrb	r3, [r7, #20]
 80097c2:	4413      	add	r3, r2
 80097c4:	753b      	strb	r3, [r7, #20]
                    break;
 80097c6:	e03b      	b.n	8009840 <u8g2_font_decode_glyph+0x170>
                case 1:
                    x0 -= h;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	7dfa      	ldrb	r2, [r7, #23]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	75fb      	strb	r3, [r7, #23]
                    x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	3301      	adds	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]
                    x1++;
 80097d6:	7dbb      	ldrb	r3, [r7, #22]
 80097d8:	3301      	adds	r3, #1
 80097da:	75bb      	strb	r3, [r7, #22]
                    y1 += decode->glyph_width;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	7d3b      	ldrb	r3, [r7, #20]
 80097e6:	4413      	add	r3, r2
 80097e8:	753b      	strb	r3, [r7, #20]
                    break;
 80097ea:	e029      	b.n	8009840 <u8g2_font_decode_glyph+0x170>
                case 2:
                    x0 -= decode->glyph_width;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	7dfa      	ldrb	r2, [r7, #23]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	75fb      	strb	r3, [r7, #23]
                    x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	3301      	adds	r3, #1
 80097fe:	75fb      	strb	r3, [r7, #23]
                    x1++;
 8009800:	7dbb      	ldrb	r3, [r7, #22]
 8009802:	3301      	adds	r3, #1
 8009804:	75bb      	strb	r3, [r7, #22]
                    y0 -= h;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	7d7a      	ldrb	r2, [r7, #21]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	757b      	strb	r3, [r7, #21]
                    y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800980e:	7d7b      	ldrb	r3, [r7, #21]
 8009810:	3301      	adds	r3, #1
 8009812:	757b      	strb	r3, [r7, #21]
                    y1++;
 8009814:	7d3b      	ldrb	r3, [r7, #20]
 8009816:	3301      	adds	r3, #1
 8009818:	753b      	strb	r3, [r7, #20]
                    break;
 800981a:	e011      	b.n	8009840 <u8g2_font_decode_glyph+0x170>
                case 3:
                    x1 += h;
 800981c:	7bfa      	ldrb	r2, [r7, #15]
 800981e:	7dbb      	ldrb	r3, [r7, #22]
 8009820:	4413      	add	r3, r2
 8009822:	75bb      	strb	r3, [r7, #22]
                    y0 -= decode->glyph_width;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	7d7a      	ldrb	r2, [r7, #21]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	757b      	strb	r3, [r7, #21]
                    y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8009832:	7d7b      	ldrb	r3, [r7, #21]
 8009834:	3301      	adds	r3, #1
 8009836:	757b      	strb	r3, [r7, #21]
                    y1++;
 8009838:	7d3b      	ldrb	r3, [r7, #20]
 800983a:	3301      	adds	r3, #1
 800983c:	753b      	strb	r3, [r7, #20]
                    break;
 800983e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

            if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8009840:	7db8      	ldrb	r0, [r7, #22]
 8009842:	7d7a      	ldrb	r2, [r7, #21]
 8009844:	7df9      	ldrb	r1, [r7, #23]
 8009846:	7d3b      	ldrb	r3, [r7, #20]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	4603      	mov	r3, r0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fc4e 	bl	800a0ee <u8g2_IsIntersection>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d102      	bne.n	800985e <u8g2_font_decode_glyph+0x18e>
                return d;
 8009858:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800985c:	e03a      	b.n	80098d4 <u8g2_font_decode_glyph+0x204>
        }
#endif /* U8G2_WITH_INTERSECTION */

        /* reset local x/y position */
        decode->x = 0;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2200      	movs	r2, #0
 8009862:	719a      	strb	r2, [r3, #6]
        decode->y = 0;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	2200      	movs	r2, #0
 8009868:	71da      	strb	r2, [r3, #7]

        /* decode glyph */
        for (;;)
        {
            a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8009870:	4619      	mov	r1, r3
 8009872:	6938      	ldr	r0, [r7, #16]
 8009874:	f7ff fda1 	bl	80093ba <u8g2_font_decode_get_unsigned_bits>
 8009878:	4603      	mov	r3, r0
 800987a:	72fb      	strb	r3, [r7, #11]
            b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8009882:	4619      	mov	r1, r3
 8009884:	6938      	ldr	r0, [r7, #16]
 8009886:	f7ff fd98 	bl	80093ba <u8g2_font_decode_get_unsigned_bits>
 800988a:	4603      	mov	r3, r0
 800988c:	72bb      	strb	r3, [r7, #10]
            do
            {
                u8g2_font_decode_len(u8g2, a, 0);
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	2200      	movs	r2, #0
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff fe5e 	bl	8009556 <u8g2_font_decode_len>
                u8g2_font_decode_len(u8g2, b, 1);
 800989a:	7abb      	ldrb	r3, [r7, #10]
 800989c:	2201      	movs	r2, #1
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff fe58 	bl	8009556 <u8g2_font_decode_len>
            }
            while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 80098a6:	2101      	movs	r1, #1
 80098a8:	6938      	ldr	r0, [r7, #16]
 80098aa:	f7ff fd86 	bl	80093ba <u8g2_font_decode_get_unsigned_bits>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1ec      	bne.n	800988e <u8g2_font_decode_glyph+0x1be>

            if (decode->y >= h)
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80098ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80098be:	429a      	cmp	r2, r3
 80098c0:	dd00      	ble.n	80098c4 <u8g2_font_decode_glyph+0x1f4>
            a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80098c2:	e7d2      	b.n	800986a <u8g2_font_decode_glyph+0x19a>
                break;
 80098c4:	bf00      	nop
        }

        /* restore the u8g2 draw color, because this is modified by the decode algo */
        u8g2->draw_color = decode->fg_color;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	7b1a      	ldrb	r2, [r3, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    }
    return d;
 80098d0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <u8g2_font_get_glyph_data>:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t* u8g2, uint16_t encoding)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	807b      	strh	r3, [r7, #2]
    const uint8_t* font = u8g2->font;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ec:	617b      	str	r3, [r7, #20]
    font += U8G2_FONT_DATA_STRUCT_SIZE;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	3317      	adds	r3, #23
 80098f2:	617b      	str	r3, [r7, #20]

    if (encoding <= 255)
 80098f4:	887b      	ldrh	r3, [r7, #2]
 80098f6:	2bff      	cmp	r3, #255	; 0xff
 80098f8:	d82a      	bhi.n	8009950 <u8g2_font_get_glyph_data+0x74>
    {
        if (encoding >= 'a')
 80098fa:	887b      	ldrh	r3, [r7, #2]
 80098fc:	2b60      	cmp	r3, #96	; 0x60
 80098fe:	d907      	bls.n	8009910 <u8g2_font_get_glyph_data+0x34>
        {
            font += u8g2->font_info.start_pos_lower_a;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8009906:	461a      	mov	r2, r3
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	4413      	add	r3, r2
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e009      	b.n	8009924 <u8g2_font_get_glyph_data+0x48>
        }
        else if (encoding >= 'A')
 8009910:	887b      	ldrh	r3, [r7, #2]
 8009912:	2b40      	cmp	r3, #64	; 0x40
 8009914:	d906      	bls.n	8009924 <u8g2_font_get_glyph_data+0x48>
        {
            font += u8g2->font_info.start_pos_upper_A;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800991c:	461a      	mov	r2, r3
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	4413      	add	r3, r2
 8009922:	617b      	str	r3, [r7, #20]
        }

        for (;;)
        {
            if ( u8x8_pgm_read( font + 1 ) == 0)
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	3301      	adds	r3, #1
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d04e      	beq.n	80099cc <u8g2_font_get_glyph_data+0xf0>
                break;
            if ( u8x8_pgm_read( font ) == encoding)
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	887a      	ldrh	r2, [r7, #2]
 8009936:	429a      	cmp	r2, r3
 8009938:	d102      	bne.n	8009940 <u8g2_font_get_glyph_data+0x64>
            {
                return font + 2; /* skip encoding and glyph size */
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	3302      	adds	r3, #2
 800993e:	e049      	b.n	80099d4 <u8g2_font_get_glyph_data+0xf8>
            }
            font += u8x8_pgm_read(font + 1);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	3301      	adds	r3, #1
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	4413      	add	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
            if ( u8x8_pgm_read( font + 1 ) == 0)
 800994e:	e7e9      	b.n	8009924 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

        font += u8g2->font_info.start_pos_unicode;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8009956:	461a      	mov	r2, r3
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	4413      	add	r3, r2
 800995c:	617b      	str	r3, [r7, #20]
        unicode_lookup_table = font;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	613b      	str	r3, [r7, #16]

        /* issue 596: search for the glyph start in the unicode lookup table */
        do
        {
            font += u8g2_font_get_word(unicode_lookup_table, 0);
 8009962:	2100      	movs	r1, #0
 8009964:	6938      	ldr	r0, [r7, #16]
 8009966:	f7ff fc5f 	bl	8009228 <u8g2_font_get_word>
 800996a:	4603      	mov	r3, r0
 800996c:	461a      	mov	r2, r3
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	617b      	str	r3, [r7, #20]
            e = u8g2_font_get_word(unicode_lookup_table, 2);
 8009974:	2102      	movs	r1, #2
 8009976:	6938      	ldr	r0, [r7, #16]
 8009978:	f7ff fc56 	bl	8009228 <u8g2_font_get_word>
 800997c:	4603      	mov	r3, r0
 800997e:	81fb      	strh	r3, [r7, #14]
            unicode_lookup_table += 4;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	3304      	adds	r3, #4
 8009984:	613b      	str	r3, [r7, #16]
        }
        while (e < encoding);
 8009986:	89fa      	ldrh	r2, [r7, #14]
 8009988:	887b      	ldrh	r3, [r7, #2]
 800998a:	429a      	cmp	r2, r3
 800998c:	d3e9      	bcc.n	8009962 <u8g2_font_get_glyph_data+0x86>

        for (;;)
        {
            e = u8x8_pgm_read(font);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	81fb      	strh	r3, [r7, #14]
            e <<= 8;
 8009994:	89fb      	ldrh	r3, [r7, #14]
 8009996:	021b      	lsls	r3, r3, #8
 8009998:	81fb      	strh	r3, [r7, #14]
            e |= u8x8_pgm_read(font + 1);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	3301      	adds	r3, #1
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	89fb      	ldrh	r3, [r7, #14]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

            if (e == 0)
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d010      	beq.n	80099d0 <u8g2_font_get_glyph_data+0xf4>
                break;

            if (e == encoding)
 80099ae:	89fa      	ldrh	r2, [r7, #14]
 80099b0:	887b      	ldrh	r3, [r7, #2]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d102      	bne.n	80099bc <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
                return font + 3; /* skip encoding and glyph size */
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	3303      	adds	r3, #3
 80099ba:	e00b      	b.n	80099d4 <u8g2_font_get_glyph_data+0xf8>
            }
            font += u8x8_pgm_read(font + 2);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	3302      	adds	r3, #2
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	4413      	add	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]
            e = u8x8_pgm_read(font);
 80099ca:	e7e0      	b.n	800998e <u8g2_font_get_glyph_data+0xb2>
                break;
 80099cc:	bf00      	nop
 80099ce:	e000      	b.n	80099d2 <u8g2_font_get_glyph_data+0xf6>
                break;
 80099d0:	bf00      	nop
        }
    }
#endif

    return NULL;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y,
        uint16_t encoding)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	461a      	mov	r2, r3
 80099ea:	4603      	mov	r3, r0
 80099ec:	70fb      	strb	r3, [r7, #3]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70bb      	strb	r3, [r7, #2]
 80099f2:	4613      	mov	r3, r2
 80099f4:	803b      	strh	r3, [r7, #0]
    u8g2_uint_t dx = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
    u8g2->font_decode.target_x = x;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    u8g2->font_decode.target_y = y;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	78ba      	ldrb	r2, [r7, #2]
 8009a06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    //u8g2->font_decode.is_transparent = is_transparent; this is already set
    //u8g2->font_decode.dir = dir;
    const uint8_t* glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8009a0a:	883b      	ldrh	r3, [r7, #0]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff ff64 	bl	80098dc <u8g2_font_get_glyph_data>
 8009a14:	60b8      	str	r0, [r7, #8]
    if (glyph_data != NULL)
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <u8g2_font_draw_glyph+0x4c>
    {
        dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fe56 	bl	80096d0 <u8g2_font_decode_glyph>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
    }
    return dx;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures  
 */
void u8g2_SetFontMode(u8g2_t* u8g2, uint8_t is_transparent)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
    u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	78fa      	ldrb	r2, [r7, #3]
 8009a42:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
	...

08009a54 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	4611      	mov	r1, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	70fb      	strb	r3, [r7, #3]
 8009a66:	460b      	mov	r3, r1
 8009a68:	70bb      	strb	r3, [r7, #2]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
    switch (u8g2->font_decode.dir)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d833      	bhi.n	8009ae0 <u8g2_DrawGlyph+0x8c>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <u8g2_DrawGlyph+0x2c>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a91 	.word	0x08009a91
 8009a84:	08009aa5 	.word	0x08009aa5
 8009a88:	08009ab9 	.word	0x08009ab9
 8009a8c:	08009acd 	.word	0x08009acd
    {
        case 0:
            y += u8g2->font_calc_vref(u8g2);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	78bb      	ldrb	r3, [r7, #2]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	70bb      	strb	r3, [r7, #2]
            break;
 8009aa2:	e01d      	b.n	8009ae0 <u8g2_DrawGlyph+0x8c>
        case 1:
            x -= u8g2->font_calc_vref(u8g2);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	4798      	blx	r3
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	70fb      	strb	r3, [r7, #3]
            break;
 8009ab6:	e013      	b.n	8009ae0 <u8g2_DrawGlyph+0x8c>
        case 2:
            y -= u8g2->font_calc_vref(u8g2);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	78bb      	ldrb	r3, [r7, #2]
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	70bb      	strb	r3, [r7, #2]
            break;
 8009aca:	e009      	b.n	8009ae0 <u8g2_DrawGlyph+0x8c>
        case 3:
            x += u8g2->font_calc_vref(u8g2);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	78fb      	ldrb	r3, [r7, #3]
 8009ada:	4413      	add	r3, r2
 8009adc:	70fb      	strb	r3, [r7, #3]
            break;
 8009ade:	bf00      	nop
    }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
    return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8009ae0:	883b      	ldrh	r3, [r7, #0]
 8009ae2:	78ba      	ldrb	r2, [r7, #2]
 8009ae4:	78f9      	ldrb	r1, [r7, #3]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ff78 	bl	80099dc <u8g2_font_draw_glyph>
 8009aec:	4603      	mov	r3, r0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop

08009af8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, const char* str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, const char* str)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	607b      	str	r3, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	72fb      	strb	r3, [r7, #11]
 8009b06:	4613      	mov	r3, r2
 8009b08:	72bb      	strb	r3, [r7, #10]
    uint16_t e;
    u8g2_uint_t delta, sum;
    u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 fdc2 	bl	800a694 <u8x8_utf8_init>
    sum = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	75fb      	strb	r3, [r7, #23]
    for (;;)
    {
        e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	7812      	ldrb	r2, [r2, #0]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	4798      	blx	r3
 8009b22:	4603      	mov	r3, r0
 8009b24:	82bb      	strh	r3, [r7, #20]
        if (e == 0x0ffff)
 8009b26:	8abb      	ldrh	r3, [r7, #20]
 8009b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d038      	beq.n	8009ba2 <u8g2_draw_string+0xaa>
            break;
        str++;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3301      	adds	r3, #1
 8009b34:	607b      	str	r3, [r7, #4]
        if (e != 0x0fffe)
 8009b36:	8abb      	ldrh	r3, [r7, #20]
 8009b38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d0e9      	beq.n	8009b14 <u8g2_draw_string+0x1c>
        {
            delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8009b40:	8abb      	ldrh	r3, [r7, #20]
 8009b42:	7aba      	ldrb	r2, [r7, #10]
 8009b44:	7af9      	ldrb	r1, [r7, #11]
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff ff84 	bl	8009a54 <u8g2_DrawGlyph>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	74fb      	strb	r3, [r7, #19]

#ifdef U8G2_WITH_FONT_ROTATION
            switch (u8g2->font_decode.dir)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d81e      	bhi.n	8009b98 <u8g2_draw_string+0xa0>
 8009b5a:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <u8g2_draw_string+0x68>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009b71 	.word	0x08009b71
 8009b64:	08009b7b 	.word	0x08009b7b
 8009b68:	08009b85 	.word	0x08009b85
 8009b6c:	08009b8f 	.word	0x08009b8f
            {
                case 0:
                    x += delta;
 8009b70:	7afa      	ldrb	r2, [r7, #11]
 8009b72:	7cfb      	ldrb	r3, [r7, #19]
 8009b74:	4413      	add	r3, r2
 8009b76:	72fb      	strb	r3, [r7, #11]
                    break;
 8009b78:	e00e      	b.n	8009b98 <u8g2_draw_string+0xa0>
                case 1:
                    y += delta;
 8009b7a:	7aba      	ldrb	r2, [r7, #10]
 8009b7c:	7cfb      	ldrb	r3, [r7, #19]
 8009b7e:	4413      	add	r3, r2
 8009b80:	72bb      	strb	r3, [r7, #10]
                    break;
 8009b82:	e009      	b.n	8009b98 <u8g2_draw_string+0xa0>
                case 2:
                    x -= delta;
 8009b84:	7afa      	ldrb	r2, [r7, #11]
 8009b86:	7cfb      	ldrb	r3, [r7, #19]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	72fb      	strb	r3, [r7, #11]
                    break;
 8009b8c:	e004      	b.n	8009b98 <u8g2_draw_string+0xa0>
                case 3:
                    y -= delta;
 8009b8e:	7aba      	ldrb	r2, [r7, #10]
 8009b90:	7cfb      	ldrb	r3, [r7, #19]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	72bb      	strb	r3, [r7, #10]
                    break;
 8009b96:	bf00      	nop

#else
      x += delta;
#endif

            sum += delta;
 8009b98:	7dfa      	ldrb	r2, [r7, #23]
 8009b9a:	7cfb      	ldrb	r3, [r7, #19]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	75fb      	strb	r3, [r7, #23]
        e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8009ba0:	e7b8      	b.n	8009b14 <u8g2_draw_string+0x1c>
            break;
 8009ba2:	bf00      	nop
        }
    }
    return sum;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop

08009bb0 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, const char* str)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	607b      	str	r3, [r7, #4]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	72fb      	strb	r3, [r7, #11]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	72bb      	strb	r3, [r7, #10]
    u8g2->u8x8.next_cb = u8x8_ascii_next;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4a06      	ldr	r2, [pc, #24]	; (8009be0 <u8g2_DrawStr+0x30>)
 8009bc6:	605a      	str	r2, [r3, #4]
    return u8g2_draw_string(u8g2, x, y, str);
 8009bc8:	7aba      	ldrb	r2, [r7, #10]
 8009bca:	7af9      	ldrb	r1, [r7, #11]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff ff92 	bl	8009af8 <u8g2_draw_string>
 8009bd4:	4603      	mov	r3, r0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	0800a6b1 	.word	0x0800a6b1

08009be4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t* u8g2)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
    if (u8g2->font == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d05d      	beq.n	8009cb0 <u8g2_UpdateRefHeight+0xcc>
        return;
    u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d04d      	beq.n	8009cb2 <u8g2_UpdateRefHeight+0xce>
    {
    }
    else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d11c      	bne.n	8009c5a <u8g2_UpdateRefHeight+0x76>
    {
        if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	da05      	bge.n	8009c3c <u8g2_UpdateRefHeight+0x58>
            u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	dd32      	ble.n	8009cb2 <u8g2_UpdateRefHeight+0xce>
            u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8009c58:	e02b      	b.n	8009cb2 <u8g2_UpdateRefHeight+0xce>
    }
    else
    {
        if (u8g2->font_ref_ascent < u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8009c60:	461a      	mov	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8009c68:	4619      	mov	r1, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8009c70:	440b      	add	r3, r1
 8009c72:	429a      	cmp	r2, r3
 8009c74:	da0d      	bge.n	8009c92 <u8g2_UpdateRefHeight+0xae>
            u8g2->font_ref_ascent = u8g2->font_info.max_char_height + u8g2->font_info.y_offset;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	b25a      	sxtb	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	dd07      	ble.n	8009cb2 <u8g2_UpdateRefHeight+0xce>
            u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8009cae:	e000      	b.n	8009cb2 <u8g2_UpdateRefHeight+0xce>
        return;
 8009cb0:	bf00      	nop
    }
}
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <u8g2_SetFontRefHeightExtendedText>:
    u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_TEXT;
    u8g2_UpdateRefHeight(u8g2);
}

void u8g2_SetFontRefHeightExtendedText(u8g2_t* u8g2)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
    u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_XTEXT;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    u8g2_UpdateRefHeight(u8g2);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ff89 	bl	8009be4 <u8g2_UpdateRefHeight>
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t* u8g2)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
    return 0;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t* u8g2)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
    u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a04      	ldr	r2, [pc, #16]	; (8009d0c <u8g2_SetFontPosBaseline+0x1c>)
 8009cfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	08009cdb 	.word	0x08009cdb

08009d10 <u8g2_font_calc_vref_top>:
{
    u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t* u8g2)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
    u8g2_uint_t tmp;
    /* reference pos is one pixel above the upper edge of the reference glyph */
    tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8009d1e:	73fb      	strb	r3, [r7, #15]
    tmp++;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	3301      	adds	r3, #1
 8009d24:	73fb      	strb	r3, [r7, #15]
    return tmp;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t* u8g2)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
    u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a04      	ldr	r2, [pc, #16]	; (8009d50 <u8g2_SetFontPosTop+0x1c>)
 8009d40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009d42:	bf00      	nop
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	08009d11 	.word	0x08009d11

08009d54 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t* u8g2, const uint8_t* font)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
    if (u8g2->font != font)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d00b      	beq.n	8009d80 <u8g2_SetFont+0x2c>
    {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
        u8g2->font = font;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	64da      	str	r2, [r3, #76]	; 0x4c
        u8g2_read_font_info(&(u8g2->font_info), font);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3364      	adds	r3, #100	; 0x64
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fa77 	bl	8009268 <u8g2_read_font_info>
        u8g2_UpdateRefHeight(u8g2);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff ff32 	bl	8009be4 <u8g2_UpdateRefHeight>
        /* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
    }
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <u8g2_SetFontDirection>:
    u8g2->u8x8.next_cb = u8x8_utf8_next;
    return u8g2_string_width(u8g2, str);
}

void u8g2_SetFontDirection(u8g2_t* u8g2, uint8_t dir)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
    u8g2->font_decode.dir = dir;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	78fa      	ldrb	r2, [r7, #3]
 8009d98:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <u8g2_clip_intersection2>:

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t* ap, u8g2_uint_t* len, u8g2_uint_t c,
        u8g2_uint_t d)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	4611      	mov	r1, r2
 8009db4:	461a      	mov	r2, r3
 8009db6:	460b      	mov	r3, r1
 8009db8:	71fb      	strb	r3, [r7, #7]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	71bb      	strb	r3, [r7, #6]
    u8g2_uint_t a = *ap;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	75fb      	strb	r3, [r7, #23]
    u8g2_uint_t b;
    b = a;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	75bb      	strb	r3, [r7, #22]
    b += *len;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	7dbb      	ldrb	r3, [r7, #22]
 8009dce:	4413      	add	r3, r2
 8009dd0:	75bb      	strb	r3, [r7, #22]
    /* be removed completly (be aware about memory curruption for wrong */
    /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
    /* arguments) */

    /* removing the following if clause completly may lead to memory corruption of a>b */
    if (a > b)
 8009dd2:	7dfa      	ldrb	r2, [r7, #23]
 8009dd4:	7dbb      	ldrb	r3, [r7, #22]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d90b      	bls.n	8009df2 <u8g2_clip_intersection2+0x4a>
    {
        /* replacing this if with a simple "return 0;" will not handle the case with negative a */
        if (a < d)
 8009dda:	7dfa      	ldrb	r2, [r7, #23]
 8009ddc:	79bb      	ldrb	r3, [r7, #6]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d205      	bcs.n	8009dee <u8g2_clip_intersection2+0x46>
        {
            b = d;
 8009de2:	79bb      	ldrb	r3, [r7, #6]
 8009de4:	75bb      	strb	r3, [r7, #22]
            b--;
 8009de6:	7dbb      	ldrb	r3, [r7, #22]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	75bb      	strb	r3, [r7, #22]
 8009dec:	e001      	b.n	8009df2 <u8g2_clip_intersection2+0x4a>
        }
        else
        {
            a = c;
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	75fb      	strb	r3, [r7, #23]
        }
    }

    /* from now on, the asumption a <= b is ok */

    if (a >= d)
 8009df2:	7dfa      	ldrb	r2, [r7, #23]
 8009df4:	79bb      	ldrb	r3, [r7, #6]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d301      	bcc.n	8009dfe <u8g2_clip_intersection2+0x56>
        return 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e01c      	b.n	8009e38 <u8g2_clip_intersection2+0x90>
    if (b <= c)
 8009dfe:	7dba      	ldrb	r2, [r7, #22]
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d801      	bhi.n	8009e0a <u8g2_clip_intersection2+0x62>
        return 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e016      	b.n	8009e38 <u8g2_clip_intersection2+0x90>
    if (a < c)
 8009e0a:	7dfa      	ldrb	r2, [r7, #23]
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d201      	bcs.n	8009e16 <u8g2_clip_intersection2+0x6e>
        a = c;
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	75fb      	strb	r3, [r7, #23]
    if (b > d)
 8009e16:	7dba      	ldrb	r2, [r7, #22]
 8009e18:	79bb      	ldrb	r3, [r7, #6]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d901      	bls.n	8009e22 <u8g2_clip_intersection2+0x7a>
        b = d;
 8009e1e:	79bb      	ldrb	r3, [r7, #6]
 8009e20:	75bb      	strb	r3, [r7, #22]

    *ap = a;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	7dfa      	ldrb	r2, [r7, #23]
 8009e26:	701a      	strb	r2, [r3, #0]
    b -= a;
 8009e28:	7dba      	ldrb	r2, [r7, #22]
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	75bb      	strb	r3, [r7, #22]
    *len = b;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	7dba      	ldrb	r2, [r7, #22]
 8009e34:	701a      	strb	r2, [r3, #0]
    return 1;
 8009e36:	2301      	movs	r3, #1
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	371c      	adds	r7, #28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <u8g2_draw_hv_line_2dir>:
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len,
        uint8_t dir)
{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	4603      	mov	r3, r0
 8009e54:	70fb      	strb	r3, [r7, #3]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70bb      	strb	r3, [r7, #2]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	707b      	strb	r3, [r7, #1]

    /* clipping happens before the display rotation */

    /* transform to pixel buffer coordinates */
    y -= u8g2->pixel_curr_row;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e64:	78ba      	ldrb	r2, [r7, #2]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	70bb      	strb	r3, [r7, #2]

    u8g2->ll_hvline(u8g2, x, y, len, dir);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009e6e:	7878      	ldrb	r0, [r7, #1]
 8009e70:	78ba      	ldrb	r2, [r7, #2]
 8009e72:	78f9      	ldrb	r1, [r7, #3]
 8009e74:	7e3b      	ldrb	r3, [r7, #24]
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	4603      	mov	r3, r0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	47a0      	blx	r4
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd90      	pop	{r4, r7, pc}

08009e86 <u8g2_DrawHVLine>:
 This function should be called by the user.
 
 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8009e86:	b590      	push	{r4, r7, lr}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af02      	add	r7, sp, #8
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	4608      	mov	r0, r1
 8009e90:	4611      	mov	r1, r2
 8009e92:	461a      	mov	r2, r3
 8009e94:	4603      	mov	r3, r0
 8009e96:	70fb      	strb	r3, [r7, #3]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70bb      	strb	r3, [r7, #2]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	707b      	strb	r3, [r7, #1]
    /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
    /* The callback may rotate the hv line */
    /* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
    if (u8g2->is_page_clip_window_intersection != 0)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d06d      	beq.n	8009f86 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
        if (len != 0)
 8009eaa:	787b      	ldrb	r3, [r7, #1]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d06a      	beq.n	8009f86 <u8g2_DrawHVLine+0x100>
        {

            /* convert to two directions */
            if (len > 1)
 8009eb0:	787b      	ldrb	r3, [r7, #1]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d918      	bls.n	8009ee8 <u8g2_DrawHVLine+0x62>
            {
                if (dir == 2)
 8009eb6:	7e3b      	ldrb	r3, [r7, #24]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d109      	bne.n	8009ed0 <u8g2_DrawHVLine+0x4a>
                {
                    x -= len;
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	787b      	ldrb	r3, [r7, #1]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	70fb      	strb	r3, [r7, #3]
                    x++;
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	70fb      	strb	r3, [r7, #3]
 8009ece:	e00b      	b.n	8009ee8 <u8g2_DrawHVLine+0x62>
                }
                else if (dir == 3)
 8009ed0:	7e3b      	ldrb	r3, [r7, #24]
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d108      	bne.n	8009ee8 <u8g2_DrawHVLine+0x62>
                {
                    y -= len;
 8009ed6:	78ba      	ldrb	r2, [r7, #2]
 8009ed8:	787b      	ldrb	r3, [r7, #1]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	70bb      	strb	r3, [r7, #2]
                    y++;
 8009ee0:	78bb      	ldrb	r3, [r7, #2]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	70bb      	strb	r3, [r7, #2]
                }
            }
            dir &= 1;
 8009ee8:	7e3b      	ldrb	r3, [r7, #24]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	763b      	strb	r3, [r7, #24]

            /* clip against the user window */
            if (dir == 0)
 8009ef0:	7e3b      	ldrb	r3, [r7, #24]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d119      	bne.n	8009f2a <u8g2_DrawHVLine+0xa4>
            {
                if (y < u8g2->user_y0)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8009efc:	78bb      	ldrb	r3, [r7, #2]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d838      	bhi.n	8009f74 <u8g2_DrawHVLine+0xee>
                    return;
                if (y >= u8g2->user_y1)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009f08:	78bb      	ldrb	r3, [r7, #2]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d934      	bls.n	8009f78 <u8g2_DrawHVLine+0xf2>
                    return;
                if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f1a:	1c79      	adds	r1, r7, #1
 8009f1c:	1cf8      	adds	r0, r7, #3
 8009f1e:	f7ff ff43 	bl	8009da8 <u8g2_clip_intersection2>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d119      	bne.n	8009f5c <u8g2_DrawHVLine+0xd6>
                    return;
 8009f28:	e02d      	b.n	8009f86 <u8g2_DrawHVLine+0x100>
            }
            else
            {
                if (x < u8g2->user_x0)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d822      	bhi.n	8009f7c <u8g2_DrawHVLine+0xf6>
                    return;
                if (x >= u8g2->user_x1)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8009f3c:	78fb      	ldrb	r3, [r7, #3]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d91e      	bls.n	8009f80 <u8g2_DrawHVLine+0xfa>
                    return;
                if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f4e:	1c79      	adds	r1, r7, #1
 8009f50:	1cb8      	adds	r0, r7, #2
 8009f52:	f7ff ff29 	bl	8009da8 <u8g2_clip_intersection2>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d013      	beq.n	8009f84 <u8g2_DrawHVLine+0xfe>
                    return;
            }

            u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f60:	689c      	ldr	r4, [r3, #8]
 8009f62:	78f9      	ldrb	r1, [r7, #3]
 8009f64:	78ba      	ldrb	r2, [r7, #2]
 8009f66:	7878      	ldrb	r0, [r7, #1]
 8009f68:	7e3b      	ldrb	r3, [r7, #24]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	47a0      	blx	r4
 8009f72:	e008      	b.n	8009f86 <u8g2_DrawHVLine+0x100>
                    return;
 8009f74:	bf00      	nop
 8009f76:	e006      	b.n	8009f86 <u8g2_DrawHVLine+0x100>
                    return;
 8009f78:	bf00      	nop
 8009f7a:	e004      	b.n	8009f86 <u8g2_DrawHVLine+0x100>
                    return;
 8009f7c:	bf00      	nop
 8009f7e:	e002      	b.n	8009f86 <u8g2_DrawHVLine+0x100>
                    return;
 8009f80:	bf00      	nop
 8009f82:	e000      	b.n	8009f86 <u8g2_DrawHVLine+0x100>
                    return;
 8009f84:	bf00      	nop
        }
}
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd90      	pop	{r4, r7, pc}

08009f8c <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	70fb      	strb	r3, [r7, #3]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70bb      	strb	r3, [r7, #2]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
    u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8009fa6:	7878      	ldrb	r0, [r7, #1]
 8009fa8:	78ba      	ldrb	r2, [r7, #2]
 8009faa:	78f9      	ldrb	r1, [r7, #3]
 8009fac:	2300      	movs	r3, #0
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff ff67 	bl	8009e86 <u8g2_DrawHVLine>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	4608      	mov	r0, r1
 8009fca:	4611      	mov	r1, r2
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	70fb      	strb	r3, [r7, #3]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70bb      	strb	r3, [r7, #2]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
    u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8009fda:	7878      	ldrb	r0, [r7, #1]
 8009fdc:	78ba      	ldrb	r2, [r7, #2]
 8009fde:	78f9      	ldrb	r1, [r7, #3]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff ff4d 	bl	8009e86 <u8g2_DrawHVLine>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70fb      	strb	r3, [r7, #3]
 800a000:	4613      	mov	r3, r2
 800a002:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
    if (y < u8g2->user_y0)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a00a:	78ba      	ldrb	r2, [r7, #2]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d31a      	bcc.n	800a046 <u8g2_DrawPixel+0x52>
        return;
    if (y >= u8g2->user_y1)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a016:	78ba      	ldrb	r2, [r7, #2]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d216      	bcs.n	800a04a <u8g2_DrawPixel+0x56>
        return;
    if (x < u8g2->user_x0)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	429a      	cmp	r2, r3
 800a026:	d312      	bcc.n	800a04e <u8g2_DrawPixel+0x5a>
        return;
    if (x >= u8g2->user_x1)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a02e:	78fa      	ldrb	r2, [r7, #3]
 800a030:	429a      	cmp	r2, r3
 800a032:	d20e      	bcs.n	800a052 <u8g2_DrawPixel+0x5e>
        return;
#endif /* U8G2_WITH_INTERSECTION */
    u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800a034:	78ba      	ldrb	r2, [r7, #2]
 800a036:	78f9      	ldrb	r1, [r7, #3]
 800a038:	2300      	movs	r3, #0
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	2301      	movs	r3, #1
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff ff21 	bl	8009e86 <u8g2_DrawHVLine>
 800a044:	e006      	b.n	800a054 <u8g2_DrawPixel+0x60>
        return;
 800a046:	bf00      	nop
 800a048:	e004      	b.n	800a054 <u8g2_DrawPixel+0x60>
        return;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <u8g2_DrawPixel+0x60>
        return;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <u8g2_DrawPixel+0x60>
        return;
 800a052:	bf00      	nop
}
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <u8g2_SetDrawColor>:

 7 Jan 2017: Allow color value 2 for XOR operation.
 
 */
void u8g2_SetDrawColor(u8g2_t* u8g2, uint8_t color)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
    u8g2->draw_color = color; /* u8g2_SetDrawColor: just assign the argument */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if (color >= 3)
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d903      	bls.n	800a07c <u8g2_SetDrawColor+0x22>
        u8g2->draw_color = 1; /* u8g2_SetDrawColor: make color as one if arg is invalid */
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <u8g2_is_intersection_decision_tree>:
 a1 and v1 are excluded
 v0 == v1 is not support end return 1
 */
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0,
        u8g2_uint_t v1)
{
 800a088:	b490      	push	{r4, r7}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4604      	mov	r4, r0
 800a090:	4608      	mov	r0, r1
 800a092:	4611      	mov	r1, r2
 800a094:	461a      	mov	r2, r3
 800a096:	4623      	mov	r3, r4
 800a098:	71fb      	strb	r3, [r7, #7]
 800a09a:	4603      	mov	r3, r0
 800a09c:	71bb      	strb	r3, [r7, #6]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	717b      	strb	r3, [r7, #5]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	713b      	strb	r3, [r7, #4]
    if (v0 < a1)		// v0 <= a1
 800a0a6:	797a      	ldrb	r2, [r7, #5]
 800a0a8:	79bb      	ldrb	r3, [r7, #6]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d20d      	bcs.n	800a0ca <u8g2_is_intersection_decision_tree+0x42>
    {
        if (v1 > a0)	// v1 >= a0
 800a0ae:	793a      	ldrb	r2, [r7, #4]
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d901      	bls.n	800a0ba <u8g2_is_intersection_decision_tree+0x32>
        {
            return 1;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e014      	b.n	800a0e4 <u8g2_is_intersection_decision_tree+0x5c>
        }
        else
        {
            if (v0 > v1)	// v0 > v1
 800a0ba:	797a      	ldrb	r2, [r7, #5]
 800a0bc:	793b      	ldrb	r3, [r7, #4]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d901      	bls.n	800a0c6 <u8g2_is_intersection_decision_tree+0x3e>
            {
                return 1;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e00e      	b.n	800a0e4 <u8g2_is_intersection_decision_tree+0x5c>
            }
            else
            {
                return 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e00c      	b.n	800a0e4 <u8g2_is_intersection_decision_tree+0x5c>
            }
        }
    }
    else
    {
        if (v1 > a0)	// v1 >= a0
 800a0ca:	793a      	ldrb	r2, [r7, #4]
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d907      	bls.n	800a0e2 <u8g2_is_intersection_decision_tree+0x5a>
        {
            if (v0 > v1)	// v0 > v1
 800a0d2:	797a      	ldrb	r2, [r7, #5]
 800a0d4:	793b      	ldrb	r3, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d901      	bls.n	800a0de <u8g2_is_intersection_decision_tree+0x56>
            {
                return 1;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e002      	b.n	800a0e4 <u8g2_is_intersection_decision_tree+0x5c>
            }
            else
            {
                return 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e000      	b.n	800a0e4 <u8g2_is_intersection_decision_tree+0x5c>
            }
        }
        else
        {
            return 0;
 800a0e2:	2300      	movs	r3, #0
        }
    }
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bc90      	pop	{r4, r7}
 800a0ec:	4770      	bx	lr

0800a0ee <u8g2_IsIntersection>:

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1,
        u8g2_uint_t y1)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	70fb      	strb	r3, [r7, #3]
 800a100:	460b      	mov	r3, r1
 800a102:	70bb      	strb	r3, [r7, #2]
 800a104:	4613      	mov	r3, r2
 800a106:	707b      	strb	r3, [r7, #1]
    if (u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800a114:	7c3b      	ldrb	r3, [r7, #16]
 800a116:	78ba      	ldrb	r2, [r7, #2]
 800a118:	f7ff ffb6 	bl	800a088 <u8g2_is_intersection_decision_tree>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <u8g2_IsIntersection+0x38>
        return 0;
 800a122:	2300      	movs	r3, #0
 800a124:	e00a      	b.n	800a13c <u8g2_IsIntersection+0x4e>

    return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 800a132:	787b      	ldrb	r3, [r7, #1]
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	f7ff ffa7 	bl	800a088 <u8g2_is_intersection_decision_tree>
 800a13a:	4603      	mov	r3, r0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	4608      	mov	r0, r1
 800a14e:	4611      	mov	r1, r2
 800a150:	461a      	mov	r2, r3
 800a152:	4603      	mov	r3, r0
 800a154:	70fb      	strb	r3, [r7, #3]
 800a156:	460b      	mov	r3, r1
 800a158:	70bb      	strb	r3, [r7, #2]
 800a15a:	4613      	mov	r3, r2
 800a15c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	787b      	ldrb	r3, [r7, #1]
 800a166:	429a      	cmp	r2, r3
 800a168:	d904      	bls.n	800a174 <u8g2_DrawLine+0x30>
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	787b      	ldrb	r3, [r7, #1]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	737b      	strb	r3, [r7, #13]
 800a172:	e003      	b.n	800a17c <u8g2_DrawLine+0x38>
 800a174:	787a      	ldrb	r2, [r7, #1]
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800a17c:	78ba      	ldrb	r2, [r7, #2]
 800a17e:	7e3b      	ldrb	r3, [r7, #24]
 800a180:	429a      	cmp	r2, r3
 800a182:	d904      	bls.n	800a18e <u8g2_DrawLine+0x4a>
 800a184:	78ba      	ldrb	r2, [r7, #2]
 800a186:	7e3b      	ldrb	r3, [r7, #24]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	733b      	strb	r3, [r7, #12]
 800a18c:	e003      	b.n	800a196 <u8g2_DrawLine+0x52>
 800a18e:	7e3a      	ldrb	r2, [r7, #24]
 800a190:	78bb      	ldrb	r3, [r7, #2]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 800a196:	7b3a      	ldrb	r2, [r7, #12]
 800a198:	7b7b      	ldrb	r3, [r7, #13]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d913      	bls.n	800a1c6 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 800a1a2:	7b7b      	ldrb	r3, [r7, #13]
 800a1a4:	723b      	strb	r3, [r7, #8]
 800a1a6:	7b3b      	ldrb	r3, [r7, #12]
 800a1a8:	737b      	strb	r3, [r7, #13]
 800a1aa:	7a3b      	ldrb	r3, [r7, #8]
 800a1ac:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 800a1ae:	78fb      	ldrb	r3, [r7, #3]
 800a1b0:	723b      	strb	r3, [r7, #8]
 800a1b2:	78bb      	ldrb	r3, [r7, #2]
 800a1b4:	70fb      	strb	r3, [r7, #3]
 800a1b6:	7a3b      	ldrb	r3, [r7, #8]
 800a1b8:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 800a1ba:	787b      	ldrb	r3, [r7, #1]
 800a1bc:	723b      	strb	r3, [r7, #8]
 800a1be:	7e3b      	ldrb	r3, [r7, #24]
 800a1c0:	707b      	strb	r3, [r7, #1]
 800a1c2:	7a3b      	ldrb	r3, [r7, #8]
 800a1c4:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	787b      	ldrb	r3, [r7, #1]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d90b      	bls.n	800a1e6 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	723b      	strb	r3, [r7, #8]
 800a1d2:	787b      	ldrb	r3, [r7, #1]
 800a1d4:	70fb      	strb	r3, [r7, #3]
 800a1d6:	7a3b      	ldrb	r3, [r7, #8]
 800a1d8:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 800a1da:	78bb      	ldrb	r3, [r7, #2]
 800a1dc:	723b      	strb	r3, [r7, #8]
 800a1de:	7e3b      	ldrb	r3, [r7, #24]
 800a1e0:	70bb      	strb	r3, [r7, #2]
 800a1e2:	7a3b      	ldrb	r3, [r7, #8]
 800a1e4:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 800a1e6:	7b7b      	ldrb	r3, [r7, #13]
 800a1e8:	085b      	lsrs	r3, r3, #1
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800a1ee:	7e3a      	ldrb	r2, [r7, #24]
 800a1f0:	78bb      	ldrb	r3, [r7, #2]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d902      	bls.n	800a1fc <u8g2_DrawLine+0xb8>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	72bb      	strb	r3, [r7, #10]
 800a1fa:	e001      	b.n	800a200 <u8g2_DrawLine+0xbc>
 800a1fc:	23ff      	movs	r3, #255	; 0xff
 800a1fe:	72bb      	strb	r3, [r7, #10]
  y = y1;
 800a200:	78bb      	ldrb	r3, [r7, #2]
 800a202:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 800a204:	787b      	ldrb	r3, [r7, #1]
 800a206:	2bff      	cmp	r3, #255	; 0xff
 800a208:	d102      	bne.n	800a210 <u8g2_DrawLine+0xcc>
    x2--;
 800a20a:	787b      	ldrb	r3, [r7, #1]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	73fb      	strb	r3, [r7, #15]
 800a214:	e024      	b.n	800a260 <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 800a216:	7a7b      	ldrb	r3, [r7, #9]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d106      	bne.n	800a22a <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 800a21c:	7bba      	ldrb	r2, [r7, #14]
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff fee6 	bl	8009ff4 <u8g2_DrawPixel>
 800a228:	e005      	b.n	800a236 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800a22a:	7bfa      	ldrb	r2, [r7, #15]
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fedf 	bl	8009ff4 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800a236:	7afa      	ldrb	r2, [r7, #11]
 800a238:	7b3b      	ldrb	r3, [r7, #12]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 800a240:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a244:	2b00      	cmp	r3, #0
 800a246:	da08      	bge.n	800a25a <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 800a248:	7aba      	ldrb	r2, [r7, #10]
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	4413      	add	r3, r2
 800a24e:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 800a250:	7afa      	ldrb	r2, [r7, #11]
 800a252:	7b7b      	ldrb	r3, [r7, #13]
 800a254:	4413      	add	r3, r2
 800a256:	b2db      	uxtb	r3, r3
 800a258:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	3301      	adds	r3, #1
 800a25e:	73fb      	strb	r3, [r7, #15]
 800a260:	7bfa      	ldrb	r2, [r7, #15]
 800a262:	787b      	ldrb	r3, [r7, #1]
 800a264:	429a      	cmp	r2, r3
 800a266:	d9d6      	bls.n	800a216 <u8g2_DrawLine+0xd2>
    }
  }
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <u8g2_ll_hvline_vertical_top_lsb>:
 asumption: 
 all clipping done
 */
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len,
        uint8_t dir)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	4608      	mov	r0, r1
 800a27a:	4611      	mov	r1, r2
 800a27c:	461a      	mov	r2, r3
 800a27e:	4603      	mov	r3, r0
 800a280:	70fb      	strb	r3, [r7, #3]
 800a282:	460b      	mov	r3, r1
 800a284:	70bb      	strb	r3, [r7, #2]
 800a286:	4613      	mov	r3, r2
 800a288:	707b      	strb	r3, [r7, #1]
    //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
    //assert(y >= u8g2->buf_y0);
    //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);

    /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
    bit_pos = y; /* overflow truncate is ok here... */
 800a28a:	78bb      	ldrb	r3, [r7, #2]
 800a28c:	74fb      	strb	r3, [r7, #19]
    bit_pos &= 7; /* ... because only the lowest 3 bits are needed */
 800a28e:	7cfb      	ldrb	r3, [r7, #19]
 800a290:	f003 0307 	and.w	r3, r3, #7
 800a294:	74fb      	strb	r3, [r7, #19]
    mask = 1;
 800a296:	2301      	movs	r3, #1
 800a298:	743b      	strb	r3, [r7, #16]
    mask <<= bit_pos;
 800a29a:	7c3a      	ldrb	r2, [r7, #16]
 800a29c:	7cfb      	ldrb	r3, [r7, #19]
 800a29e:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a2:	743b      	strb	r3, [r7, #16]

    or_mask = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	74bb      	strb	r3, [r7, #18]
    xor_mask = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	747b      	strb	r3, [r7, #17]
    if (u8g2->draw_color <= 1)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d801      	bhi.n	800a2ba <u8g2_ll_hvline_vertical_top_lsb+0x4a>
        or_mask = mask;
 800a2b6:	7c3b      	ldrb	r3, [r7, #16]
 800a2b8:	74bb      	strb	r3, [r7, #18]
    if (u8g2->draw_color != 1)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d001      	beq.n	800a2c8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
        xor_mask = mask;
 800a2c4:	7c3b      	ldrb	r3, [r7, #16]
 800a2c6:	747b      	strb	r3, [r7, #17]

    offset = y; /* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800a2c8:	78bb      	ldrb	r3, [r7, #2]
 800a2ca:	81fb      	strh	r3, [r7, #14]
    offset &= ~7;
 800a2cc:	89fb      	ldrh	r3, [r7, #14]
 800a2ce:	f023 0307 	bic.w	r3, r3, #7
 800a2d2:	81fb      	strh	r3, [r7, #14]
    offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	7c1b      	ldrb	r3, [r3, #16]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	89fa      	ldrh	r2, [r7, #14]
 800a2de:	fb12 f303 	smulbb	r3, r2, r3
 800a2e2:	81fb      	strh	r3, [r7, #14]
    ptr = u8g2->tile_buf_ptr;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e8:	617b      	str	r3, [r7, #20]
    ptr += offset;
 800a2ea:	89fb      	ldrh	r3, [r7, #14]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
    ptr += x;
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	617b      	str	r3, [r7, #20]

    if (dir == 0)
 800a2fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d117      	bne.n	800a332 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
        do
        {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
            *ptr |= or_mask;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	781a      	ldrb	r2, [r3, #0]
 800a306:	7cbb      	ldrb	r3, [r7, #18]
 800a308:	4313      	orrs	r3, r2
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	701a      	strb	r2, [r3, #0]
            *ptr ^= xor_mask;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	7c7b      	ldrb	r3, [r7, #17]
 800a316:	4053      	eors	r3, r2
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	701a      	strb	r2, [r3, #0]
            ptr++;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	3301      	adds	r3, #1
 800a322:	617b      	str	r3, [r7, #20]
            len--;
 800a324:	787b      	ldrb	r3, [r7, #1]
 800a326:	3b01      	subs	r3, #1
 800a328:	707b      	strb	r3, [r7, #1]
        }
        while (len != 0);
 800a32a:	787b      	ldrb	r3, [r7, #1]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e8      	bne.n	800a302 <u8g2_ll_hvline_vertical_top_lsb+0x92>
                xor_mask <<= 1;
            }
        }
        while (len != 0);
    }
}
 800a330:	e039      	b.n	800a3a6 <u8g2_ll_hvline_vertical_top_lsb+0x136>
            *ptr |= or_mask;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	7cbb      	ldrb	r3, [r7, #18]
 800a338:	4313      	orrs	r3, r2
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	701a      	strb	r2, [r3, #0]
            *ptr ^= xor_mask;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	781a      	ldrb	r2, [r3, #0]
 800a344:	7c7b      	ldrb	r3, [r7, #17]
 800a346:	4053      	eors	r3, r2
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	701a      	strb	r2, [r3, #0]
            bit_pos++;
 800a34e:	7cfb      	ldrb	r3, [r7, #19]
 800a350:	3301      	adds	r3, #1
 800a352:	74fb      	strb	r3, [r7, #19]
            bit_pos &= 7;
 800a354:	7cfb      	ldrb	r3, [r7, #19]
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	74fb      	strb	r3, [r7, #19]
            len--;
 800a35c:	787b      	ldrb	r3, [r7, #1]
 800a35e:	3b01      	subs	r3, #1
 800a360:	707b      	strb	r3, [r7, #1]
            if (bit_pos == 0)
 800a362:	7cfb      	ldrb	r3, [r7, #19]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d115      	bne.n	800a394 <u8g2_ll_hvline_vertical_top_lsb+0x124>
                ptr += u8g2->pixel_buf_width; /* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a36e:	461a      	mov	r2, r3
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	4413      	add	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
                if (u8g2->draw_color <= 1)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d801      	bhi.n	800a384 <u8g2_ll_hvline_vertical_top_lsb+0x114>
                    or_mask = 1;
 800a380:	2301      	movs	r3, #1
 800a382:	74bb      	strb	r3, [r7, #18]
                if (u8g2->draw_color != 1)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d008      	beq.n	800a3a0 <u8g2_ll_hvline_vertical_top_lsb+0x130>
                    xor_mask = 1;
 800a38e:	2301      	movs	r3, #1
 800a390:	747b      	strb	r3, [r7, #17]
 800a392:	e005      	b.n	800a3a0 <u8g2_ll_hvline_vertical_top_lsb+0x130>
                or_mask <<= 1;
 800a394:	7cbb      	ldrb	r3, [r7, #18]
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	74bb      	strb	r3, [r7, #18]
                xor_mask <<= 1;
 800a39a:	7c7b      	ldrb	r3, [r7, #17]
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	747b      	strb	r3, [r7, #17]
        while (len != 0);
 800a3a0:	787b      	ldrb	r3, [r7, #1]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1c5      	bne.n	800a332 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800a3a6:	bf00      	nop
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <u8g2_SetMaxClipWindow>:
/*============================================*/

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t* u8g2)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
    u8g2->clip_x0 = 0;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    u8g2->clip_y0 = 0;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    u8g2->clip_x1 = (u8g2_uint_t) ~(u8g2_uint_t) 0;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	22ff      	movs	r2, #255	; 0xff
 800a3ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    u8g2->clip_y1 = (u8g2_uint_t) ~(u8g2_uint_t) 0;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	22ff      	movs	r2, #255	; 0xff
 800a3d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    u8g2->cb->update_page_win(u8g2);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <u8g2_SetupBuffer>:
 This procedure is called after setting up the display (u8x8 structure).
 --> This is the central init procedure for u8g2 object
 */
void u8g2_SetupBuffer(u8g2_t* u8g2, uint8_t* buf, uint8_t tile_buf_height,
        u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t* u8g2_cb)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	71fb      	strb	r3, [r7, #7]
    u8g2->font = NULL;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	64da      	str	r2, [r3, #76]	; 0x4c
    //u8g2->kerning = NULL;
    //u8g2->get_kerning_cb = u8g2_GetNullKerning;

    //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
    u8g2->ll_hvline = ll_hvline_cb;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	62da      	str	r2, [r3, #44]	; 0x2c

    u8g2->tile_buf_ptr = buf;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	635a      	str	r2, [r3, #52]	; 0x34
    u8g2->tile_buf_height = tile_buf_height;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	79fa      	ldrb	r2, [r7, #7]
 800a412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    u8g2->tile_curr_row = 0;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    u8g2->bitmap_transparency = 0;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    u8g2->draw_color = 1;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    u8g2->is_auto_page_clear = 1;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

    u8g2->cb = u8g2_cb;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
    u8g2->cb->update_dimension(u8g2);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
    u8g2_SetMaxClipWindow(u8g2); /* assign a clip window and call the update() procedure */
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7ff ffaf 	bl	800a3b2 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

    u8g2_SetFontPosBaseline(u8g2); /* issue 195 */
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff fc4b 	bl	8009cf0 <u8g2_SetFontPosBaseline>

#ifdef U8G2_WITH_FONT_ROTATION  
    u8g2->font_decode.dir = 0;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 800a462:	bf00      	nop
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <u8g2_update_dimension_common>:
 u8g2_uint_t buf_y0;
 u8g2_uint_t buf_y1; 	
 */

static void u8g2_update_dimension_common(u8g2_t* u8g2)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b085      	sub	sp, #20
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
    const u8x8_display_info_t* display_info = u8g2_GetU8x8(u8g2)->display_info;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60bb      	str	r3, [r7, #8]
    u8g2_uint_t t;

    t = u8g2->tile_buf_height;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a47e:	73fb      	strb	r3, [r7, #15]
    t *= 8;
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	73fb      	strb	r3, [r7, #15]
    u8g2->pixel_buf_height = t;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7bfa      	ldrb	r2, [r7, #15]
 800a48a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

    t = display_info->tile_width;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	7c1b      	ldrb	r3, [r3, #16]
 800a492:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
    if (t >= 32)
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b1f      	cmp	r3, #31
 800a498:	d901      	bls.n	800a49e <u8g2_update_dimension_common+0x34>
        t = 31;
 800a49a:	231f      	movs	r3, #31
 800a49c:	73fb      	strb	r3, [r7, #15]
#endif
    t *= 8;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	73fb      	strb	r3, [r7, #15]
    u8g2->pixel_buf_width = t;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7bfa      	ldrb	r2, [r7, #15]
 800a4a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    t = u8g2->tile_curr_row;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4b2:	73fb      	strb	r3, [r7, #15]
    t *= 8;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	73fb      	strb	r3, [r7, #15]
    u8g2->pixel_curr_row = t;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	7bfa      	ldrb	r2, [r7, #15]
 800a4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    t = u8g2->tile_buf_height;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4c8:	73fb      	strb	r3, [r7, #15]
    /* handle the case, where the buffer is larger than the (remaining) part of the display */
    if (t + u8g2->tile_curr_row > display_info->tile_height)
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800a4d2:	4413      	add	r3, r2
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	7c52      	ldrb	r2, [r2, #17]
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	dd06      	ble.n	800a4ea <u8g2_update_dimension_common+0x80>
        t = display_info->tile_height - u8g2->tile_curr_row;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	7c5a      	ldrb	r2, [r3, #17]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	73fb      	strb	r3, [r7, #15]
    t *= 8;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	73fb      	strb	r3, [r7, #15]

    u8g2->buf_y0 = u8g2->pixel_curr_row;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    u8g2->buf_y1 = u8g2->buf_y0;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    u8g2->buf_y1 += t;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	4413      	add	r3, r2
 800a512:	b2da      	uxtb	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
    u8g2->width = 240;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	22f0      	movs	r2, #240	; 0xf0
 800a51e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    if (display_info->pixel_width <= 240)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	8a9b      	ldrh	r3, [r3, #20]
 800a526:	2bf0      	cmp	r3, #240	; 0xf0
 800a528:	d805      	bhi.n	800a536 <u8g2_update_dimension_common+0xcc>
        u8g2->width = display_info->pixel_width;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	8a9b      	ldrh	r3, [r3, #20]
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    u8g2->height = display_info->pixel_height;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	8adb      	ldrh	r3, [r3, #22]
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 800a542:	bf00      	nop
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t* u8g2)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af02      	add	r7, sp, #8
 800a554:	6078      	str	r0, [r7, #4]
    /* check aganst the current user_??? window */
    if (u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4603      	mov	r3, r0
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff fdbb 	bl	800a0ee <u8g2_IsIntersection>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <u8g2_apply_clip_window+0x3a>
    {
        u8g2->is_page_clip_window_intersection = 0;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        if (u8g2->user_y0 < u8g2->clip_y0)
            u8g2->user_y0 = u8g2->clip_y0;
        if (u8g2->user_y1 > u8g2->clip_y1)
            u8g2->user_y1 = u8g2->clip_y1;
    }
}
 800a586:	e03b      	b.n	800a600 <u8g2_apply_clip_window+0xb2>
        u8g2->is_page_clip_window_intersection = 1;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        if (u8g2->user_x0 < u8g2->clip_x0)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d205      	bcs.n	800a5ac <u8g2_apply_clip_window+0x5e>
            u8g2->user_x0 = u8g2->clip_x0;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        if (u8g2->user_x1 > u8g2->clip_x1)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d905      	bls.n	800a5c8 <u8g2_apply_clip_window+0x7a>
            u8g2->user_x1 = u8g2->clip_x1;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        if (u8g2->user_y0 < u8g2->clip_y0)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d205      	bcs.n	800a5e4 <u8g2_apply_clip_window+0x96>
            u8g2->user_y0 = u8g2->clip_y0;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        if (u8g2->user_y1 > u8g2->clip_y1)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d905      	bls.n	800a600 <u8g2_apply_clip_window+0xb2>
            u8g2->user_y1 = u8g2->clip_y1;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <u8g2_update_dimension_r0>:
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */

/*==========================================================*/

void u8g2_update_dimension_r0(u8g2_t* u8g2)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
    u8g2_update_dimension_common(u8g2);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff ff2a 	bl	800a46a <u8g2_update_dimension_common>
}
 800a616:	bf00      	nop
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t* u8g2)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
    u8g2->user_x0 = 0;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    u8g2->user_x1 = u8g2->width; /* pixel_buf_width replaced with width */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    u8g2->user_y0 = u8g2->buf_y0;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    u8g2->user_y1 = u8g2->buf_y1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
    u8g2_apply_clip_window(u8g2);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff ff7b 	bl	800a54e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len,
        uint8_t dir);

void u8g2_draw_l90_r0(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af02      	add	r7, sp, #8
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	4603      	mov	r3, r0
 800a670:	70fb      	strb	r3, [r7, #3]
 800a672:	460b      	mov	r3, r1
 800a674:	70bb      	strb	r3, [r7, #2]
 800a676:	4613      	mov	r3, r2
 800a678:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
    u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800a67a:	7878      	ldrb	r0, [r7, #1]
 800a67c:	78ba      	ldrb	r2, [r7, #2]
 800a67e:	78f9      	ldrb	r1, [r7, #3]
 800a680:	7c3b      	ldrb	r3, [r7, #16]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4603      	mov	r3, r0
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fbdc 	bl	8009e44 <u8g2_draw_hv_line_2dir>
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <u8x8_ascii_next+0x18>
 800a6c2:	78fb      	ldrb	r3, [r7, #3]
 800a6c4:	2b0a      	cmp	r3, #10
 800a6c6:	d102      	bne.n	800a6ce <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800a6c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6cc:	e001      	b.n	800a6d2 <u8x8_ascii_next+0x22>
  return b;
 800a6ce:	78fb      	ldrb	r3, [r7, #3]
 800a6d0:	b29b      	uxth	r3, r3
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <u8x8_byte_SendBytes>:
{
    return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t* u8x8, uint8_t cnt, uint8_t* data)
{
 800a6de:	b590      	push	{r4, r7, lr}
 800a6e0:	b085      	sub	sp, #20
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	607a      	str	r2, [r7, #4]
 800a6ea:	72fb      	strb	r3, [r7, #11]
    return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void*) data);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	691c      	ldr	r4, [r3, #16]
 800a6f0:	7afa      	ldrb	r2, [r7, #11]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2117      	movs	r1, #23
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	47a0      	blx	r4
 800a6fa:	4603      	mov	r3, r0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	bd90      	pop	{r4, r7, pc}

0800a704 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t* u8x8, uint8_t byte)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
    return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800a710:	1cfb      	adds	r3, r7, #3
 800a712:	461a      	mov	r2, r3
 800a714:	2101      	movs	r1, #1
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff ffe1 	bl	800a6de <u8x8_byte_SendBytes>
 800a71c:	4603      	mov	r3, r0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t* u8x8)
{
 800a726:	b590      	push	{r4, r7, lr}
 800a728:	b083      	sub	sp, #12
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
    return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	691c      	ldr	r4, [r3, #16]
 800a732:	2300      	movs	r3, #0
 800a734:	2200      	movs	r2, #0
 800a736:	2118      	movs	r1, #24
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	47a0      	blx	r4
 800a73c:	4603      	mov	r3, r0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	bd90      	pop	{r4, r7, pc}

0800a746 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t* u8x8)
{
 800a746:	b590      	push	{r4, r7, lr}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
    return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691c      	ldr	r4, [r3, #16]
 800a752:	2300      	movs	r3, #0
 800a754:	2200      	movs	r2, #0
 800a756:	2119      	movs	r1, #25
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	47a0      	blx	r4
 800a75c:	4603      	mov	r3, r0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	bd90      	pop	{r4, r7, pc}

0800a766 <u8x8_cad_SendCmd>:
 */

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t* u8x8, uint8_t cmd)
{
 800a766:	b590      	push	{r4, r7, lr}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
    return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68dc      	ldr	r4, [r3, #12]
 800a776:	78fa      	ldrb	r2, [r7, #3]
 800a778:	2300      	movs	r3, #0
 800a77a:	2115      	movs	r1, #21
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	47a0      	blx	r4
 800a780:	4603      	mov	r3, r0
}
 800a782:	4618      	mov	r0, r3
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	bd90      	pop	{r4, r7, pc}

0800a78a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t* u8x8, uint8_t arg)
{
 800a78a:	b590      	push	{r4, r7, lr}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
    return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68dc      	ldr	r4, [r3, #12]
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	2300      	movs	r3, #0
 800a79e:	2116      	movs	r1, #22
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	47a0      	blx	r4
 800a7a4:	4603      	mov	r3, r0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd90      	pop	{r4, r7, pc}

0800a7ae <u8x8_cad_SendData>:
    }
    return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t* u8x8, uint8_t cnt, uint8_t* data)
{
 800a7ae:	b590      	push	{r4, r7, lr}
 800a7b0:	b085      	sub	sp, #20
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	607a      	str	r2, [r7, #4]
 800a7ba:	72fb      	strb	r3, [r7, #11]
    return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68dc      	ldr	r4, [r3, #12]
 800a7c0:	7afa      	ldrb	r2, [r7, #11]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2117      	movs	r1, #23
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	47a0      	blx	r4
 800a7ca:	4603      	mov	r3, r0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd90      	pop	{r4, r7, pc}

0800a7d4 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t* u8x8)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
    return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68dc      	ldr	r4, [r3, #12]
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2118      	movs	r1, #24
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	47a0      	blx	r4
 800a7ea:	4603      	mov	r3, r0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd90      	pop	{r4, r7, pc}

0800a7f4 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t* u8x8)
{
 800a7f4:	b590      	push	{r4, r7, lr}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
    return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68dc      	ldr	r4, [r3, #12]
 800a800:	2300      	movs	r3, #0
 800a802:	2200      	movs	r2, #0
 800a804:	2119      	movs	r1, #25
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	47a0      	blx	r4
 800a80a:	4603      	mov	r3, r0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	bd90      	pop	{r4, r7, pc}

0800a814 <u8x8_cad_SendSequence>:
 254 milli	delay by milliseconds
 255		end of sequence
 */

void u8x8_cad_SendSequence(u8x8_t* u8x8, uint8_t const* data)
{
 800a814:	b590      	push	{r4, r7, lr}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
    uint8_t cmd;
    uint8_t v;

    for (;;)
    {
        cmd = *data;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	73fb      	strb	r3, [r7, #15]
        data++;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	3301      	adds	r3, #1
 800a828:	603b      	str	r3, [r7, #0]
        switch (cmd)
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
 800a82c:	2b17      	cmp	r3, #23
 800a82e:	d017      	beq.n	800a860 <u8x8_cad_SendSequence+0x4c>
 800a830:	2b17      	cmp	r3, #23
 800a832:	dc02      	bgt.n	800a83a <u8x8_cad_SendSequence+0x26>
 800a834:	2b15      	cmp	r3, #21
 800a836:	db37      	blt.n	800a8a8 <u8x8_cad_SendSequence+0x94>
 800a838:	e004      	b.n	800a844 <u8x8_cad_SendSequence+0x30>
 800a83a:	2b19      	cmp	r3, #25
 800a83c:	dd1e      	ble.n	800a87c <u8x8_cad_SendSequence+0x68>
 800a83e:	2bfe      	cmp	r3, #254	; 0xfe
 800a840:	d024      	beq.n	800a88c <u8x8_cad_SendSequence+0x78>
                v = *data;
                u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);
                data++;
                break;
            default:
                return;
 800a842:	e031      	b.n	800a8a8 <u8x8_cad_SendSequence+0x94>
                v = *data;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	73bb      	strb	r3, [r7, #14]
                u8x8->cad_cb(u8x8, cmd, v, NULL);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68dc      	ldr	r4, [r3, #12]
 800a84e:	7bba      	ldrb	r2, [r7, #14]
 800a850:	7bf9      	ldrb	r1, [r7, #15]
 800a852:	2300      	movs	r3, #0
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	47a0      	blx	r4
                data++;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	3301      	adds	r3, #1
 800a85c:	603b      	str	r3, [r7, #0]
                break;
 800a85e:	e022      	b.n	800a8a6 <u8x8_cad_SendSequence+0x92>
                v = *data;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	73bb      	strb	r3, [r7, #14]
                u8x8_cad_SendData(u8x8, 1, &v);
 800a866:	f107 030e 	add.w	r3, r7, #14
 800a86a:	461a      	mov	r2, r3
 800a86c:	2101      	movs	r1, #1
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff ff9d 	bl	800a7ae <u8x8_cad_SendData>
                data++;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	603b      	str	r3, [r7, #0]
                break;
 800a87a:	e014      	b.n	800a8a6 <u8x8_cad_SendSequence+0x92>
                u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68dc      	ldr	r4, [r3, #12]
 800a880:	7bf9      	ldrb	r1, [r7, #15]
 800a882:	2300      	movs	r3, #0
 800a884:	2200      	movs	r2, #0
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	47a0      	blx	r4
                break;
 800a88a:	e00c      	b.n	800a8a6 <u8x8_cad_SendSequence+0x92>
                v = *data;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	73bb      	strb	r3, [r7, #14]
                u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	461a      	mov	r2, r3
 800a896:	2129      	movs	r1, #41	; 0x29
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fa36 	bl	800ad0a <u8x8_gpio_call>
                data++;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	603b      	str	r3, [r7, #0]
                break;
 800a8a4:	bf00      	nop
        cmd = *data;
 800a8a6:	e7ba      	b.n	800a81e <u8x8_cad_SendSequence+0xa>
                return;
 800a8a8:	bf00      	nop
        }
    }
}
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd90      	pop	{r4, r7, pc}

0800a8b0 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t* u8x8, uint8_t arg_int, void* arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t* u8x8, uint8_t arg_int, void* arg_ptr)
{
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff ff31 	bl	800a726 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800a8c4:	2140      	movs	r1, #64	; 0x40
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f7ff ff1c 	bl	800a704 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	691c      	ldr	r4, [r3, #16]
 800a8d0:	7afa      	ldrb	r2, [r7, #11]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2117      	movs	r1, #23
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff ff33 	bl	800a746 <u8x8_byte_EndTransfer>
}
 800a8e0:	bf00      	nop
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd90      	pop	{r4, r7, pc}

0800a8e8 <u8x8_cad_ssd13xx_fast_i2c>:
    return 1;
}

/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr)
{
 800a8e8:	b590      	push	{r4, r7, lr}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	607b      	str	r3, [r7, #4]
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	72fb      	strb	r3, [r7, #11]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	72bb      	strb	r3, [r7, #10]
    static uint8_t in_transfer = 0;
    uint8_t* p;
    switch (msg)
 800a8fa:	7afb      	ldrb	r3, [r7, #11]
 800a8fc:	3b14      	subs	r3, #20
 800a8fe:	2b05      	cmp	r3, #5
 800a900:	d86e      	bhi.n	800a9e0 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800a902:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a99f 	.word	0x0800a99f
 800a90c:	0800a921 	.word	0x0800a921
 800a910:	0800a94f 	.word	0x0800a94f
 800a914:	0800a95b 	.word	0x0800a95b
 800a918:	0800a9c3 	.word	0x0800a9c3
 800a91c:	0800a9cb 	.word	0x0800a9cb
    {
        case U8X8_MSG_CAD_SEND_CMD:
            /* improved version, takeover from ld7032 */
            /* assumes, that the args of a command is not longer than 31 bytes */
            /* speed improvement is about 4% compared to the classic version */
            if (in_transfer != 0)
 800a920:	4b33      	ldr	r3, [pc, #204]	; (800a9f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <u8x8_cad_ssd13xx_fast_i2c+0x46>
                u8x8_byte_EndTransfer(u8x8);
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff ff0c 	bl	800a746 <u8x8_byte_EndTransfer>

            u8x8_byte_StartTransfer(u8x8);
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7ff fef9 	bl	800a726 <u8x8_byte_StartTransfer>
            u8x8_byte_SendByte(u8x8, 0x000); /* cmd byte for ssd13xx controller */
 800a934:	2100      	movs	r1, #0
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f7ff fee4 	bl	800a704 <u8x8_byte_SendByte>
            u8x8_byte_SendByte(u8x8, arg_int);
 800a93c:	7abb      	ldrb	r3, [r7, #10]
 800a93e:	4619      	mov	r1, r3
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f7ff fedf 	bl	800a704 <u8x8_byte_SendByte>
            in_transfer = 1;
 800a946:	4b2a      	ldr	r3, [pc, #168]	; (800a9f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a948:	2201      	movs	r2, #1
 800a94a:	701a      	strb	r2, [r3, #0]
            //   u8x8_byte_StartTransfer(u8x8);
            //   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
            //   in_transfer = 1;
            // }
            //u8x8_byte_SendByte(u8x8, arg_int);
            break;
 800a94c:	e04a      	b.n	800a9e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
        case U8X8_MSG_CAD_SEND_ARG:
            u8x8_byte_SendByte(u8x8, arg_int);
 800a94e:	7abb      	ldrb	r3, [r7, #10]
 800a950:	4619      	mov	r1, r3
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff fed6 	bl	800a704 <u8x8_byte_SendByte>
            break;
 800a958:	e044      	b.n	800a9e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
        case U8X8_MSG_CAD_SEND_DATA:
            if (in_transfer != 0)
 800a95a:	4b25      	ldr	r3, [pc, #148]	; (800a9f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <u8x8_cad_ssd13xx_fast_i2c+0x80>
                u8x8_byte_EndTransfer(u8x8);
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7ff feef 	bl	800a746 <u8x8_byte_EndTransfer>
            /* smaller streams, 32 seems to be the limit... */
            /* I guess this is related to the size of the Wire buffers in Arduino */
            /* Unfortunately, this can not be handled in the byte level drivers, */
            /* so this is done here. Even further, only 24 bytes will be sent, */
            /* because there will be another byte (DC) required during the transfer */
            p = arg_ptr;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	617b      	str	r3, [r7, #20]
            while (arg_int > 24)
 800a96c:	e00a      	b.n	800a984 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
            {
                u8x8_i2c_data_transfer(u8x8, 24, p);
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	2118      	movs	r1, #24
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7ff ff9c 	bl	800a8b0 <u8x8_i2c_data_transfer>
                arg_int -= 24;
 800a978:	7abb      	ldrb	r3, [r7, #10]
 800a97a:	3b18      	subs	r3, #24
 800a97c:	72bb      	strb	r3, [r7, #10]
                p += 24;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	3318      	adds	r3, #24
 800a982:	617b      	str	r3, [r7, #20]
            while (arg_int > 24)
 800a984:	7abb      	ldrb	r3, [r7, #10]
 800a986:	2b18      	cmp	r3, #24
 800a988:	d8f1      	bhi.n	800a96e <u8x8_cad_ssd13xx_fast_i2c+0x86>
            }
            u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800a98a:	7abb      	ldrb	r3, [r7, #10]
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	4619      	mov	r1, r3
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f7ff ff8d 	bl	800a8b0 <u8x8_i2c_data_transfer>
            in_transfer = 0;
 800a996:	4b16      	ldr	r3, [pc, #88]	; (800a9f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a998:	2200      	movs	r2, #0
 800a99a:	701a      	strb	r2, [r3, #0]
            break;
 800a99c:	e022      	b.n	800a9e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
        case U8X8_MSG_CAD_INIT:
            /* apply default i2c adr if required so that the start transfer msg can use this */
            if (u8x8->i2c_address == 255)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9a4:	2bff      	cmp	r3, #255	; 0xff
 800a9a6:	d103      	bne.n	800a9b0 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
                u8x8->i2c_address = 0x078;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2278      	movs	r2, #120	; 0x78
 800a9ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	691c      	ldr	r4, [r3, #16]
 800a9b4:	7aba      	ldrb	r2, [r7, #10]
 800a9b6:	7af9      	ldrb	r1, [r7, #11]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	47a0      	blx	r4
 800a9be:	4603      	mov	r3, r0
 800a9c0:	e011      	b.n	800a9e6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
        case U8X8_MSG_CAD_START_TRANSFER:
            in_transfer = 0;
 800a9c2:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	701a      	strb	r2, [r3, #0]
            break;
 800a9c8:	e00c      	b.n	800a9e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
        case U8X8_MSG_CAD_END_TRANSFER:
            if (in_transfer != 0)
 800a9ca:	4b09      	ldr	r3, [pc, #36]	; (800a9f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
                u8x8_byte_EndTransfer(u8x8);
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f7ff feb7 	bl	800a746 <u8x8_byte_EndTransfer>
            in_transfer = 0;
 800a9d8:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	701a      	strb	r2, [r3, #0]
            break;
 800a9de:	e001      	b.n	800a9e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
        default:
            return 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e000      	b.n	800a9e6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    }
    return 1;
 800a9e4:	2301      	movs	r3, #1
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd90      	pop	{r4, r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	2000d41c 	.word	0x2000d41c

0800a9f4 <u8x8_d_ssd1306_sh1106_generic>:
U8X8_END() /* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int,
        void* arg_ptr)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	607b      	str	r3, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	72fb      	strb	r3, [r7, #11]
 800aa02:	4613      	mov	r3, r2
 800aa04:	72bb      	strb	r3, [r7, #10]
    uint8_t x, c;
    uint8_t* ptr;
    switch (msg)
 800aa06:	7afb      	ldrb	r3, [r7, #11]
 800aa08:	3b0b      	subs	r3, #11
 800aa0a:	2b04      	cmp	r3, #4
 800aa0c:	f200 808a 	bhi.w	800ab24 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800aa10:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800aa12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa16:	bf00      	nop
 800aa18:	0800aa2d 	.word	0x0800aa2d
 800aa1c:	0800ab25 	.word	0x0800ab25
 800aa20:	0800aa47 	.word	0x0800aa47
 800aa24:	0800aa79 	.word	0x0800aa79
 800aa28:	0800aa99 	.word	0x0800aa99
         u8x8_d_helper_display_init(u8x8);
         u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
         break;
         */
        case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
            if (arg_int == 0)
 800aa2c:	7abb      	ldrb	r3, [r7, #10]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d104      	bne.n	800aa3c <u8x8_d_ssd1306_sh1106_generic+0x48>
                u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800aa32:	4940      	ldr	r1, [pc, #256]	; (800ab34 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f7ff feed 	bl	800a814 <u8x8_cad_SendSequence>
            else
                u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
            break;
 800aa3a:	e075      	b.n	800ab28 <u8x8_d_ssd1306_sh1106_generic+0x134>
                u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800aa3c:	493e      	ldr	r1, [pc, #248]	; (800ab38 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff fee8 	bl	800a814 <u8x8_cad_SendSequence>
            break;
 800aa44:	e070      	b.n	800ab28 <u8x8_d_ssd1306_sh1106_generic+0x134>
        case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
            if (arg_int == 0)
 800aa46:	7abb      	ldrb	r3, [r7, #10]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10a      	bne.n	800aa62 <u8x8_d_ssd1306_sh1106_generic+0x6e>
            {
                u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800aa4c:	493b      	ldr	r1, [pc, #236]	; (800ab3c <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f7ff fee0 	bl	800a814 <u8x8_cad_SendSequence>
                u8x8->x_offset = u8x8->display_info->default_x_offset;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	7c9a      	ldrb	r2, [r3, #18]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            else
            {
                u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
                u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
            }
            break;
 800aa60:	e062      	b.n	800ab28 <u8x8_d_ssd1306_sh1106_generic+0x134>
                u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800aa62:	4937      	ldr	r1, [pc, #220]	; (800ab40 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f7ff fed5 	bl	800a814 <u8x8_cad_SendSequence>
                u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	7cda      	ldrb	r2, [r3, #19]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            break;
 800aa76:	e057      	b.n	800ab28 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
        case U8X8_MSG_DISPLAY_SET_CONTRAST:
            u8x8_cad_StartTransfer(u8x8);
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f7ff feab 	bl	800a7d4 <u8x8_cad_StartTransfer>
            u8x8_cad_SendCmd(u8x8, 0x081);
 800aa7e:	2181      	movs	r1, #129	; 0x81
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff fe70 	bl	800a766 <u8x8_cad_SendCmd>
            u8x8_cad_SendArg(u8x8, arg_int); /* ssd1306 has range from 0 to 255 */
 800aa86:	7abb      	ldrb	r3, [r7, #10]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f7ff fe7d 	bl	800a78a <u8x8_cad_SendArg>
            u8x8_cad_EndTransfer(u8x8);
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f7ff feaf 	bl	800a7f4 <u8x8_cad_EndTransfer>
            break;
 800aa96:	e047      	b.n	800ab28 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
        case U8X8_MSG_DISPLAY_DRAW_TILE:
            u8x8_cad_StartTransfer(u8x8);
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff fe9b 	bl	800a7d4 <u8x8_cad_StartTransfer>
            x = ((u8x8_tile_t*) arg_ptr)->x_pos;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	795b      	ldrb	r3, [r3, #5]
 800aaa2:	75fb      	strb	r3, [r7, #23]
            x *= 8;
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	75fb      	strb	r3, [r7, #23]
            x += u8x8->x_offset;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800aab0:	7dfb      	ldrb	r3, [r7, #23]
 800aab2:	4413      	add	r3, r2
 800aab4:	75fb      	strb	r3, [r7, #23]

            u8x8_cad_SendCmd(u8x8, 0x040); /* set line offset to 0 */
 800aab6:	2140      	movs	r1, #64	; 0x40
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f7ff fe54 	bl	800a766 <u8x8_cad_SendCmd>

            u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	091b      	lsrs	r3, r3, #4
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	f043 0310 	orr.w	r3, r3, #16
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	4619      	mov	r1, r3
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7ff fe4a 	bl	800a766 <u8x8_cad_SendCmd>
            u8x8_cad_SendArg(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	f003 030f 	and.w	r3, r3, #15
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	4619      	mov	r1, r3
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7ff fe54 	bl	800a78a <u8x8_cad_SendArg>
            u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t*) arg_ptr)->y_pos)); /* probably wrong, should be SendCmd */
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	799b      	ldrb	r3, [r3, #6]
 800aae6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	4619      	mov	r1, r3
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7ff fe4b 	bl	800a78a <u8x8_cad_SendArg>

            do
            {
                c = ((u8x8_tile_t*) arg_ptr)->cnt;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	791b      	ldrb	r3, [r3, #4]
 800aaf8:	75bb      	strb	r3, [r7, #22]
                ptr = ((u8x8_tile_t*) arg_ptr)->tile_ptr;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	613b      	str	r3, [r7, #16]
                u8x8_cad_SendData(u8x8, c * 8, ptr); /* note: SendData can not handle more than 255 bytes */
 800ab00:	7dbb      	ldrb	r3, [r7, #22]
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff fe4f 	bl	800a7ae <u8x8_cad_SendData>
                 u8x8_cad_SendData(u8x8, 8, ptr);
                 ptr += 8;
                 c--;
                 } while( c > 0 );
                 */
                arg_int--;
 800ab10:	7abb      	ldrb	r3, [r7, #10]
 800ab12:	3b01      	subs	r3, #1
 800ab14:	72bb      	strb	r3, [r7, #10]
            }
            while (arg_int > 0);
 800ab16:	7abb      	ldrb	r3, [r7, #10]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1eb      	bne.n	800aaf4 <u8x8_d_ssd1306_sh1106_generic+0x100>

            u8x8_cad_EndTransfer(u8x8);
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f7ff fe69 	bl	800a7f4 <u8x8_cad_EndTransfer>
            break;
 800ab22:	e001      	b.n	800ab28 <u8x8_d_ssd1306_sh1106_generic+0x134>
        default:
            return 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e000      	b.n	800ab2a <u8x8_d_ssd1306_sh1106_generic+0x136>
    }
    return 1;
 800ab28:	2301      	movs	r3, #1
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	0800f3b0 	.word	0x0800f3b0
 800ab38:	0800f3b8 	.word	0x0800f3b8
 800ab3c:	0800f3c0 	.word	0x0800f3c0
 800ab40:	0800f3c8 	.word	0x0800f3c8

0800ab44 <u8x8_d_ssd1306_128x64_noname>:
/* flipmode_x_offset = */0,
/* pixel_width = */128,
/* pixel_height = */64 };

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	607b      	str	r3, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	72fb      	strb	r3, [r7, #11]
 800ab52:	4613      	mov	r3, r2
 800ab54:	72bb      	strb	r3, [r7, #10]

    if (u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0)
 800ab56:	7aba      	ldrb	r2, [r7, #10]
 800ab58:	7af9      	ldrb	r1, [r7, #11]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f7ff ff49 	bl	800a9f4 <u8x8_d_ssd1306_sh1106_generic>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <u8x8_d_ssd1306_128x64_noname+0x28>
        return 1;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e014      	b.n	800ab96 <u8x8_d_ssd1306_128x64_noname+0x52>

    switch (msg)
 800ab6c:	7afb      	ldrb	r3, [r7, #11]
 800ab6e:	2b09      	cmp	r3, #9
 800ab70:	d009      	beq.n	800ab86 <u8x8_d_ssd1306_128x64_noname+0x42>
 800ab72:	2b0a      	cmp	r3, #10
 800ab74:	d10c      	bne.n	800ab90 <u8x8_d_ssd1306_128x64_noname+0x4c>
    {
        case U8X8_MSG_DISPLAY_INIT:
            u8x8_d_helper_display_init(u8x8);
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f82a 	bl	800abd0 <u8x8_d_helper_display_init>
            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);
 800ab7c:	4908      	ldr	r1, [pc, #32]	; (800aba0 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f7ff fe48 	bl	800a814 <u8x8_cad_SendSequence>
            break;
 800ab84:	e006      	b.n	800ab94 <u8x8_d_ssd1306_128x64_noname+0x50>
        case U8X8_MSG_DISPLAY_SETUP_MEMORY:
            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800ab86:	4907      	ldr	r1, [pc, #28]	; (800aba4 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 f80d 	bl	800aba8 <u8x8_d_helper_display_setup_memory>
            break;
 800ab8e:	e001      	b.n	800ab94 <u8x8_d_ssd1306_128x64_noname+0x50>
        default:
            return 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	e000      	b.n	800ab96 <u8x8_d_ssd1306_128x64_noname+0x52>
    }
    return 1;
 800ab94:	2301      	movs	r3, #1
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	0800f378 	.word	0x0800f378
 800aba4:	0800f3d0 	.word	0x0800f3d0

0800aba8 <u8x8_d_helper_display_setup_memory>:
 this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
 It can be called within the display callback function to carry out the usual standard tasks.
 
 */
void u8x8_d_helper_display_setup_memory(u8x8_t* u8x8, const u8x8_display_info_t* display_info)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
    /* 1) set display info struct */
    u8x8->display_info = display_info;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	601a      	str	r2, [r3, #0]
    u8x8->x_offset = u8x8->display_info->default_x_offset;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	7c9a      	ldrb	r2, [r3, #18]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <u8x8_d_helper_display_init>:
 this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
 It can be called within the display callback function to carry out the usual standard tasks.
 
 */
void u8x8_d_helper_display_init(u8x8_t* u8x8)
{
 800abd0:	b590      	push	{r4, r7, lr}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
    /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
    u8x8_gpio_Init(u8x8);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695c      	ldr	r4, [r3, #20]
 800abdc:	2300      	movs	r3, #0
 800abde:	2200      	movs	r2, #0
 800abe0:	2128      	movs	r1, #40	; 0x28
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	47a0      	blx	r4
    u8x8_cad_Init(u8x8);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68dc      	ldr	r4, [r3, #12]
 800abea:	2300      	movs	r3, #0
 800abec:	2200      	movs	r2, #0
 800abee:	2114      	movs	r1, #20
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	47a0      	blx	r4

    /* 3) do reset */
    u8x8_gpio_SetReset(u8x8, 1);
 800abf4:	2201      	movs	r2, #1
 800abf6:	214b      	movs	r1, #75	; 0x4b
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f886 	bl	800ad0a <u8x8_gpio_call>
    u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	791b      	ldrb	r3, [r3, #4]
 800ac04:	461a      	mov	r2, r3
 800ac06:	2129      	movs	r1, #41	; 0x29
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f87e 	bl	800ad0a <u8x8_gpio_call>
    u8x8_gpio_SetReset(u8x8, 0);
 800ac0e:	2200      	movs	r2, #0
 800ac10:	214b      	movs	r1, #75	; 0x4b
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f879 	bl	800ad0a <u8x8_gpio_call>
    u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	791b      	ldrb	r3, [r3, #4]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	2129      	movs	r1, #41	; 0x29
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f871 	bl	800ad0a <u8x8_gpio_call>
    u8x8_gpio_SetReset(u8x8, 1);
 800ac28:	2201      	movs	r2, #1
 800ac2a:	214b      	movs	r1, #75	; 0x4b
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f86c 	bl	800ad0a <u8x8_gpio_call>
    u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	795b      	ldrb	r3, [r3, #5]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	2129      	movs	r1, #41	; 0x29
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f864 	bl	800ad0a <u8x8_gpio_call>
}
 800ac42:	bf00      	nop
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd90      	pop	{r4, r7, pc}

0800ac4a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t* u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t* tile_ptr)
{
 800ac4a:	b590      	push	{r4, r7, lr}
 800ac4c:	b085      	sub	sp, #20
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	4608      	mov	r0, r1
 800ac54:	4611      	mov	r1, r2
 800ac56:	461a      	mov	r2, r3
 800ac58:	4603      	mov	r3, r0
 800ac5a:	70fb      	strb	r3, [r7, #3]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70bb      	strb	r3, [r7, #2]
 800ac60:	4613      	mov	r3, r2
 800ac62:	707b      	strb	r3, [r7, #1]
    u8x8_tile_t tile;
    tile.x_pos = x;
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	737b      	strb	r3, [r7, #13]
    tile.y_pos = y;
 800ac68:	78bb      	ldrb	r3, [r7, #2]
 800ac6a:	73bb      	strb	r3, [r7, #14]
    tile.cnt = cnt;
 800ac6c:	787b      	ldrb	r3, [r7, #1]
 800ac6e:	733b      	strb	r3, [r7, #12]
    tile.tile_ptr = tile_ptr;
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	60bb      	str	r3, [r7, #8]
    return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void*) &tile);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689c      	ldr	r4, [r3, #8]
 800ac78:	f107 0308 	add.w	r3, r7, #8
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	210f      	movs	r1, #15
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	47a0      	blx	r4
 800ac84:	4603      	mov	r3, r0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd90      	pop	{r4, r7, pc}

0800ac8e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t* u8x8)
{
 800ac8e:	b590      	push	{r4, r7, lr}
 800ac90:	b083      	sub	sp, #12
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	689c      	ldr	r4, [r3, #8]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2109      	movs	r1, #9
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	47a0      	blx	r4
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd90      	pop	{r4, r7, pc}

0800acac <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t* u8x8)
{
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689c      	ldr	r4, [r3, #8]
 800acb8:	2300      	movs	r3, #0
 800acba:	2200      	movs	r2, #0
 800acbc:	210a      	movs	r1, #10
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	47a0      	blx	r4
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd90      	pop	{r4, r7, pc}

0800acca <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t* u8x8, uint8_t is_enable)
{
 800acca:	b590      	push	{r4, r7, lr}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	70fb      	strb	r3, [r7, #3]
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689c      	ldr	r4, [r3, #8]
 800acda:	78fa      	ldrb	r2, [r7, #3]
 800acdc:	2300      	movs	r3, #0
 800acde:	210b      	movs	r1, #11
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	47a0      	blx	r4
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd90      	pop	{r4, r7, pc}

0800acec <u8x8_RefreshDisplay>:
{
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);
}

void u8x8_RefreshDisplay(u8x8_t* u8x8)
{
 800acec:	b590      	push	{r4, r7, lr}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689c      	ldr	r4, [r3, #8]
 800acf8:	2300      	movs	r3, #0
 800acfa:	2200      	movs	r2, #0
 800acfc:	2110      	movs	r1, #16
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	47a0      	blx	r4
}
 800ad02:	bf00      	nop
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd90      	pop	{r4, r7, pc}

0800ad0a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800ad0a:	b590      	push	{r4, r7, lr}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	460b      	mov	r3, r1
 800ad14:	70fb      	strb	r3, [r7, #3]
 800ad16:	4613      	mov	r3, r2
 800ad18:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	695c      	ldr	r4, [r3, #20]
 800ad1e:	78ba      	ldrb	r2, [r7, #2]
 800ad20:	78f9      	ldrb	r1, [r7, #3]
 800ad22:	2300      	movs	r3, #0
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	47a0      	blx	r4
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd90      	pop	{r4, r7, pc}

0800ad30 <u8x8_dummy_cb>:
#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t* u8x8, U8X8_UNUSED uint8_t msg,
        U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void* arg_ptr)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	607b      	str	r3, [r7, #4]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	72fb      	strb	r3, [r7, #11]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	72bb      	strb	r3, [r7, #10]
    /* the dummy callback will not handle any message and will fail for all messages */
    return 0;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <u8x8_SetupDefaults>:
 Setup u8x8
 Args:
 u8x8	An empty u8x8 structure
 */
void u8x8_SetupDefaults(u8x8_t* u8x8)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a11      	ldr	r2, [pc, #68]	; (800ada8 <u8x8_SetupDefaults+0x58>)
 800ad62:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a10      	ldr	r2, [pc, #64]	; (800ada8 <u8x8_SetupDefaults+0x58>)
 800ad68:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a0e      	ldr	r2, [pc, #56]	; (800ada8 <u8x8_SetupDefaults+0x58>)
 800ad6e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a0d      	ldr	r2, [pc, #52]	; (800ada8 <u8x8_SetupDefaults+0x58>)
 800ad74:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0; /* also reset by u8x8_utf8_init */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0; /* issue 769 */
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	22ff      	movs	r2, #255	; 0xff
 800ad90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255; /* assume all low active buttons */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	22ff      	movs	r2, #255	; 0xff
 800ad98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	0800ad31 	.word	0x0800ad31

0800adac <u8x8_Setup>:
 gpio_and_delay_cb	Environment specific callback function

 */
void u8x8_Setup(u8x8_t* u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb,
        u8x8_msg_cb gpio_and_delay_cb)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
    /* setup defaults and reset pins to U8X8_PIN_NONE */
    u8x8_SetupDefaults(u8x8);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff ffc8 	bl	800ad50 <u8x8_SetupDefaults>

    /* setup specific callbacks */
    u8x8->display_cb = display_cb;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = cad_cb;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = byte_cb;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	615a      	str	r2, [r3, #20]

    /* setup display info */
    u8x8_SetupMemory(u8x8);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7ff ff58 	bl	800ac8e <u8x8_SetupMemory>
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <__errno>:
 800ade8:	4b01      	ldr	r3, [pc, #4]	; (800adf0 <__errno+0x8>)
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	200000f8 	.word	0x200000f8

0800adf4 <__libc_init_array>:
 800adf4:	b570      	push	{r4, r5, r6, lr}
 800adf6:	4e0d      	ldr	r6, [pc, #52]	; (800ae2c <__libc_init_array+0x38>)
 800adf8:	4c0d      	ldr	r4, [pc, #52]	; (800ae30 <__libc_init_array+0x3c>)
 800adfa:	1ba4      	subs	r4, r4, r6
 800adfc:	10a4      	asrs	r4, r4, #2
 800adfe:	2500      	movs	r5, #0
 800ae00:	42a5      	cmp	r5, r4
 800ae02:	d109      	bne.n	800ae18 <__libc_init_array+0x24>
 800ae04:	4e0b      	ldr	r6, [pc, #44]	; (800ae34 <__libc_init_array+0x40>)
 800ae06:	4c0c      	ldr	r4, [pc, #48]	; (800ae38 <__libc_init_array+0x44>)
 800ae08:	f000 ff64 	bl	800bcd4 <_init>
 800ae0c:	1ba4      	subs	r4, r4, r6
 800ae0e:	10a4      	asrs	r4, r4, #2
 800ae10:	2500      	movs	r5, #0
 800ae12:	42a5      	cmp	r5, r4
 800ae14:	d105      	bne.n	800ae22 <__libc_init_array+0x2e>
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
 800ae18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae1c:	4798      	blx	r3
 800ae1e:	3501      	adds	r5, #1
 800ae20:	e7ee      	b.n	800ae00 <__libc_init_array+0xc>
 800ae22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae26:	4798      	blx	r3
 800ae28:	3501      	adds	r5, #1
 800ae2a:	e7f2      	b.n	800ae12 <__libc_init_array+0x1e>
 800ae2c:	0800f488 	.word	0x0800f488
 800ae30:	0800f488 	.word	0x0800f488
 800ae34:	0800f488 	.word	0x0800f488
 800ae38:	0800f48c 	.word	0x0800f48c

0800ae3c <memcpy>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	1e43      	subs	r3, r0, #1
 800ae40:	440a      	add	r2, r1
 800ae42:	4291      	cmp	r1, r2
 800ae44:	d100      	bne.n	800ae48 <memcpy+0xc>
 800ae46:	bd10      	pop	{r4, pc}
 800ae48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae50:	e7f7      	b.n	800ae42 <memcpy+0x6>

0800ae52 <memset>:
 800ae52:	4402      	add	r2, r0
 800ae54:	4603      	mov	r3, r0
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d100      	bne.n	800ae5c <memset+0xa>
 800ae5a:	4770      	bx	lr
 800ae5c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae60:	e7f9      	b.n	800ae56 <memset+0x4>

0800ae62 <setbuf>:
 800ae62:	2900      	cmp	r1, #0
 800ae64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae68:	bf0c      	ite	eq
 800ae6a:	2202      	moveq	r2, #2
 800ae6c:	2200      	movne	r2, #0
 800ae6e:	f000 b801 	b.w	800ae74 <setvbuf>
	...

0800ae74 <setvbuf>:
 800ae74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	461d      	mov	r5, r3
 800ae7a:	4b51      	ldr	r3, [pc, #324]	; (800afc0 <setvbuf+0x14c>)
 800ae7c:	681e      	ldr	r6, [r3, #0]
 800ae7e:	4604      	mov	r4, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	4690      	mov	r8, r2
 800ae84:	b126      	cbz	r6, 800ae90 <setvbuf+0x1c>
 800ae86:	69b3      	ldr	r3, [r6, #24]
 800ae88:	b913      	cbnz	r3, 800ae90 <setvbuf+0x1c>
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f000 f9f4 	bl	800b278 <__sinit>
 800ae90:	4b4c      	ldr	r3, [pc, #304]	; (800afc4 <setvbuf+0x150>)
 800ae92:	429c      	cmp	r4, r3
 800ae94:	d152      	bne.n	800af3c <setvbuf+0xc8>
 800ae96:	6874      	ldr	r4, [r6, #4]
 800ae98:	f1b8 0f02 	cmp.w	r8, #2
 800ae9c:	d006      	beq.n	800aeac <setvbuf+0x38>
 800ae9e:	f1b8 0f01 	cmp.w	r8, #1
 800aea2:	f200 8089 	bhi.w	800afb8 <setvbuf+0x144>
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	f2c0 8086 	blt.w	800afb8 <setvbuf+0x144>
 800aeac:	4621      	mov	r1, r4
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f000 f978 	bl	800b1a4 <_fflush_r>
 800aeb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeb6:	b141      	cbz	r1, 800aeca <setvbuf+0x56>
 800aeb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aebc:	4299      	cmp	r1, r3
 800aebe:	d002      	beq.n	800aec6 <setvbuf+0x52>
 800aec0:	4630      	mov	r0, r6
 800aec2:	f000 fa8f 	bl	800b3e4 <_free_r>
 800aec6:	2300      	movs	r3, #0
 800aec8:	6363      	str	r3, [r4, #52]	; 0x34
 800aeca:	2300      	movs	r3, #0
 800aecc:	61a3      	str	r3, [r4, #24]
 800aece:	6063      	str	r3, [r4, #4]
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	061b      	lsls	r3, r3, #24
 800aed4:	d503      	bpl.n	800aede <setvbuf+0x6a>
 800aed6:	6921      	ldr	r1, [r4, #16]
 800aed8:	4630      	mov	r0, r6
 800aeda:	f000 fa83 	bl	800b3e4 <_free_r>
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800aee4:	f023 0303 	bic.w	r3, r3, #3
 800aee8:	f1b8 0f02 	cmp.w	r8, #2
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	d05d      	beq.n	800afac <setvbuf+0x138>
 800aef0:	ab01      	add	r3, sp, #4
 800aef2:	466a      	mov	r2, sp
 800aef4:	4621      	mov	r1, r4
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 fa48 	bl	800b38c <__swhatbuf_r>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	4318      	orrs	r0, r3
 800af00:	81a0      	strh	r0, [r4, #12]
 800af02:	bb2d      	cbnz	r5, 800af50 <setvbuf+0xdc>
 800af04:	9d00      	ldr	r5, [sp, #0]
 800af06:	4628      	mov	r0, r5
 800af08:	f000 fa64 	bl	800b3d4 <malloc>
 800af0c:	4607      	mov	r7, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	d14e      	bne.n	800afb0 <setvbuf+0x13c>
 800af12:	f8dd 9000 	ldr.w	r9, [sp]
 800af16:	45a9      	cmp	r9, r5
 800af18:	d13c      	bne.n	800af94 <setvbuf+0x120>
 800af1a:	f04f 30ff 	mov.w	r0, #4294967295
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	f043 0302 	orr.w	r3, r3, #2
 800af24:	81a3      	strh	r3, [r4, #12]
 800af26:	2300      	movs	r3, #0
 800af28:	60a3      	str	r3, [r4, #8]
 800af2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	6123      	str	r3, [r4, #16]
 800af32:	2301      	movs	r3, #1
 800af34:	6163      	str	r3, [r4, #20]
 800af36:	b003      	add	sp, #12
 800af38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af3c:	4b22      	ldr	r3, [pc, #136]	; (800afc8 <setvbuf+0x154>)
 800af3e:	429c      	cmp	r4, r3
 800af40:	d101      	bne.n	800af46 <setvbuf+0xd2>
 800af42:	68b4      	ldr	r4, [r6, #8]
 800af44:	e7a8      	b.n	800ae98 <setvbuf+0x24>
 800af46:	4b21      	ldr	r3, [pc, #132]	; (800afcc <setvbuf+0x158>)
 800af48:	429c      	cmp	r4, r3
 800af4a:	bf08      	it	eq
 800af4c:	68f4      	ldreq	r4, [r6, #12]
 800af4e:	e7a3      	b.n	800ae98 <setvbuf+0x24>
 800af50:	2f00      	cmp	r7, #0
 800af52:	d0d8      	beq.n	800af06 <setvbuf+0x92>
 800af54:	69b3      	ldr	r3, [r6, #24]
 800af56:	b913      	cbnz	r3, 800af5e <setvbuf+0xea>
 800af58:	4630      	mov	r0, r6
 800af5a:	f000 f98d 	bl	800b278 <__sinit>
 800af5e:	f1b8 0f01 	cmp.w	r8, #1
 800af62:	bf08      	it	eq
 800af64:	89a3      	ldrheq	r3, [r4, #12]
 800af66:	6027      	str	r7, [r4, #0]
 800af68:	bf04      	itt	eq
 800af6a:	f043 0301 	orreq.w	r3, r3, #1
 800af6e:	81a3      	strheq	r3, [r4, #12]
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f013 0008 	ands.w	r0, r3, #8
 800af76:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800af7a:	d01b      	beq.n	800afb4 <setvbuf+0x140>
 800af7c:	f013 0001 	ands.w	r0, r3, #1
 800af80:	bf18      	it	ne
 800af82:	426d      	negne	r5, r5
 800af84:	f04f 0300 	mov.w	r3, #0
 800af88:	bf1d      	ittte	ne
 800af8a:	60a3      	strne	r3, [r4, #8]
 800af8c:	61a5      	strne	r5, [r4, #24]
 800af8e:	4618      	movne	r0, r3
 800af90:	60a5      	streq	r5, [r4, #8]
 800af92:	e7d0      	b.n	800af36 <setvbuf+0xc2>
 800af94:	4648      	mov	r0, r9
 800af96:	f000 fa1d 	bl	800b3d4 <malloc>
 800af9a:	4607      	mov	r7, r0
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d0bc      	beq.n	800af1a <setvbuf+0xa6>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	464d      	mov	r5, r9
 800afaa:	e7d3      	b.n	800af54 <setvbuf+0xe0>
 800afac:	2000      	movs	r0, #0
 800afae:	e7b6      	b.n	800af1e <setvbuf+0xaa>
 800afb0:	46a9      	mov	r9, r5
 800afb2:	e7f5      	b.n	800afa0 <setvbuf+0x12c>
 800afb4:	60a0      	str	r0, [r4, #8]
 800afb6:	e7be      	b.n	800af36 <setvbuf+0xc2>
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	e7bb      	b.n	800af36 <setvbuf+0xc2>
 800afbe:	bf00      	nop
 800afc0:	200000f8 	.word	0x200000f8
 800afc4:	0800f40c 	.word	0x0800f40c
 800afc8:	0800f42c 	.word	0x0800f42c
 800afcc:	0800f3ec 	.word	0x0800f3ec

0800afd0 <sniprintf>:
 800afd0:	b40c      	push	{r2, r3}
 800afd2:	b530      	push	{r4, r5, lr}
 800afd4:	4b17      	ldr	r3, [pc, #92]	; (800b034 <sniprintf+0x64>)
 800afd6:	1e0c      	subs	r4, r1, #0
 800afd8:	b09d      	sub	sp, #116	; 0x74
 800afda:	681d      	ldr	r5, [r3, #0]
 800afdc:	da08      	bge.n	800aff0 <sniprintf+0x20>
 800afde:	238b      	movs	r3, #139	; 0x8b
 800afe0:	602b      	str	r3, [r5, #0]
 800afe2:	f04f 30ff 	mov.w	r0, #4294967295
 800afe6:	b01d      	add	sp, #116	; 0x74
 800afe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afec:	b002      	add	sp, #8
 800afee:	4770      	bx	lr
 800aff0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aff4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aff8:	bf14      	ite	ne
 800affa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800affe:	4623      	moveq	r3, r4
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	9307      	str	r3, [sp, #28]
 800b004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b008:	9002      	str	r0, [sp, #8]
 800b00a:	9006      	str	r0, [sp, #24]
 800b00c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b010:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b012:	ab21      	add	r3, sp, #132	; 0x84
 800b014:	a902      	add	r1, sp, #8
 800b016:	4628      	mov	r0, r5
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	f000 fae5 	bl	800b5e8 <_svfiprintf_r>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	bfbc      	itt	lt
 800b022:	238b      	movlt	r3, #139	; 0x8b
 800b024:	602b      	strlt	r3, [r5, #0]
 800b026:	2c00      	cmp	r4, #0
 800b028:	d0dd      	beq.n	800afe6 <sniprintf+0x16>
 800b02a:	9b02      	ldr	r3, [sp, #8]
 800b02c:	2200      	movs	r2, #0
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	e7d9      	b.n	800afe6 <sniprintf+0x16>
 800b032:	bf00      	nop
 800b034:	200000f8 	.word	0x200000f8

0800b038 <strcat>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	4603      	mov	r3, r0
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	1c5c      	adds	r4, r3, #1
 800b040:	b93a      	cbnz	r2, 800b052 <strcat+0x1a>
 800b042:	3b01      	subs	r3, #1
 800b044:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b048:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	d1f9      	bne.n	800b044 <strcat+0xc>
 800b050:	bd10      	pop	{r4, pc}
 800b052:	4623      	mov	r3, r4
 800b054:	e7f2      	b.n	800b03c <strcat+0x4>
	...

0800b058 <_vsiprintf_r>:
 800b058:	b500      	push	{lr}
 800b05a:	b09b      	sub	sp, #108	; 0x6c
 800b05c:	9100      	str	r1, [sp, #0]
 800b05e:	9104      	str	r1, [sp, #16]
 800b060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b064:	9105      	str	r1, [sp, #20]
 800b066:	9102      	str	r1, [sp, #8]
 800b068:	4905      	ldr	r1, [pc, #20]	; (800b080 <_vsiprintf_r+0x28>)
 800b06a:	9103      	str	r1, [sp, #12]
 800b06c:	4669      	mov	r1, sp
 800b06e:	f000 fabb 	bl	800b5e8 <_svfiprintf_r>
 800b072:	9b00      	ldr	r3, [sp, #0]
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	b01b      	add	sp, #108	; 0x6c
 800b07a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b07e:	bf00      	nop
 800b080:	ffff0208 	.word	0xffff0208

0800b084 <vsiprintf>:
 800b084:	4613      	mov	r3, r2
 800b086:	460a      	mov	r2, r1
 800b088:	4601      	mov	r1, r0
 800b08a:	4802      	ldr	r0, [pc, #8]	; (800b094 <vsiprintf+0x10>)
 800b08c:	6800      	ldr	r0, [r0, #0]
 800b08e:	f7ff bfe3 	b.w	800b058 <_vsiprintf_r>
 800b092:	bf00      	nop
 800b094:	200000f8 	.word	0x200000f8

0800b098 <__sflush_r>:
 800b098:	898a      	ldrh	r2, [r1, #12]
 800b09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09e:	4605      	mov	r5, r0
 800b0a0:	0710      	lsls	r0, r2, #28
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	d458      	bmi.n	800b158 <__sflush_r+0xc0>
 800b0a6:	684b      	ldr	r3, [r1, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dc05      	bgt.n	800b0b8 <__sflush_r+0x20>
 800b0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	dc02      	bgt.n	800b0b8 <__sflush_r+0x20>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ba:	2e00      	cmp	r6, #0
 800b0bc:	d0f9      	beq.n	800b0b2 <__sflush_r+0x1a>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0c4:	682f      	ldr	r7, [r5, #0]
 800b0c6:	6a21      	ldr	r1, [r4, #32]
 800b0c8:	602b      	str	r3, [r5, #0]
 800b0ca:	d032      	beq.n	800b132 <__sflush_r+0x9a>
 800b0cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	075a      	lsls	r2, r3, #29
 800b0d2:	d505      	bpl.n	800b0e0 <__sflush_r+0x48>
 800b0d4:	6863      	ldr	r3, [r4, #4]
 800b0d6:	1ac0      	subs	r0, r0, r3
 800b0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0da:	b10b      	cbz	r3, 800b0e0 <__sflush_r+0x48>
 800b0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0de:	1ac0      	subs	r0, r0, r3
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0e6:	6a21      	ldr	r1, [r4, #32]
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	47b0      	blx	r6
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	d106      	bne.n	800b100 <__sflush_r+0x68>
 800b0f2:	6829      	ldr	r1, [r5, #0]
 800b0f4:	291d      	cmp	r1, #29
 800b0f6:	d848      	bhi.n	800b18a <__sflush_r+0xf2>
 800b0f8:	4a29      	ldr	r2, [pc, #164]	; (800b1a0 <__sflush_r+0x108>)
 800b0fa:	40ca      	lsrs	r2, r1
 800b0fc:	07d6      	lsls	r6, r2, #31
 800b0fe:	d544      	bpl.n	800b18a <__sflush_r+0xf2>
 800b100:	2200      	movs	r2, #0
 800b102:	6062      	str	r2, [r4, #4]
 800b104:	04d9      	lsls	r1, r3, #19
 800b106:	6922      	ldr	r2, [r4, #16]
 800b108:	6022      	str	r2, [r4, #0]
 800b10a:	d504      	bpl.n	800b116 <__sflush_r+0x7e>
 800b10c:	1c42      	adds	r2, r0, #1
 800b10e:	d101      	bne.n	800b114 <__sflush_r+0x7c>
 800b110:	682b      	ldr	r3, [r5, #0]
 800b112:	b903      	cbnz	r3, 800b116 <__sflush_r+0x7e>
 800b114:	6560      	str	r0, [r4, #84]	; 0x54
 800b116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b118:	602f      	str	r7, [r5, #0]
 800b11a:	2900      	cmp	r1, #0
 800b11c:	d0c9      	beq.n	800b0b2 <__sflush_r+0x1a>
 800b11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b122:	4299      	cmp	r1, r3
 800b124:	d002      	beq.n	800b12c <__sflush_r+0x94>
 800b126:	4628      	mov	r0, r5
 800b128:	f000 f95c 	bl	800b3e4 <_free_r>
 800b12c:	2000      	movs	r0, #0
 800b12e:	6360      	str	r0, [r4, #52]	; 0x34
 800b130:	e7c0      	b.n	800b0b4 <__sflush_r+0x1c>
 800b132:	2301      	movs	r3, #1
 800b134:	4628      	mov	r0, r5
 800b136:	47b0      	blx	r6
 800b138:	1c41      	adds	r1, r0, #1
 800b13a:	d1c8      	bne.n	800b0ce <__sflush_r+0x36>
 800b13c:	682b      	ldr	r3, [r5, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0c5      	beq.n	800b0ce <__sflush_r+0x36>
 800b142:	2b1d      	cmp	r3, #29
 800b144:	d001      	beq.n	800b14a <__sflush_r+0xb2>
 800b146:	2b16      	cmp	r3, #22
 800b148:	d101      	bne.n	800b14e <__sflush_r+0xb6>
 800b14a:	602f      	str	r7, [r5, #0]
 800b14c:	e7b1      	b.n	800b0b2 <__sflush_r+0x1a>
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	e7ad      	b.n	800b0b4 <__sflush_r+0x1c>
 800b158:	690f      	ldr	r7, [r1, #16]
 800b15a:	2f00      	cmp	r7, #0
 800b15c:	d0a9      	beq.n	800b0b2 <__sflush_r+0x1a>
 800b15e:	0793      	lsls	r3, r2, #30
 800b160:	680e      	ldr	r6, [r1, #0]
 800b162:	bf08      	it	eq
 800b164:	694b      	ldreq	r3, [r1, #20]
 800b166:	600f      	str	r7, [r1, #0]
 800b168:	bf18      	it	ne
 800b16a:	2300      	movne	r3, #0
 800b16c:	eba6 0807 	sub.w	r8, r6, r7
 800b170:	608b      	str	r3, [r1, #8]
 800b172:	f1b8 0f00 	cmp.w	r8, #0
 800b176:	dd9c      	ble.n	800b0b2 <__sflush_r+0x1a>
 800b178:	4643      	mov	r3, r8
 800b17a:	463a      	mov	r2, r7
 800b17c:	6a21      	ldr	r1, [r4, #32]
 800b17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b180:	4628      	mov	r0, r5
 800b182:	47b0      	blx	r6
 800b184:	2800      	cmp	r0, #0
 800b186:	dc06      	bgt.n	800b196 <__sflush_r+0xfe>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	e78e      	b.n	800b0b4 <__sflush_r+0x1c>
 800b196:	4407      	add	r7, r0
 800b198:	eba8 0800 	sub.w	r8, r8, r0
 800b19c:	e7e9      	b.n	800b172 <__sflush_r+0xda>
 800b19e:	bf00      	nop
 800b1a0:	20400001 	.word	0x20400001

0800b1a4 <_fflush_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	690b      	ldr	r3, [r1, #16]
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	b1db      	cbz	r3, 800b1e6 <_fflush_r+0x42>
 800b1ae:	b118      	cbz	r0, 800b1b8 <_fflush_r+0x14>
 800b1b0:	6983      	ldr	r3, [r0, #24]
 800b1b2:	b90b      	cbnz	r3, 800b1b8 <_fflush_r+0x14>
 800b1b4:	f000 f860 	bl	800b278 <__sinit>
 800b1b8:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <_fflush_r+0x48>)
 800b1ba:	429c      	cmp	r4, r3
 800b1bc:	d109      	bne.n	800b1d2 <_fflush_r+0x2e>
 800b1be:	686c      	ldr	r4, [r5, #4]
 800b1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1c4:	b17b      	cbz	r3, 800b1e6 <_fflush_r+0x42>
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ce:	f7ff bf63 	b.w	800b098 <__sflush_r>
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <_fflush_r+0x4c>)
 800b1d4:	429c      	cmp	r4, r3
 800b1d6:	d101      	bne.n	800b1dc <_fflush_r+0x38>
 800b1d8:	68ac      	ldr	r4, [r5, #8]
 800b1da:	e7f1      	b.n	800b1c0 <_fflush_r+0x1c>
 800b1dc:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <_fflush_r+0x50>)
 800b1de:	429c      	cmp	r4, r3
 800b1e0:	bf08      	it	eq
 800b1e2:	68ec      	ldreq	r4, [r5, #12]
 800b1e4:	e7ec      	b.n	800b1c0 <_fflush_r+0x1c>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	bf00      	nop
 800b1ec:	0800f40c 	.word	0x0800f40c
 800b1f0:	0800f42c 	.word	0x0800f42c
 800b1f4:	0800f3ec 	.word	0x0800f3ec

0800b1f8 <std>:
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	b510      	push	{r4, lr}
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b202:	6083      	str	r3, [r0, #8]
 800b204:	8181      	strh	r1, [r0, #12]
 800b206:	6643      	str	r3, [r0, #100]	; 0x64
 800b208:	81c2      	strh	r2, [r0, #14]
 800b20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b20e:	6183      	str	r3, [r0, #24]
 800b210:	4619      	mov	r1, r3
 800b212:	2208      	movs	r2, #8
 800b214:	305c      	adds	r0, #92	; 0x5c
 800b216:	f7ff fe1c 	bl	800ae52 <memset>
 800b21a:	4b05      	ldr	r3, [pc, #20]	; (800b230 <std+0x38>)
 800b21c:	6263      	str	r3, [r4, #36]	; 0x24
 800b21e:	4b05      	ldr	r3, [pc, #20]	; (800b234 <std+0x3c>)
 800b220:	62a3      	str	r3, [r4, #40]	; 0x28
 800b222:	4b05      	ldr	r3, [pc, #20]	; (800b238 <std+0x40>)
 800b224:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <std+0x44>)
 800b228:	6224      	str	r4, [r4, #32]
 800b22a:	6323      	str	r3, [r4, #48]	; 0x30
 800b22c:	bd10      	pop	{r4, pc}
 800b22e:	bf00      	nop
 800b230:	0800bb09 	.word	0x0800bb09
 800b234:	0800bb2b 	.word	0x0800bb2b
 800b238:	0800bb63 	.word	0x0800bb63
 800b23c:	0800bb87 	.word	0x0800bb87

0800b240 <_cleanup_r>:
 800b240:	4901      	ldr	r1, [pc, #4]	; (800b248 <_cleanup_r+0x8>)
 800b242:	f000 b885 	b.w	800b350 <_fwalk_reent>
 800b246:	bf00      	nop
 800b248:	0800b1a5 	.word	0x0800b1a5

0800b24c <__sfmoreglue>:
 800b24c:	b570      	push	{r4, r5, r6, lr}
 800b24e:	1e4a      	subs	r2, r1, #1
 800b250:	2568      	movs	r5, #104	; 0x68
 800b252:	4355      	muls	r5, r2
 800b254:	460e      	mov	r6, r1
 800b256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b25a:	f000 f911 	bl	800b480 <_malloc_r>
 800b25e:	4604      	mov	r4, r0
 800b260:	b140      	cbz	r0, 800b274 <__sfmoreglue+0x28>
 800b262:	2100      	movs	r1, #0
 800b264:	e9c0 1600 	strd	r1, r6, [r0]
 800b268:	300c      	adds	r0, #12
 800b26a:	60a0      	str	r0, [r4, #8]
 800b26c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b270:	f7ff fdef 	bl	800ae52 <memset>
 800b274:	4620      	mov	r0, r4
 800b276:	bd70      	pop	{r4, r5, r6, pc}

0800b278 <__sinit>:
 800b278:	6983      	ldr	r3, [r0, #24]
 800b27a:	b510      	push	{r4, lr}
 800b27c:	4604      	mov	r4, r0
 800b27e:	bb33      	cbnz	r3, 800b2ce <__sinit+0x56>
 800b280:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b284:	6503      	str	r3, [r0, #80]	; 0x50
 800b286:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <__sinit+0x58>)
 800b288:	4a12      	ldr	r2, [pc, #72]	; (800b2d4 <__sinit+0x5c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6282      	str	r2, [r0, #40]	; 0x28
 800b28e:	4298      	cmp	r0, r3
 800b290:	bf04      	itt	eq
 800b292:	2301      	moveq	r3, #1
 800b294:	6183      	streq	r3, [r0, #24]
 800b296:	f000 f81f 	bl	800b2d8 <__sfp>
 800b29a:	6060      	str	r0, [r4, #4]
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 f81b 	bl	800b2d8 <__sfp>
 800b2a2:	60a0      	str	r0, [r4, #8]
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 f817 	bl	800b2d8 <__sfp>
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	60e0      	str	r0, [r4, #12]
 800b2ae:	2104      	movs	r1, #4
 800b2b0:	6860      	ldr	r0, [r4, #4]
 800b2b2:	f7ff ffa1 	bl	800b1f8 <std>
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	2109      	movs	r1, #9
 800b2ba:	68a0      	ldr	r0, [r4, #8]
 800b2bc:	f7ff ff9c 	bl	800b1f8 <std>
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	2112      	movs	r1, #18
 800b2c4:	68e0      	ldr	r0, [r4, #12]
 800b2c6:	f7ff ff97 	bl	800b1f8 <std>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	61a3      	str	r3, [r4, #24]
 800b2ce:	bd10      	pop	{r4, pc}
 800b2d0:	0800f3e8 	.word	0x0800f3e8
 800b2d4:	0800b241 	.word	0x0800b241

0800b2d8 <__sfp>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	4b1b      	ldr	r3, [pc, #108]	; (800b348 <__sfp+0x70>)
 800b2dc:	681e      	ldr	r6, [r3, #0]
 800b2de:	69b3      	ldr	r3, [r6, #24]
 800b2e0:	4607      	mov	r7, r0
 800b2e2:	b913      	cbnz	r3, 800b2ea <__sfp+0x12>
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff ffc7 	bl	800b278 <__sinit>
 800b2ea:	3648      	adds	r6, #72	; 0x48
 800b2ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	d503      	bpl.n	800b2fc <__sfp+0x24>
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	b133      	cbz	r3, 800b306 <__sfp+0x2e>
 800b2f8:	6836      	ldr	r6, [r6, #0]
 800b2fa:	e7f7      	b.n	800b2ec <__sfp+0x14>
 800b2fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b300:	b16d      	cbz	r5, 800b31e <__sfp+0x46>
 800b302:	3468      	adds	r4, #104	; 0x68
 800b304:	e7f4      	b.n	800b2f0 <__sfp+0x18>
 800b306:	2104      	movs	r1, #4
 800b308:	4638      	mov	r0, r7
 800b30a:	f7ff ff9f 	bl	800b24c <__sfmoreglue>
 800b30e:	6030      	str	r0, [r6, #0]
 800b310:	2800      	cmp	r0, #0
 800b312:	d1f1      	bne.n	800b2f8 <__sfp+0x20>
 800b314:	230c      	movs	r3, #12
 800b316:	603b      	str	r3, [r7, #0]
 800b318:	4604      	mov	r4, r0
 800b31a:	4620      	mov	r0, r4
 800b31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b31e:	4b0b      	ldr	r3, [pc, #44]	; (800b34c <__sfp+0x74>)
 800b320:	6665      	str	r5, [r4, #100]	; 0x64
 800b322:	e9c4 5500 	strd	r5, r5, [r4]
 800b326:	60a5      	str	r5, [r4, #8]
 800b328:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b32c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b330:	2208      	movs	r2, #8
 800b332:	4629      	mov	r1, r5
 800b334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b338:	f7ff fd8b 	bl	800ae52 <memset>
 800b33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b344:	e7e9      	b.n	800b31a <__sfp+0x42>
 800b346:	bf00      	nop
 800b348:	0800f3e8 	.word	0x0800f3e8
 800b34c:	ffff0001 	.word	0xffff0001

0800b350 <_fwalk_reent>:
 800b350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b354:	4680      	mov	r8, r0
 800b356:	4689      	mov	r9, r1
 800b358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b35c:	2600      	movs	r6, #0
 800b35e:	b914      	cbnz	r4, 800b366 <_fwalk_reent+0x16>
 800b360:	4630      	mov	r0, r6
 800b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b366:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b36a:	3f01      	subs	r7, #1
 800b36c:	d501      	bpl.n	800b372 <_fwalk_reent+0x22>
 800b36e:	6824      	ldr	r4, [r4, #0]
 800b370:	e7f5      	b.n	800b35e <_fwalk_reent+0xe>
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d907      	bls.n	800b388 <_fwalk_reent+0x38>
 800b378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b37c:	3301      	adds	r3, #1
 800b37e:	d003      	beq.n	800b388 <_fwalk_reent+0x38>
 800b380:	4629      	mov	r1, r5
 800b382:	4640      	mov	r0, r8
 800b384:	47c8      	blx	r9
 800b386:	4306      	orrs	r6, r0
 800b388:	3568      	adds	r5, #104	; 0x68
 800b38a:	e7ee      	b.n	800b36a <_fwalk_reent+0x1a>

0800b38c <__swhatbuf_r>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	460e      	mov	r6, r1
 800b390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b394:	2900      	cmp	r1, #0
 800b396:	b096      	sub	sp, #88	; 0x58
 800b398:	4614      	mov	r4, r2
 800b39a:	461d      	mov	r5, r3
 800b39c:	da07      	bge.n	800b3ae <__swhatbuf_r+0x22>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	89b3      	ldrh	r3, [r6, #12]
 800b3a4:	061a      	lsls	r2, r3, #24
 800b3a6:	d410      	bmi.n	800b3ca <__swhatbuf_r+0x3e>
 800b3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ac:	e00e      	b.n	800b3cc <__swhatbuf_r+0x40>
 800b3ae:	466a      	mov	r2, sp
 800b3b0:	f000 fc10 	bl	800bbd4 <_fstat_r>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	dbf2      	blt.n	800b39e <__swhatbuf_r+0x12>
 800b3b8:	9a01      	ldr	r2, [sp, #4]
 800b3ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3c2:	425a      	negs	r2, r3
 800b3c4:	415a      	adcs	r2, r3
 800b3c6:	602a      	str	r2, [r5, #0]
 800b3c8:	e7ee      	b.n	800b3a8 <__swhatbuf_r+0x1c>
 800b3ca:	2340      	movs	r3, #64	; 0x40
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	b016      	add	sp, #88	; 0x58
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}

0800b3d4 <malloc>:
 800b3d4:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <malloc+0xc>)
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	f000 b851 	b.w	800b480 <_malloc_r>
 800b3de:	bf00      	nop
 800b3e0:	200000f8 	.word	0x200000f8

0800b3e4 <_free_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	d045      	beq.n	800b478 <_free_r+0x94>
 800b3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f0:	1f0c      	subs	r4, r1, #4
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	bfb8      	it	lt
 800b3f6:	18e4      	addlt	r4, r4, r3
 800b3f8:	f000 fc29 	bl	800bc4e <__malloc_lock>
 800b3fc:	4a1f      	ldr	r2, [pc, #124]	; (800b47c <_free_r+0x98>)
 800b3fe:	6813      	ldr	r3, [r2, #0]
 800b400:	4610      	mov	r0, r2
 800b402:	b933      	cbnz	r3, 800b412 <_free_r+0x2e>
 800b404:	6063      	str	r3, [r4, #4]
 800b406:	6014      	str	r4, [r2, #0]
 800b408:	4628      	mov	r0, r5
 800b40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b40e:	f000 bc1f 	b.w	800bc50 <__malloc_unlock>
 800b412:	42a3      	cmp	r3, r4
 800b414:	d90c      	bls.n	800b430 <_free_r+0x4c>
 800b416:	6821      	ldr	r1, [r4, #0]
 800b418:	1862      	adds	r2, r4, r1
 800b41a:	4293      	cmp	r3, r2
 800b41c:	bf04      	itt	eq
 800b41e:	681a      	ldreq	r2, [r3, #0]
 800b420:	685b      	ldreq	r3, [r3, #4]
 800b422:	6063      	str	r3, [r4, #4]
 800b424:	bf04      	itt	eq
 800b426:	1852      	addeq	r2, r2, r1
 800b428:	6022      	streq	r2, [r4, #0]
 800b42a:	6004      	str	r4, [r0, #0]
 800b42c:	e7ec      	b.n	800b408 <_free_r+0x24>
 800b42e:	4613      	mov	r3, r2
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	b10a      	cbz	r2, 800b438 <_free_r+0x54>
 800b434:	42a2      	cmp	r2, r4
 800b436:	d9fa      	bls.n	800b42e <_free_r+0x4a>
 800b438:	6819      	ldr	r1, [r3, #0]
 800b43a:	1858      	adds	r0, r3, r1
 800b43c:	42a0      	cmp	r0, r4
 800b43e:	d10b      	bne.n	800b458 <_free_r+0x74>
 800b440:	6820      	ldr	r0, [r4, #0]
 800b442:	4401      	add	r1, r0
 800b444:	1858      	adds	r0, r3, r1
 800b446:	4282      	cmp	r2, r0
 800b448:	6019      	str	r1, [r3, #0]
 800b44a:	d1dd      	bne.n	800b408 <_free_r+0x24>
 800b44c:	6810      	ldr	r0, [r2, #0]
 800b44e:	6852      	ldr	r2, [r2, #4]
 800b450:	605a      	str	r2, [r3, #4]
 800b452:	4401      	add	r1, r0
 800b454:	6019      	str	r1, [r3, #0]
 800b456:	e7d7      	b.n	800b408 <_free_r+0x24>
 800b458:	d902      	bls.n	800b460 <_free_r+0x7c>
 800b45a:	230c      	movs	r3, #12
 800b45c:	602b      	str	r3, [r5, #0]
 800b45e:	e7d3      	b.n	800b408 <_free_r+0x24>
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	1821      	adds	r1, r4, r0
 800b464:	428a      	cmp	r2, r1
 800b466:	bf04      	itt	eq
 800b468:	6811      	ldreq	r1, [r2, #0]
 800b46a:	6852      	ldreq	r2, [r2, #4]
 800b46c:	6062      	str	r2, [r4, #4]
 800b46e:	bf04      	itt	eq
 800b470:	1809      	addeq	r1, r1, r0
 800b472:	6021      	streq	r1, [r4, #0]
 800b474:	605c      	str	r4, [r3, #4]
 800b476:	e7c7      	b.n	800b408 <_free_r+0x24>
 800b478:	bd38      	pop	{r3, r4, r5, pc}
 800b47a:	bf00      	nop
 800b47c:	2000d420 	.word	0x2000d420

0800b480 <_malloc_r>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	1ccd      	adds	r5, r1, #3
 800b484:	f025 0503 	bic.w	r5, r5, #3
 800b488:	3508      	adds	r5, #8
 800b48a:	2d0c      	cmp	r5, #12
 800b48c:	bf38      	it	cc
 800b48e:	250c      	movcc	r5, #12
 800b490:	2d00      	cmp	r5, #0
 800b492:	4606      	mov	r6, r0
 800b494:	db01      	blt.n	800b49a <_malloc_r+0x1a>
 800b496:	42a9      	cmp	r1, r5
 800b498:	d903      	bls.n	800b4a2 <_malloc_r+0x22>
 800b49a:	230c      	movs	r3, #12
 800b49c:	6033      	str	r3, [r6, #0]
 800b49e:	2000      	movs	r0, #0
 800b4a0:	bd70      	pop	{r4, r5, r6, pc}
 800b4a2:	f000 fbd4 	bl	800bc4e <__malloc_lock>
 800b4a6:	4a21      	ldr	r2, [pc, #132]	; (800b52c <_malloc_r+0xac>)
 800b4a8:	6814      	ldr	r4, [r2, #0]
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	b991      	cbnz	r1, 800b4d4 <_malloc_r+0x54>
 800b4ae:	4c20      	ldr	r4, [pc, #128]	; (800b530 <_malloc_r+0xb0>)
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	b91b      	cbnz	r3, 800b4bc <_malloc_r+0x3c>
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f000 fb17 	bl	800bae8 <_sbrk_r>
 800b4ba:	6020      	str	r0, [r4, #0]
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f000 fb12 	bl	800bae8 <_sbrk_r>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d124      	bne.n	800b512 <_malloc_r+0x92>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	6033      	str	r3, [r6, #0]
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f000 fbbf 	bl	800bc50 <__malloc_unlock>
 800b4d2:	e7e4      	b.n	800b49e <_malloc_r+0x1e>
 800b4d4:	680b      	ldr	r3, [r1, #0]
 800b4d6:	1b5b      	subs	r3, r3, r5
 800b4d8:	d418      	bmi.n	800b50c <_malloc_r+0x8c>
 800b4da:	2b0b      	cmp	r3, #11
 800b4dc:	d90f      	bls.n	800b4fe <_malloc_r+0x7e>
 800b4de:	600b      	str	r3, [r1, #0]
 800b4e0:	50cd      	str	r5, [r1, r3]
 800b4e2:	18cc      	adds	r4, r1, r3
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f000 fbb3 	bl	800bc50 <__malloc_unlock>
 800b4ea:	f104 000b 	add.w	r0, r4, #11
 800b4ee:	1d23      	adds	r3, r4, #4
 800b4f0:	f020 0007 	bic.w	r0, r0, #7
 800b4f4:	1ac3      	subs	r3, r0, r3
 800b4f6:	d0d3      	beq.n	800b4a0 <_malloc_r+0x20>
 800b4f8:	425a      	negs	r2, r3
 800b4fa:	50e2      	str	r2, [r4, r3]
 800b4fc:	e7d0      	b.n	800b4a0 <_malloc_r+0x20>
 800b4fe:	428c      	cmp	r4, r1
 800b500:	684b      	ldr	r3, [r1, #4]
 800b502:	bf16      	itet	ne
 800b504:	6063      	strne	r3, [r4, #4]
 800b506:	6013      	streq	r3, [r2, #0]
 800b508:	460c      	movne	r4, r1
 800b50a:	e7eb      	b.n	800b4e4 <_malloc_r+0x64>
 800b50c:	460c      	mov	r4, r1
 800b50e:	6849      	ldr	r1, [r1, #4]
 800b510:	e7cc      	b.n	800b4ac <_malloc_r+0x2c>
 800b512:	1cc4      	adds	r4, r0, #3
 800b514:	f024 0403 	bic.w	r4, r4, #3
 800b518:	42a0      	cmp	r0, r4
 800b51a:	d005      	beq.n	800b528 <_malloc_r+0xa8>
 800b51c:	1a21      	subs	r1, r4, r0
 800b51e:	4630      	mov	r0, r6
 800b520:	f000 fae2 	bl	800bae8 <_sbrk_r>
 800b524:	3001      	adds	r0, #1
 800b526:	d0cf      	beq.n	800b4c8 <_malloc_r+0x48>
 800b528:	6025      	str	r5, [r4, #0]
 800b52a:	e7db      	b.n	800b4e4 <_malloc_r+0x64>
 800b52c:	2000d420 	.word	0x2000d420
 800b530:	2000d424 	.word	0x2000d424

0800b534 <__ssputs_r>:
 800b534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b538:	688e      	ldr	r6, [r1, #8]
 800b53a:	429e      	cmp	r6, r3
 800b53c:	4682      	mov	sl, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	4690      	mov	r8, r2
 800b542:	4699      	mov	r9, r3
 800b544:	d837      	bhi.n	800b5b6 <__ssputs_r+0x82>
 800b546:	898a      	ldrh	r2, [r1, #12]
 800b548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b54c:	d031      	beq.n	800b5b2 <__ssputs_r+0x7e>
 800b54e:	6825      	ldr	r5, [r4, #0]
 800b550:	6909      	ldr	r1, [r1, #16]
 800b552:	1a6f      	subs	r7, r5, r1
 800b554:	6965      	ldr	r5, [r4, #20]
 800b556:	2302      	movs	r3, #2
 800b558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b55c:	fb95 f5f3 	sdiv	r5, r5, r3
 800b560:	f109 0301 	add.w	r3, r9, #1
 800b564:	443b      	add	r3, r7
 800b566:	429d      	cmp	r5, r3
 800b568:	bf38      	it	cc
 800b56a:	461d      	movcc	r5, r3
 800b56c:	0553      	lsls	r3, r2, #21
 800b56e:	d530      	bpl.n	800b5d2 <__ssputs_r+0x9e>
 800b570:	4629      	mov	r1, r5
 800b572:	f7ff ff85 	bl	800b480 <_malloc_r>
 800b576:	4606      	mov	r6, r0
 800b578:	b950      	cbnz	r0, 800b590 <__ssputs_r+0x5c>
 800b57a:	230c      	movs	r3, #12
 800b57c:	f8ca 3000 	str.w	r3, [sl]
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b586:	81a3      	strh	r3, [r4, #12]
 800b588:	f04f 30ff 	mov.w	r0, #4294967295
 800b58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b590:	463a      	mov	r2, r7
 800b592:	6921      	ldr	r1, [r4, #16]
 800b594:	f7ff fc52 	bl	800ae3c <memcpy>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	6126      	str	r6, [r4, #16]
 800b5a6:	6165      	str	r5, [r4, #20]
 800b5a8:	443e      	add	r6, r7
 800b5aa:	1bed      	subs	r5, r5, r7
 800b5ac:	6026      	str	r6, [r4, #0]
 800b5ae:	60a5      	str	r5, [r4, #8]
 800b5b0:	464e      	mov	r6, r9
 800b5b2:	454e      	cmp	r6, r9
 800b5b4:	d900      	bls.n	800b5b8 <__ssputs_r+0x84>
 800b5b6:	464e      	mov	r6, r9
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	4641      	mov	r1, r8
 800b5bc:	6820      	ldr	r0, [r4, #0]
 800b5be:	f000 fb2d 	bl	800bc1c <memmove>
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	1b9b      	subs	r3, r3, r6
 800b5c6:	60a3      	str	r3, [r4, #8]
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	441e      	add	r6, r3
 800b5cc:	6026      	str	r6, [r4, #0]
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e7dc      	b.n	800b58c <__ssputs_r+0x58>
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	f000 fb3d 	bl	800bc52 <_realloc_r>
 800b5d8:	4606      	mov	r6, r0
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d1e2      	bne.n	800b5a4 <__ssputs_r+0x70>
 800b5de:	6921      	ldr	r1, [r4, #16]
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	f7ff feff 	bl	800b3e4 <_free_r>
 800b5e6:	e7c8      	b.n	800b57a <__ssputs_r+0x46>

0800b5e8 <_svfiprintf_r>:
 800b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	461d      	mov	r5, r3
 800b5ee:	898b      	ldrh	r3, [r1, #12]
 800b5f0:	061f      	lsls	r7, r3, #24
 800b5f2:	b09d      	sub	sp, #116	; 0x74
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	d50f      	bpl.n	800b61c <_svfiprintf_r+0x34>
 800b5fc:	690b      	ldr	r3, [r1, #16]
 800b5fe:	b96b      	cbnz	r3, 800b61c <_svfiprintf_r+0x34>
 800b600:	2140      	movs	r1, #64	; 0x40
 800b602:	f7ff ff3d 	bl	800b480 <_malloc_r>
 800b606:	6020      	str	r0, [r4, #0]
 800b608:	6120      	str	r0, [r4, #16]
 800b60a:	b928      	cbnz	r0, 800b618 <_svfiprintf_r+0x30>
 800b60c:	230c      	movs	r3, #12
 800b60e:	f8c8 3000 	str.w	r3, [r8]
 800b612:	f04f 30ff 	mov.w	r0, #4294967295
 800b616:	e0c8      	b.n	800b7aa <_svfiprintf_r+0x1c2>
 800b618:	2340      	movs	r3, #64	; 0x40
 800b61a:	6163      	str	r3, [r4, #20]
 800b61c:	2300      	movs	r3, #0
 800b61e:	9309      	str	r3, [sp, #36]	; 0x24
 800b620:	2320      	movs	r3, #32
 800b622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b626:	2330      	movs	r3, #48	; 0x30
 800b628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b62c:	9503      	str	r5, [sp, #12]
 800b62e:	f04f 0b01 	mov.w	fp, #1
 800b632:	4637      	mov	r7, r6
 800b634:	463d      	mov	r5, r7
 800b636:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b63a:	b10b      	cbz	r3, 800b640 <_svfiprintf_r+0x58>
 800b63c:	2b25      	cmp	r3, #37	; 0x25
 800b63e:	d13e      	bne.n	800b6be <_svfiprintf_r+0xd6>
 800b640:	ebb7 0a06 	subs.w	sl, r7, r6
 800b644:	d00b      	beq.n	800b65e <_svfiprintf_r+0x76>
 800b646:	4653      	mov	r3, sl
 800b648:	4632      	mov	r2, r6
 800b64a:	4621      	mov	r1, r4
 800b64c:	4640      	mov	r0, r8
 800b64e:	f7ff ff71 	bl	800b534 <__ssputs_r>
 800b652:	3001      	adds	r0, #1
 800b654:	f000 80a4 	beq.w	800b7a0 <_svfiprintf_r+0x1b8>
 800b658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65a:	4453      	add	r3, sl
 800b65c:	9309      	str	r3, [sp, #36]	; 0x24
 800b65e:	783b      	ldrb	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 809d 	beq.w	800b7a0 <_svfiprintf_r+0x1b8>
 800b666:	2300      	movs	r3, #0
 800b668:	f04f 32ff 	mov.w	r2, #4294967295
 800b66c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	9307      	str	r3, [sp, #28]
 800b674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b678:	931a      	str	r3, [sp, #104]	; 0x68
 800b67a:	462f      	mov	r7, r5
 800b67c:	2205      	movs	r2, #5
 800b67e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b682:	4850      	ldr	r0, [pc, #320]	; (800b7c4 <_svfiprintf_r+0x1dc>)
 800b684:	f7f4 fdac 	bl	80001e0 <memchr>
 800b688:	9b04      	ldr	r3, [sp, #16]
 800b68a:	b9d0      	cbnz	r0, 800b6c2 <_svfiprintf_r+0xda>
 800b68c:	06d9      	lsls	r1, r3, #27
 800b68e:	bf44      	itt	mi
 800b690:	2220      	movmi	r2, #32
 800b692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b696:	071a      	lsls	r2, r3, #28
 800b698:	bf44      	itt	mi
 800b69a:	222b      	movmi	r2, #43	; 0x2b
 800b69c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6a0:	782a      	ldrb	r2, [r5, #0]
 800b6a2:	2a2a      	cmp	r2, #42	; 0x2a
 800b6a4:	d015      	beq.n	800b6d2 <_svfiprintf_r+0xea>
 800b6a6:	9a07      	ldr	r2, [sp, #28]
 800b6a8:	462f      	mov	r7, r5
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	250a      	movs	r5, #10
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b4:	3b30      	subs	r3, #48	; 0x30
 800b6b6:	2b09      	cmp	r3, #9
 800b6b8:	d94d      	bls.n	800b756 <_svfiprintf_r+0x16e>
 800b6ba:	b1b8      	cbz	r0, 800b6ec <_svfiprintf_r+0x104>
 800b6bc:	e00f      	b.n	800b6de <_svfiprintf_r+0xf6>
 800b6be:	462f      	mov	r7, r5
 800b6c0:	e7b8      	b.n	800b634 <_svfiprintf_r+0x4c>
 800b6c2:	4a40      	ldr	r2, [pc, #256]	; (800b7c4 <_svfiprintf_r+0x1dc>)
 800b6c4:	1a80      	subs	r0, r0, r2
 800b6c6:	fa0b f000 	lsl.w	r0, fp, r0
 800b6ca:	4318      	orrs	r0, r3
 800b6cc:	9004      	str	r0, [sp, #16]
 800b6ce:	463d      	mov	r5, r7
 800b6d0:	e7d3      	b.n	800b67a <_svfiprintf_r+0x92>
 800b6d2:	9a03      	ldr	r2, [sp, #12]
 800b6d4:	1d11      	adds	r1, r2, #4
 800b6d6:	6812      	ldr	r2, [r2, #0]
 800b6d8:	9103      	str	r1, [sp, #12]
 800b6da:	2a00      	cmp	r2, #0
 800b6dc:	db01      	blt.n	800b6e2 <_svfiprintf_r+0xfa>
 800b6de:	9207      	str	r2, [sp, #28]
 800b6e0:	e004      	b.n	800b6ec <_svfiprintf_r+0x104>
 800b6e2:	4252      	negs	r2, r2
 800b6e4:	f043 0302 	orr.w	r3, r3, #2
 800b6e8:	9207      	str	r2, [sp, #28]
 800b6ea:	9304      	str	r3, [sp, #16]
 800b6ec:	783b      	ldrb	r3, [r7, #0]
 800b6ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b6f0:	d10c      	bne.n	800b70c <_svfiprintf_r+0x124>
 800b6f2:	787b      	ldrb	r3, [r7, #1]
 800b6f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f6:	d133      	bne.n	800b760 <_svfiprintf_r+0x178>
 800b6f8:	9b03      	ldr	r3, [sp, #12]
 800b6fa:	1d1a      	adds	r2, r3, #4
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	9203      	str	r2, [sp, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	bfb8      	it	lt
 800b704:	f04f 33ff 	movlt.w	r3, #4294967295
 800b708:	3702      	adds	r7, #2
 800b70a:	9305      	str	r3, [sp, #20]
 800b70c:	4d2e      	ldr	r5, [pc, #184]	; (800b7c8 <_svfiprintf_r+0x1e0>)
 800b70e:	7839      	ldrb	r1, [r7, #0]
 800b710:	2203      	movs	r2, #3
 800b712:	4628      	mov	r0, r5
 800b714:	f7f4 fd64 	bl	80001e0 <memchr>
 800b718:	b138      	cbz	r0, 800b72a <_svfiprintf_r+0x142>
 800b71a:	2340      	movs	r3, #64	; 0x40
 800b71c:	1b40      	subs	r0, r0, r5
 800b71e:	fa03 f000 	lsl.w	r0, r3, r0
 800b722:	9b04      	ldr	r3, [sp, #16]
 800b724:	4303      	orrs	r3, r0
 800b726:	3701      	adds	r7, #1
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	7839      	ldrb	r1, [r7, #0]
 800b72c:	4827      	ldr	r0, [pc, #156]	; (800b7cc <_svfiprintf_r+0x1e4>)
 800b72e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b732:	2206      	movs	r2, #6
 800b734:	1c7e      	adds	r6, r7, #1
 800b736:	f7f4 fd53 	bl	80001e0 <memchr>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d038      	beq.n	800b7b0 <_svfiprintf_r+0x1c8>
 800b73e:	4b24      	ldr	r3, [pc, #144]	; (800b7d0 <_svfiprintf_r+0x1e8>)
 800b740:	bb13      	cbnz	r3, 800b788 <_svfiprintf_r+0x1a0>
 800b742:	9b03      	ldr	r3, [sp, #12]
 800b744:	3307      	adds	r3, #7
 800b746:	f023 0307 	bic.w	r3, r3, #7
 800b74a:	3308      	adds	r3, #8
 800b74c:	9303      	str	r3, [sp, #12]
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	444b      	add	r3, r9
 800b752:	9309      	str	r3, [sp, #36]	; 0x24
 800b754:	e76d      	b.n	800b632 <_svfiprintf_r+0x4a>
 800b756:	fb05 3202 	mla	r2, r5, r2, r3
 800b75a:	2001      	movs	r0, #1
 800b75c:	460f      	mov	r7, r1
 800b75e:	e7a6      	b.n	800b6ae <_svfiprintf_r+0xc6>
 800b760:	2300      	movs	r3, #0
 800b762:	3701      	adds	r7, #1
 800b764:	9305      	str	r3, [sp, #20]
 800b766:	4619      	mov	r1, r3
 800b768:	250a      	movs	r5, #10
 800b76a:	4638      	mov	r0, r7
 800b76c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b770:	3a30      	subs	r2, #48	; 0x30
 800b772:	2a09      	cmp	r2, #9
 800b774:	d903      	bls.n	800b77e <_svfiprintf_r+0x196>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0c8      	beq.n	800b70c <_svfiprintf_r+0x124>
 800b77a:	9105      	str	r1, [sp, #20]
 800b77c:	e7c6      	b.n	800b70c <_svfiprintf_r+0x124>
 800b77e:	fb05 2101 	mla	r1, r5, r1, r2
 800b782:	2301      	movs	r3, #1
 800b784:	4607      	mov	r7, r0
 800b786:	e7f0      	b.n	800b76a <_svfiprintf_r+0x182>
 800b788:	ab03      	add	r3, sp, #12
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	4622      	mov	r2, r4
 800b78e:	4b11      	ldr	r3, [pc, #68]	; (800b7d4 <_svfiprintf_r+0x1ec>)
 800b790:	a904      	add	r1, sp, #16
 800b792:	4640      	mov	r0, r8
 800b794:	f3af 8000 	nop.w
 800b798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b79c:	4681      	mov	r9, r0
 800b79e:	d1d6      	bne.n	800b74e <_svfiprintf_r+0x166>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	065b      	lsls	r3, r3, #25
 800b7a4:	f53f af35 	bmi.w	800b612 <_svfiprintf_r+0x2a>
 800b7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7aa:	b01d      	add	sp, #116	; 0x74
 800b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b0:	ab03      	add	r3, sp, #12
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4b07      	ldr	r3, [pc, #28]	; (800b7d4 <_svfiprintf_r+0x1ec>)
 800b7b8:	a904      	add	r1, sp, #16
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	f000 f882 	bl	800b8c4 <_printf_i>
 800b7c0:	e7ea      	b.n	800b798 <_svfiprintf_r+0x1b0>
 800b7c2:	bf00      	nop
 800b7c4:	0800f44c 	.word	0x0800f44c
 800b7c8:	0800f452 	.word	0x0800f452
 800b7cc:	0800f456 	.word	0x0800f456
 800b7d0:	00000000 	.word	0x00000000
 800b7d4:	0800b535 	.word	0x0800b535

0800b7d8 <_printf_common>:
 800b7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7dc:	4691      	mov	r9, r2
 800b7de:	461f      	mov	r7, r3
 800b7e0:	688a      	ldr	r2, [r1, #8]
 800b7e2:	690b      	ldr	r3, [r1, #16]
 800b7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	bfb8      	it	lt
 800b7ec:	4613      	movlt	r3, r2
 800b7ee:	f8c9 3000 	str.w	r3, [r9]
 800b7f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	460c      	mov	r4, r1
 800b7fa:	b112      	cbz	r2, 800b802 <_printf_common+0x2a>
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	f8c9 3000 	str.w	r3, [r9]
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	0699      	lsls	r1, r3, #26
 800b806:	bf42      	ittt	mi
 800b808:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b80c:	3302      	addmi	r3, #2
 800b80e:	f8c9 3000 	strmi.w	r3, [r9]
 800b812:	6825      	ldr	r5, [r4, #0]
 800b814:	f015 0506 	ands.w	r5, r5, #6
 800b818:	d107      	bne.n	800b82a <_printf_common+0x52>
 800b81a:	f104 0a19 	add.w	sl, r4, #25
 800b81e:	68e3      	ldr	r3, [r4, #12]
 800b820:	f8d9 2000 	ldr.w	r2, [r9]
 800b824:	1a9b      	subs	r3, r3, r2
 800b826:	42ab      	cmp	r3, r5
 800b828:	dc28      	bgt.n	800b87c <_printf_common+0xa4>
 800b82a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b82e:	6822      	ldr	r2, [r4, #0]
 800b830:	3300      	adds	r3, #0
 800b832:	bf18      	it	ne
 800b834:	2301      	movne	r3, #1
 800b836:	0692      	lsls	r2, r2, #26
 800b838:	d42d      	bmi.n	800b896 <_printf_common+0xbe>
 800b83a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b83e:	4639      	mov	r1, r7
 800b840:	4630      	mov	r0, r6
 800b842:	47c0      	blx	r8
 800b844:	3001      	adds	r0, #1
 800b846:	d020      	beq.n	800b88a <_printf_common+0xb2>
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	68e5      	ldr	r5, [r4, #12]
 800b84c:	f8d9 2000 	ldr.w	r2, [r9]
 800b850:	f003 0306 	and.w	r3, r3, #6
 800b854:	2b04      	cmp	r3, #4
 800b856:	bf08      	it	eq
 800b858:	1aad      	subeq	r5, r5, r2
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	6922      	ldr	r2, [r4, #16]
 800b85e:	bf0c      	ite	eq
 800b860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b864:	2500      	movne	r5, #0
 800b866:	4293      	cmp	r3, r2
 800b868:	bfc4      	itt	gt
 800b86a:	1a9b      	subgt	r3, r3, r2
 800b86c:	18ed      	addgt	r5, r5, r3
 800b86e:	f04f 0900 	mov.w	r9, #0
 800b872:	341a      	adds	r4, #26
 800b874:	454d      	cmp	r5, r9
 800b876:	d11a      	bne.n	800b8ae <_printf_common+0xd6>
 800b878:	2000      	movs	r0, #0
 800b87a:	e008      	b.n	800b88e <_printf_common+0xb6>
 800b87c:	2301      	movs	r3, #1
 800b87e:	4652      	mov	r2, sl
 800b880:	4639      	mov	r1, r7
 800b882:	4630      	mov	r0, r6
 800b884:	47c0      	blx	r8
 800b886:	3001      	adds	r0, #1
 800b888:	d103      	bne.n	800b892 <_printf_common+0xba>
 800b88a:	f04f 30ff 	mov.w	r0, #4294967295
 800b88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b892:	3501      	adds	r5, #1
 800b894:	e7c3      	b.n	800b81e <_printf_common+0x46>
 800b896:	18e1      	adds	r1, r4, r3
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	2030      	movs	r0, #48	; 0x30
 800b89c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8a0:	4422      	add	r2, r4
 800b8a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	e7c5      	b.n	800b83a <_printf_common+0x62>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	47c0      	blx	r8
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d0e6      	beq.n	800b88a <_printf_common+0xb2>
 800b8bc:	f109 0901 	add.w	r9, r9, #1
 800b8c0:	e7d8      	b.n	800b874 <_printf_common+0x9c>
	...

0800b8c4 <_printf_i>:
 800b8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	7e09      	ldrb	r1, [r1, #24]
 800b8d0:	b085      	sub	sp, #20
 800b8d2:	296e      	cmp	r1, #110	; 0x6e
 800b8d4:	4617      	mov	r7, r2
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	4698      	mov	r8, r3
 800b8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8dc:	f000 80b3 	beq.w	800ba46 <_printf_i+0x182>
 800b8e0:	d822      	bhi.n	800b928 <_printf_i+0x64>
 800b8e2:	2963      	cmp	r1, #99	; 0x63
 800b8e4:	d036      	beq.n	800b954 <_printf_i+0x90>
 800b8e6:	d80a      	bhi.n	800b8fe <_printf_i+0x3a>
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	f000 80b9 	beq.w	800ba60 <_printf_i+0x19c>
 800b8ee:	2958      	cmp	r1, #88	; 0x58
 800b8f0:	f000 8083 	beq.w	800b9fa <_printf_i+0x136>
 800b8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b8fc:	e032      	b.n	800b964 <_printf_i+0xa0>
 800b8fe:	2964      	cmp	r1, #100	; 0x64
 800b900:	d001      	beq.n	800b906 <_printf_i+0x42>
 800b902:	2969      	cmp	r1, #105	; 0x69
 800b904:	d1f6      	bne.n	800b8f4 <_printf_i+0x30>
 800b906:	6820      	ldr	r0, [r4, #0]
 800b908:	6813      	ldr	r3, [r2, #0]
 800b90a:	0605      	lsls	r5, r0, #24
 800b90c:	f103 0104 	add.w	r1, r3, #4
 800b910:	d52a      	bpl.n	800b968 <_printf_i+0xa4>
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6011      	str	r1, [r2, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	da03      	bge.n	800b922 <_printf_i+0x5e>
 800b91a:	222d      	movs	r2, #45	; 0x2d
 800b91c:	425b      	negs	r3, r3
 800b91e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b922:	486f      	ldr	r0, [pc, #444]	; (800bae0 <_printf_i+0x21c>)
 800b924:	220a      	movs	r2, #10
 800b926:	e039      	b.n	800b99c <_printf_i+0xd8>
 800b928:	2973      	cmp	r1, #115	; 0x73
 800b92a:	f000 809d 	beq.w	800ba68 <_printf_i+0x1a4>
 800b92e:	d808      	bhi.n	800b942 <_printf_i+0x7e>
 800b930:	296f      	cmp	r1, #111	; 0x6f
 800b932:	d020      	beq.n	800b976 <_printf_i+0xb2>
 800b934:	2970      	cmp	r1, #112	; 0x70
 800b936:	d1dd      	bne.n	800b8f4 <_printf_i+0x30>
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	f043 0320 	orr.w	r3, r3, #32
 800b93e:	6023      	str	r3, [r4, #0]
 800b940:	e003      	b.n	800b94a <_printf_i+0x86>
 800b942:	2975      	cmp	r1, #117	; 0x75
 800b944:	d017      	beq.n	800b976 <_printf_i+0xb2>
 800b946:	2978      	cmp	r1, #120	; 0x78
 800b948:	d1d4      	bne.n	800b8f4 <_printf_i+0x30>
 800b94a:	2378      	movs	r3, #120	; 0x78
 800b94c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b950:	4864      	ldr	r0, [pc, #400]	; (800bae4 <_printf_i+0x220>)
 800b952:	e055      	b.n	800ba00 <_printf_i+0x13c>
 800b954:	6813      	ldr	r3, [r2, #0]
 800b956:	1d19      	adds	r1, r3, #4
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6011      	str	r1, [r2, #0]
 800b95c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b964:	2301      	movs	r3, #1
 800b966:	e08c      	b.n	800ba82 <_printf_i+0x1be>
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6011      	str	r1, [r2, #0]
 800b96c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b970:	bf18      	it	ne
 800b972:	b21b      	sxthne	r3, r3
 800b974:	e7cf      	b.n	800b916 <_printf_i+0x52>
 800b976:	6813      	ldr	r3, [r2, #0]
 800b978:	6825      	ldr	r5, [r4, #0]
 800b97a:	1d18      	adds	r0, r3, #4
 800b97c:	6010      	str	r0, [r2, #0]
 800b97e:	0628      	lsls	r0, r5, #24
 800b980:	d501      	bpl.n	800b986 <_printf_i+0xc2>
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	e002      	b.n	800b98c <_printf_i+0xc8>
 800b986:	0668      	lsls	r0, r5, #25
 800b988:	d5fb      	bpl.n	800b982 <_printf_i+0xbe>
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	4854      	ldr	r0, [pc, #336]	; (800bae0 <_printf_i+0x21c>)
 800b98e:	296f      	cmp	r1, #111	; 0x6f
 800b990:	bf14      	ite	ne
 800b992:	220a      	movne	r2, #10
 800b994:	2208      	moveq	r2, #8
 800b996:	2100      	movs	r1, #0
 800b998:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b99c:	6865      	ldr	r5, [r4, #4]
 800b99e:	60a5      	str	r5, [r4, #8]
 800b9a0:	2d00      	cmp	r5, #0
 800b9a2:	f2c0 8095 	blt.w	800bad0 <_printf_i+0x20c>
 800b9a6:	6821      	ldr	r1, [r4, #0]
 800b9a8:	f021 0104 	bic.w	r1, r1, #4
 800b9ac:	6021      	str	r1, [r4, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d13d      	bne.n	800ba2e <_printf_i+0x16a>
 800b9b2:	2d00      	cmp	r5, #0
 800b9b4:	f040 808e 	bne.w	800bad4 <_printf_i+0x210>
 800b9b8:	4665      	mov	r5, ip
 800b9ba:	2a08      	cmp	r2, #8
 800b9bc:	d10b      	bne.n	800b9d6 <_printf_i+0x112>
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	07db      	lsls	r3, r3, #31
 800b9c2:	d508      	bpl.n	800b9d6 <_printf_i+0x112>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	6862      	ldr	r2, [r4, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	bfde      	ittt	le
 800b9cc:	2330      	movle	r3, #48	; 0x30
 800b9ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9d6:	ebac 0305 	sub.w	r3, ip, r5
 800b9da:	6123      	str	r3, [r4, #16]
 800b9dc:	f8cd 8000 	str.w	r8, [sp]
 800b9e0:	463b      	mov	r3, r7
 800b9e2:	aa03      	add	r2, sp, #12
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f7ff fef6 	bl	800b7d8 <_printf_common>
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d14d      	bne.n	800ba8c <_printf_i+0x1c8>
 800b9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f4:	b005      	add	sp, #20
 800b9f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9fa:	4839      	ldr	r0, [pc, #228]	; (800bae0 <_printf_i+0x21c>)
 800b9fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ba00:	6813      	ldr	r3, [r2, #0]
 800ba02:	6821      	ldr	r1, [r4, #0]
 800ba04:	1d1d      	adds	r5, r3, #4
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6015      	str	r5, [r2, #0]
 800ba0a:	060a      	lsls	r2, r1, #24
 800ba0c:	d50b      	bpl.n	800ba26 <_printf_i+0x162>
 800ba0e:	07ca      	lsls	r2, r1, #31
 800ba10:	bf44      	itt	mi
 800ba12:	f041 0120 	orrmi.w	r1, r1, #32
 800ba16:	6021      	strmi	r1, [r4, #0]
 800ba18:	b91b      	cbnz	r3, 800ba22 <_printf_i+0x15e>
 800ba1a:	6822      	ldr	r2, [r4, #0]
 800ba1c:	f022 0220 	bic.w	r2, r2, #32
 800ba20:	6022      	str	r2, [r4, #0]
 800ba22:	2210      	movs	r2, #16
 800ba24:	e7b7      	b.n	800b996 <_printf_i+0xd2>
 800ba26:	064d      	lsls	r5, r1, #25
 800ba28:	bf48      	it	mi
 800ba2a:	b29b      	uxthmi	r3, r3
 800ba2c:	e7ef      	b.n	800ba0e <_printf_i+0x14a>
 800ba2e:	4665      	mov	r5, ip
 800ba30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba34:	fb02 3311 	mls	r3, r2, r1, r3
 800ba38:	5cc3      	ldrb	r3, [r0, r3]
 800ba3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ba3e:	460b      	mov	r3, r1
 800ba40:	2900      	cmp	r1, #0
 800ba42:	d1f5      	bne.n	800ba30 <_printf_i+0x16c>
 800ba44:	e7b9      	b.n	800b9ba <_printf_i+0xf6>
 800ba46:	6813      	ldr	r3, [r2, #0]
 800ba48:	6825      	ldr	r5, [r4, #0]
 800ba4a:	6961      	ldr	r1, [r4, #20]
 800ba4c:	1d18      	adds	r0, r3, #4
 800ba4e:	6010      	str	r0, [r2, #0]
 800ba50:	0628      	lsls	r0, r5, #24
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	d501      	bpl.n	800ba5a <_printf_i+0x196>
 800ba56:	6019      	str	r1, [r3, #0]
 800ba58:	e002      	b.n	800ba60 <_printf_i+0x19c>
 800ba5a:	066a      	lsls	r2, r5, #25
 800ba5c:	d5fb      	bpl.n	800ba56 <_printf_i+0x192>
 800ba5e:	8019      	strh	r1, [r3, #0]
 800ba60:	2300      	movs	r3, #0
 800ba62:	6123      	str	r3, [r4, #16]
 800ba64:	4665      	mov	r5, ip
 800ba66:	e7b9      	b.n	800b9dc <_printf_i+0x118>
 800ba68:	6813      	ldr	r3, [r2, #0]
 800ba6a:	1d19      	adds	r1, r3, #4
 800ba6c:	6011      	str	r1, [r2, #0]
 800ba6e:	681d      	ldr	r5, [r3, #0]
 800ba70:	6862      	ldr	r2, [r4, #4]
 800ba72:	2100      	movs	r1, #0
 800ba74:	4628      	mov	r0, r5
 800ba76:	f7f4 fbb3 	bl	80001e0 <memchr>
 800ba7a:	b108      	cbz	r0, 800ba80 <_printf_i+0x1bc>
 800ba7c:	1b40      	subs	r0, r0, r5
 800ba7e:	6060      	str	r0, [r4, #4]
 800ba80:	6863      	ldr	r3, [r4, #4]
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	2300      	movs	r3, #0
 800ba86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba8a:	e7a7      	b.n	800b9dc <_printf_i+0x118>
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4639      	mov	r1, r7
 800ba92:	4630      	mov	r0, r6
 800ba94:	47c0      	blx	r8
 800ba96:	3001      	adds	r0, #1
 800ba98:	d0aa      	beq.n	800b9f0 <_printf_i+0x12c>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	079b      	lsls	r3, r3, #30
 800ba9e:	d413      	bmi.n	800bac8 <_printf_i+0x204>
 800baa0:	68e0      	ldr	r0, [r4, #12]
 800baa2:	9b03      	ldr	r3, [sp, #12]
 800baa4:	4298      	cmp	r0, r3
 800baa6:	bfb8      	it	lt
 800baa8:	4618      	movlt	r0, r3
 800baaa:	e7a3      	b.n	800b9f4 <_printf_i+0x130>
 800baac:	2301      	movs	r3, #1
 800baae:	464a      	mov	r2, r9
 800bab0:	4639      	mov	r1, r7
 800bab2:	4630      	mov	r0, r6
 800bab4:	47c0      	blx	r8
 800bab6:	3001      	adds	r0, #1
 800bab8:	d09a      	beq.n	800b9f0 <_printf_i+0x12c>
 800baba:	3501      	adds	r5, #1
 800babc:	68e3      	ldr	r3, [r4, #12]
 800babe:	9a03      	ldr	r2, [sp, #12]
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	42ab      	cmp	r3, r5
 800bac4:	dcf2      	bgt.n	800baac <_printf_i+0x1e8>
 800bac6:	e7eb      	b.n	800baa0 <_printf_i+0x1dc>
 800bac8:	2500      	movs	r5, #0
 800baca:	f104 0919 	add.w	r9, r4, #25
 800bace:	e7f5      	b.n	800babc <_printf_i+0x1f8>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1ac      	bne.n	800ba2e <_printf_i+0x16a>
 800bad4:	7803      	ldrb	r3, [r0, #0]
 800bad6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bade:	e76c      	b.n	800b9ba <_printf_i+0xf6>
 800bae0:	0800f45d 	.word	0x0800f45d
 800bae4:	0800f46e 	.word	0x0800f46e

0800bae8 <_sbrk_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4c06      	ldr	r4, [pc, #24]	; (800bb04 <_sbrk_r+0x1c>)
 800baec:	2300      	movs	r3, #0
 800baee:	4605      	mov	r5, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	f7fc fd86 	bl	8008604 <_sbrk>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_sbrk_r+0x1a>
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_sbrk_r+0x1a>
 800bb00:	602b      	str	r3, [r5, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	2000d70c 	.word	0x2000d70c

0800bb08 <__sread>:
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb10:	f000 f8c6 	bl	800bca0 <_read_r>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	bfab      	itete	ge
 800bb18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb1c:	181b      	addge	r3, r3, r0
 800bb1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb22:	bfac      	ite	ge
 800bb24:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb26:	81a3      	strhlt	r3, [r4, #12]
 800bb28:	bd10      	pop	{r4, pc}

0800bb2a <__swrite>:
 800bb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2e:	461f      	mov	r7, r3
 800bb30:	898b      	ldrh	r3, [r1, #12]
 800bb32:	05db      	lsls	r3, r3, #23
 800bb34:	4605      	mov	r5, r0
 800bb36:	460c      	mov	r4, r1
 800bb38:	4616      	mov	r6, r2
 800bb3a:	d505      	bpl.n	800bb48 <__swrite+0x1e>
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb44:	f000 f858 	bl	800bbf8 <_lseek_r>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	4632      	mov	r2, r6
 800bb56:	463b      	mov	r3, r7
 800bb58:	4628      	mov	r0, r5
 800bb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5e:	f000 b817 	b.w	800bb90 <_write_r>

0800bb62 <__sseek>:
 800bb62:	b510      	push	{r4, lr}
 800bb64:	460c      	mov	r4, r1
 800bb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb6a:	f000 f845 	bl	800bbf8 <_lseek_r>
 800bb6e:	1c43      	adds	r3, r0, #1
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	bf15      	itete	ne
 800bb74:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb7e:	81a3      	strheq	r3, [r4, #12]
 800bb80:	bf18      	it	ne
 800bb82:	81a3      	strhne	r3, [r4, #12]
 800bb84:	bd10      	pop	{r4, pc}

0800bb86 <__sclose>:
 800bb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8a:	f000 b813 	b.w	800bbb4 <_close_r>
	...

0800bb90 <_write_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4c07      	ldr	r4, [pc, #28]	; (800bbb0 <_write_r+0x20>)
 800bb94:	4605      	mov	r5, r0
 800bb96:	4608      	mov	r0, r1
 800bb98:	4611      	mov	r1, r2
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	6022      	str	r2, [r4, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f7fc fceb 	bl	800857a <_write>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	d102      	bne.n	800bbae <_write_r+0x1e>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	b103      	cbz	r3, 800bbae <_write_r+0x1e>
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	2000d70c 	.word	0x2000d70c

0800bbb4 <_close_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4c06      	ldr	r4, [pc, #24]	; (800bbd0 <_close_r+0x1c>)
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4605      	mov	r5, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	6023      	str	r3, [r4, #0]
 800bbc0:	f7fc fcf7 	bl	80085b2 <_close>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_close_r+0x1a>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_close_r+0x1a>
 800bbcc:	602b      	str	r3, [r5, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	2000d70c 	.word	0x2000d70c

0800bbd4 <_fstat_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4c07      	ldr	r4, [pc, #28]	; (800bbf4 <_fstat_r+0x20>)
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4605      	mov	r5, r0
 800bbdc:	4608      	mov	r0, r1
 800bbde:	4611      	mov	r1, r2
 800bbe0:	6023      	str	r3, [r4, #0]
 800bbe2:	f7fc fcf2 	bl	80085ca <_fstat>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	d102      	bne.n	800bbf0 <_fstat_r+0x1c>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	b103      	cbz	r3, 800bbf0 <_fstat_r+0x1c>
 800bbee:	602b      	str	r3, [r5, #0]
 800bbf0:	bd38      	pop	{r3, r4, r5, pc}
 800bbf2:	bf00      	nop
 800bbf4:	2000d70c 	.word	0x2000d70c

0800bbf8 <_lseek_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4c07      	ldr	r4, [pc, #28]	; (800bc18 <_lseek_r+0x20>)
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	4608      	mov	r0, r1
 800bc00:	4611      	mov	r1, r2
 800bc02:	2200      	movs	r2, #0
 800bc04:	6022      	str	r2, [r4, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	f7fc fcef 	bl	80085ea <_lseek>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_lseek_r+0x1e>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_lseek_r+0x1e>
 800bc14:	602b      	str	r3, [r5, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	2000d70c 	.word	0x2000d70c

0800bc1c <memmove>:
 800bc1c:	4288      	cmp	r0, r1
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	eb01 0302 	add.w	r3, r1, r2
 800bc24:	d807      	bhi.n	800bc36 <memmove+0x1a>
 800bc26:	1e42      	subs	r2, r0, #1
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d00a      	beq.n	800bc42 <memmove+0x26>
 800bc2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc30:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bc34:	e7f8      	b.n	800bc28 <memmove+0xc>
 800bc36:	4283      	cmp	r3, r0
 800bc38:	d9f5      	bls.n	800bc26 <memmove+0xa>
 800bc3a:	1881      	adds	r1, r0, r2
 800bc3c:	1ad2      	subs	r2, r2, r3
 800bc3e:	42d3      	cmn	r3, r2
 800bc40:	d100      	bne.n	800bc44 <memmove+0x28>
 800bc42:	bd10      	pop	{r4, pc}
 800bc44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bc4c:	e7f7      	b.n	800bc3e <memmove+0x22>

0800bc4e <__malloc_lock>:
 800bc4e:	4770      	bx	lr

0800bc50 <__malloc_unlock>:
 800bc50:	4770      	bx	lr

0800bc52 <_realloc_r>:
 800bc52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc54:	4607      	mov	r7, r0
 800bc56:	4614      	mov	r4, r2
 800bc58:	460e      	mov	r6, r1
 800bc5a:	b921      	cbnz	r1, 800bc66 <_realloc_r+0x14>
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc62:	f7ff bc0d 	b.w	800b480 <_malloc_r>
 800bc66:	b922      	cbnz	r2, 800bc72 <_realloc_r+0x20>
 800bc68:	f7ff fbbc 	bl	800b3e4 <_free_r>
 800bc6c:	4625      	mov	r5, r4
 800bc6e:	4628      	mov	r0, r5
 800bc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc72:	f000 f827 	bl	800bcc4 <_malloc_usable_size_r>
 800bc76:	42a0      	cmp	r0, r4
 800bc78:	d20f      	bcs.n	800bc9a <_realloc_r+0x48>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	f7ff fbff 	bl	800b480 <_malloc_r>
 800bc82:	4605      	mov	r5, r0
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d0f2      	beq.n	800bc6e <_realloc_r+0x1c>
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	f7ff f8d6 	bl	800ae3c <memcpy>
 800bc90:	4631      	mov	r1, r6
 800bc92:	4638      	mov	r0, r7
 800bc94:	f7ff fba6 	bl	800b3e4 <_free_r>
 800bc98:	e7e9      	b.n	800bc6e <_realloc_r+0x1c>
 800bc9a:	4635      	mov	r5, r6
 800bc9c:	e7e7      	b.n	800bc6e <_realloc_r+0x1c>
	...

0800bca0 <_read_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4c07      	ldr	r4, [pc, #28]	; (800bcc0 <_read_r+0x20>)
 800bca4:	4605      	mov	r5, r0
 800bca6:	4608      	mov	r0, r1
 800bca8:	4611      	mov	r1, r2
 800bcaa:	2200      	movs	r2, #0
 800bcac:	6022      	str	r2, [r4, #0]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f7fc fc46 	bl	8008540 <_read>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_read_r+0x1e>
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_read_r+0x1e>
 800bcbc:	602b      	str	r3, [r5, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	2000d70c 	.word	0x2000d70c

0800bcc4 <_malloc_usable_size_r>:
 800bcc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcc8:	1f18      	subs	r0, r3, #4
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bfbc      	itt	lt
 800bcce:	580b      	ldrlt	r3, [r1, r0]
 800bcd0:	18c0      	addlt	r0, r0, r3
 800bcd2:	4770      	bx	lr

0800bcd4 <_init>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	bf00      	nop
 800bcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	469e      	mov	lr, r3
 800bcde:	4770      	bx	lr

0800bce0 <_fini>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	bf00      	nop
 800bce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce6:	bc08      	pop	{r3}
 800bce8:	469e      	mov	lr, r3
 800bcea:	4770      	bx	lr
