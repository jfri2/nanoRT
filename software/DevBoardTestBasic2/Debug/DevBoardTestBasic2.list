
DevBoardTestBasic2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a570  0800a570  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a570  0800a570  0001a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a578  0800a578  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800a580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004284  200000a0  0800a620  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 0000c004  20004324  0800a620  00024324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a85d  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004547  00000000  00000000  0004a92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a60  00000000  00000000  0004ee78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001868  00000000  00000000  000508d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027b54  00000000  00000000  00052140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017808  00000000  00000000  00079c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8771  00000000  00000000  0009149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179c0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000750c  00000000  00000000  00179c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b70 	.word	0x08009b70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08009b70 	.word	0x08009b70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f91c 	bl	80007e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f008 f896 	bl	80086e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f008 f868 	bl	8008688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20004040 	.word	0x20004040

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20004040 	.word	0x20004040

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	db10      	blt.n	800071c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f003 021f 	and.w	r2, r3, #31
 8000700:	4909      	ldr	r1, [pc, #36]	; (8000728 <__NVIC_DisableIRQ+0x40>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	095b      	lsrs	r3, r3, #5
 8000708:	2001      	movs	r0, #1
 800070a:	fa00 f202 	lsl.w	r2, r0, r2
 800070e:	3320      	adds	r3, #32
 8000710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000718:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff2a 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080e:	f7ff ff3f 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	f7ff ffb1 	bl	8000780 <NVIC_EncodePriority>
 800081e:	4602      	mov	r2, r0
 8000820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff80 	bl	800072c <__NVIC_SetPriority>
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff32 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff42 	bl	80006e8 <__NVIC_DisableIRQ>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff feb8 	bl	80005ec <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e099      	b.n	80009bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2202      	movs	r2, #2
 8000894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0201 	bic.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a8:	e00f      	b.n	80008ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008aa:	f7ff fe9f 	bl	80005ec <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d908      	bls.n	80008ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2220      	movs	r2, #32
 80008bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2203      	movs	r2, #3
 80008c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e078      	b.n	80009bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1e8      	bne.n	80008aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <HAL_DMA_Init+0x158>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	2b04      	cmp	r3, #4
 8000922:	d107      	bne.n	8000934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4313      	orrs	r3, r2
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4313      	orrs	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	4313      	orrs	r3, r2
 8000954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	2b04      	cmp	r3, #4
 800095c:	d117      	bne.n	800098e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4313      	orrs	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00e      	beq.n	800098e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 faef 	bl	8000f54 <DMA_CheckFifoParam>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d008      	beq.n	800098e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2240      	movs	r2, #64	; 0x40
 8000980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800098a:	2301      	movs	r3, #1
 800098c:	e016      	b.n	80009bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 faa6 	bl	8000ee8 <DMA_CalcBaseAndBitshift>
 800099c:	4603      	mov	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	223f      	movs	r2, #63	; 0x3f
 80009a6:	409a      	lsls	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	f010803f 	.word	0xf010803f

080009c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e050      	b.n	8000a7c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d101      	bne.n	80009ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80009e6:	2302      	movs	r3, #2
 80009e8:	e048      	b.n	8000a7c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0201 	bic.w	r2, r2, #1
 80009f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2221      	movs	r2, #33	; 0x21
 8000a28:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 fa5c 	bl	8000ee8 <DMA_CalcBaseAndBitshift>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5c:	223f      	movs	r2, #63	; 0x3f
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d101      	bne.n	8000aaa <HAL_DMA_Start_IT+0x26>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e040      	b.n	8000b2c <HAL_DMA_Start_IT+0xa8>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2201      	movs	r2, #1
 8000aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d12f      	bne.n	8000b1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f000 f9da 	bl	8000e8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	223f      	movs	r2, #63	; 0x3f
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0216 	orr.w	r2, r2, #22
 8000af2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d007      	beq.n	8000b0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0208 	orr.w	r2, r2, #8
 8000b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0201 	orr.w	r2, r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e005      	b.n	8000b2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000b26:	2302      	movs	r3, #2
 8000b28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d004      	beq.n	8000b52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00c      	b.n	8000b6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2205      	movs	r2, #5
 8000b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b84:	4b92      	ldr	r3, [pc, #584]	; (8000dd0 <HAL_DMA_IRQHandler+0x258>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a92      	ldr	r2, [pc, #584]	; (8000dd4 <HAL_DMA_IRQHandler+0x25c>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	0a9b      	lsrs	r3, r3, #10
 8000b90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d01a      	beq.n	8000be4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d013      	beq.n	8000be4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0204 	bic.w	r2, r2, #4
 8000bca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bdc:	f043 0201 	orr.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be8:	2201      	movs	r2, #1
 8000bea:	409a      	lsls	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d012      	beq.n	8000c1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00b      	beq.n	8000c1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c06:	2201      	movs	r2, #1
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c12:	f043 0202 	orr.w	r2, r3, #2
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1e:	2204      	movs	r2, #4
 8000c20:	409a      	lsls	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d012      	beq.n	8000c50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00b      	beq.n	8000c50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c48:	f043 0204 	orr.w	r2, r3, #4
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c54:	2210      	movs	r2, #16
 8000c56:	409a      	lsls	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d043      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d03c      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c72:	2210      	movs	r2, #16
 8000c74:	409a      	lsls	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d018      	beq.n	8000cba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d108      	bne.n	8000ca8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d024      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	4798      	blx	r3
 8000ca6:	e01f      	b.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d01b      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	4798      	blx	r3
 8000cb8:	e016      	b.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d107      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0208 	bic.w	r2, r2, #8
 8000cd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cec:	2220      	movs	r2, #32
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 808e 	beq.w	8000e16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8086 	beq.w	8000e16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d0e:	2220      	movs	r2, #32
 8000d10:	409a      	lsls	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d136      	bne.n	8000d90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0216 	bic.w	r2, r2, #22
 8000d30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x1da>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0208 	bic.w	r2, r2, #8
 8000d60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d66:	223f      	movs	r2, #63	; 0x3f
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d07d      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	4798      	blx	r3
        }
        return;
 8000d8e:	e078      	b.n	8000e82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d01c      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d108      	bne.n	8000dbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d030      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
 8000dbc:	e02b      	b.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d027      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	4798      	blx	r3
 8000dce:	e022      	b.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
 8000dd0:	20000034 	.word	0x20000034
 8000dd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0210 	bic.w	r2, r2, #16
 8000df4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d032      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d022      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3301      	adds	r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d307      	bcc.n	8000e5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f2      	bne.n	8000e42 <HAL_DMA_IRQHandler+0x2ca>
 8000e5c:	e000      	b.n	8000e60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000e5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	4798      	blx	r3
 8000e80:	e000      	b.n	8000e84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e82:	bf00      	nop
    }
  }
}
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop

08000e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ea8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b40      	cmp	r3, #64	; 0x40
 8000eb8:	d108      	bne.n	8000ecc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000eca:	e007      	b.n	8000edc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	60da      	str	r2, [r3, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3b10      	subs	r3, #16
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <DMA_CalcBaseAndBitshift+0x64>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <DMA_CalcBaseAndBitshift+0x68>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d909      	bls.n	8000f2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	1d1a      	adds	r2, r3, #4
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	659a      	str	r2, [r3, #88]	; 0x58
 8000f28:	e007      	b.n	8000f3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f32:	f023 0303 	bic.w	r3, r3, #3
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	aaaaaaab 	.word	0xaaaaaaab
 8000f50:	0800a448 	.word	0x0800a448

08000f54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11f      	bne.n	8000fae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d855      	bhi.n	8001020 <DMA_CheckFifoParam+0xcc>
 8000f74:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <DMA_CheckFifoParam+0x28>)
 8000f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7a:	bf00      	nop
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	08000f9f 	.word	0x08000f9f
 8000f84:	08000f8d 	.word	0x08000f8d
 8000f88:	08001021 	.word	0x08001021
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d045      	beq.n	8001024 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f9c:	e042      	b.n	8001024 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fa6:	d13f      	bne.n	8001028 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fac:	e03c      	b.n	8001028 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb6:	d121      	bne.n	8000ffc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d836      	bhi.n	800102c <DMA_CheckFifoParam+0xd8>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <DMA_CheckFifoParam+0x70>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08000fdb 	.word	0x08000fdb
 8000fcc:	08000fd5 	.word	0x08000fd5
 8000fd0:	08000fed 	.word	0x08000fed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8000fd8:	e02f      	b.n	800103a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d024      	beq.n	8001030 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fea:	e021      	b.n	8001030 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ff4:	d11e      	bne.n	8001034 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ffa:	e01b      	b.n	8001034 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d902      	bls.n	8001008 <DMA_CheckFifoParam+0xb4>
 8001002:	2b03      	cmp	r3, #3
 8001004:	d003      	beq.n	800100e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001006:	e018      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
      break;
 800100c:	e015      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00e      	beq.n	8001038 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
      break;
 800101e:	e00b      	b.n	8001038 <DMA_CheckFifoParam+0xe4>
      break;
 8001020:	bf00      	nop
 8001022:	e00a      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001024:	bf00      	nop
 8001026:	e008      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001028:	bf00      	nop
 800102a:	e006      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 800102c:	bf00      	nop
 800102e:	e004      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001030:	bf00      	nop
 8001032:	e002      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;   
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001038:	bf00      	nop
    }
  } 
  
  return status; 
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e16b      	b.n	800133c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 815a 	bne.w	8001336 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d00b      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	2b11      	cmp	r3, #17
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0xfc>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80b4 	beq.w	8001336 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_GPIO_Init+0x308>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5e      	ldr	r2, [pc, #376]	; (8001350 <HAL_GPIO_Init+0x308>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_GPIO_Init+0x308>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x310>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02b      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <HAL_GPIO_Init+0x314>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x318>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x31c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x324>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <HAL_GPIO_Init+0x328>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <HAL_GPIO_Init+0x32c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x20a>
 800124e:	2307      	movs	r3, #7
 8001250:	e00e      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001252:	2308      	movs	r3, #8
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001256:	2306      	movs	r3, #6
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4934      	ldr	r1, [pc, #208]	; (8001354 <HAL_GPIO_Init+0x30c>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x330>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae90 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	3724      	adds	r7, #36	; 0x24
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40021400 	.word	0x40021400
 8001370:	40021800 	.word	0x40021800
 8001374:	40021c00 	.word	0x40021c00
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e0cd      	b.n	8001534 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001398:	2201      	movs	r2, #1
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	f040 80bd 	bne.w	800152e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80013b4:	4a64      	ldr	r2, [pc, #400]	; (8001548 <HAL_GPIO_DeInit+0x1cc>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a5c      	ldr	r2, [pc, #368]	; (800154c <HAL_GPIO_DeInit+0x1d0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02b      	beq.n	8001436 <HAL_GPIO_DeInit+0xba>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a5b      	ldr	r2, [pc, #364]	; (8001550 <HAL_GPIO_DeInit+0x1d4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_DeInit+0xb6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a5a      	ldr	r2, [pc, #360]	; (8001554 <HAL_GPIO_DeInit+0x1d8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_DeInit+0xb2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a59      	ldr	r2, [pc, #356]	; (8001558 <HAL_GPIO_DeInit+0x1dc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_DeInit+0xae>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_GPIO_DeInit+0x1e0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_DeInit+0xaa>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_DeInit+0xa6>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_GPIO_DeInit+0x1e8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_DeInit+0xa2>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_GPIO_DeInit+0x1ec>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001416:	2307      	movs	r3, #7
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800141a:	2308      	movs	r3, #8
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001436:	2300      	movs	r3, #0
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	429a      	cmp	r2, r3
 8001446:	d132      	bne.n	80014ae <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	4946      	ldr	r1, [pc, #280]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001452:	4013      	ands	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43db      	mvns	r3, r3
 800145e:	4943      	ldr	r1, [pc, #268]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001460:	4013      	ands	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001464:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	493f      	ldr	r1, [pc, #252]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 800146e:	4013      	ands	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	493c      	ldr	r1, [pc, #240]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 800147c:	4013      	ands	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001490:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_GPIO_DeInit+0x1cc>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	43da      	mvns	r2, r3
 80014a0:	4829      	ldr	r0, [pc, #164]	; (8001548 <HAL_GPIO_DeInit+0x1cc>)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	400a      	ands	r2, r1
 80014a8:	3302      	adds	r3, #2
 80014aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2103      	movs	r1, #3
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	08d2      	lsrs	r2, r2, #3
 80014e4:	4019      	ands	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2103      	movs	r1, #3
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	2101      	movs	r1, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2103      	movs	r1, #3
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f67f af2e 	bls.w	8001398 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40021400 	.word	0x40021400
 8001564:	40021800 	.word	0x40021800
 8001568:	40021c00 	.word	0x40021c00
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	401a      	ands	r2, r3
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d104      	bne.n	80015f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e11f      	b.n	800185a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f006 fb64 	bl	8007cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800166c:	f000 fd3e 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8001670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a7b      	ldr	r2, [pc, #492]	; (8001864 <HAL_I2C_Init+0x25c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d807      	bhi.n	800168c <HAL_I2C_Init+0x84>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <HAL_I2C_Init+0x260>)
 8001680:	4293      	cmp	r3, r2
 8001682:	bf94      	ite	ls
 8001684:	2301      	movls	r3, #1
 8001686:	2300      	movhi	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e006      	b.n	800169a <HAL_I2C_Init+0x92>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a77      	ldr	r2, [pc, #476]	; (800186c <HAL_I2C_Init+0x264>)
 8001690:	4293      	cmp	r3, r2
 8001692:	bf94      	ite	ls
 8001694:	2301      	movls	r3, #1
 8001696:	2300      	movhi	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0db      	b.n	800185a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a72      	ldr	r2, [pc, #456]	; (8001870 <HAL_I2C_Init+0x268>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a64      	ldr	r2, [pc, #400]	; (8001864 <HAL_I2C_Init+0x25c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d802      	bhi.n	80016dc <HAL_I2C_Init+0xd4>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	e009      	b.n	80016f0 <HAL_I2C_Init+0xe8>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_I2C_Init+0x26c>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	3301      	adds	r3, #1
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4956      	ldr	r1, [pc, #344]	; (8001864 <HAL_I2C_Init+0x25c>)
 800170c:	428b      	cmp	r3, r1
 800170e:	d80d      	bhi.n	800172c <HAL_I2C_Init+0x124>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e59      	subs	r1, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fbb1 f3f3 	udiv	r3, r1, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	bf38      	it	cc
 8001728:	2304      	movcc	r3, #4
 800172a:	e04f      	b.n	80017cc <HAL_I2C_Init+0x1c4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_I2C_Init+0x150>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e012      	b.n	800177e <HAL_I2C_Init+0x176>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x17e>
 8001782:	2301      	movs	r3, #1
 8001784:	e022      	b.n	80017cc <HAL_I2C_Init+0x1c4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_I2C_Init+0x1a4>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e58      	subs	r0, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Init+0x1c4>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6809      	ldr	r1, [r1, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6911      	ldr	r1, [r2, #16]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	003d08ff 	.word	0x003d08ff
 8001870:	431bde83 	.word	0x431bde83
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e25b      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d075      	beq.n	8001982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001896:	4ba3      	ldr	r3, [pc, #652]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d00c      	beq.n	80018bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a2:	4ba0      	ldr	r3, [pc, #640]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d112      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ae:	4b9d      	ldr	r3, [pc, #628]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ba:	d10b      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	4b99      	ldr	r3, [pc, #612]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d05b      	beq.n	8001980 <HAL_RCC_OscConfig+0x108>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d157      	bne.n	8001980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e236      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x74>
 80018de:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a90      	ldr	r2, [pc, #576]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xb0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a8a      	ldr	r2, [pc, #552]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a87      	ldr	r2, [pc, #540]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xb0>
 8001910:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a83      	ldr	r2, [pc, #524]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b81      	ldr	r3, [pc, #516]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a80      	ldr	r2, [pc, #512]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe fe5c 	bl	80005ec <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7fe fe58 	bl	80005ec <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1fb      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xc0>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7fe fe48 	bl	80005ec <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7fe fe44 	bl	80005ec <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1e7      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0xe8>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800198e:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x152>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1bb      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4952      	ldr	r1, [pc, #328]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_RCC_OscConfig+0x2b0>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7fe fdfd 	bl	80005ec <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7fe fdf9 	bl	80005ec <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e19c      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4940      	ldr	r1, [pc, #256]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <HAL_RCC_OscConfig+0x2b0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7fe fddc 	bl	80005ec <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a38:	f7fe fdd8 	bl	80005ec <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e17b      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d030      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x2b4>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7fe fdbc 	bl	80005ec <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7fe fdb8 	bl	80005ec <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e15b      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x200>
 8001a96:	e015      	b.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x2b4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe fda5 	bl	80005ec <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fda1 	bl	80005ec <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e144      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a0 	beq.w	8001c12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afe:	2301      	movs	r3, #1
 8001b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_OscConfig+0x2b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d121      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_RCC_OscConfig+0x2b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_RCC_OscConfig+0x2b8>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1a:	f7fe fd67 	bl	80005ec <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	e011      	b.n	8001b46 <HAL_RCC_OscConfig+0x2ce>
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470000 	.word	0x42470000
 8001b2c:	42470e80 	.word	0x42470e80
 8001b30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b34:	f7fe fd5a 	bl	80005ec <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e0fd      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x4d4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d106      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
 8001b5a:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a7c      	ldr	r2, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	e01c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x32a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x312>
 8001b70:	4b77      	ldr	r3, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a76      	ldr	r2, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a73      	ldr	r2, [pc, #460]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x32a>
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a70      	ldr	r2, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d015      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7fe fd1f 	bl	80005ec <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7fe fd1b 	bl	80005ec <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0bc      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ee      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x33a>
 8001bd4:	e014      	b.n	8001c00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe fd09 	bl	80005ec <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe fd05 	bl	80005ec <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0a6      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d105      	bne.n	8001c12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c06:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8092 	beq.w	8001d40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d05c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d141      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x4dc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe fcd9 	bl	80005ec <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fcd5 	bl	80005ec <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e078      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	061b      	lsls	r3, r3, #24
 8001c80:	4933      	ldr	r1, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fcae 	bl	80005ec <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe fcaa 	bl	80005ec <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e04d      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x41c>
 8001cb2:	e045      	b.n	8001d40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x4dc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe fc97 	bl	80005ec <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7fe fc93 	bl	80005ec <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e036      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x44a>
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e029      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d115      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10d      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d106      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	42470060 	.word	0x42470060

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cc      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d90c      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d044      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e067      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7fe fbd0 	bl	80005ec <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7fe fbcc 	bl	80005ec <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f006 fbee 	bl	80086e0 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	0800a4c0 	.word	0x0800a4c0
 8001f1c:	20000034 	.word	0x20000034
 8001f20:	20000000 	.word	0x20000000

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3a:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d007      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x32>
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d008      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x38>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80b4 	bne.w	80020b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f52:	60bb      	str	r3, [r7, #8]
       break;
 8001f54:	e0b3      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4b5e      	ldr	r3, [pc, #376]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f58:	60bb      	str	r3, [r7, #8]
      break;
 8001f5a:	e0b0      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04a      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	ea03 0501 	and.w	r5, r3, r1
 8001f88:	ea04 0602 	and.w	r6, r4, r2
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4632      	mov	r2, r6
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	1b49      	subs	r1, r1, r5
 8001fa6:	eb62 0206 	sbc.w	r2, r2, r6
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0194      	lsls	r4, r2, #6
 8001fb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb8:	018b      	lsls	r3, r1, #6
 8001fba:	1a5b      	subs	r3, r3, r1
 8001fbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	00e2      	lsls	r2, r4, #3
 8001fca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	195b      	adds	r3, r3, r5
 8001fd6:	eb44 0406 	adc.w	r4, r4, r6
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	0262      	lsls	r2, r4, #9
 8001fe4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fe8:	0259      	lsls	r1, r3, #9
 8001fea:	460b      	mov	r3, r1
 8001fec:	4614      	mov	r4, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f7fe f940 	bl	8000280 <__aeabi_uldivmod>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e049      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	ea03 0501 	and.w	r5, r3, r1
 800201e:	ea04 0602 	and.w	r6, r4, r2
 8002022:	4629      	mov	r1, r5
 8002024:	4632      	mov	r2, r6
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	f04f 0400 	mov.w	r4, #0
 800202e:	0154      	lsls	r4, r2, #5
 8002030:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002034:	014b      	lsls	r3, r1, #5
 8002036:	4619      	mov	r1, r3
 8002038:	4622      	mov	r2, r4
 800203a:	1b49      	subs	r1, r1, r5
 800203c:	eb62 0206 	sbc.w	r2, r2, r6
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	0194      	lsls	r4, r2, #6
 800204a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	1a5b      	subs	r3, r3, r1
 8002052:	eb64 0402 	sbc.w	r4, r4, r2
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	00e2      	lsls	r2, r4, #3
 8002060:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002064:	00d9      	lsls	r1, r3, #3
 8002066:	460b      	mov	r3, r1
 8002068:	4614      	mov	r4, r2
 800206a:	195b      	adds	r3, r3, r5
 800206c:	eb44 0406 	adc.w	r4, r4, r6
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	02a2      	lsls	r2, r4, #10
 800207a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800207e:	0299      	lsls	r1, r3, #10
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	4618      	mov	r0, r3
 8002086:	4621      	mov	r1, r4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	f7fe f8f5 	bl	8000280 <__aeabi_uldivmod>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	60bb      	str	r3, [r7, #8]
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020ba:	60bb      	str	r3, [r7, #8]
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	68bb      	ldr	r3, [r7, #8]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000034 	.word	0x20000034

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4601      	mov	r1, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	0800a4d0 	.word	0x0800a4d0

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002118:	f7ff ffdc 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800211c:	4601      	mov	r1, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0b5b      	lsrs	r3, r3, #13
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4a03      	ldr	r2, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	0800a4d0 	.word	0x0800a4d0

0800213c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	220f      	movs	r2, #15
 800214a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_RCC_GetClockConfig+0x60>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e056      	b.n	8002260 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 f8e9 	bl	80083a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	ea42 0103 	orr.w	r1, r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	f003 0104 	and.w	r1, r3, #4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002276:	2301      	movs	r3, #1
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_SPI_TransmitReceive+0x26>
 800228a:	2302      	movs	r3, #2
 800228c:	e18a      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x33c>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002296:	f7fe f9a9 	bl	80005ec <HAL_GetTick>
 800229a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d00f      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x70>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022be:	d107      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x68>
 80022c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d003      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022d6:	e15b      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x82>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x82>
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022f0:	e14e      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d003      	beq.n	8002306 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2205      	movs	r2, #5
 8002302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	887a      	ldrh	r2, [r7, #2]
 800232e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d007      	beq.n	800235a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002362:	d178      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x10a>
 800236c:	8b7b      	ldrh	r3, [r7, #26]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d166      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002396:	e053      	b.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d11b      	bne.n	80023de <HAL_SPI_TransmitReceive+0x176>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_SPI_TransmitReceive+0x176>
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d113      	bne.n	80023de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	1c9a      	adds	r2, r3, #2
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d119      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x1b8>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d014      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	b292      	uxth	r2, r2
 8002402:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800241c:	2301      	movs	r3, #1
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002420:	f7fe f8e4 	bl	80005ec <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800242c:	429a      	cmp	r2, r3
 800242e:	d807      	bhi.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d003      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800243e:	e0a7      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1a6      	bne.n	8002398 <HAL_SPI_TransmitReceive+0x130>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1a1      	bne.n	8002398 <HAL_SPI_TransmitReceive+0x130>
 8002454:	e07c      	b.n	8002550 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x1fc>
 800245e:	8b7b      	ldrh	r3, [r7, #26]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d16b      	bne.n	800253c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248a:	e057      	b.n	800253c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d11c      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x26c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d017      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x26c>
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d114      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d119      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x2ae>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d014      	beq.n	8002516 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002512:	2301      	movs	r3, #1
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002516:	f7fe f869 	bl	80005ec <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002522:	429a      	cmp	r2, r3
 8002524:	d803      	bhi.n	800252e <HAL_SPI_TransmitReceive+0x2c6>
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d102      	bne.n	8002534 <HAL_SPI_TransmitReceive+0x2cc>
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800253a:	e029      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1a2      	bne.n	800248c <HAL_SPI_TransmitReceive+0x224>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d19d      	bne.n	800248c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fc05 	bl	8002d64 <SPI_EndRxTxTransaction>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800256c:	e010      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	e000      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800258e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3730      	adds	r7, #48	; 0x30
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_SPI_TransmitReceive_DMA+0x20>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0e3      	b.n	8002794 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80025e2:	7dbb      	ldrb	r3, [r7, #22]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d00d      	beq.n	8002604 <HAL_SPI_TransmitReceive_DMA+0x58>
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ee:	d106      	bne.n	80025fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_SPI_TransmitReceive_DMA+0x52>
 80025f8:	7dbb      	ldrb	r3, [r7, #22]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d002      	beq.n	8002604 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
 8002600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002602:	e0c2      	b.n	800278a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    goto error;
 800261a:	e0b6      	b.n	800278a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b04      	cmp	r3, #4
 8002626:	d003      	beq.n	8002630 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2205      	movs	r2, #5
 800262c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	887a      	ldrh	r2, [r7, #2]
 8002652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b04      	cmp	r3, #4
 8002670:	d108      	bne.n	8002684 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	4a49      	ldr	r2, [pc, #292]	; (800279c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c
 8002682:	e007      	b.n	8002694 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	4a45      	ldr	r2, [pc, #276]	; (80027a8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	4a44      	ldr	r2, [pc, #272]	; (80027ac <HAL_SPI_TransmitReceive_DMA+0x200>)
 800269a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	2200      	movs	r2, #0
 80026a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	4619      	mov	r1, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80026bc:	f7fe f9e2 	bl	8000a84 <HAL_DMA_Start_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0210 	orr.w	r2, r3, #16
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80026de:	e054      	b.n	800278a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	2200      	movs	r2, #0
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	2200      	movs	r2, #0
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002704:	2200      	movs	r2, #0
 8002706:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	2200      	movs	r2, #0
 800270e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4619      	mov	r1, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	330c      	adds	r3, #12
 8002720:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002726:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002728:	f7fe f9ac 	bl	8000a84 <HAL_DMA_Start_IT>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00c      	beq.n	800274c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800274a:	e01e      	b.n	800278a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d007      	beq.n	800276a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002768:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0220 	orr.w	r2, r2, #32
 8002778:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0202 	orr.w	r2, r2, #2
 8002788:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08002b25 	.word	0x08002b25
 80027a0:	080029ed 	.word	0x080029ed
 80027a4:	08002b41 	.word	0x08002b41
 80027a8:	08002a95 	.word	0x08002a95
 80027ac:	08002b5d 	.word	0x08002b5d

080027b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
    return;
 80027f2:	e0d8      	b.n	80029a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_SPI_IRQHandler+0x66>
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	09db      	lsrs	r3, r3, #7
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
    return;
 8002814:	e0c7      	b.n	80029a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_SPI_IRQHandler+0x8c>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80b5 	beq.w	80029a6 <HAL_SPI_IRQHandler+0x1f6>
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80ae 	beq.w	80029a6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d023      	beq.n	800289e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b03      	cmp	r3, #3
 8002860:	d011      	beq.n	8002886 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	e00b      	b.n	800289e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
        return;
 800289c:	e083      	b.n	80029a6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d014      	beq.n	80028d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f043 0208 	orr.w	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d050      	beq.n	80029a4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002910:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d104      	bne.n	800292e <HAL_SPI_IRQHandler+0x17e>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d034      	beq.n	8002998 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0203 	bic.w	r2, r2, #3
 800293c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d011      	beq.n	800296a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_SPI_IRQHandler+0x1fc>)
 800294c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f8ee 	bl	8000b34 <HAL_DMA_Abort_IT>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_SPI_IRQHandler+0x1fc>)
 8002978:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe f8d8 	bl	8000b34 <HAL_DMA_Abort_IT>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002996:	e003      	b.n	80029a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f81d 	bl	80029d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800299e:	e000      	b.n	80029a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80029a0:	bf00      	nop
    return;
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
  }
}
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	08002b9d 	.word	0x08002b9d

080029b0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029fa:	f7fd fdf7 	bl	80005ec <HAL_GetTick>
 80029fe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d03b      	beq.n	8002a88 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0220 	bic.w	r2, r2, #32
 8002a1e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <SPI_DMAReceiveCplt+0x58>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a30:	d108      	bne.n	8002a44 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0203 	bic.w	r2, r2, #3
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	e007      	b.n	8002a54 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	2164      	movs	r1, #100	; 0x64
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f91d 	bl	8002c98 <SPI_EndRxTransaction>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f7ff ffa9 	bl	80029d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002a86:	e002      	b.n	8002a8e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f005 fdeb 	bl	8008664 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa2:	f7fd fda3 	bl	80005ec <HAL_GetTick>
 8002aa6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab6:	d02f      	beq.n	8002b18 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0220 	bic.w	r2, r2, #32
 8002ac6:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	2164      	movs	r1, #100	; 0x64
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f949 	bl	8002d64 <SPI_EndRxTxTransaction>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0203 	bic.w	r2, r2, #3
 8002af2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff ff61 	bl	80029d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002b16:	e002      	b.n	8002b1e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f005 fd8d 	bl	8008638 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff ff3c 	bl	80029b0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7ff ff38 	bl	80029c4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0203 	bic.w	r2, r2, #3
 8002b78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ff22 	bl	80029d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7ff ff0e 	bl	80029d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd4:	e04c      	b.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d048      	beq.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002bde:	f7fd fd05 	bl	80005ec <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d902      	bls.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d13d      	bne.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0c:	d111      	bne.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c16:	d004      	beq.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c20:	d107      	bne.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d10f      	bne.n	8002c5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e00f      	b.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d1a3      	bne.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cac:	d111      	bne.n	8002cd2 <SPI_EndRxTransaction+0x3a>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb6:	d004      	beq.n	8002cc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d107      	bne.n	8002cd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cda:	d12a      	bne.n	8002d32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce4:	d012      	beq.n	8002d0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff ff67 	bl	8002bc4 <SPI_WaitFlagStateUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02d      	beq.n	8002d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e026      	b.n	8002d5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	2101      	movs	r1, #1
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff ff54 	bl	8002bc4 <SPI_WaitFlagStateUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e013      	b.n	8002d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff ff41 	bl	8002bc4 <SPI_WaitFlagStateUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e000      	b.n	8002d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <SPI_EndRxTxTransaction+0x7c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <SPI_EndRxTxTransaction+0x80>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0d5b      	lsrs	r3, r3, #21
 8002d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8e:	d112      	bne.n	8002db6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ff12 	bl	8002bc4 <SPI_WaitFlagStateUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d0f2      	beq.n	8002db6 <SPI_EndRxTxTransaction+0x52>
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dd2:	bf00      	nop
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000034 	.word	0x20000034
 8002de4:	165e9f81 	.word	0x165e9f81

08002de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e01d      	b.n	8002e36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f005 fdf8 	bl	8008a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f000 f95e 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d007      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d122      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f06f 0202 	mvn.w	r2, #2
 8002eb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f8ee 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002ece:	e005      	b.n	8002edc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8e0 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8f1 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d122      	bne.n	8002f36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d11b      	bne.n	8002f36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0204 	mvn.w	r2, #4
 8002f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8c4 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002f22:	e005      	b.n	8002f30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f8b6 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8c7 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d122      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11b      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f06f 0208 	mvn.w	r2, #8
 8002f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f89a 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002f76:	e005      	b.n	8002f84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f88c 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f89d 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d122      	bne.n	8002fde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d11b      	bne.n	8002fde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0210 	mvn.w	r2, #16
 8002fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f870 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002fca:	e005      	b.n	8002fd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f862 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f873 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d10e      	bne.n	800300a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0201 	mvn.w	r2, #1
 8003002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 f977 	bl	80082f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b80      	cmp	r3, #128	; 0x80
 8003016:	d10e      	bne.n	8003036 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d107      	bne.n	8003036 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800302e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f903 	bl	800323c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d10e      	bne.n	8003062 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d107      	bne.n	8003062 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800305a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f838 	bl	80030d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d10e      	bne.n	800308e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b20      	cmp	r3, #32
 800307c:	d107      	bne.n	800308e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0220 	mvn.w	r2, #32
 8003086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8cd 	bl	8003228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a40      	ldr	r2, [pc, #256]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d00f      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3d      	ldr	r2, [pc, #244]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3a      	ldr	r2, [pc, #232]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d108      	bne.n	800313a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <TIM_Base_SetConfig+0x114>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d02b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d027      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d023      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d017      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <TIM_Base_SetConfig+0x128>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a27      	ldr	r2, [pc, #156]	; (8003214 <TIM_Base_SetConfig+0x12c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00f      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <TIM_Base_SetConfig+0x130>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a25      	ldr	r2, [pc, #148]	; (800321c <TIM_Base_SetConfig+0x134>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a24      	ldr	r2, [pc, #144]	; (8003220 <TIM_Base_SetConfig+0x138>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a23      	ldr	r2, [pc, #140]	; (8003224 <TIM_Base_SetConfig+0x13c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <TIM_Base_SetConfig+0x124>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800
 800321c:	40001800 	.word	0x40001800
 8003220:	40001c00 	.word	0x40001c00
 8003224:	40002000 	.word	0x40002000

08003228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e03f      	b.n	80032e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f005 fc34 	bl	8008ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	; 0x24
 8003280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fc4d 	bl	8003b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b088      	sub	sp, #32
 80032ee:	af02      	add	r7, sp, #8
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b20      	cmp	r3, #32
 8003308:	f040 8083 	bne.w	8003412 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Transmit+0x2e>
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e07b      	b.n	8003414 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_UART_Transmit+0x40>
 8003326:	2302      	movs	r3, #2
 8003328:	e074      	b.n	8003414 <HAL_UART_Transmit+0x12a>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2221      	movs	r2, #33	; 0x21
 800333c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003340:	f7fd f954 	bl	80005ec <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800335a:	e042      	b.n	80033e2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003372:	d122      	bne.n	80033ba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa57 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e042      	b.n	8003414 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3302      	adds	r3, #2
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	e017      	b.n	80033e2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	e013      	b.n	80033e2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2180      	movs	r1, #128	; 0x80
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa34 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e01f      	b.n	8003414 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	60ba      	str	r2, [r7, #8]
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1b7      	bne.n	800335c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2140      	movs	r1, #64	; 0x40
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa1b 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e006      	b.n	8003414 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003412:	2302      	movs	r3, #2
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	d153      	bne.n	80034de <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_Transmit_DMA+0x26>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e04c      	b.n	80034e0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UART_Transmit_DMA+0x38>
 8003450:	2302      	movs	r3, #2
 8003452:	e045      	b.n	80034e0 <HAL_UART_Transmit_DMA+0xc4>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2221      	movs	r2, #33	; 0x21
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_UART_Transmit_DMA+0xcc>)
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_UART_Transmit_DMA+0xd0>)
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_UART_Transmit_DMA+0xd4>)
 8003492:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	2200      	movs	r2, #0
 800349a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800349c:	f107 0308 	add.w	r3, r7, #8
 80034a0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	461a      	mov	r2, r3
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	f7fd fae6 	bl	8000a84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034d8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	08003731 	.word	0x08003731
 80034ec:	08003783 	.word	0x08003783
 80034f0:	0800379f 	.word	0x0800379f

080034f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10d      	bne.n	8003546 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_UART_IRQHandler+0x52>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fa77 	bl	8003a32 <UART_Receive_IT>
      return;
 8003544:	e0d1      	b.n	80036ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80b0 	beq.w	80036ae <HAL_UART_IRQHandler+0x1ba>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_UART_IRQHandler+0x70>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80a5 	beq.w	80036ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_UART_IRQHandler+0x90>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_UART_IRQHandler+0xb0>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	f043 0202 	orr.w	r2, r3, #2
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_UART_IRQHandler+0xd0>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00f      	beq.n	80035ee <HAL_UART_IRQHandler+0xfa>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_UART_IRQHandler+0xee>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	f043 0208 	orr.w	r2, r3, #8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d078      	beq.n	80036e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <HAL_UART_IRQHandler+0x11c>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa11 	bl	8003a32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_UART_IRQHandler+0x144>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d031      	beq.n	800369c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f95a 	bl	80038f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d123      	bne.n	8003694 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <HAL_UART_IRQHandler+0x1fc>)
 800366a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003670:	4618      	mov	r0, r3
 8003672:	f7fd fa5f 	bl	8000b34 <HAL_DMA_Abort_IT>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d016      	beq.n	80036aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003686:	4610      	mov	r0, r2
 8003688:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368a:	e00e      	b.n	80036aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f845 	bl	800371c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003692:	e00a      	b.n	80036aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f841 	bl	800371c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369a:	e006      	b.n	80036aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f83d 	bl	800371c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80036a8:	e01e      	b.n	80036e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036aa:	bf00      	nop
    return;
 80036ac:	e01c      	b.n	80036e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_UART_IRQHandler+0x1d6>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f947 	bl	8003956 <UART_Transmit_IT>
    return;
 80036c8:	e00f      	b.n	80036ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_UART_IRQHandler+0x1f6>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f98f 	bl	8003a02 <UART_EndTransmit_IT>
    return;
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80036e8:	bf00      	nop
  }
}
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	0800392f 	.word	0x0800392f

080036f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d113      	bne.n	8003774 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003770:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003772:	e002      	b.n	800377a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f005 fa3d 	bl	8008bf4 <HAL_UART_TxCpltCallback>
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ffaf 	bl	80036f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b21      	cmp	r3, #33	; 0x21
 80037d0:	d108      	bne.n	80037e4 <UART_DMAError+0x46>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f000 f871 	bl	80038c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b22      	cmp	r3, #34	; 0x22
 8003804:	d108      	bne.n	8003818 <UART_DMAError+0x7a>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003812:	68b8      	ldr	r0, [r7, #8]
 8003814:	f000 f86d 	bl	80038f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	f043 0210 	orr.w	r2, r3, #16
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f7ff ff79 	bl	800371c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003842:	e02c      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d028      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <UART_WaitOnFlagUntilTimeout+0x30>
 8003852:	f7fc fecb 	bl	80005ec <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	429a      	cmp	r2, r3
 8003860:	d21d      	bcs.n	800389e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003870:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00f      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d0c3      	beq.n	8003844 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80038dc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003908:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff fee7 	bl	800371c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b21      	cmp	r3, #33	; 0x21
 8003968:	d144      	bne.n	80039f4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003972:	d11a      	bne.n	80039aa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003988:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	621a      	str	r2, [r3, #32]
 800399c:	e00e      	b.n	80039bc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	621a      	str	r2, [r3, #32]
 80039a8:	e008      	b.n	80039bc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6211      	str	r1, [r2, #32]
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4619      	mov	r1, r3
 80039ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e000      	b.n	80039f6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f005 f8e6 	bl	8008bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b22      	cmp	r3, #34	; 0x22
 8003a44:	d171      	bne.n	8003b2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d123      	bne.n	8003a98 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
 8003a7a:	e029      	b.n	8003ad0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
 8003a96:	e01b      	b.n	8003ad0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6858      	ldr	r0, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	1c59      	adds	r1, r3, #1
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6291      	str	r1, [r2, #40]	; 0x28
 8003ab0:	b2c2      	uxtb	r2, r0
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	e00c      	b.n	8003ad0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	1c58      	adds	r0, r3, #1
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6288      	str	r0, [r1, #40]	; 0x28
 8003ac8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4619      	mov	r1, r3
 8003ade:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d120      	bne.n	8003b26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0220 	bic.w	r2, r2, #32
 8003af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fdf3 	bl	8003708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e002      	b.n	8003b2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b76:	f023 030c 	bic.w	r3, r3, #12
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba2:	f040 818b 	bne.w	8003ebc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4ac1      	ldr	r2, [pc, #772]	; (8003eb0 <UART_SetConfig+0x37c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d005      	beq.n	8003bbc <UART_SetConfig+0x88>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4abf      	ldr	r2, [pc, #764]	; (8003eb4 <UART_SetConfig+0x380>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f040 80bd 	bne.w	8003d36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bbc:	f7fe faaa 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003bc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	461d      	mov	r5, r3
 8003bc6:	f04f 0600 	mov.w	r6, #0
 8003bca:	46a8      	mov	r8, r5
 8003bcc:	46b1      	mov	r9, r6
 8003bce:	eb18 0308 	adds.w	r3, r8, r8
 8003bd2:	eb49 0409 	adc.w	r4, r9, r9
 8003bd6:	4698      	mov	r8, r3
 8003bd8:	46a1      	mov	r9, r4
 8003bda:	eb18 0805 	adds.w	r8, r8, r5
 8003bde:	eb49 0906 	adc.w	r9, r9, r6
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bf6:	4688      	mov	r8, r1
 8003bf8:	4691      	mov	r9, r2
 8003bfa:	eb18 0005 	adds.w	r0, r8, r5
 8003bfe:	eb49 0106 	adc.w	r1, r9, r6
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	461d      	mov	r5, r3
 8003c08:	f04f 0600 	mov.w	r6, #0
 8003c0c:	196b      	adds	r3, r5, r5
 8003c0e:	eb46 0406 	adc.w	r4, r6, r6
 8003c12:	461a      	mov	r2, r3
 8003c14:	4623      	mov	r3, r4
 8003c16:	f7fc fb33 	bl	8000280 <__aeabi_uldivmod>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4ba5      	ldr	r3, [pc, #660]	; (8003eb8 <UART_SetConfig+0x384>)
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	461d      	mov	r5, r3
 8003c30:	f04f 0600 	mov.w	r6, #0
 8003c34:	46a9      	mov	r9, r5
 8003c36:	46b2      	mov	sl, r6
 8003c38:	eb19 0309 	adds.w	r3, r9, r9
 8003c3c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c40:	4699      	mov	r9, r3
 8003c42:	46a2      	mov	sl, r4
 8003c44:	eb19 0905 	adds.w	r9, r9, r5
 8003c48:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c60:	4689      	mov	r9, r1
 8003c62:	4692      	mov	sl, r2
 8003c64:	eb19 0005 	adds.w	r0, r9, r5
 8003c68:	eb4a 0106 	adc.w	r1, sl, r6
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	461d      	mov	r5, r3
 8003c72:	f04f 0600 	mov.w	r6, #0
 8003c76:	196b      	adds	r3, r5, r5
 8003c78:	eb46 0406 	adc.w	r4, r6, r6
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	f7fc fafe 	bl	8000280 <__aeabi_uldivmod>
 8003c84:	4603      	mov	r3, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <UART_SetConfig+0x384>)
 8003c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	2164      	movs	r1, #100	; 0x64
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	4a86      	ldr	r2, [pc, #536]	; (8003eb8 <UART_SetConfig+0x384>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cac:	4498      	add	r8, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	461d      	mov	r5, r3
 8003cb2:	f04f 0600 	mov.w	r6, #0
 8003cb6:	46a9      	mov	r9, r5
 8003cb8:	46b2      	mov	sl, r6
 8003cba:	eb19 0309 	adds.w	r3, r9, r9
 8003cbe:	eb4a 040a 	adc.w	r4, sl, sl
 8003cc2:	4699      	mov	r9, r3
 8003cc4:	46a2      	mov	sl, r4
 8003cc6:	eb19 0905 	adds.w	r9, r9, r5
 8003cca:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ce2:	4689      	mov	r9, r1
 8003ce4:	4692      	mov	sl, r2
 8003ce6:	eb19 0005 	adds.w	r0, r9, r5
 8003cea:	eb4a 0106 	adc.w	r1, sl, r6
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	f04f 0600 	mov.w	r6, #0
 8003cf8:	196b      	adds	r3, r5, r5
 8003cfa:	eb46 0406 	adc.w	r4, r6, r6
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4623      	mov	r3, r4
 8003d02:	f7fc fabd 	bl	8000280 <__aeabi_uldivmod>
 8003d06:	4603      	mov	r3, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <UART_SetConfig+0x384>)
 8003d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2164      	movs	r1, #100	; 0x64
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	3332      	adds	r3, #50	; 0x32
 8003d20:	4a65      	ldr	r2, [pc, #404]	; (8003eb8 <UART_SetConfig+0x384>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f003 0207 	and.w	r2, r3, #7
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4442      	add	r2, r8
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	e26f      	b.n	8004216 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d36:	f7fe f9d9 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8003d3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	461d      	mov	r5, r3
 8003d40:	f04f 0600 	mov.w	r6, #0
 8003d44:	46a8      	mov	r8, r5
 8003d46:	46b1      	mov	r9, r6
 8003d48:	eb18 0308 	adds.w	r3, r8, r8
 8003d4c:	eb49 0409 	adc.w	r4, r9, r9
 8003d50:	4698      	mov	r8, r3
 8003d52:	46a1      	mov	r9, r4
 8003d54:	eb18 0805 	adds.w	r8, r8, r5
 8003d58:	eb49 0906 	adc.w	r9, r9, r6
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d70:	4688      	mov	r8, r1
 8003d72:	4691      	mov	r9, r2
 8003d74:	eb18 0005 	adds.w	r0, r8, r5
 8003d78:	eb49 0106 	adc.w	r1, r9, r6
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	461d      	mov	r5, r3
 8003d82:	f04f 0600 	mov.w	r6, #0
 8003d86:	196b      	adds	r3, r5, r5
 8003d88:	eb46 0406 	adc.w	r4, r6, r6
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	f7fc fa76 	bl	8000280 <__aeabi_uldivmod>
 8003d94:	4603      	mov	r3, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <UART_SetConfig+0x384>)
 8003d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	461d      	mov	r5, r3
 8003daa:	f04f 0600 	mov.w	r6, #0
 8003dae:	46a9      	mov	r9, r5
 8003db0:	46b2      	mov	sl, r6
 8003db2:	eb19 0309 	adds.w	r3, r9, r9
 8003db6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dba:	4699      	mov	r9, r3
 8003dbc:	46a2      	mov	sl, r4
 8003dbe:	eb19 0905 	adds.w	r9, r9, r5
 8003dc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dc6:	f04f 0100 	mov.w	r1, #0
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dda:	4689      	mov	r9, r1
 8003ddc:	4692      	mov	sl, r2
 8003dde:	eb19 0005 	adds.w	r0, r9, r5
 8003de2:	eb4a 0106 	adc.w	r1, sl, r6
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	461d      	mov	r5, r3
 8003dec:	f04f 0600 	mov.w	r6, #0
 8003df0:	196b      	adds	r3, r5, r5
 8003df2:	eb46 0406 	adc.w	r4, r6, r6
 8003df6:	461a      	mov	r2, r3
 8003df8:	4623      	mov	r3, r4
 8003dfa:	f7fc fa41 	bl	8000280 <__aeabi_uldivmod>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <UART_SetConfig+0x384>)
 8003e06:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2164      	movs	r1, #100	; 0x64
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	3332      	adds	r3, #50	; 0x32
 8003e18:	4a27      	ldr	r2, [pc, #156]	; (8003eb8 <UART_SetConfig+0x384>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e26:	4498      	add	r8, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	461d      	mov	r5, r3
 8003e2c:	f04f 0600 	mov.w	r6, #0
 8003e30:	46a9      	mov	r9, r5
 8003e32:	46b2      	mov	sl, r6
 8003e34:	eb19 0309 	adds.w	r3, r9, r9
 8003e38:	eb4a 040a 	adc.w	r4, sl, sl
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	46a2      	mov	sl, r4
 8003e40:	eb19 0905 	adds.w	r9, r9, r5
 8003e44:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e5c:	4689      	mov	r9, r1
 8003e5e:	4692      	mov	sl, r2
 8003e60:	eb19 0005 	adds.w	r0, r9, r5
 8003e64:	eb4a 0106 	adc.w	r1, sl, r6
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	f04f 0600 	mov.w	r6, #0
 8003e72:	196b      	adds	r3, r5, r5
 8003e74:	eb46 0406 	adc.w	r4, r6, r6
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	f7fc fa00 	bl	8000280 <__aeabi_uldivmod>
 8003e80:	4603      	mov	r3, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <UART_SetConfig+0x384>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	2164      	movs	r1, #100	; 0x64
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3332      	adds	r3, #50	; 0x32
 8003e9a:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <UART_SetConfig+0x384>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	f003 0207 	and.w	r2, r3, #7
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4442      	add	r2, r8
 8003eac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003eae:	e1b2      	b.n	8004216 <UART_SetConfig+0x6e2>
 8003eb0:	40011000 	.word	0x40011000
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4ad7      	ldr	r2, [pc, #860]	; (8004220 <UART_SetConfig+0x6ec>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d005      	beq.n	8003ed2 <UART_SetConfig+0x39e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4ad6      	ldr	r2, [pc, #856]	; (8004224 <UART_SetConfig+0x6f0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	f040 80d1 	bne.w	8004074 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ed2:	f7fe f91f 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003ed6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	469a      	mov	sl, r3
 8003edc:	f04f 0b00 	mov.w	fp, #0
 8003ee0:	46d0      	mov	r8, sl
 8003ee2:	46d9      	mov	r9, fp
 8003ee4:	eb18 0308 	adds.w	r3, r8, r8
 8003ee8:	eb49 0409 	adc.w	r4, r9, r9
 8003eec:	4698      	mov	r8, r3
 8003eee:	46a1      	mov	r9, r4
 8003ef0:	eb18 080a 	adds.w	r8, r8, sl
 8003ef4:	eb49 090b 	adc.w	r9, r9, fp
 8003ef8:	f04f 0100 	mov.w	r1, #0
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f0c:	4688      	mov	r8, r1
 8003f0e:	4691      	mov	r9, r2
 8003f10:	eb1a 0508 	adds.w	r5, sl, r8
 8003f14:	eb4b 0609 	adc.w	r6, fp, r9
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	f04f 0400 	mov.w	r4, #0
 8003f2a:	0094      	lsls	r4, r2, #2
 8003f2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f30:	008b      	lsls	r3, r1, #2
 8003f32:	461a      	mov	r2, r3
 8003f34:	4623      	mov	r3, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	4631      	mov	r1, r6
 8003f3a:	f7fc f9a1 	bl	8000280 <__aeabi_uldivmod>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	461a      	mov	r2, r3
 8003f44:	4bb8      	ldr	r3, [pc, #736]	; (8004228 <UART_SetConfig+0x6f4>)
 8003f46:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	469b      	mov	fp, r3
 8003f54:	f04f 0c00 	mov.w	ip, #0
 8003f58:	46d9      	mov	r9, fp
 8003f5a:	46e2      	mov	sl, ip
 8003f5c:	eb19 0309 	adds.w	r3, r9, r9
 8003f60:	eb4a 040a 	adc.w	r4, sl, sl
 8003f64:	4699      	mov	r9, r3
 8003f66:	46a2      	mov	sl, r4
 8003f68:	eb19 090b 	adds.w	r9, r9, fp
 8003f6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f84:	4689      	mov	r9, r1
 8003f86:	4692      	mov	sl, r2
 8003f88:	eb1b 0509 	adds.w	r5, fp, r9
 8003f8c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4619      	mov	r1, r3
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	f04f 0400 	mov.w	r4, #0
 8003fa2:	0094      	lsls	r4, r2, #2
 8003fa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fa8:	008b      	lsls	r3, r1, #2
 8003faa:	461a      	mov	r2, r3
 8003fac:	4623      	mov	r3, r4
 8003fae:	4628      	mov	r0, r5
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	f7fc f965 	bl	8000280 <__aeabi_uldivmod>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	460c      	mov	r4, r1
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b9a      	ldr	r3, [pc, #616]	; (8004228 <UART_SetConfig+0x6f4>)
 8003fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2164      	movs	r1, #100	; 0x64
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	3332      	adds	r3, #50	; 0x32
 8003fd0:	4a95      	ldr	r2, [pc, #596]	; (8004228 <UART_SetConfig+0x6f4>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fdc:	4498      	add	r8, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	469b      	mov	fp, r3
 8003fe2:	f04f 0c00 	mov.w	ip, #0
 8003fe6:	46d9      	mov	r9, fp
 8003fe8:	46e2      	mov	sl, ip
 8003fea:	eb19 0309 	adds.w	r3, r9, r9
 8003fee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ff2:	4699      	mov	r9, r3
 8003ff4:	46a2      	mov	sl, r4
 8003ff6:	eb19 090b 	adds.w	r9, r9, fp
 8003ffa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800400e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004012:	4689      	mov	r9, r1
 8004014:	4692      	mov	sl, r2
 8004016:	eb1b 0509 	adds.w	r5, fp, r9
 800401a:	eb4c 060a 	adc.w	r6, ip, sl
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4619      	mov	r1, r3
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	f04f 0400 	mov.w	r4, #0
 8004030:	0094      	lsls	r4, r2, #2
 8004032:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004036:	008b      	lsls	r3, r1, #2
 8004038:	461a      	mov	r2, r3
 800403a:	4623      	mov	r3, r4
 800403c:	4628      	mov	r0, r5
 800403e:	4631      	mov	r1, r6
 8004040:	f7fc f91e 	bl	8000280 <__aeabi_uldivmod>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	461a      	mov	r2, r3
 800404a:	4b77      	ldr	r3, [pc, #476]	; (8004228 <UART_SetConfig+0x6f4>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	; 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	3332      	adds	r3, #50	; 0x32
 800405e:	4a72      	ldr	r2, [pc, #456]	; (8004228 <UART_SetConfig+0x6f4>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4442      	add	r2, r8
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	e0d0      	b.n	8004216 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe f83a 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8004078:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	469a      	mov	sl, r3
 800407e:	f04f 0b00 	mov.w	fp, #0
 8004082:	46d0      	mov	r8, sl
 8004084:	46d9      	mov	r9, fp
 8004086:	eb18 0308 	adds.w	r3, r8, r8
 800408a:	eb49 0409 	adc.w	r4, r9, r9
 800408e:	4698      	mov	r8, r3
 8004090:	46a1      	mov	r9, r4
 8004092:	eb18 080a 	adds.w	r8, r8, sl
 8004096:	eb49 090b 	adc.w	r9, r9, fp
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ae:	4688      	mov	r8, r1
 80040b0:	4691      	mov	r9, r2
 80040b2:	eb1a 0508 	adds.w	r5, sl, r8
 80040b6:	eb4b 0609 	adc.w	r6, fp, r9
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4619      	mov	r1, r3
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	f04f 0400 	mov.w	r4, #0
 80040cc:	0094      	lsls	r4, r2, #2
 80040ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040d2:	008b      	lsls	r3, r1, #2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4623      	mov	r3, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	4631      	mov	r1, r6
 80040dc:	f7fc f8d0 	bl	8000280 <__aeabi_uldivmod>
 80040e0:	4603      	mov	r3, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	461a      	mov	r2, r3
 80040e6:	4b50      	ldr	r3, [pc, #320]	; (8004228 <UART_SetConfig+0x6f4>)
 80040e8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	469b      	mov	fp, r3
 80040f6:	f04f 0c00 	mov.w	ip, #0
 80040fa:	46d9      	mov	r9, fp
 80040fc:	46e2      	mov	sl, ip
 80040fe:	eb19 0309 	adds.w	r3, r9, r9
 8004102:	eb4a 040a 	adc.w	r4, sl, sl
 8004106:	4699      	mov	r9, r3
 8004108:	46a2      	mov	sl, r4
 800410a:	eb19 090b 	adds.w	r9, r9, fp
 800410e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004112:	f04f 0100 	mov.w	r1, #0
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004122:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004126:	4689      	mov	r9, r1
 8004128:	4692      	mov	sl, r2
 800412a:	eb1b 0509 	adds.w	r5, fp, r9
 800412e:	eb4c 060a 	adc.w	r6, ip, sl
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4619      	mov	r1, r3
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	f04f 0400 	mov.w	r4, #0
 8004144:	0094      	lsls	r4, r2, #2
 8004146:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800414a:	008b      	lsls	r3, r1, #2
 800414c:	461a      	mov	r2, r3
 800414e:	4623      	mov	r3, r4
 8004150:	4628      	mov	r0, r5
 8004152:	4631      	mov	r1, r6
 8004154:	f7fc f894 	bl	8000280 <__aeabi_uldivmod>
 8004158:	4603      	mov	r3, r0
 800415a:	460c      	mov	r4, r1
 800415c:	461a      	mov	r2, r3
 800415e:	4b32      	ldr	r3, [pc, #200]	; (8004228 <UART_SetConfig+0x6f4>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	; 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <UART_SetConfig+0x6f4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417e:	4498      	add	r8, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	469b      	mov	fp, r3
 8004184:	f04f 0c00 	mov.w	ip, #0
 8004188:	46d9      	mov	r9, fp
 800418a:	46e2      	mov	sl, ip
 800418c:	eb19 0309 	adds.w	r3, r9, r9
 8004190:	eb4a 040a 	adc.w	r4, sl, sl
 8004194:	4699      	mov	r9, r3
 8004196:	46a2      	mov	sl, r4
 8004198:	eb19 090b 	adds.w	r9, r9, fp
 800419c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041b4:	4689      	mov	r9, r1
 80041b6:	4692      	mov	sl, r2
 80041b8:	eb1b 0509 	adds.w	r5, fp, r9
 80041bc:	eb4c 060a 	adc.w	r6, ip, sl
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f04f 0400 	mov.w	r4, #0
 80041d2:	0094      	lsls	r4, r2, #2
 80041d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041d8:	008b      	lsls	r3, r1, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	4623      	mov	r3, r4
 80041de:	4628      	mov	r0, r5
 80041e0:	4631      	mov	r1, r6
 80041e2:	f7fc f84d 	bl	8000280 <__aeabi_uldivmod>
 80041e6:	4603      	mov	r3, r0
 80041e8:	460c      	mov	r4, r1
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <UART_SetConfig+0x6f4>)
 80041ee:	fba3 1302 	umull	r1, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2164      	movs	r1, #100	; 0x64
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	3332      	adds	r3, #50	; 0x32
 8004200:	4a09      	ldr	r2, [pc, #36]	; (8004228 <UART_SetConfig+0x6f4>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4442      	add	r2, r8
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	e7ff      	b.n	8004216 <UART_SetConfig+0x6e2>
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	40011000 	.word	0x40011000
 8004224:	40011400 	.word	0x40011400
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004242:	f3ef 8305 	mrs	r3, IPSR
 8004246:	60bb      	str	r3, [r7, #8]
  return(result);
 8004248:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424e:	f3ef 8310 	mrs	r3, PRIMASK
 8004252:	607b      	str	r3, [r7, #4]
  return(result);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800425a:	f3ef 8311 	mrs	r3, BASEPRI
 800425e:	603b      	str	r3, [r7, #0]
  return(result);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <osKernelInitialize+0x3a>
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <osKernelInitialize+0x64>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d103      	bne.n	8004276 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800426e:	f06f 0305 	mvn.w	r3, #5
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e00c      	b.n	8004290 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <osKernelInitialize+0x64>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <osKernelInitialize+0x64>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e002      	b.n	8004290 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800428a:	f04f 33ff 	mov.w	r3, #4294967295
 800428e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	200000bc 	.word	0x200000bc

080042a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042aa:	f3ef 8305 	mrs	r3, IPSR
 80042ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80042b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ba:	607b      	str	r3, [r7, #4]
  return(result);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042c2:	f3ef 8311 	mrs	r3, BASEPRI
 80042c6:	603b      	str	r3, [r7, #0]
  return(result);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <osKernelStart+0x3a>
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <osKernelStart+0x68>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d103      	bne.n	80042de <osKernelStart+0x3a>
    stat = osErrorISR;
 80042d6:	f06f 0305 	mvn.w	r3, #5
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e010      	b.n	8004300 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <osKernelStart+0x68>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d109      	bne.n	80042fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042e6:	f7ff ffa1 	bl	800422c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <osKernelStart+0x68>)
 80042ec:	2202      	movs	r2, #2
 80042ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042f0:	f001 f870 	bl	80053d4 <vTaskStartScheduler>
      stat = osOK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e002      	b.n	8004300 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004300:	68fb      	ldr	r3, [r7, #12]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200000bc 	.word	0x200000bc

08004310 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af04      	add	r7, sp, #16
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004320:	f3ef 8305 	mrs	r3, IPSR
 8004324:	61fb      	str	r3, [r7, #28]
  return(result);
 8004326:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004328:	2b00      	cmp	r3, #0
 800432a:	f040 808f 	bne.w	800444c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	61bb      	str	r3, [r7, #24]
  return(result);
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800433a:	f3ef 8311 	mrs	r3, BASEPRI
 800433e:	617b      	str	r3, [r7, #20]
  return(result);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <osThreadNew+0x3e>
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <osThreadNew+0x148>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d07e      	beq.n	800444c <osThreadNew+0x13c>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d07b      	beq.n	800444c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004358:	2318      	movs	r3, #24
 800435a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d045      	beq.n	80043f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <osThreadNew+0x6a>
        name = attr->name;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <osThreadNew+0x90>
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	2b38      	cmp	r3, #56	; 0x38
 8004392:	d805      	bhi.n	80043a0 <osThreadNew+0x90>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <osThreadNew+0x94>
        return (NULL);
 80043a0:	2300      	movs	r3, #0
 80043a2:	e054      	b.n	800444e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00e      	beq.n	80043da <osThreadNew+0xca>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b5b      	cmp	r3, #91	; 0x5b
 80043c2:	d90a      	bls.n	80043da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <osThreadNew+0xca>
        mem = 1;
 80043d4:	2301      	movs	r3, #1
 80043d6:	623b      	str	r3, [r7, #32]
 80043d8:	e010      	b.n	80043fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10c      	bne.n	80043fc <osThreadNew+0xec>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <osThreadNew+0xec>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <osThreadNew+0xec>
          mem = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	e001      	b.n	80043fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d110      	bne.n	8004424 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800440a:	9202      	str	r2, [sp, #8]
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fe09 	bl	8005030 <xTaskCreateStatic>
 800441e:	4603      	mov	r3, r0
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	e013      	b.n	800444c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d110      	bne.n	800444c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	b29a      	uxth	r2, r3
 800442e:	f107 0310 	add.w	r3, r7, #16
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fe51 	bl	80050e4 <xTaskCreate>
 8004442:	4603      	mov	r3, r0
 8004444:	2b01      	cmp	r3, #1
 8004446:	d001      	beq.n	800444c <osThreadNew+0x13c>
          hTask = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800444c:	693b      	ldr	r3, [r7, #16]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3730      	adds	r7, #48	; 0x30
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	200000bc 	.word	0x200000bc

0800445c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004464:	f3ef 8305 	mrs	r3, IPSR
 8004468:	613b      	str	r3, [r7, #16]
  return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004470:	f3ef 8310 	mrs	r3, PRIMASK
 8004474:	60fb      	str	r3, [r7, #12]
  return(result);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800447c:	f3ef 8311 	mrs	r3, BASEPRI
 8004480:	60bb      	str	r3, [r7, #8]
  return(result);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <osDelay+0x3c>
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <osDelay+0x58>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d103      	bne.n	8004498 <osDelay+0x3c>
    stat = osErrorISR;
 8004490:	f06f 0305 	mvn.w	r3, #5
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e007      	b.n	80044a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 ff62 	bl	800536c <vTaskDelay>
    }
  }

  return (stat);
 80044a8:	697b      	ldr	r3, [r7, #20]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	200000bc 	.word	0x200000bc

080044b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80044c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <vApplicationGetIdleTaskMemory+0x30>)
 80044ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2280      	movs	r2, #128	; 0x80
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	200000c0 	.word	0x200000c0
 80044e8:	2000011c 	.word	0x2000011c

080044ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a07      	ldr	r2, [pc, #28]	; (8004518 <vApplicationGetTimerTaskMemory+0x2c>)
 80044fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a06      	ldr	r2, [pc, #24]	; (800451c <vApplicationGetTimerTaskMemory+0x30>)
 8004502:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800450a:	601a      	str	r2, [r3, #0]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	2000031c 	.word	0x2000031c
 800451c:	20000378 	.word	0x20000378

08004520 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f103 0208 	add.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f04f 32ff 	mov.w	r2, #4294967295
 8004538:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f103 0208 	add.w	r2, r3, #8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f103 0208 	add.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d103      	bne.n	80045e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e00c      	b.n	80045fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3308      	adds	r3, #8
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e002      	b.n	80045f0 <vListInsert+0x2e>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d2f6      	bcs.n	80045ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6892      	ldr	r2, [r2, #8]
 800464a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6852      	ldr	r2, [r2, #4]
 8004654:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d103      	bne.n	8004668 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	e7fe      	b.n	80046ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80046b0:	f002 f814 	bl	80066dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	68f9      	ldr	r1, [r7, #12]
 80046be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	441a      	add	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e0:	3b01      	subs	r3, #1
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	441a      	add	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22ff      	movs	r2, #255	; 0xff
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	22ff      	movs	r2, #255	; 0xff
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d114      	bne.n	8004730 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01a      	beq.n	8004744 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3310      	adds	r3, #16
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f8de 	bl	80058d4 <xTaskRemoveFromEventList>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <xQueueGenericReset+0xcc>)
 8004720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	e009      	b.n	8004744 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3310      	adds	r3, #16
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fef3 	bl	8004520 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3324      	adds	r3, #36	; 0x24
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff feee 	bl	8004520 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004744:	f001 fff8 	bl	8006738 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004748:	2301      	movs	r3, #1
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08e      	sub	sp, #56	; 0x38
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <xQueueGenericCreateStatic+0x28>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	e7fe      	b.n	800477e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <xQueueGenericCreateStatic+0x42>
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	e7fe      	b.n	8004798 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <xQueueGenericCreateStatic+0x4e>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <xQueueGenericCreateStatic+0x52>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericCreateStatic+0x54>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <xQueueGenericCreateStatic+0x6c>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	623b      	str	r3, [r7, #32]
 80047c2:	e7fe      	b.n	80047c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <xQueueGenericCreateStatic+0x78>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <xQueueGenericCreateStatic+0x7c>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <xQueueGenericCreateStatic+0x7e>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <xQueueGenericCreateStatic+0x96>
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e7fe      	b.n	80047ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047ee:	2350      	movs	r3, #80	; 0x50
 80047f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d009      	beq.n	800480c <xQueueGenericCreateStatic+0xb4>
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e7fe      	b.n	800480a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800480c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004820:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f805 	bl	800483e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004836:	4618      	mov	r0, r3
 8004838:	3730      	adds	r7, #48	; 0x30
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e002      	b.n	8004860 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800486c:	2101      	movs	r1, #1
 800486e:	69b8      	ldr	r0, [r7, #24]
 8004870:	f7ff ff0a 	bl	8004688 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	; 0x38
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004892:	2300      	movs	r3, #0
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <xQueueGenericSend+0x30>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b2:	e7fe      	b.n	80048b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <xQueueGenericSend+0x3e>
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <xQueueGenericSend+0x42>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <xQueueGenericSend+0x44>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <xQueueGenericSend+0x5c>
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
 80048de:	e7fe      	b.n	80048de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d103      	bne.n	80048ee <xQueueGenericSend+0x6a>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <xQueueGenericSend+0x6e>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <xQueueGenericSend+0x70>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <xQueueGenericSend+0x88>
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	e7fe      	b.n	800490a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800490c:	f001 f998 	bl	8005c40 <xTaskGetSchedulerState>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <xQueueGenericSend+0x98>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <xQueueGenericSend+0x9c>
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <xQueueGenericSend+0x9e>
 8004920:	2300      	movs	r3, #0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <xQueueGenericSend+0xb6>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e7fe      	b.n	8004938 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800493a:	f001 fecf 	bl	80066dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	429a      	cmp	r2, r3
 8004948:	d302      	bcc.n	8004950 <xQueueGenericSend+0xcc>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d129      	bne.n	80049a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004956:	f000 f9ff 	bl	8004d58 <prvCopyDataToQueue>
 800495a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	4618      	mov	r0, r3
 800496a:	f000 ffb3 	bl	80058d4 <xTaskRemoveFromEventList>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004974:	4b3f      	ldr	r3, [pc, #252]	; (8004a74 <xQueueGenericSend+0x1f0>)
 8004976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	e00a      	b.n	800499c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800498c:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <xQueueGenericSend+0x1f0>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800499c:	f001 fecc 	bl	8006738 <vPortExitCritical>
				return pdPASS;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e063      	b.n	8004a6c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049aa:	f001 fec5 	bl	8006738 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e05c      	b.n	8004a6c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 ffeb 	bl	8005998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049c6:	f001 feb7 	bl	8006738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ca:	f000 fd67 	bl	800549c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049ce:	f001 fe85 	bl	80066dc <vPortEnterCritical>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049d8:	b25b      	sxtb	r3, r3
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d103      	bne.n	80049e8 <xQueueGenericSend+0x164>
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ee:	b25b      	sxtb	r3, r3
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSend+0x17a>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049fe:	f001 fe9b 	bl	8006738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a02:	1d3a      	adds	r2, r7, #4
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 ffda 	bl	80059c4 <xTaskCheckForTimeOut>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d124      	bne.n	8004a60 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a18:	f000 fa96 	bl	8004f48 <prvIsQueueFull>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	3310      	adds	r3, #16
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 ff04 	bl	8005838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a32:	f000 fa21 	bl	8004e78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a36:	f000 fd3f 	bl	80054b8 <xTaskResumeAll>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f af7c 	bne.w	800493a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <xQueueGenericSend+0x1f0>)
 8004a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	e772      	b.n	800493a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a56:	f000 fa0f 	bl	8004e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a5a:	f000 fd2d 	bl	80054b8 <xTaskResumeAll>
 8004a5e:	e76c      	b.n	800493a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a62:	f000 fa09 	bl	8004e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a66:	f000 fd27 	bl	80054b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3738      	adds	r7, #56	; 0x38
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <xQueueGenericSendFromISR+0x2c>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	e7fe      	b.n	8004aa2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <xQueueGenericSendFromISR+0x3a>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <xQueueGenericSendFromISR+0x3e>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueGenericSendFromISR+0x40>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <xQueueGenericSendFromISR+0x58>
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	e7fe      	b.n	8004ace <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d103      	bne.n	8004ade <xQueueGenericSendFromISR+0x66>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <xQueueGenericSendFromISR+0x6a>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <xQueueGenericSendFromISR+0x6c>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <xQueueGenericSendFromISR+0x84>
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	e7fe      	b.n	8004afa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004afc:	f001 feca 	bl	8006894 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b00:	f3ef 8211 	mrs	r2, BASEPRI
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	61ba      	str	r2, [r7, #24]
 8004b16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <xQueueGenericSendFromISR+0xb6>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d12c      	bne.n	8004b88 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b3e:	f000 f90b 	bl	8004d58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d112      	bne.n	8004b72 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d016      	beq.n	8004b82 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	3324      	adds	r3, #36	; 0x24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 febb 	bl	80058d4 <xTaskRemoveFromEventList>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e007      	b.n	8004b82 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b76:	3301      	adds	r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	b25a      	sxtb	r2, r3
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b82:	2301      	movs	r3, #1
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b86:	e001      	b.n	8004b8c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3738      	adds	r7, #56	; 0x38
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <xQueueReceive+0x2e>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	e7fe      	b.n	8004bcc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <xQueueReceive+0x3c>
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <xQueueReceive+0x40>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <xQueueReceive+0x42>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <xQueueReceive+0x5a>
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bfa:	f001 f821 	bl	8005c40 <xTaskGetSchedulerState>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <xQueueReceive+0x6a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <xQueueReceive+0x6e>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueReceive+0x70>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <xQueueReceive+0x88>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	e7fe      	b.n	8004c26 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c28:	f001 fd58 	bl	80066dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01f      	beq.n	8004c78 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3c:	f000 f8f6 	bl	8004e2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	1e5a      	subs	r2, r3, #1
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00f      	beq.n	8004c70 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	3310      	adds	r3, #16
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fe3d 	bl	80058d4 <xTaskRemoveFromEventList>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c60:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <xQueueReceive+0x1b4>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c70:	f001 fd62 	bl	8006738 <vPortExitCritical>
				return pdPASS;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e069      	b.n	8004d4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c7e:	f001 fd5b 	bl	8006738 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e062      	b.n	8004d4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c8c:	f107 0310 	add.w	r3, r7, #16
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fe81 	bl	8005998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c9a:	f001 fd4d 	bl	8006738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c9e:	f000 fbfd 	bl	800549c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca2:	f001 fd1b 	bl	80066dc <vPortEnterCritical>
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d103      	bne.n	8004cbc <xQueueReceive+0x11c>
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d103      	bne.n	8004cd2 <xQueueReceive+0x132>
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd2:	f001 fd31 	bl	8006738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cd6:	1d3a      	adds	r2, r7, #4
 8004cd8:	f107 0310 	add.w	r3, r7, #16
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fe70 	bl	80059c4 <xTaskCheckForTimeOut>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d123      	bne.n	8004d32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cec:	f000 f916 	bl	8004f1c <prvIsQueueEmpty>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d017      	beq.n	8004d26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	3324      	adds	r3, #36	; 0x24
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fd9a 	bl	8005838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d06:	f000 f8b7 	bl	8004e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d0a:	f000 fbd5 	bl	80054b8 <xTaskResumeAll>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d189      	bne.n	8004c28 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <xQueueReceive+0x1b4>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	e780      	b.n	8004c28 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d28:	f000 f8a6 	bl	8004e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d2c:	f000 fbc4 	bl	80054b8 <xTaskResumeAll>
 8004d30:	e77a      	b.n	8004c28 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d34:	f000 f8a0 	bl	8004e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d38:	f000 fbbe 	bl	80054b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3e:	f000 f8ed 	bl	8004f1c <prvIsQueueEmpty>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f43f af6f 	beq.w	8004c28 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3730      	adds	r7, #48	; 0x30
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10d      	bne.n	8004d92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d14d      	bne.n	8004e1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 ff7a 	bl	8005c7c <xTaskPriorityDisinherit>
 8004d88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	e043      	b.n	8004e1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d119      	bne.n	8004dcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6858      	ldr	r0, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	461a      	mov	r2, r3
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	f003 ffa0 	bl	8008ce8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d32b      	bcc.n	8004e1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	e026      	b.n	8004e1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68d8      	ldr	r0, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	f003 ff86 	bl	8008ce8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	425b      	negs	r3, r3
 8004de6:	441a      	add	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d207      	bcs.n	8004e08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	425b      	negs	r3, r3
 8004e02:	441a      	add	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d105      	bne.n	8004e1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	441a      	add	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d303      	bcc.n	8004e60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68d9      	ldr	r1, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6838      	ldr	r0, [r7, #0]
 8004e6c:	f003 ff3c 	bl	8008ce8 <memcpy>
	}
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e80:	f001 fc2c 	bl	80066dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e8c:	e011      	b.n	8004eb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d012      	beq.n	8004ebc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fd1a 	bl	80058d4 <xTaskRemoveFromEventList>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ea6:	f000 fded 	bl	8005a84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	dce9      	bgt.n	8004e8e <prvUnlockQueue+0x16>
 8004eba:	e000      	b.n	8004ebe <prvUnlockQueue+0x46>
					break;
 8004ebc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	22ff      	movs	r2, #255	; 0xff
 8004ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ec6:	f001 fc37 	bl	8006738 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eca:	f001 fc07 	bl	80066dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ed4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed6:	e011      	b.n	8004efc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d012      	beq.n	8004f06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3310      	adds	r3, #16
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fcf5 	bl	80058d4 <xTaskRemoveFromEventList>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ef0:	f000 fdc8 	bl	8005a84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ef4:	7bbb      	ldrb	r3, [r7, #14]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	dce9      	bgt.n	8004ed8 <prvUnlockQueue+0x60>
 8004f04:	e000      	b.n	8004f08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	22ff      	movs	r2, #255	; 0xff
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f10:	f001 fc12 	bl	8006738 <vPortExitCritical>
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f24:	f001 fbda 	bl	80066dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f30:	2301      	movs	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e001      	b.n	8004f3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f3a:	f001 fbfd 	bl	8006738 <vPortExitCritical>

	return xReturn;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f50:	f001 fbc4 	bl	80066dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d102      	bne.n	8004f66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e001      	b.n	8004f6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f6a:	f001 fbe5 	bl	8006738 <vPortExitCritical>

	return xReturn;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e014      	b.n	8004fb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f88:	4a0e      	ldr	r2, [pc, #56]	; (8004fc4 <vQueueAddToRegistry+0x4c>)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f94:	490b      	ldr	r1, [pc, #44]	; (8004fc4 <vQueueAddToRegistry+0x4c>)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <vQueueAddToRegistry+0x4c>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004faa:	e005      	b.n	8004fb8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b07      	cmp	r3, #7
 8004fb6:	d9e7      	bls.n	8004f88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	20004044 	.word	0x20004044

08004fc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fd8:	f001 fb80 	bl	80066dc <vPortEnterCritical>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d103      	bne.n	8004ff2 <vQueueWaitForMessageRestricted+0x2a>
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d103      	bne.n	8005008 <vQueueWaitForMessageRestricted+0x40>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005008:	f001 fb96 	bl	8006738 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	3324      	adds	r3, #36	; 0x24
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fc2f 	bl	8005880 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	f7ff ff28 	bl	8004e78 <prvUnlockQueue>
	}
 8005028:	bf00      	nop
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08e      	sub	sp, #56	; 0x38
 8005034:	af04      	add	r7, sp, #16
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <xTaskCreateStatic+0x28>
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	e7fe      	b.n	8005056 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <xTaskCreateStatic+0x42>
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e7fe      	b.n	8005070 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005072:	235c      	movs	r3, #92	; 0x5c
 8005074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b5c      	cmp	r3, #92	; 0x5c
 800507a:	d009      	beq.n	8005090 <xTaskCreateStatic+0x60>
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e7fe      	b.n	800508e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005090:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01e      	beq.n	80050d6 <xTaskCreateStatic+0xa6>
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01b      	beq.n	80050d6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050b0:	2300      	movs	r3, #0
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f850 	bl	800516e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d0:	f000 f8dc 	bl	800528c <prvAddNewTaskToReadyList>
 80050d4:	e001      	b.n	80050da <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050da:	697b      	ldr	r3, [r7, #20]
	}
 80050dc:	4618      	mov	r0, r3
 80050de:	3728      	adds	r7, #40	; 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	; 0x30
 80050e8:	af04      	add	r7, sp, #16
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 fc09 	bl	8006910 <pvPortMalloc>
 80050fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00e      	beq.n	8005124 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005106:	205c      	movs	r0, #92	; 0x5c
 8005108:	f001 fc02 	bl	8006910 <pvPortMalloc>
 800510c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	631a      	str	r2, [r3, #48]	; 0x30
 800511a:	e005      	b.n	8005128 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800511c:	6978      	ldr	r0, [r7, #20]
 800511e:	f001 fc09 	bl	8006934 <vPortFree>
 8005122:	e001      	b.n	8005128 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d017      	beq.n	800515e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	2300      	movs	r3, #0
 800513a:	9303      	str	r3, [sp, #12]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	9302      	str	r3, [sp, #8]
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f80e 	bl	800516e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005152:	69f8      	ldr	r0, [r7, #28]
 8005154:	f000 f89a 	bl	800528c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005158:	2301      	movs	r3, #1
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	e002      	b.n	8005164 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800515e:	f04f 33ff 	mov.w	r3, #4294967295
 8005162:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005164:	69bb      	ldr	r3, [r7, #24]
	}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	461a      	mov	r2, r3
 8005186:	21a5      	movs	r1, #165	; 0xa5
 8005188:	f003 fdb9 	bl	8008cfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005196:	3b01      	subs	r3, #1
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f023 0307 	bic.w	r3, r3, #7
 80051a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <prvInitialiseNewTask+0x56>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e7fe      	b.n	80051c2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01f      	beq.n	800520a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e012      	b.n	80051f6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	7819      	ldrb	r1, [r3, #0]
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	3334      	adds	r3, #52	; 0x34
 80051e0:	460a      	mov	r2, r1
 80051e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3301      	adds	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d9e9      	bls.n	80051d0 <prvInitialiseNewTask+0x62>
 80051fc:	e000      	b.n	8005200 <prvInitialiseNewTask+0x92>
			{
				break;
 80051fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005208:	e003      	b.n	8005212 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	2b37      	cmp	r3, #55	; 0x37
 8005216:	d901      	bls.n	800521c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005218:	2337      	movs	r3, #55	; 0x37
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005226:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2200      	movs	r2, #0
 800522c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	3304      	adds	r3, #4
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f994 	bl	8004560 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	3318      	adds	r3, #24
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff f98f 	bl	8004560 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	69b8      	ldr	r0, [r7, #24]
 800526c:	f001 f90c 	bl	8006488 <pxPortInitialiseStack>
 8005270:	4602      	mov	r2, r0
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005282:	bf00      	nop
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005294:	f001 fa22 	bl	80066dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005298:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <prvAddNewTaskToReadyList+0xc4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	4a2c      	ldr	r2, [pc, #176]	; (8005350 <prvAddNewTaskToReadyList+0xc4>)
 80052a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052a2:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <prvAddNewTaskToReadyList+0xc8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052aa:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <prvAddNewTaskToReadyList+0xc8>)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052b0:	4b27      	ldr	r3, [pc, #156]	; (8005350 <prvAddNewTaskToReadyList+0xc4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d110      	bne.n	80052da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052b8:	f000 fc08 	bl	8005acc <prvInitialiseTaskLists>
 80052bc:	e00d      	b.n	80052da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <prvAddNewTaskToReadyList+0xcc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052c6:	4b23      	ldr	r3, [pc, #140]	; (8005354 <prvAddNewTaskToReadyList+0xc8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d802      	bhi.n	80052da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052d4:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <prvAddNewTaskToReadyList+0xc8>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <prvAddNewTaskToReadyList+0xd0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	4a1e      	ldr	r2, [pc, #120]	; (800535c <prvAddNewTaskToReadyList+0xd0>)
 80052e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <prvAddNewTaskToReadyList+0xd0>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <prvAddNewTaskToReadyList+0xd4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d903      	bls.n	8005300 <prvAddNewTaskToReadyList+0x74>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	4a18      	ldr	r2, [pc, #96]	; (8005360 <prvAddNewTaskToReadyList+0xd4>)
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4a15      	ldr	r2, [pc, #84]	; (8005364 <prvAddNewTaskToReadyList+0xd8>)
 800530e:	441a      	add	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f7ff f92f 	bl	800457a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800531c:	f001 fa0c 	bl	8006738 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <prvAddNewTaskToReadyList+0xcc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00e      	beq.n	8005346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <prvAddNewTaskToReadyList+0xc8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	429a      	cmp	r2, r3
 8005334:	d207      	bcs.n	8005346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <prvAddNewTaskToReadyList+0xdc>)
 8005338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000c4c 	.word	0x20000c4c
 8005354:	20000778 	.word	0x20000778
 8005358:	20000c58 	.word	0x20000c58
 800535c:	20000c68 	.word	0x20000c68
 8005360:	20000c54 	.word	0x20000c54
 8005364:	2000077c 	.word	0x2000077c
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <vTaskDelay+0x60>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <vTaskDelay+0x2e>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	e7fe      	b.n	8005398 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800539a:	f000 f87f 	bl	800549c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800539e:	2100      	movs	r1, #0
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fcd7 	bl	8005d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053a6:	f000 f887 	bl	80054b8 <xTaskResumeAll>
 80053aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d107      	bne.n	80053c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <vTaskDelay+0x64>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000c74 	.word	0x20000c74
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053e2:	463a      	mov	r2, r7
 80053e4:	1d39      	adds	r1, r7, #4
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f864 	bl	80044b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	9202      	str	r2, [sp, #8]
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	460a      	mov	r2, r1
 8005402:	4920      	ldr	r1, [pc, #128]	; (8005484 <vTaskStartScheduler+0xb0>)
 8005404:	4820      	ldr	r0, [pc, #128]	; (8005488 <vTaskStartScheduler+0xb4>)
 8005406:	f7ff fe13 	bl	8005030 <xTaskCreateStatic>
 800540a:	4602      	mov	r2, r0
 800540c:	4b1f      	ldr	r3, [pc, #124]	; (800548c <vTaskStartScheduler+0xb8>)
 800540e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005410:	4b1e      	ldr	r3, [pc, #120]	; (800548c <vTaskStartScheduler+0xb8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e001      	b.n	8005422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005428:	f000 fce8 	bl	8005dfc <xTimerCreateTimerTask>
 800542c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d115      	bne.n	8005460 <vTaskStartScheduler+0x8c>
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <vTaskStartScheduler+0xbc>)
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800544e:	4b11      	ldr	r3, [pc, #68]	; (8005494 <vTaskStartScheduler+0xc0>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005454:	4b10      	ldr	r3, [pc, #64]	; (8005498 <vTaskStartScheduler+0xc4>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800545a:	f001 f8a1 	bl	80065a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800545e:	e00d      	b.n	800547c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	d109      	bne.n	800547c <vTaskStartScheduler+0xa8>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e7fe      	b.n	800547a <vTaskStartScheduler+0xa6>
}
 800547c:	bf00      	nop
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	08009b88 	.word	0x08009b88
 8005488:	08005a9d 	.word	0x08005a9d
 800548c:	20000c70 	.word	0x20000c70
 8005490:	20000c6c 	.word	0x20000c6c
 8005494:	20000c58 	.word	0x20000c58
 8005498:	20000c50 	.word	0x20000c50

0800549c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <vTaskSuspendAll+0x18>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a03      	ldr	r2, [pc, #12]	; (80054b4 <vTaskSuspendAll+0x18>)
 80054a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000c74 	.word	0x20000c74

080054b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <xTaskResumeAll+0x114>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <xTaskResumeAll+0x2a>
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	e7fe      	b.n	80054e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054e2:	f001 f8fb 	bl	80066dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054e6:	4b39      	ldr	r3, [pc, #228]	; (80055cc <xTaskResumeAll+0x114>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	4a37      	ldr	r2, [pc, #220]	; (80055cc <xTaskResumeAll+0x114>)
 80054ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <xTaskResumeAll+0x114>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d162      	bne.n	80055be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054f8:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <xTaskResumeAll+0x118>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05e      	beq.n	80055be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005500:	e02f      	b.n	8005562 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005502:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <xTaskResumeAll+0x11c>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3318      	adds	r3, #24
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f890 	bl	8004634 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3304      	adds	r3, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff f88b 	bl	8004634 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	4b2d      	ldr	r3, [pc, #180]	; (80055d8 <xTaskResumeAll+0x120>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d903      	bls.n	8005532 <xTaskResumeAll+0x7a>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <xTaskResumeAll+0x120>)
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4a27      	ldr	r2, [pc, #156]	; (80055dc <xTaskResumeAll+0x124>)
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f7ff f816 	bl	800457a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005552:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <xTaskResumeAll+0x128>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	429a      	cmp	r2, r3
 800555a:	d302      	bcc.n	8005562 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800555c:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <xTaskResumeAll+0x12c>)
 800555e:	2201      	movs	r2, #1
 8005560:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <xTaskResumeAll+0x11c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1cb      	bne.n	8005502 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005570:	f000 fb46 	bl	8005c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <xTaskResumeAll+0x130>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005580:	f000 f846 	bl	8005610 <xTaskIncrementTick>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800558a:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <xTaskResumeAll+0x12c>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3b01      	subs	r3, #1
 8005594:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f1      	bne.n	8005580 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <xTaskResumeAll+0x130>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <xTaskResumeAll+0x12c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <xTaskResumeAll+0x134>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055be:	f001 f8bb 	bl	8006738 <vPortExitCritical>

	return xAlreadyYielded;
 80055c2:	68bb      	ldr	r3, [r7, #8]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000c74 	.word	0x20000c74
 80055d0:	20000c4c 	.word	0x20000c4c
 80055d4:	20000c0c 	.word	0x20000c0c
 80055d8:	20000c54 	.word	0x20000c54
 80055dc:	2000077c 	.word	0x2000077c
 80055e0:	20000778 	.word	0x20000778
 80055e4:	20000c60 	.word	0x20000c60
 80055e8:	20000c5c 	.word	0x20000c5c
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <xTaskGetTickCount+0x1c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055fc:	687b      	ldr	r3, [r7, #4]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000c50 	.word	0x20000c50

08005610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561a:	4b4e      	ldr	r3, [pc, #312]	; (8005754 <xTaskIncrementTick+0x144>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 8088 	bne.w	8005734 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005624:	4b4c      	ldr	r3, [pc, #304]	; (8005758 <xTaskIncrementTick+0x148>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800562c:	4a4a      	ldr	r2, [pc, #296]	; (8005758 <xTaskIncrementTick+0x148>)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d11f      	bne.n	8005678 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005638:	4b48      	ldr	r3, [pc, #288]	; (800575c <xTaskIncrementTick+0x14c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <xTaskIncrementTick+0x46>
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	e7fe      	b.n	8005654 <xTaskIncrementTick+0x44>
 8005656:	4b41      	ldr	r3, [pc, #260]	; (800575c <xTaskIncrementTick+0x14c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	4b40      	ldr	r3, [pc, #256]	; (8005760 <xTaskIncrementTick+0x150>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a3e      	ldr	r2, [pc, #248]	; (800575c <xTaskIncrementTick+0x14c>)
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4a3e      	ldr	r2, [pc, #248]	; (8005760 <xTaskIncrementTick+0x150>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b3e      	ldr	r3, [pc, #248]	; (8005764 <xTaskIncrementTick+0x154>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3301      	adds	r3, #1
 8005670:	4a3c      	ldr	r2, [pc, #240]	; (8005764 <xTaskIncrementTick+0x154>)
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	f000 fac4 	bl	8005c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005678:	4b3b      	ldr	r3, [pc, #236]	; (8005768 <xTaskIncrementTick+0x158>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d349      	bcc.n	8005716 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005682:	4b36      	ldr	r3, [pc, #216]	; (800575c <xTaskIncrementTick+0x14c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800568c:	4b36      	ldr	r3, [pc, #216]	; (8005768 <xTaskIncrementTick+0x158>)
 800568e:	f04f 32ff 	mov.w	r2, #4294967295
 8005692:	601a      	str	r2, [r3, #0]
					break;
 8005694:	e03f      	b.n	8005716 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b31      	ldr	r3, [pc, #196]	; (800575c <xTaskIncrementTick+0x14c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d203      	bcs.n	80056b6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056ae:	4a2e      	ldr	r2, [pc, #184]	; (8005768 <xTaskIncrementTick+0x158>)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056b4:	e02f      	b.n	8005716 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe ffba 	bl	8004634 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3318      	adds	r3, #24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe ffb1 	bl	8004634 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	4b25      	ldr	r3, [pc, #148]	; (800576c <xTaskIncrementTick+0x15c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d903      	bls.n	80056e6 <xTaskIncrementTick+0xd6>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	4a22      	ldr	r2, [pc, #136]	; (800576c <xTaskIncrementTick+0x15c>)
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <xTaskIncrementTick+0x160>)
 80056f4:	441a      	add	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fe ff3c 	bl	800457a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005706:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <xTaskIncrementTick+0x164>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	429a      	cmp	r2, r3
 800570e:	d3b8      	bcc.n	8005682 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005714:	e7b5      	b.n	8005682 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005716:	4b17      	ldr	r3, [pc, #92]	; (8005774 <xTaskIncrementTick+0x164>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	4914      	ldr	r1, [pc, #80]	; (8005770 <xTaskIncrementTick+0x160>)
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d907      	bls.n	800573e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e004      	b.n	800573e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005734:	4b10      	ldr	r3, [pc, #64]	; (8005778 <xTaskIncrementTick+0x168>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3301      	adds	r3, #1
 800573a:	4a0f      	ldr	r2, [pc, #60]	; (8005778 <xTaskIncrementTick+0x168>)
 800573c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <xTaskIncrementTick+0x16c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005746:	2301      	movs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800574a:	697b      	ldr	r3, [r7, #20]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000c74 	.word	0x20000c74
 8005758:	20000c50 	.word	0x20000c50
 800575c:	20000c04 	.word	0x20000c04
 8005760:	20000c08 	.word	0x20000c08
 8005764:	20000c64 	.word	0x20000c64
 8005768:	20000c6c 	.word	0x20000c6c
 800576c:	20000c54 	.word	0x20000c54
 8005770:	2000077c 	.word	0x2000077c
 8005774:	20000778 	.word	0x20000778
 8005778:	20000c5c 	.word	0x20000c5c
 800577c:	20000c60 	.word	0x20000c60

08005780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005786:	4b27      	ldr	r3, [pc, #156]	; (8005824 <vTaskSwitchContext+0xa4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <vTaskSwitchContext+0xa8>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005794:	e040      	b.n	8005818 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <vTaskSwitchContext+0xa8>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579c:	4b23      	ldr	r3, [pc, #140]	; (800582c <vTaskSwitchContext+0xac>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e00f      	b.n	80057c4 <vTaskSwitchContext+0x44>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <vTaskSwitchContext+0x3e>
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	e7fe      	b.n	80057bc <vTaskSwitchContext+0x3c>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	491a      	ldr	r1, [pc, #104]	; (8005830 <vTaskSwitchContext+0xb0>)
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0e5      	beq.n	80057a4 <vTaskSwitchContext+0x24>
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <vTaskSwitchContext+0xb0>)
 80057e4:	4413      	add	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3308      	adds	r3, #8
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d104      	bne.n	8005808 <vTaskSwitchContext+0x88>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <vTaskSwitchContext+0xb4>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4a06      	ldr	r2, [pc, #24]	; (800582c <vTaskSwitchContext+0xac>)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6013      	str	r3, [r2, #0]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	20000c74 	.word	0x20000c74
 8005828:	20000c60 	.word	0x20000c60
 800582c:	20000c54 	.word	0x20000c54
 8005830:	2000077c 	.word	0x2000077c
 8005834:	20000778 	.word	0x20000778

08005838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <vTaskPlaceOnEventList+0x24>
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e7fe      	b.n	800585a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <vTaskPlaceOnEventList+0x44>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3318      	adds	r3, #24
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fe feac 	bl	80045c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800586a:	2101      	movs	r1, #1
 800586c:	6838      	ldr	r0, [r7, #0]
 800586e:	f000 fa71 	bl	8005d54 <prvAddCurrentTaskToDelayedList>
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000778 	.word	0x20000778

08005880 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <vTaskPlaceOnEventListRestricted+0x26>
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e7fe      	b.n	80058a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <vTaskPlaceOnEventListRestricted+0x50>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3318      	adds	r3, #24
 80058ac:	4619      	mov	r1, r3
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7fe fe63 	bl	800457a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	68b8      	ldr	r0, [r7, #8]
 80058c4:	f000 fa46 	bl	8005d54 <prvAddCurrentTaskToDelayedList>
	}
 80058c8:	bf00      	nop
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000778 	.word	0x20000778

080058d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <xTaskRemoveFromEventList+0x2a>
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e7fe      	b.n	80058fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	3318      	adds	r3, #24
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fe96 	bl	8004634 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005908:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <xTaskRemoveFromEventList+0xac>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11d      	bne.n	800594c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3304      	adds	r3, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe fe8d 	bl	8004634 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	4b19      	ldr	r3, [pc, #100]	; (8005984 <xTaskRemoveFromEventList+0xb0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d903      	bls.n	800592e <xTaskRemoveFromEventList+0x5a>
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a16      	ldr	r2, [pc, #88]	; (8005984 <xTaskRemoveFromEventList+0xb0>)
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <xTaskRemoveFromEventList+0xb4>)
 800593c:	441a      	add	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f7fe fe18 	bl	800457a <vListInsertEnd>
 800594a:	e005      	b.n	8005958 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3318      	adds	r3, #24
 8005950:	4619      	mov	r1, r3
 8005952:	480e      	ldr	r0, [pc, #56]	; (800598c <xTaskRemoveFromEventList+0xb8>)
 8005954:	f7fe fe11 	bl	800457a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <xTaskRemoveFromEventList+0xbc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	429a      	cmp	r2, r3
 8005964:	d905      	bls.n	8005972 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <xTaskRemoveFromEventList+0xc0>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e001      	b.n	8005976 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000c74 	.word	0x20000c74
 8005984:	20000c54 	.word	0x20000c54
 8005988:	2000077c 	.word	0x2000077c
 800598c:	20000c0c 	.word	0x20000c0c
 8005990:	20000778 	.word	0x20000778
 8005994:	20000c60 	.word	0x20000c60

08005998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <vTaskInternalSetTimeOutState+0x24>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <vTaskInternalSetTimeOutState+0x28>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	605a      	str	r2, [r3, #4]
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000c64 	.word	0x20000c64
 80059c0:	20000c50 	.word	0x20000c50

080059c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <xTaskCheckForTimeOut+0x24>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	e7fe      	b.n	80059e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <xTaskCheckForTimeOut+0x3e>
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e7fe      	b.n	8005a00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a02:	f000 fe6b 	bl	80066dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a06:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <xTaskCheckForTimeOut+0xb8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d102      	bne.n	8005a26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	e023      	b.n	8005a6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <xTaskCheckForTimeOut+0xbc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d007      	beq.n	8005a42 <xTaskCheckForTimeOut+0x7e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e015      	b.n	8005a6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d20b      	bcs.n	8005a64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ff9d 	bl	8005998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	e004      	b.n	8005a6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a6e:	f000 fe63 	bl	8006738 <vPortExitCritical>

	return xReturn;
 8005a72:	69fb      	ldr	r3, [r7, #28]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3720      	adds	r7, #32
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000c50 	.word	0x20000c50
 8005a80:	20000c64 	.word	0x20000c64

08005a84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <vTaskMissedYield+0x14>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20000c60 	.word	0x20000c60

08005a9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005aa4:	f000 f852 	bl	8005b4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005aa8:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <prvIdleTask+0x28>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d9f9      	bls.n	8005aa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <prvIdleTask+0x2c>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ac0:	e7f0      	b.n	8005aa4 <prvIdleTask+0x8>
 8005ac2:	bf00      	nop
 8005ac4:	2000077c 	.word	0x2000077c
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	e00c      	b.n	8005af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4a12      	ldr	r2, [pc, #72]	; (8005b2c <prvInitialiseTaskLists+0x60>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fd1a 	bl	8004520 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3301      	adds	r3, #1
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b37      	cmp	r3, #55	; 0x37
 8005af6:	d9ef      	bls.n	8005ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005af8:	480d      	ldr	r0, [pc, #52]	; (8005b30 <prvInitialiseTaskLists+0x64>)
 8005afa:	f7fe fd11 	bl	8004520 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005afe:	480d      	ldr	r0, [pc, #52]	; (8005b34 <prvInitialiseTaskLists+0x68>)
 8005b00:	f7fe fd0e 	bl	8004520 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b04:	480c      	ldr	r0, [pc, #48]	; (8005b38 <prvInitialiseTaskLists+0x6c>)
 8005b06:	f7fe fd0b 	bl	8004520 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b0a:	480c      	ldr	r0, [pc, #48]	; (8005b3c <prvInitialiseTaskLists+0x70>)
 8005b0c:	f7fe fd08 	bl	8004520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b10:	480b      	ldr	r0, [pc, #44]	; (8005b40 <prvInitialiseTaskLists+0x74>)
 8005b12:	f7fe fd05 	bl	8004520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <prvInitialiseTaskLists+0x78>)
 8005b18:	4a05      	ldr	r2, [pc, #20]	; (8005b30 <prvInitialiseTaskLists+0x64>)
 8005b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <prvInitialiseTaskLists+0x7c>)
 8005b1e:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <prvInitialiseTaskLists+0x68>)
 8005b20:	601a      	str	r2, [r3, #0]
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000077c 	.word	0x2000077c
 8005b30:	20000bdc 	.word	0x20000bdc
 8005b34:	20000bf0 	.word	0x20000bf0
 8005b38:	20000c0c 	.word	0x20000c0c
 8005b3c:	20000c20 	.word	0x20000c20
 8005b40:	20000c38 	.word	0x20000c38
 8005b44:	20000c04 	.word	0x20000c04
 8005b48:	20000c08 	.word	0x20000c08

08005b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b52:	e019      	b.n	8005b88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b54:	f000 fdc2 	bl	80066dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <prvCheckTasksWaitingTermination+0x4c>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe fd65 	bl	8004634 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <prvCheckTasksWaitingTermination+0x50>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <prvCheckTasksWaitingTermination+0x50>)
 8005b72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <prvCheckTasksWaitingTermination+0x54>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <prvCheckTasksWaitingTermination+0x54>)
 8005b7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b7e:	f000 fddb 	bl	8006738 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f80e 	bl	8005ba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <prvCheckTasksWaitingTermination+0x54>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e1      	bne.n	8005b54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000c20 	.word	0x20000c20
 8005b9c:	20000c4c 	.word	0x20000c4c
 8005ba0:	20000c34 	.word	0x20000c34

08005ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 feba 	bl	8006934 <vPortFree>
				vPortFree( pxTCB );
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 feb7 	bl	8006934 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bc6:	e017      	b.n	8005bf8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d103      	bne.n	8005bda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 feae 	bl	8006934 <vPortFree>
	}
 8005bd8:	e00e      	b.n	8005bf8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d009      	beq.n	8005bf8 <prvDeleteTCB+0x54>
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e7fe      	b.n	8005bf6 <prvDeleteTCB+0x52>
	}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvResetNextTaskUnblockTime+0x38>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <prvResetNextTaskUnblockTime+0x3c>)
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295
 8005c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c18:	e008      	b.n	8005c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <prvResetNextTaskUnblockTime+0x38>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <prvResetNextTaskUnblockTime+0x3c>)
 8005c2a:	6013      	str	r3, [r2, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	20000c04 	.word	0x20000c04
 8005c3c:	20000c6c 	.word	0x20000c6c

08005c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <xTaskGetSchedulerState+0x34>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	e008      	b.n	8005c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <xTaskGetSchedulerState+0x38>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	e001      	b.n	8005c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c66:	687b      	ldr	r3, [r7, #4]
	}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20000c58 	.word	0x20000c58
 8005c78:	20000c74 	.word	0x20000c74

08005c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d054      	beq.n	8005d3c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c92:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <xTaskPriorityDisinherit+0xcc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d009      	beq.n	8005cb0 <xTaskPriorityDisinherit+0x34>
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e7fe      	b.n	8005cae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <xTaskPriorityDisinherit+0x50>
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	e7fe      	b.n	8005cca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd0:	1e5a      	subs	r2, r3, #1
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d02c      	beq.n	8005d3c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d128      	bne.n	8005d3c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fca0 	bl	8004634 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <xTaskPriorityDisinherit+0xd0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <xTaskPriorityDisinherit+0xa0>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a0c      	ldr	r2, [pc, #48]	; (8005d4c <xTaskPriorityDisinherit+0xd0>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <xTaskPriorityDisinherit+0xd4>)
 8005d2a:	441a      	add	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7fe fc21 	bl	800457a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d3c:	697b      	ldr	r3, [r7, #20]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000778 	.word	0x20000778
 8005d4c:	20000c54 	.word	0x20000c54
 8005d50:	2000077c 	.word	0x2000077c

08005d54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d5e:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d64:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fc62 	bl	8004634 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d10a      	bne.n	8005d8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4819      	ldr	r0, [pc, #100]	; (8005dec <prvAddCurrentTaskToDelayedList+0x98>)
 8005d88:	f7fe fbf7 	bl	800457a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d8c:	e026      	b.n	8005ddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d209      	bcs.n	8005dba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f7fe fc05 	bl	80045c2 <vListInsert>
}
 8005db8:	e010      	b.n	8005ddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dba:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7fe fbfb 	bl	80045c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d202      	bcs.n	8005ddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dd6:	4a08      	ldr	r2, [pc, #32]	; (8005df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6013      	str	r3, [r2, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000c50 	.word	0x20000c50
 8005de8:	20000778 	.word	0x20000778
 8005dec:	20000c38 	.word	0x20000c38
 8005df0:	20000c08 	.word	0x20000c08
 8005df4:	20000c04 	.word	0x20000c04
 8005df8:	20000c6c 	.word	0x20000c6c

08005dfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e06:	f000 faff 	bl	8006408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <xTimerCreateTimerTask+0x80>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d021      	beq.n	8005e56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e1a:	1d3a      	adds	r2, r7, #4
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	f107 030c 	add.w	r3, r7, #12
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fe fb61 	bl	80044ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	9202      	str	r2, [sp, #8]
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	2302      	movs	r3, #2
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	460a      	mov	r2, r1
 8005e3c:	4910      	ldr	r1, [pc, #64]	; (8005e80 <xTimerCreateTimerTask+0x84>)
 8005e3e:	4811      	ldr	r0, [pc, #68]	; (8005e84 <xTimerCreateTimerTask+0x88>)
 8005e40:	f7ff f8f6 	bl	8005030 <xTaskCreateStatic>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <xTimerCreateTimerTask+0x8c>)
 8005e48:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <xTimerCreateTimerTask+0x8c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e52:	2301      	movs	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d109      	bne.n	8005e70 <xTimerCreateTimerTask+0x74>
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	e7fe      	b.n	8005e6e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005e70:	697b      	ldr	r3, [r7, #20]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000ca8 	.word	0x20000ca8
 8005e80:	08009b90 	.word	0x08009b90
 8005e84:	08005fbd 	.word	0x08005fbd
 8005e88:	20000cac 	.word	0x20000cac

08005e8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <xTimerGenericCommand+0x2c>
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	623b      	str	r3, [r7, #32]
 8005eb6:	e7fe      	b.n	8005eb6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005eb8:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <xTimerGenericCommand+0x94>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d02a      	beq.n	8005f16 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	dc18      	bgt.n	8005f04 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ed2:	f7ff feb5 	bl	8005c40 <xTaskGetSchedulerState>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d109      	bne.n	8005ef0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <xTimerGenericCommand+0x94>)
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	f107 0110 	add.w	r1, r7, #16
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee8:	f7fe fccc 	bl	8004884 <xQueueGenericSend>
 8005eec:	6278      	str	r0, [r7, #36]	; 0x24
 8005eee:	e012      	b.n	8005f16 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <xTimerGenericCommand+0x94>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	f107 0110 	add.w	r1, r7, #16
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2200      	movs	r2, #0
 8005efc:	f7fe fcc2 	bl	8004884 <xQueueGenericSend>
 8005f00:	6278      	str	r0, [r7, #36]	; 0x24
 8005f02:	e008      	b.n	8005f16 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <xTimerGenericCommand+0x94>)
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	f107 0110 	add.w	r1, r7, #16
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	f7fe fdb2 	bl	8004a78 <xQueueGenericSendFromISR>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3728      	adds	r7, #40	; 0x28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000ca8 	.word	0x20000ca8

08005f24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2e:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <prvProcessExpiredTimer+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe fb79 	bl	8004634 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d021      	beq.n	8005f94 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	18d1      	adds	r1, r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	6978      	ldr	r0, [r7, #20]
 8005f5e:	f000 f8d1 	bl	8006104 <prvInsertTimerInActiveList>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01e      	beq.n	8005fa6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	2100      	movs	r1, #0
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f7ff ff8a 	bl	8005e8c <xTimerGenericCommand>
 8005f78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d112      	bne.n	8005fa6 <prvProcessExpiredTimer+0x82>
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e7fe      	b.n	8005f92 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	4798      	blx	r3
}
 8005fae:	bf00      	nop
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000ca0 	.word	0x20000ca0

08005fbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fc4:	f107 0308 	add.w	r3, r7, #8
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f857 	bl	800607c <prvGetNextExpireTime>
 8005fce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f803 	bl	8005fe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fda:	f000 f8d5 	bl	8006188 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fde:	e7f1      	b.n	8005fc4 <prvTimerTask+0x8>

08005fe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fea:	f7ff fa57 	bl	800549c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fee:	f107 0308 	add.w	r3, r7, #8
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f866 	bl	80060c4 <prvSampleTimeNow>
 8005ff8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d130      	bne.n	8006062 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <prvProcessTimerOrBlockTask+0x3c>
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	429a      	cmp	r2, r3
 800600c:	d806      	bhi.n	800601c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800600e:	f7ff fa53 	bl	80054b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ff85 	bl	8005f24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800601a:	e024      	b.n	8006066 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <prvProcessTimerOrBlockTask+0x90>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <prvProcessTimerOrBlockTask+0x50>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <prvProcessTimerOrBlockTask+0x52>
 8006030:	2300      	movs	r3, #0
 8006032:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006034:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <prvProcessTimerOrBlockTask+0x94>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	f7fe ffc1 	bl	8004fc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006046:	f7ff fa37 	bl	80054b8 <xTaskResumeAll>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <prvProcessTimerOrBlockTask+0x98>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
}
 8006060:	e001      	b.n	8006066 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006062:	f7ff fa29 	bl	80054b8 <xTaskResumeAll>
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000ca4 	.word	0x20000ca4
 8006074:	20000ca8 	.word	0x20000ca8
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006084:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <prvGetNextExpireTime+0x44>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <prvGetNextExpireTime+0x16>
 800608e:	2201      	movs	r2, #1
 8006090:	e000      	b.n	8006094 <prvGetNextExpireTime+0x18>
 8006092:	2200      	movs	r2, #0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d105      	bne.n	80060ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060a0:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <prvGetNextExpireTime+0x44>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e001      	b.n	80060b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060b0:	68fb      	ldr	r3, [r7, #12]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000ca0 	.word	0x20000ca0

080060c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060cc:	f7ff fa90 	bl	80055f0 <xTaskGetTickCount>
 80060d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <prvSampleTimeNow+0x3c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d205      	bcs.n	80060e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060dc:	f000 f930 	bl	8006340 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e002      	b.n	80060ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060ee:	4a04      	ldr	r2, [pc, #16]	; (8006100 <prvSampleTimeNow+0x3c>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000cb0 	.word	0x20000cb0

08006104 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d812      	bhi.n	8006150 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e01b      	b.n	8006176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <prvInsertTimerInActiveList+0x7c>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7fe fa3a 	bl	80045c2 <vListInsert>
 800614e:	e012      	b.n	8006176 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d206      	bcs.n	8006166 <prvInsertTimerInActiveList+0x62>
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d302      	bcc.n	8006166 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e007      	b.n	8006176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <prvInsertTimerInActiveList+0x80>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fe fa26 	bl	80045c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006176:	697b      	ldr	r3, [r7, #20]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000ca4 	.word	0x20000ca4
 8006184:	20000ca0 	.word	0x20000ca0

08006188 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	; 0x38
 800618c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800618e:	e0c6      	b.n	800631e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da17      	bge.n	80061c6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	3304      	adds	r3, #4
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <prvProcessReceivedCommands+0x2e>
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e7fe      	b.n	80061b4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061bc:	6850      	ldr	r0, [r2, #4]
 80061be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c0:	6892      	ldr	r2, [r2, #8]
 80061c2:	4611      	mov	r1, r2
 80061c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f2c0 80a7 	blt.w	800631c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	3304      	adds	r3, #4
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe fa28 	bl	8004634 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061e4:	463b      	mov	r3, r7
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ff6c 	bl	80060c4 <prvSampleTimeNow>
 80061ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b09      	cmp	r3, #9
 80061f2:	f200 8094 	bhi.w	800631e <prvProcessReceivedCommands+0x196>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <prvProcessReceivedCommands+0x74>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006225 	.word	0x08006225
 8006200:	08006225 	.word	0x08006225
 8006204:	08006225 	.word	0x08006225
 8006208:	08006297 	.word	0x08006297
 800620c:	080062ab 	.word	0x080062ab
 8006210:	080062f3 	.word	0x080062f3
 8006214:	08006225 	.word	0x08006225
 8006218:	08006225 	.word	0x08006225
 800621c:	08006297 	.word	0x08006297
 8006220:	080062ab 	.word	0x080062ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	18d1      	adds	r1, r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006244:	f7ff ff5e 	bl	8006104 <prvInsertTimerInActiveList>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d067      	beq.n	800631e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d05c      	beq.n	800631e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	441a      	add	r2, r3
 800626c:	2300      	movs	r3, #0
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	2100      	movs	r1, #0
 8006274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006276:	f7ff fe09 	bl	8005e8c <xTimerGenericCommand>
 800627a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d14d      	bne.n	800631e <prvProcessReceivedCommands+0x196>
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e7fe      	b.n	8006294 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800629c:	f023 0301 	bic.w	r3, r3, #1
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062a8:	e039      	b.n	800631e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <prvProcessReceivedCommands+0x156>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e7fe      	b.n	80062dc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	699a      	ldr	r2, [r3, #24]
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	18d1      	adds	r1, r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ec:	f7ff ff0a 	bl	8006104 <prvInsertTimerInActiveList>
					break;
 80062f0:	e015      	b.n	800631e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006302:	f000 fb17 	bl	8006934 <vPortFree>
 8006306:	e00a      	b.n	800631e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	b2da      	uxtb	r2, r3
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800631a:	e000      	b.n	800631e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800631c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800631e:	4b07      	ldr	r3, [pc, #28]	; (800633c <prvProcessReceivedCommands+0x1b4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	1d39      	adds	r1, r7, #4
 8006324:	2200      	movs	r2, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fc3a 	bl	8004ba0 <xQueueReceive>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	f47f af2e 	bne.w	8006190 <prvProcessReceivedCommands+0x8>
	}
}
 8006334:	bf00      	nop
 8006336:	3730      	adds	r7, #48	; 0x30
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000ca8 	.word	0x20000ca8

08006340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006346:	e047      	b.n	80063d8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006348:	4b2d      	ldr	r3, [pc, #180]	; (8006400 <prvSwitchTimerLists+0xc0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006352:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <prvSwitchTimerLists+0xc0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3304      	adds	r3, #4
 8006360:	4618      	mov	r0, r3
 8006362:	f7fe f967 	bl	8004634 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d02d      	beq.n	80063d8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	429a      	cmp	r2, r3
 800638c:	d90e      	bls.n	80063ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800639a:	4b19      	ldr	r3, [pc, #100]	; (8006400 <prvSwitchTimerLists+0xc0>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f7fe f90c 	bl	80045c2 <vListInsert>
 80063aa:	e015      	b.n	80063d8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	2100      	movs	r1, #0
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff fd68 	bl	8005e8c <xTimerGenericCommand>
 80063bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <prvSwitchTimerLists+0x98>
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	e7fe      	b.n	80063d6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <prvSwitchTimerLists+0xc0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1b2      	bne.n	8006348 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <prvSwitchTimerLists+0xc0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <prvSwitchTimerLists+0xc4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a04      	ldr	r2, [pc, #16]	; (8006400 <prvSwitchTimerLists+0xc0>)
 80063ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <prvSwitchTimerLists+0xc4>)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6013      	str	r3, [r2, #0]
}
 80063f6:	bf00      	nop
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000ca0 	.word	0x20000ca0
 8006404:	20000ca4 	.word	0x20000ca4

08006408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800640e:	f000 f965 	bl	80066dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <prvCheckForValidListAndQueue+0x60>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d120      	bne.n	800645c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800641a:	4814      	ldr	r0, [pc, #80]	; (800646c <prvCheckForValidListAndQueue+0x64>)
 800641c:	f7fe f880 	bl	8004520 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006420:	4813      	ldr	r0, [pc, #76]	; (8006470 <prvCheckForValidListAndQueue+0x68>)
 8006422:	f7fe f87d 	bl	8004520 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <prvCheckForValidListAndQueue+0x6c>)
 8006428:	4a10      	ldr	r2, [pc, #64]	; (800646c <prvCheckForValidListAndQueue+0x64>)
 800642a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800642c:	4b12      	ldr	r3, [pc, #72]	; (8006478 <prvCheckForValidListAndQueue+0x70>)
 800642e:	4a10      	ldr	r2, [pc, #64]	; (8006470 <prvCheckForValidListAndQueue+0x68>)
 8006430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006432:	2300      	movs	r3, #0
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <prvCheckForValidListAndQueue+0x74>)
 8006438:	4a11      	ldr	r2, [pc, #68]	; (8006480 <prvCheckForValidListAndQueue+0x78>)
 800643a:	2110      	movs	r1, #16
 800643c:	200a      	movs	r0, #10
 800643e:	f7fe f98b 	bl	8004758 <xQueueGenericCreateStatic>
 8006442:	4602      	mov	r2, r0
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <prvCheckForValidListAndQueue+0x60>)
 8006446:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006448:	4b07      	ldr	r3, [pc, #28]	; (8006468 <prvCheckForValidListAndQueue+0x60>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <prvCheckForValidListAndQueue+0x60>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	490b      	ldr	r1, [pc, #44]	; (8006484 <prvCheckForValidListAndQueue+0x7c>)
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fd8e 	bl	8004f78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800645c:	f000 f96c 	bl	8006738 <vPortExitCritical>
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000ca8 	.word	0x20000ca8
 800646c:	20000c78 	.word	0x20000c78
 8006470:	20000c8c 	.word	0x20000c8c
 8006474:	20000ca0 	.word	0x20000ca0
 8006478:	20000ca4 	.word	0x20000ca4
 800647c:	20000d54 	.word	0x20000d54
 8006480:	20000cb4 	.word	0x20000cb4
 8006484:	08009b98 	.word	0x08009b98

08006488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3b04      	subs	r3, #4
 8006498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b04      	subs	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064b8:	4a0c      	ldr	r2, [pc, #48]	; (80064ec <pxPortInitialiseStack+0x64>)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3b14      	subs	r3, #20
 80064c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f06f 0202 	mvn.w	r2, #2
 80064d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3b20      	subs	r3, #32
 80064dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064de:	68fb      	ldr	r3, [r7, #12]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	080064f1 	.word	0x080064f1

080064f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064fa:	4b11      	ldr	r3, [pc, #68]	; (8006540 <prvTaskExitError+0x50>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d009      	beq.n	8006518 <prvTaskExitError+0x28>
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e7fe      	b.n	8006516 <prvTaskExitError+0x26>
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800652a:	bf00      	nop
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0fc      	beq.n	800652c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000008 	.word	0x20000008
	...

08006550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <pxCurrentTCBConst2>)
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	6808      	ldr	r0, [r1, #0]
 8006556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	f380 8809 	msr	PSP, r0
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8811 	msr	BASEPRI, r0
 800656a:	4770      	bx	lr
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst2>:
 8006570:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006578:	4808      	ldr	r0, [pc, #32]	; (800659c <prvPortStartFirstTask+0x24>)
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	6800      	ldr	r0, [r0, #0]
 800657e:	f380 8808 	msr	MSP, r0
 8006582:	f04f 0000 	mov.w	r0, #0
 8006586:	f380 8814 	msr	CONTROL, r0
 800658a:	b662      	cpsie	i
 800658c:	b661      	cpsie	f
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	df00      	svc	0
 8006598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800659a:	bf00      	nop
 800659c:	e000ed08 	.word	0xe000ed08

080065a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065a6:	4b44      	ldr	r3, [pc, #272]	; (80066b8 <xPortStartScheduler+0x118>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a44      	ldr	r2, [pc, #272]	; (80066bc <xPortStartScheduler+0x11c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d109      	bne.n	80065c4 <xPortStartScheduler+0x24>
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	e7fe      	b.n	80065c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065c4:	4b3c      	ldr	r3, [pc, #240]	; (80066b8 <xPortStartScheduler+0x118>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a3d      	ldr	r2, [pc, #244]	; (80066c0 <xPortStartScheduler+0x120>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d109      	bne.n	80065e2 <xPortStartScheduler+0x42>
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e7fe      	b.n	80065e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065e2:	4b38      	ldr	r3, [pc, #224]	; (80066c4 <xPortStartScheduler+0x124>)
 80065e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	22ff      	movs	r2, #255	; 0xff
 80065f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006604:	b2da      	uxtb	r2, r3
 8006606:	4b30      	ldr	r3, [pc, #192]	; (80066c8 <xPortStartScheduler+0x128>)
 8006608:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800660a:	4b30      	ldr	r3, [pc, #192]	; (80066cc <xPortStartScheduler+0x12c>)
 800660c:	2207      	movs	r2, #7
 800660e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006610:	e009      	b.n	8006626 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006612:	4b2e      	ldr	r3, [pc, #184]	; (80066cc <xPortStartScheduler+0x12c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3b01      	subs	r3, #1
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <xPortStartScheduler+0x12c>)
 800661a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b80      	cmp	r3, #128	; 0x80
 8006630:	d0ef      	beq.n	8006612 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006632:	4b26      	ldr	r3, [pc, #152]	; (80066cc <xPortStartScheduler+0x12c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f1c3 0307 	rsb	r3, r3, #7
 800663a:	2b04      	cmp	r3, #4
 800663c:	d009      	beq.n	8006652 <xPortStartScheduler+0xb2>
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	e7fe      	b.n	8006650 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006652:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <xPortStartScheduler+0x12c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <xPortStartScheduler+0x12c>)
 800665a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <xPortStartScheduler+0x12c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006664:	4a19      	ldr	r2, [pc, #100]	; (80066cc <xPortStartScheduler+0x12c>)
 8006666:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006670:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <xPortStartScheduler+0x130>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <xPortStartScheduler+0x130>)
 8006676:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800667a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800667c:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <xPortStartScheduler+0x130>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <xPortStartScheduler+0x130>)
 8006682:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006686:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006688:	f000 f8d6 	bl	8006838 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800668c:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <xPortStartScheduler+0x134>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006692:	f000 f8f5 	bl	8006880 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006696:	4b10      	ldr	r3, [pc, #64]	; (80066d8 <xPortStartScheduler+0x138>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a0f      	ldr	r2, [pc, #60]	; (80066d8 <xPortStartScheduler+0x138>)
 800669c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066a2:	f7ff ff69 	bl	8006578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066a6:	f7ff f86b 	bl	8005780 <vTaskSwitchContext>
	prvTaskExitError();
 80066aa:	f7ff ff21 	bl	80064f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	e000ed00 	.word	0xe000ed00
 80066bc:	410fc271 	.word	0x410fc271
 80066c0:	410fc270 	.word	0x410fc270
 80066c4:	e000e400 	.word	0xe000e400
 80066c8:	20000da4 	.word	0x20000da4
 80066cc:	20000da8 	.word	0x20000da8
 80066d0:	e000ed20 	.word	0xe000ed20
 80066d4:	20000008 	.word	0x20000008
 80066d8:	e000ef34 	.word	0xe000ef34

080066dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066f4:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <vPortEnterCritical+0x54>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	4a0d      	ldr	r2, [pc, #52]	; (8006730 <vPortEnterCritical+0x54>)
 80066fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <vPortEnterCritical+0x54>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d10e      	bne.n	8006724 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <vPortEnterCritical+0x58>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <vPortEnterCritical+0x48>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	e7fe      	b.n	8006722 <vPortEnterCritical+0x46>
	}
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000008 	.word	0x20000008
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <vPortExitCritical+0x4c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <vPortExitCritical+0x22>
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	607b      	str	r3, [r7, #4]
 8006758:	e7fe      	b.n	8006758 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <vPortExitCritical+0x4c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3b01      	subs	r3, #1
 8006760:	4a08      	ldr	r2, [pc, #32]	; (8006784 <vPortExitCritical+0x4c>)
 8006762:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006764:	4b07      	ldr	r3, [pc, #28]	; (8006784 <vPortExitCritical+0x4c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <vPortExitCritical+0x3e>
 800676c:	2300      	movs	r3, #0
 800676e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000008 	.word	0x20000008
	...

08006790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006790:	f3ef 8009 	mrs	r0, PSP
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <pxCurrentTCBConst>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	f01e 0f10 	tst.w	lr, #16
 80067a0:	bf08      	it	eq
 80067a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	6010      	str	r0, [r2, #0]
 80067ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067b4:	f380 8811 	msr	BASEPRI, r0
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f7fe ffde 	bl	8005780 <vTaskSwitchContext>
 80067c4:	f04f 0000 	mov.w	r0, #0
 80067c8:	f380 8811 	msr	BASEPRI, r0
 80067cc:	bc09      	pop	{r0, r3}
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	6808      	ldr	r0, [r1, #0]
 80067d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d6:	f01e 0f10 	tst.w	lr, #16
 80067da:	bf08      	it	eq
 80067dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067e0:	f380 8809 	msr	PSP, r0
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	f3af 8000 	nop.w

080067f0 <pxCurrentTCBConst>:
 80067f0:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop

080067f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006810:	f7fe fefe 	bl	8005610 <xTaskIncrementTick>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <SysTick_Handler+0x3c>)
 800681c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	2300      	movs	r3, #0
 8006824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800683c:	4b0b      	ldr	r3, [pc, #44]	; (800686c <vPortSetupTimerInterrupt+0x34>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <vPortSetupTimerInterrupt+0x38>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <vPortSetupTimerInterrupt+0x3c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <vPortSetupTimerInterrupt+0x40>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	099b      	lsrs	r3, r3, #6
 8006854:	4a09      	ldr	r2, [pc, #36]	; (800687c <vPortSetupTimerInterrupt+0x44>)
 8006856:	3b01      	subs	r3, #1
 8006858:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <vPortSetupTimerInterrupt+0x34>)
 800685c:	2207      	movs	r2, #7
 800685e:	601a      	str	r2, [r3, #0]
}
 8006860:	bf00      	nop
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	e000e010 	.word	0xe000e010
 8006870:	e000e018 	.word	0xe000e018
 8006874:	20000034 	.word	0x20000034
 8006878:	10624dd3 	.word	0x10624dd3
 800687c:	e000e014 	.word	0xe000e014

08006880 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006880:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006890 <vPortEnableVFP+0x10>
 8006884:	6801      	ldr	r1, [r0, #0]
 8006886:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800688a:	6001      	str	r1, [r0, #0]
 800688c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800688e:	bf00      	nop
 8006890:	e000ed88 	.word	0xe000ed88

08006894 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800689a:	f3ef 8305 	mrs	r3, IPSR
 800689e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b0f      	cmp	r3, #15
 80068a4:	d913      	bls.n	80068ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068a6:	4a16      	ldr	r2, [pc, #88]	; (8006900 <vPortValidateInterruptPriority+0x6c>)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068b0:	4b14      	ldr	r3, [pc, #80]	; (8006904 <vPortValidateInterruptPriority+0x70>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	7afa      	ldrb	r2, [r7, #11]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d209      	bcs.n	80068ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	e7fe      	b.n	80068cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068ce:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <vPortValidateInterruptPriority+0x74>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068d6:	4b0d      	ldr	r3, [pc, #52]	; (800690c <vPortValidateInterruptPriority+0x78>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d909      	bls.n	80068f2 <vPortValidateInterruptPriority+0x5e>
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	e7fe      	b.n	80068f0 <vPortValidateInterruptPriority+0x5c>
	}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	e000e3f0 	.word	0xe000e3f0
 8006904:	20000da4 	.word	0x20000da4
 8006908:	e000ed0c 	.word	0xe000ed0c
 800690c:	20000da8 	.word	0x20000da8

08006910 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8006918:	f7fe fdc0 	bl	800549c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f002 f9d3 	bl	8008cc8 <malloc>
 8006922:	4603      	mov	r3, r0
 8006924:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006926:	f7fe fdc7 	bl	80054b8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800692a:	68fb      	ldr	r3, [r7, #12]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	if( pv )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d006      	beq.n	8006950 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8006942:	f7fe fdab 	bl	800549c <vTaskSuspendAll>
		{
			free( pv );
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f002 f9c6 	bl	8008cd8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800694c:	f7fe fdb4 	bl	80054b8 <xTaskResumeAll>
	}
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <cc110_init>:
static void cc110_getConfig(void);
static void cc110_dumpRegisters(void);

/* Public function definitions -----------------------------------------------*/
int8_t cc110_init(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
    int8_t retval = CC110_OK;
 800695e:	2301      	movs	r3, #1
 8006960:	71fb      	strb	r3, [r7, #7]

    // De-init timer that takes care of tx/rx operations (this should already be done)
    HAL_TIM_Base_MspDeInit(&htim10);
 8006962:	4847      	ldr	r0, [pc, #284]	; (8006a80 <cc110_init+0x128>)
 8006964:	f002 f87a 	bl	8008a5c <HAL_TIM_Base_MspDeInit>

    // Reset Device
    cc110_connectedStatus = cc110_reset();
 8006968:	f000 fa52 	bl	8006e10 <cc110_reset>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	4b44      	ldr	r3, [pc, #272]	; (8006a84 <cc110_init+0x12c>)
 8006972:	701a      	strb	r2, [r3, #0]
    if (cc110_connectedStatus == CC110_OK)
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <cc110_init+0x12c>)
 8006976:	f993 3000 	ldrsb.w	r3, [r3]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d171      	bne.n	8006a62 <cc110_init+0x10a>
    {
        log_info("CC110 Connected");
 800697e:	4b42      	ldr	r3, [pc, #264]	; (8006a88 <cc110_init+0x130>)
 8006980:	2278      	movs	r2, #120	; 0x78
 8006982:	4942      	ldr	r1, [pc, #264]	; (8006a8c <cc110_init+0x134>)
 8006984:	2003      	movs	r0, #3
 8006986:	f001 fa0f 	bl	8007da8 <log_event>

        // Force to IDLE state
        cc110_strobeCmd(CC110_SIDLE_ADDR);
 800698a:	2036      	movs	r0, #54	; 0x36
 800698c:	f000 fb6c 	bl	8007068 <cc110_strobeCmd>

        // Flush FIFOs
        cc110_strobeCmd(CC110_SFRX_ADDR);
 8006990:	203a      	movs	r0, #58	; 0x3a
 8006992:	f000 fb69 	bl	8007068 <cc110_strobeCmd>
        cc110_strobeCmd(CC110_SFTX_ADDR);
 8006996:	203b      	movs	r0, #59	; 0x3b
 8006998:	f000 fb66 	bl	8007068 <cc110_strobeCmd>

        // Grab latest status from status registers
        cc110_getStatus();
 800699c:	f000 fe40 	bl	8007620 <cc110_getStatus>
        #define SMARTRF_SETTING_FSCAL0          0x1F
        #define SMARTRF_SETTING_TEST2           0x81
        #define SMARTRF_SETTING_TEST1           0x35
        #define SMARTRF_SETTING_TEST0           0x09

        cc110_writeRegister(CC110_IOCFG0_ADDR, SMARTRF_SETTING_IOCFG0);
 80069a0:	2106      	movs	r1, #6
 80069a2:	2002      	movs	r0, #2
 80069a4:	f000 fb40 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FIFOTHR_ADDR, SMARTRF_SETTING_FIFOTHR);
 80069a8:	2147      	movs	r1, #71	; 0x47
 80069aa:	2003      	movs	r0, #3
 80069ac:	f000 fb3c 	bl	8007028 <cc110_writeRegister>
        //cc110_writeRegister(CC110_PKTLEN_ADDR, SMARTRF_SETTING_PKTLEN);
        cc110_writeRegister(CC110_PKTCTRL0_ADDR, SMARTRF_SETTING_PKTCTRL0);
 80069b0:	2105      	movs	r1, #5
 80069b2:	2008      	movs	r0, #8
 80069b4:	f000 fb38 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FSCTRL1_ADDR, SMARTRF_SETTING_FSCTRL1);
 80069b8:	2106      	movs	r1, #6
 80069ba:	20db      	movs	r0, #219	; 0xdb
 80069bc:	f000 fb34 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FREQ2_ADDR, SMARTRF_SETTING_FREQ2);
 80069c0:	2121      	movs	r1, #33	; 0x21
 80069c2:	200d      	movs	r0, #13
 80069c4:	f000 fb30 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FREQ1_ADDR, SMARTRF_SETTING_FREQ1);
 80069c8:	21e3      	movs	r1, #227	; 0xe3
 80069ca:	200e      	movs	r0, #14
 80069cc:	f000 fb2c 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FREQ0_ADDR, SMARTRF_SETTING_FREQ0);
 80069d0:	218e      	movs	r1, #142	; 0x8e
 80069d2:	200f      	movs	r0, #15
 80069d4:	f000 fb28 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_MDMCFG4_ADDR, SMARTRF_SETTING_MDMCFG4);
 80069d8:	21f5      	movs	r1, #245	; 0xf5
 80069da:	2010      	movs	r0, #16
 80069dc:	f000 fb24 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_MDMCFG3_ADDR, SMARTRF_SETTING_MDMCFG3);
 80069e0:	2175      	movs	r1, #117	; 0x75
 80069e2:	2011      	movs	r0, #17
 80069e4:	f000 fb20 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_MDMCFG2_ADDR, SMARTRF_SETTING_MDMCFG2);
 80069e8:	2113      	movs	r1, #19
 80069ea:	2012      	movs	r0, #18
 80069ec:	f000 fb1c 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_MDMCFG0_ADDR, SMARTRF_SETTING_MDMCFG0);
 80069f0:	21e5      	movs	r1, #229	; 0xe5
 80069f2:	2014      	movs	r0, #20
 80069f4:	f000 fb18 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_MCSM0_ADDR, SMARTRF_SETTING_MCSM0);
 80069f8:	2118      	movs	r1, #24
 80069fa:	2018      	movs	r0, #24
 80069fc:	f000 fb14 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FOCCFG_ADDR, SMARTRF_SETTING_FOCCFG);
 8006a00:	2116      	movs	r1, #22
 8006a02:	2019      	movs	r0, #25
 8006a04:	f000 fb10 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(0x20, SMARTRF_SETTING_RESERVED_0X20);
 8006a08:	21fb      	movs	r1, #251	; 0xfb
 8006a0a:	2020      	movs	r0, #32
 8006a0c:	f000 fb0c 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FSCAL3_ADDR, SMARTRF_SETTING_FSCAL3);
 8006a10:	21e9      	movs	r1, #233	; 0xe9
 8006a12:	2023      	movs	r0, #35	; 0x23
 8006a14:	f000 fb08 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FSCAL2_ADDR, SMARTRF_SETTING_FSCAL2);
 8006a18:	212a      	movs	r1, #42	; 0x2a
 8006a1a:	2024      	movs	r0, #36	; 0x24
 8006a1c:	f000 fb04 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FSCAL1_ADDR, SMARTRF_SETTING_FSCAL1);
 8006a20:	2100      	movs	r1, #0
 8006a22:	2025      	movs	r0, #37	; 0x25
 8006a24:	f000 fb00 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_FSCAL0_ADDR, SMARTRF_SETTING_FSCAL0);
 8006a28:	211f      	movs	r1, #31
 8006a2a:	2026      	movs	r0, #38	; 0x26
 8006a2c:	f000 fafc 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_TEST2_ADDR, SMARTRF_SETTING_TEST2);
 8006a30:	2181      	movs	r1, #129	; 0x81
 8006a32:	202c      	movs	r0, #44	; 0x2c
 8006a34:	f000 faf8 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_TEST1_ADDR, SMARTRF_SETTING_TEST1);
 8006a38:	2135      	movs	r1, #53	; 0x35
 8006a3a:	202d      	movs	r0, #45	; 0x2d
 8006a3c:	f000 faf4 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_TEST0_ADDR, SMARTRF_SETTING_TEST0);
 8006a40:	2109      	movs	r1, #9
 8006a42:	202e      	movs	r0, #46	; 0x2e
 8006a44:	f000 faf0 	bl	8007028 <cc110_writeRegister>
        cc110_writeRegister(CC110_PATABLE_ADDR, POWER_m30DBM);
 8006a48:	2103      	movs	r1, #3
 8006a4a:	203e      	movs	r0, #62	; 0x3e
 8006a4c:	f000 faec 	bl	8007028 <cc110_writeRegister>

        cc110_dumpRegisters();
 8006a50:	f000 fb24 	bl	800709c <cc110_dumpRegisters>
        cc110_txRxStatus = CC110_TXRX_BUSY;
 8006a54:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <cc110_init+0x138>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]

        // Re-init the timer that takes care of reading/writing to/from the FIFOs
        HAL_TIM_Base_MspInit(&htim10);
 8006a5a:	4809      	ldr	r0, [pc, #36]	; (8006a80 <cc110_init+0x128>)
 8006a5c:	f001 ffd2 	bl	8008a04 <HAL_TIM_Base_MspInit>
 8006a60:	e007      	b.n	8006a72 <cc110_init+0x11a>

    }
    else
    {
        retval = CC110_FAIL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	71fb      	strb	r3, [r7, #7]
        log_warn("CC110 device not found/unable to reset");
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <cc110_init+0x13c>)
 8006a68:	22cb      	movs	r2, #203	; 0xcb
 8006a6a:	4908      	ldr	r1, [pc, #32]	; (8006a8c <cc110_init+0x134>)
 8006a6c:	2002      	movs	r0, #2
 8006a6e:	f001 f99b 	bl	8007da8 <log_event>
    }

    return (retval);
 8006a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20004240 	.word	0x20004240
 8006a84:	2000000c 	.word	0x2000000c
 8006a88:	08009ba0 	.word	0x08009ba0
 8006a8c:	08009bb0 	.word	0x08009bb0
 8006a90:	20000e70 	.word	0x20000e70
 8006a94:	08009bc0 	.word	0x08009bc0

08006a98 <cc110_printRssi>:
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
    }
}

void cc110_printRssi(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af02      	add	r7, sp, #8
#define RX_MSG_BYTES         10
    static uint8_t rx_msg[RX_MSG_BYTES];

    // Set Rx State
    cc110_txRxStatus = CC110_TXRX_RX;
 8006a9e:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <cc110_printRssi+0x58>)
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	701a      	strb	r2, [r3, #0]
    cc110_strobeCmd(CC110_SRX_ADDR);
 8006aa4:	2034      	movs	r0, #52	; 0x34
 8006aa6:	f000 fadf 	bl	8007068 <cc110_strobeCmd>

    // Grab latest status
    cc110_getStatus();
 8006aaa:	f000 fdb9 	bl	8007620 <cc110_getStatus>

    for (uint8_t i = 0; i<1; i++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	71fb      	strb	r3, [r7, #7]
 8006ab2:	e016      	b.n	8006ae2 <cc110_printRssi+0x4a>
    {
        cc110_readRxBuf(rx_msg, RX_MSG_BYTES);
 8006ab4:	210a      	movs	r1, #10
 8006ab6:	480f      	ldr	r0, [pc, #60]	; (8006af4 <cc110_printRssi+0x5c>)
 8006ab8:	f000 f93c 	bl	8006d34 <cc110_readRxBuf>
        log_info("RSSI: %d dBm, MSG Char: %x", cc110_rssiDbm, rx_msg[i]);
 8006abc:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <cc110_printRssi+0x60>)
 8006abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <cc110_printRssi+0x5c>)
 8006ac8:	5cd3      	ldrb	r3, [r2, r3]
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	9100      	str	r1, [sp, #0]
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <cc110_printRssi+0x64>)
 8006ad0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006ad4:	490a      	ldr	r1, [pc, #40]	; (8006b00 <cc110_printRssi+0x68>)
 8006ad6:	2003      	movs	r0, #3
 8006ad8:	f001 f966 	bl	8007da8 <log_event>
    for (uint8_t i = 0; i<1; i++)
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	71fb      	strb	r3, [r7, #7]
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0e5      	beq.n	8006ab4 <cc110_printRssi+0x1c>
    }
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000e70 	.word	0x20000e70
 8006af4:	20002f14 	.word	0x20002f14
 8006af8:	20000e6e 	.word	0x20000e6e
 8006afc:	08009c48 	.word	0x08009c48
 8006b00:	08009bb0 	.word	0x08009bb0

08006b04 <cc110_txrx>:
// This function should be called in a timer ISR that is set to trigger at a 33.784 kHz rate (~67.5 kbps OTA)
// TX/RX DMA Complete callback should reset the Spi_DmaTxRxComplete flag
// Every time this function is called the next available data from the tx buf will be transmitted and the
// last data received from the CC110 will be put into the rx buf
void cc110_txrx(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
    static uint8_t rx_bytes_avaiable_previous;
    static uint8_t rx_data_ready = 0;
    static uint8_t dma_index = 0;

    // Check for previous transfer complete
    if (Spi_DmaTxRxComplete != 1)
 8006b08:	4b72      	ldr	r3, [pc, #456]	; (8006cd4 <cc110_txrx+0x1d0>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d007      	beq.n	8006b22 <cc110_txrx+0x1e>
    {
        log_error("SPI DMA TxRx not complete!");
 8006b12:	4b71      	ldr	r3, [pc, #452]	; (8006cd8 <cc110_txrx+0x1d4>)
 8006b14:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8006b18:	4970      	ldr	r1, [pc, #448]	; (8006cdc <cc110_txrx+0x1d8>)
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	f001 f944 	bl	8007da8 <log_event>
                default:
                    rx_data_ready = 0;   // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
                    break;
            }
    }
}
 8006b20:	e0d6      	b.n	8006cd0 <cc110_txrx+0x1cc>
    else if (Spi_Busy != 0)
 8006b22:	4b6f      	ldr	r3, [pc, #444]	; (8006ce0 <cc110_txrx+0x1dc>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 80d1 	bne.w	8006cd0 <cc110_txrx+0x1cc>
        switch (cc110_txRxStatus)
 8006b2e:	4b6d      	ldr	r3, [pc, #436]	; (8006ce4 <cc110_txrx+0x1e0>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d008      	beq.n	8006b48 <cc110_txrx+0x44>
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d05b      	beq.n	8006bf2 <cc110_txrx+0xee>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f040 80c3 	bne.w	8006cc6 <cc110_txrx+0x1c2>
                    rx_data_ready = 0;   // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
 8006b40:	4b69      	ldr	r3, [pc, #420]	; (8006ce8 <cc110_txrx+0x1e4>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
                    break;
 8006b46:	e0c3      	b.n	8006cd0 <cc110_txrx+0x1cc>
                    rx_data_ready = 0;   // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
 8006b48:	4b67      	ldr	r3, [pc, #412]	; (8006ce8 <cc110_txrx+0x1e4>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	701a      	strb	r2, [r3, #0]
                    CC110_TXBYTES_DATA.data = cc110_burstReadRegister(CC110_TXBYTES_ADDR);
 8006b4e:	203a      	movs	r0, #58	; 0x3a
 8006b50:	f000 fa48 	bl	8006fe4 <cc110_burstReadRegister>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	4b64      	ldr	r3, [pc, #400]	; (8006cec <cc110_txrx+0x1e8>)
 8006b5a:	701a      	strb	r2, [r3, #0]
                    tx_bytes_free = CC110_FIFO_SIZE - CC110_TXBYTES_DATA.NUM_TXBYTES;
 8006b5c:	4b63      	ldr	r3, [pc, #396]	; (8006cec <cc110_txrx+0x1e8>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	4b60      	ldr	r3, [pc, #384]	; (8006cf0 <cc110_txrx+0x1ec>)
 8006b6e:	701a      	strb	r2, [r3, #0]
                    if (cc110_txBufStatus != CC110_BUF_EMPTY)
 8006b70:	4b60      	ldr	r3, [pc, #384]	; (8006cf4 <cc110_txrx+0x1f0>)
 8006b72:	f993 3000 	ldrsb.w	r3, [r3]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	f000 80a9 	beq.w	8006cce <cc110_txrx+0x1ca>
                        cc110_dmaBufTx[0] = CC110_BURST_WRITE | CC110_TXFIFO_ADDR;
 8006b7c:	4b5e      	ldr	r3, [pc, #376]	; (8006cf8 <cc110_txrx+0x1f4>)
 8006b7e:	227f      	movs	r2, #127	; 0x7f
 8006b80:	701a      	strb	r2, [r3, #0]
                        dma_index = 1;
 8006b82:	4b5e      	ldr	r3, [pc, #376]	; (8006cfc <cc110_txrx+0x1f8>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
                        while ((cc110_txBufReadIndex != cc110_txBufWriteIndex) && (dma_index < tx_bytes_free))
 8006b88:	e015      	b.n	8006bb6 <cc110_txrx+0xb2>
                            cc110_dmaBufTx[dma_index] = cc110_txBuf[cc110_txBufReadIndex];
 8006b8a:	4b5d      	ldr	r3, [pc, #372]	; (8006d00 <cc110_txrx+0x1fc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a5b      	ldr	r2, [pc, #364]	; (8006cfc <cc110_txrx+0x1f8>)
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	4611      	mov	r1, r2
 8006b94:	4a5b      	ldr	r2, [pc, #364]	; (8006d04 <cc110_txrx+0x200>)
 8006b96:	5cd2      	ldrb	r2, [r2, r3]
 8006b98:	4b57      	ldr	r3, [pc, #348]	; (8006cf8 <cc110_txrx+0x1f4>)
 8006b9a:	545a      	strb	r2, [r3, r1]
                            cc110_txBufReadIndex = (cc110_txBufReadIndex + 1) % CC110_TXRX_BUF_SIZE;
 8006b9c:	4b58      	ldr	r3, [pc, #352]	; (8006d00 <cc110_txrx+0x1fc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba6:	4a56      	ldr	r2, [pc, #344]	; (8006d00 <cc110_txrx+0x1fc>)
 8006ba8:	6013      	str	r3, [r2, #0]
                            dma_index++;
 8006baa:	4b54      	ldr	r3, [pc, #336]	; (8006cfc <cc110_txrx+0x1f8>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	4b52      	ldr	r3, [pc, #328]	; (8006cfc <cc110_txrx+0x1f8>)
 8006bb4:	701a      	strb	r2, [r3, #0]
                        while ((cc110_txBufReadIndex != cc110_txBufWriteIndex) && (dma_index < tx_bytes_free))
 8006bb6:	4b52      	ldr	r3, [pc, #328]	; (8006d00 <cc110_txrx+0x1fc>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b53      	ldr	r3, [pc, #332]	; (8006d08 <cc110_txrx+0x204>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d005      	beq.n	8006bce <cc110_txrx+0xca>
 8006bc2:	4b4e      	ldr	r3, [pc, #312]	; (8006cfc <cc110_txrx+0x1f8>)
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <cc110_txrx+0x1ec>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d3dd      	bcc.n	8006b8a <cc110_txrx+0x86>
                        if (cc110_txBufReadIndex == cc110_txBufWriteIndex)
 8006bce:	4b4c      	ldr	r3, [pc, #304]	; (8006d00 <cc110_txrx+0x1fc>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b4d      	ldr	r3, [pc, #308]	; (8006d08 <cc110_txrx+0x204>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d102      	bne.n	8006be0 <cc110_txrx+0xdc>
                            cc110_txBufStatus = CC110_BUF_EMPTY;
 8006bda:	4b46      	ldr	r3, [pc, #280]	; (8006cf4 <cc110_txrx+0x1f0>)
 8006bdc:	2201      	movs	r2, #1
 8006bde:	701a      	strb	r2, [r3, #0]
                        HAL_SPI_TransmitReceive_DMA(&hspi2, cc110_dmaBufTx, cc110_dmaBufRx, dma_index);
 8006be0:	4b46      	ldr	r3, [pc, #280]	; (8006cfc <cc110_txrx+0x1f8>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4a49      	ldr	r2, [pc, #292]	; (8006d0c <cc110_txrx+0x208>)
 8006be8:	4943      	ldr	r1, [pc, #268]	; (8006cf8 <cc110_txrx+0x1f4>)
 8006bea:	4849      	ldr	r0, [pc, #292]	; (8006d10 <cc110_txrx+0x20c>)
 8006bec:	f7fb fcde 	bl	80025ac <HAL_SPI_TransmitReceive_DMA>
                    break;
 8006bf0:	e06d      	b.n	8006cce <cc110_txrx+0x1ca>
                    rx_bytes_avaiable_previous = rx_bytes_avaiable;
 8006bf2:	4b48      	ldr	r3, [pc, #288]	; (8006d14 <cc110_txrx+0x210>)
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	4b48      	ldr	r3, [pc, #288]	; (8006d18 <cc110_txrx+0x214>)
 8006bf8:	701a      	strb	r2, [r3, #0]
                    CC110_RXBYTES_DATA.data = cc110_burstReadRegister(CC110_RXBYTES_ADDR);
 8006bfa:	203b      	movs	r0, #59	; 0x3b
 8006bfc:	f000 f9f2 	bl	8006fe4 <cc110_burstReadRegister>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	4b45      	ldr	r3, [pc, #276]	; (8006d1c <cc110_txrx+0x218>)
 8006c06:	701a      	strb	r2, [r3, #0]
                    rx_bytes_avaiable = CC110_RXBYTES_DATA.NUM_RXBYTES;
 8006c08:	4b44      	ldr	r3, [pc, #272]	; (8006d1c <cc110_txrx+0x218>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	4b3f      	ldr	r3, [pc, #252]	; (8006d14 <cc110_txrx+0x210>)
 8006c16:	701a      	strb	r2, [r3, #0]
                    if (rx_data_ready == 1)
 8006c18:	4b33      	ldr	r3, [pc, #204]	; (8006ce8 <cc110_txrx+0x1e4>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d144      	bne.n	8006caa <cc110_txrx+0x1a6>
                        cc110_dmaBufTx[0] = CC110_BURST_READ | CC110_RXFIFO_ADDR;
 8006c20:	4b35      	ldr	r3, [pc, #212]	; (8006cf8 <cc110_txrx+0x1f4>)
 8006c22:	22ff      	movs	r2, #255	; 0xff
 8006c24:	701a      	strb	r2, [r3, #0]
                        dma_index = 1;
 8006c26:	4b35      	ldr	r3, [pc, #212]	; (8006cfc <cc110_txrx+0x1f8>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	701a      	strb	r2, [r3, #0]
                        if (cc110_rxBufWriteIndex == ((cc110_rxBufReadIndex - 1 + CC110_TXRX_BUF_SIZE) % CC110_TXRX_BUF_SIZE))
 8006c2c:	4b3c      	ldr	r3, [pc, #240]	; (8006d20 <cc110_txrx+0x21c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006c34:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006c38:	4b3a      	ldr	r3, [pc, #232]	; (8006d24 <cc110_txrx+0x220>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d103      	bne.n	8006c48 <cc110_txrx+0x144>
                            cc110_rxBufStatus = CC110_BUF_FULL;
 8006c40:	4b39      	ldr	r3, [pc, #228]	; (8006d28 <cc110_txrx+0x224>)
 8006c42:	22ff      	movs	r2, #255	; 0xff
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e033      	b.n	8006cb0 <cc110_txrx+0x1ac>
                            cc110_rxBufStatus = CC110_BUF_OK;
 8006c48:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <cc110_txrx+0x224>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
                            cc110_rxBufWriteLock = CC110_BUF_WRITE_BUSY;
 8006c4e:	4b37      	ldr	r3, [pc, #220]	; (8006d2c <cc110_txrx+0x228>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
                            while ((cc110_rxBufWriteIndex != ((cc110_rxBufReadIndex - 1 + CC110_TXRX_BUF_SIZE) % CC110_TXRX_BUF_SIZE)) && (dma_index < rx_bytes_avaiable_previous))
 8006c54:	e015      	b.n	8006c82 <cc110_txrx+0x17e>
                                cc110_rxBuf[cc110_rxBufWriteIndex] = cc110_dmaBufRx[dma_index];
 8006c56:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <cc110_txrx+0x1f8>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4b31      	ldr	r3, [pc, #196]	; (8006d24 <cc110_txrx+0x220>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <cc110_txrx+0x208>)
 8006c62:	5c51      	ldrb	r1, [r2, r1]
 8006c64:	4a32      	ldr	r2, [pc, #200]	; (8006d30 <cc110_txrx+0x22c>)
 8006c66:	54d1      	strb	r1, [r2, r3]
                                dma_index++;
 8006c68:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <cc110_txrx+0x1f8>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <cc110_txrx+0x1f8>)
 8006c72:	701a      	strb	r2, [r3, #0]
                                cc110_rxBufWriteIndex = (cc110_rxBufWriteIndex + 1) % CC110_TXRX_BUF_SIZE;
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <cc110_txrx+0x220>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c7e:	4a29      	ldr	r2, [pc, #164]	; (8006d24 <cc110_txrx+0x220>)
 8006c80:	6013      	str	r3, [r2, #0]
                            while ((cc110_rxBufWriteIndex != ((cc110_rxBufReadIndex - 1 + CC110_TXRX_BUF_SIZE) % CC110_TXRX_BUF_SIZE)) && (dma_index < rx_bytes_avaiable_previous))
 8006c82:	4b27      	ldr	r3, [pc, #156]	; (8006d20 <cc110_txrx+0x21c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006c8a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006c8e:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <cc110_txrx+0x220>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d005      	beq.n	8006ca2 <cc110_txrx+0x19e>
 8006c96:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <cc110_txrx+0x1f8>)
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <cc110_txrx+0x214>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d3d9      	bcc.n	8006c56 <cc110_txrx+0x152>
                            cc110_rxBufWriteLock = CC110_BUF_WRITE_FREE;
 8006ca2:	4b22      	ldr	r3, [pc, #136]	; (8006d2c <cc110_txrx+0x228>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	e002      	b.n	8006cb0 <cc110_txrx+0x1ac>
                        rx_data_ready = 1;       // Reset flag for data ready
 8006caa:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <cc110_txrx+0x1e4>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]
                    HAL_SPI_TransmitReceive_DMA(&hspi2, cc110_dmaBufTx, cc110_dmaBufRx, rx_bytes_avaiable + 1);
 8006cb0:	4b18      	ldr	r3, [pc, #96]	; (8006d14 <cc110_txrx+0x210>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4a14      	ldr	r2, [pc, #80]	; (8006d0c <cc110_txrx+0x208>)
 8006cbc:	490e      	ldr	r1, [pc, #56]	; (8006cf8 <cc110_txrx+0x1f4>)
 8006cbe:	4814      	ldr	r0, [pc, #80]	; (8006d10 <cc110_txrx+0x20c>)
 8006cc0:	f7fb fc74 	bl	80025ac <HAL_SPI_TransmitReceive_DMA>
                    break;
 8006cc4:	e004      	b.n	8006cd0 <cc110_txrx+0x1cc>
                    rx_data_ready = 0;   // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
 8006cc6:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <cc110_txrx+0x1e4>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
                    break;
 8006ccc:	e000      	b.n	8006cd0 <cc110_txrx+0x1cc>
                    break;
 8006cce:	bf00      	nop
}
 8006cd0:	bf00      	nop
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000031 	.word	0x20000031
 8006cd8:	08009c64 	.word	0x08009c64
 8006cdc:	08009bb0 	.word	0x08009bb0
 8006ce0:	20004030 	.word	0x20004030
 8006ce4:	20000e70 	.word	0x20000e70
 8006ce8:	20002f1e 	.word	0x20002f1e
 8006cec:	20000dcc 	.word	0x20000dcc
 8006cf0:	20002f1f 	.word	0x20002f1f
 8006cf4:	2000000d 	.word	0x2000000d
 8006cf8:	20000e74 	.word	0x20000e74
 8006cfc:	20002f20 	.word	0x20002f20
 8006d00:	20001efc 	.word	0x20001efc
 8006d04:	20000efc 	.word	0x20000efc
 8006d08:	20001f00 	.word	0x20001f00
 8006d0c:	20000eb8 	.word	0x20000eb8
 8006d10:	200040e8 	.word	0x200040e8
 8006d14:	20002f21 	.word	0x20002f21
 8006d18:	20002f22 	.word	0x20002f22
 8006d1c:	20000dd0 	.word	0x20000dd0
 8006d20:	20002f04 	.word	0x20002f04
 8006d24:	20002f08 	.word	0x20002f08
 8006d28:	2000000e 	.word	0x2000000e
 8006d2c:	20002f0c 	.word	0x20002f0c
 8006d30:	20001f04 	.word	0x20001f04

08006d34 <cc110_readRxBuf>:
        cc110_txBufWriteLock = CC110_BUF_WRITE_FREE;
    }
}

void cc110_readRxBuf(uint8_t* rxData, uint16_t len)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	81fb      	strh	r3, [r7, #14]

    // Check if Rx buf is empty
    if (cc110_rxBufStatus != CC110_BUF_EMPTY)
 8006d44:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <cc110_readRxBuf+0x80>)
 8006d46:	f993 3000 	ldrsb.w	r3, [r3]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d026      	beq.n	8006d9c <cc110_readRxBuf+0x68>
    {
        // Copy as much data as possible to DMA buffer (bytes free in tx buffer or until tx buf is empty)
        while ((cc110_rxBufReadIndex != cc110_rxBufWriteIndex) && (index < len))
 8006d4e:	e011      	b.n	8006d74 <cc110_readRxBuf+0x40>
        {
            rxData[index] = cc110_rxBuf[cc110_rxBufReadIndex];
 8006d50:	4b19      	ldr	r3, [pc, #100]	; (8006db8 <cc110_readRxBuf+0x84>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	89fb      	ldrh	r3, [r7, #14]
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	440b      	add	r3, r1
 8006d5a:	4918      	ldr	r1, [pc, #96]	; (8006dbc <cc110_readRxBuf+0x88>)
 8006d5c:	5c8a      	ldrb	r2, [r1, r2]
 8006d5e:	701a      	strb	r2, [r3, #0]
            cc110_rxBufReadIndex = (cc110_rxBufReadIndex + 1) % CC110_TXRX_BUF_SIZE;
 8006d60:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <cc110_readRxBuf+0x84>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d6a:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <cc110_readRxBuf+0x84>)
 8006d6c:	6013      	str	r3, [r2, #0]
            index++;
 8006d6e:	89fb      	ldrh	r3, [r7, #14]
 8006d70:	3301      	adds	r3, #1
 8006d72:	81fb      	strh	r3, [r7, #14]
        while ((cc110_rxBufReadIndex != cc110_rxBufWriteIndex) && (index < len))
 8006d74:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <cc110_readRxBuf+0x84>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <cc110_readRxBuf+0x8c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d003      	beq.n	8006d88 <cc110_readRxBuf+0x54>
 8006d80:	89fa      	ldrh	r2, [r7, #14]
 8006d82:	887b      	ldrh	r3, [r7, #2]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d3e3      	bcc.n	8006d50 <cc110_readRxBuf+0x1c>
        }

        // Update buffer status if we emptied the whole buffer
        if (cc110_txBufReadIndex == cc110_txBufWriteIndex)
 8006d88:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <cc110_readRxBuf+0x90>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <cc110_readRxBuf+0x94>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d10a      	bne.n	8006daa <cc110_readRxBuf+0x76>
        {
            cc110_txBufStatus = CC110_BUF_EMPTY;
 8006d94:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <cc110_readRxBuf+0x98>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        log_warn("Read attempted on CC110 rxBuf when empty");
    }
}
 8006d9a:	e006      	b.n	8006daa <cc110_readRxBuf+0x76>
        log_warn("Read attempted on CC110 rxBuf when empty");
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <cc110_readRxBuf+0x9c>)
 8006d9e:	f240 12db 	movw	r2, #475	; 0x1db
 8006da2:	490c      	ldr	r1, [pc, #48]	; (8006dd4 <cc110_readRxBuf+0xa0>)
 8006da4:	2002      	movs	r0, #2
 8006da6:	f000 ffff 	bl	8007da8 <log_event>
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	2000000e 	.word	0x2000000e
 8006db8:	20002f04 	.word	0x20002f04
 8006dbc:	20001f04 	.word	0x20001f04
 8006dc0:	20002f08 	.word	0x20002f08
 8006dc4:	20001efc 	.word	0x20001efc
 8006dc8:	20001f00 	.word	0x20001f00
 8006dcc:	2000000d 	.word	0x2000000d
 8006dd0:	08009cac 	.word	0x08009cac
 8006dd4:	08009bb0 	.word	0x08009bb0

08006dd8 <cc110_spi_xfer>:

/* Private function definitions ----------------------------------------------*/
static inline void cc110_spi_xfer(uint8_t* txData, uint8_t* rxData, uint16_t len)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
    Spi_start();
 8006de6:	f001 fbe5 	bl	80085b4 <Spi_start>
    HAL_SPI_TransmitReceive(&hspi2, txData, rxData, len, HAL_MAX_DELAY);
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	f04f 33ff 	mov.w	r3, #4294967295
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	4613      	mov	r3, r2
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	4804      	ldr	r0, [pc, #16]	; (8006e0c <cc110_spi_xfer+0x34>)
 8006dfa:	f7fb fa35 	bl	8002268 <HAL_SPI_TransmitReceive>
    Spi_stop();
 8006dfe:	f001 fbfd 	bl	80085fc <Spi_stop>
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200040e8 	.word	0x200040e8

08006e10 <cc110_reset>:

static int8_t cc110_reset(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
    // TODO: Fix retval stuff & make timeouts shorter
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e16:	463b      	mov	r3, r7
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	609a      	str	r2, [r3, #8]
 8006e20:	60da      	str	r2, [r3, #12]
 8006e22:	611a      	str	r2, [r3, #16]
    static const uint8_t timeoutMs = 10;
    static uint8_t timeMs = 0;
    int8_t retval = CC110_OK;
 8006e24:	2301      	movs	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]

    // De-init SPI, set SCK output, 1; MOSI output, 0; MISO input
    HAL_SPI_MspDeInit(&hspi2);
 8006e28:	4854      	ldr	r0, [pc, #336]	; (8006f7c <cc110_reset+0x16c>)
 8006e2a:	f001 fb91 	bl	8008550 <HAL_SPI_MspDeInit>

    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8006e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e32:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e34:	2301      	movs	r3, #1
 8006e36:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SPI2_SCK_Port, &GPIO_InitStruct);
 8006e40:	463b      	mov	r3, r7
 8006e42:	4619      	mov	r1, r3
 8006e44:	484e      	ldr	r0, [pc, #312]	; (8006f80 <cc110_reset+0x170>)
 8006e46:	f7fa f8ff 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SPI2_MOSI_Port, &GPIO_InitStruct);
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4849      	ldr	r0, [pc, #292]	; (8006f84 <cc110_reset+0x174>)
 8006e60:	f7fa f8f2 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin;
 8006e64:	2304      	movs	r3, #4
 8006e66:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(SPI2_MISO_Port, &GPIO_InitStruct);
 8006e70:	463b      	mov	r3, r7
 8006e72:	4619      	mov	r1, r3
 8006e74:	4843      	ldr	r0, [pc, #268]	; (8006f84 <cc110_reset+0x174>)
 8006e76:	f7fa f8e7 	bl	8001048 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(SPI2_SCK_Port, SPI2_SCK_Pin, GPIO_PIN_SET);
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e80:	483f      	ldr	r0, [pc, #252]	; (8006f80 <cc110_reset+0x170>)
 8006e82:	f7fa fb8d 	bl	80015a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006e86:	2001      	movs	r0, #1
 8006e88:	f7f9 fbbc 	bl	8000604 <HAL_Delay>
    HAL_GPIO_WritePin(SPI2_MOSI_Port, SPI2_MOSI_Pin, GPIO_PIN_RESET);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2108      	movs	r1, #8
 8006e90:	483c      	ldr	r0, [pc, #240]	; (8006f84 <cc110_reset+0x174>)
 8006e92:	f7fa fb85 	bl	80015a0 <HAL_GPIO_WritePin>

    // Strobe CSn Low/High, Hold CSn High for min 40 usec
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8006e96:	2200      	movs	r2, #0
 8006e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e9c:	4838      	ldr	r0, [pc, #224]	; (8006f80 <cc110_reset+0x170>)
 8006e9e:	f7fa fb7f 	bl	80015a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	f7f9 fbae 	bl	8000604 <HAL_Delay>
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006eae:	4834      	ldr	r0, [pc, #208]	; (8006f80 <cc110_reset+0x170>)
 8006eb0:	f7fa fb76 	bl	80015a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	f7f9 fba5 	bl	8000604 <HAL_Delay>

    // Pull CSn Low and wait for MISO to go low
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ec0:	482f      	ldr	r0, [pc, #188]	; (8006f80 <cc110_reset+0x170>)
 8006ec2:	f7fa fb6d 	bl	80015a0 <HAL_GPIO_WritePin>
    while ((HAL_GPIO_ReadPin(SPI2_MISO_Port, SPI2_MISO_Pin) != GPIO_PIN_RESET) && (timeMs < timeoutMs))
 8006ec6:	e008      	b.n	8006eda <cc110_reset+0xca>
    {
        HAL_Delay(1);
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f7f9 fb9b 	bl	8000604 <HAL_Delay>
        timeMs++;
 8006ece:	4b2e      	ldr	r3, [pc, #184]	; (8006f88 <cc110_reset+0x178>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	4b2c      	ldr	r3, [pc, #176]	; (8006f88 <cc110_reset+0x178>)
 8006ed8:	701a      	strb	r2, [r3, #0]
    while ((HAL_GPIO_ReadPin(SPI2_MISO_Port, SPI2_MISO_Pin) != GPIO_PIN_RESET) && (timeMs < timeoutMs))
 8006eda:	2104      	movs	r1, #4
 8006edc:	4829      	ldr	r0, [pc, #164]	; (8006f84 <cc110_reset+0x174>)
 8006ede:	f7fa fb47 	bl	8001570 <HAL_GPIO_ReadPin>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <cc110_reset+0xe4>
 8006ee8:	4b27      	ldr	r3, [pc, #156]	; (8006f88 <cc110_reset+0x178>)
 8006eea:	781a      	ldrb	r2, [r3, #0]
 8006eec:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <cc110_reset+0x17c>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d3e9      	bcc.n	8006ec8 <cc110_reset+0xb8>
    }
    if (timeMs >= timeoutMs)
 8006ef4:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <cc110_reset+0x178>)
 8006ef6:	781a      	ldrb	r2, [r3, #0]
 8006ef8:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <cc110_reset+0x17c>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d308      	bcc.n	8006f12 <cc110_reset+0x102>
    {
        retval = CC110_FAIL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	75fb      	strb	r3, [r7, #23]
        log_warn("Timed out waiting for MISO to go low");
 8006f04:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <cc110_reset+0x180>)
 8006f06:	f240 2217 	movw	r2, #535	; 0x217
 8006f0a:	4922      	ldr	r1, [pc, #136]	; (8006f94 <cc110_reset+0x184>)
 8006f0c:	2002      	movs	r0, #2
 8006f0e:	f000 ff4b 	bl	8007da8 <log_event>
    }

    // Re-init SPI
    HAL_SPI_MspInit(&hspi2);
 8006f12:	481a      	ldr	r0, [pc, #104]	; (8006f7c <cc110_reset+0x16c>)
 8006f14:	f001 fa46 	bl	80083a4 <HAL_SPI_MspInit>

    // Issues SRES strobe
    cc110_strobeCmd(CC110_SRES_ADDR);
 8006f18:	2030      	movs	r0, #48	; 0x30
 8006f1a:	f000 f8a5 	bl	8007068 <cc110_strobeCmd>

    // Poll for CC110 status via NOP strobes until Status == 0x0F
    timeMs = 0;
 8006f1e:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <cc110_reset+0x178>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
    while ((CC110_STATUS_DATA.data != 0x0F) && (timeMs < timeoutMs))
 8006f24:	e00b      	b.n	8006f3e <cc110_reset+0x12e>
    {
        cc110_strobeCmd(CC110_SNOP_ADDR);
 8006f26:	203d      	movs	r0, #61	; 0x3d
 8006f28:	f000 f89e 	bl	8007068 <cc110_strobeCmd>
        HAL_Delay(1);
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	f7f9 fb69 	bl	8000604 <HAL_Delay>
        timeMs++;
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <cc110_reset+0x178>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	3301      	adds	r3, #1
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <cc110_reset+0x178>)
 8006f3c:	701a      	strb	r2, [r3, #0]
    while ((CC110_STATUS_DATA.data != 0x0F) && (timeMs < timeoutMs))
 8006f3e:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <cc110_reset+0x188>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b0f      	cmp	r3, #15
 8006f44:	d005      	beq.n	8006f52 <cc110_reset+0x142>
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <cc110_reset+0x178>)
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <cc110_reset+0x17c>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d3e9      	bcc.n	8006f26 <cc110_reset+0x116>
    }

    if (timeMs >= timeoutMs)
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <cc110_reset+0x178>)
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <cc110_reset+0x17c>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d308      	bcc.n	8006f70 <cc110_reset+0x160>
    {
        retval = CC110_FAIL;;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
        log_warn("Timed out waiting for STATUS == 0x0F");
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <cc110_reset+0x18c>)
 8006f64:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8006f68:	490a      	ldr	r1, [pc, #40]	; (8006f94 <cc110_reset+0x184>)
 8006f6a:	2002      	movs	r0, #2
 8006f6c:	f000 ff1c 	bl	8007da8 <log_event>
    }

    return (retval);
 8006f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200040e8 	.word	0x200040e8
 8006f80:	40020400 	.word	0x40020400
 8006f84:	40020800 	.word	0x40020800
 8006f88:	20002f23 	.word	0x20002f23
 8006f8c:	0800a450 	.word	0x0800a450
 8006f90:	08009cd8 	.word	0x08009cd8
 8006f94:	08009bb0 	.word	0x08009bb0
 8006f98:	20000dac 	.word	0x20000dac
 8006f9c:	08009d00 	.word	0x08009d00

08006fa0 <cc110_readRegister>:

static inline uint8_t cc110_readRegister(uint8_t addr)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
    uint8_t tx_buf[2] = {
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	733b      	strb	r3, [r7, #12]
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	737b      	strb	r3, [r7, #13]
            CC110_BYTE_READ | addr,
            tmp };
    uint8_t rx_buf[2] = { 0 };
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	813b      	strh	r3, [r7, #8]

    cc110_spi_xfer(tx_buf, rx_buf, 2);
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	f107 030c 	add.w	r3, r7, #12
 8006fc8:	2202      	movs	r2, #2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff ff04 	bl	8006dd8 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8006fd0:	7a3a      	ldrb	r2, [r7, #8]
 8006fd2:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <cc110_readRegister+0x40>)
 8006fd4:	701a      	strb	r2, [r3, #0]
    return (rx_buf[1]);
 8006fd6:	7a7b      	ldrb	r3, [r7, #9]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000dac 	.word	0x20000dac

08006fe4 <cc110_burstReadRegister>:

static inline uint8_t cc110_burstReadRegister(uint8_t addr)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
    uint8_t tx_buf[2] = {
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	733b      	strb	r3, [r7, #12]
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	737b      	strb	r3, [r7, #13]
            CC110_BURST_READ | addr,
            tmp };
    uint8_t rx_buf[2] = { 0 };
 8007000:	2300      	movs	r3, #0
 8007002:	813b      	strh	r3, [r7, #8]

    cc110_spi_xfer(tx_buf, rx_buf, 2);
 8007004:	f107 0108 	add.w	r1, r7, #8
 8007008:	f107 030c 	add.w	r3, r7, #12
 800700c:	2202      	movs	r2, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff fee2 	bl	8006dd8 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8007014:	7a3a      	ldrb	r2, [r7, #8]
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <cc110_burstReadRegister+0x40>)
 8007018:	701a      	strb	r2, [r3, #0]
    return (rx_buf[1]);
 800701a:	7a7b      	ldrb	r3, [r7, #9]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000dac 	.word	0x20000dac

08007028 <cc110_writeRegister>:

static inline void cc110_writeRegister(uint8_t addr, uint8_t data)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	460a      	mov	r2, r1
 8007032:	71fb      	strb	r3, [r7, #7]
 8007034:	4613      	mov	r3, r2
 8007036:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[2] = {CC110_BYTE_WRITE | addr, data};
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	733b      	strb	r3, [r7, #12]
 800703c:	79bb      	ldrb	r3, [r7, #6]
 800703e:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf[2] = { 0 };
 8007040:	2300      	movs	r3, #0
 8007042:	813b      	strh	r3, [r7, #8]

    cc110_spi_xfer(tx_buf, rx_buf, 2);
 8007044:	f107 0108 	add.w	r1, r7, #8
 8007048:	f107 030c 	add.w	r3, r7, #12
 800704c:	2202      	movs	r2, #2
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff fec2 	bl	8006dd8 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8007054:	7a3a      	ldrb	r2, [r7, #8]
 8007056:	4b03      	ldr	r3, [pc, #12]	; (8007064 <cc110_writeRegister+0x3c>)
 8007058:	701a      	strb	r2, [r3, #0]
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000dac 	.word	0x20000dac

08007068 <cc110_strobeCmd>:
    cc110_spi_xfer(tx_buf, rx_buf, len + 1);
    CC110_STATUS_DATA.data = rx_buf[0];
}

static inline void cc110_strobeCmd(uint8_t cmd)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	71fb      	strb	r3, [r7, #7]
    static uint8_t rx_buf[1];
    cmd = cmd | CC110_BYTE_WRITE;
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	71fb      	strb	r3, [r7, #7]
    cc110_spi_xfer(&cmd, rx_buf, 1);
 8007076:	1dfb      	adds	r3, r7, #7
 8007078:	2201      	movs	r2, #1
 800707a:	4906      	ldr	r1, [pc, #24]	; (8007094 <cc110_strobeCmd+0x2c>)
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff feab 	bl	8006dd8 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8007082:	4b04      	ldr	r3, [pc, #16]	; (8007094 <cc110_strobeCmd+0x2c>)
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	4b04      	ldr	r3, [pc, #16]	; (8007098 <cc110_strobeCmd+0x30>)
 8007088:	701a      	strb	r2, [r3, #0]
}
 800708a:	bf00      	nop
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20002f10 	.word	0x20002f10
 8007098:	20000dac 	.word	0x20000dac

0800709c <cc110_dumpRegisters>:

static void cc110_dumpRegisters(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af02      	add	r7, sp, #8
    cc110_getStatus();
 80070a2:	f000 fabd 	bl	8007620 <cc110_getStatus>
    cc110_getConfig();
 80070a6:	f000 fb2f 	bl	8007708 <cc110_getConfig>

    // Dump status registers
    log_info("=== CC110 STATUS REGISTERS ===");
 80070aa:	4baa      	ldr	r3, [pc, #680]	; (8007354 <cc110_dumpRegisters+0x2b8>)
 80070ac:	f240 2271 	movw	r2, #625	; 0x271
 80070b0:	49a9      	ldr	r1, [pc, #676]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80070b2:	2003      	movs	r0, #3
 80070b4:	f000 fe78 	bl	8007da8 <log_event>
    log_info("CC110_PARTNUM_DATA: %02x", CC110_PARTNUM_DATA.data);
 80070b8:	4ba8      	ldr	r3, [pc, #672]	; (800735c <cc110_dumpRegisters+0x2c0>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	4ba8      	ldr	r3, [pc, #672]	; (8007360 <cc110_dumpRegisters+0x2c4>)
 80070c0:	f240 2272 	movw	r2, #626	; 0x272
 80070c4:	49a4      	ldr	r1, [pc, #656]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80070c6:	2003      	movs	r0, #3
 80070c8:	f000 fe6e 	bl	8007da8 <log_event>
    log_info("CC110_VERSION_DATA: %02x", CC110_VERSION_DATA.data);
 80070cc:	4ba5      	ldr	r3, [pc, #660]	; (8007364 <cc110_dumpRegisters+0x2c8>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	4ba5      	ldr	r3, [pc, #660]	; (8007368 <cc110_dumpRegisters+0x2cc>)
 80070d4:	f240 2273 	movw	r2, #627	; 0x273
 80070d8:	499f      	ldr	r1, [pc, #636]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80070da:	2003      	movs	r0, #3
 80070dc:	f000 fe64 	bl	8007da8 <log_event>
    log_info("CC110_FREQEST_DATA: %02x", CC110_FREQEST_DATA.data);
 80070e0:	4ba2      	ldr	r3, [pc, #648]	; (800736c <cc110_dumpRegisters+0x2d0>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4ba2      	ldr	r3, [pc, #648]	; (8007370 <cc110_dumpRegisters+0x2d4>)
 80070e8:	f44f 721d 	mov.w	r2, #628	; 0x274
 80070ec:	499a      	ldr	r1, [pc, #616]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80070ee:	2003      	movs	r0, #3
 80070f0:	f000 fe5a 	bl	8007da8 <log_event>
    log_info("CC110_CRCOK_DATA: %02x", CC110_CRCOK_DATA.data);
 80070f4:	4b9f      	ldr	r3, [pc, #636]	; (8007374 <cc110_dumpRegisters+0x2d8>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	4b9f      	ldr	r3, [pc, #636]	; (8007378 <cc110_dumpRegisters+0x2dc>)
 80070fc:	f240 2275 	movw	r2, #629	; 0x275
 8007100:	4995      	ldr	r1, [pc, #596]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007102:	2003      	movs	r0, #3
 8007104:	f000 fe50 	bl	8007da8 <log_event>
    log_info("CC110_RSSI_DATA: %02x", CC110_RSSI_DATA.data);
 8007108:	4b9c      	ldr	r3, [pc, #624]	; (800737c <cc110_dumpRegisters+0x2e0>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	4b9c      	ldr	r3, [pc, #624]	; (8007380 <cc110_dumpRegisters+0x2e4>)
 8007110:	f240 2276 	movw	r2, #630	; 0x276
 8007114:	4990      	ldr	r1, [pc, #576]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007116:	2003      	movs	r0, #3
 8007118:	f000 fe46 	bl	8007da8 <log_event>
    log_info("CC110_MARCSTATE_DATA: %02x", CC110_MARCSTATE_DATA.data);
 800711c:	4b99      	ldr	r3, [pc, #612]	; (8007384 <cc110_dumpRegisters+0x2e8>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4b99      	ldr	r3, [pc, #612]	; (8007388 <cc110_dumpRegisters+0x2ec>)
 8007124:	f240 2277 	movw	r2, #631	; 0x277
 8007128:	498b      	ldr	r1, [pc, #556]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 800712a:	2003      	movs	r0, #3
 800712c:	f000 fe3c 	bl	8007da8 <log_event>
    log_info("CC110_PKTSTATUS_DATA: %02x", CC110_PKTSTATUS_DATA.data);
 8007130:	4b96      	ldr	r3, [pc, #600]	; (800738c <cc110_dumpRegisters+0x2f0>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	4b96      	ldr	r3, [pc, #600]	; (8007390 <cc110_dumpRegisters+0x2f4>)
 8007138:	f44f 721e 	mov.w	r2, #632	; 0x278
 800713c:	4986      	ldr	r1, [pc, #536]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 800713e:	2003      	movs	r0, #3
 8007140:	f000 fe32 	bl	8007da8 <log_event>
    log_info("CC110_TXBYTES_DATA: %02x", CC110_TXBYTES_DATA.data);
 8007144:	4b93      	ldr	r3, [pc, #588]	; (8007394 <cc110_dumpRegisters+0x2f8>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4b93      	ldr	r3, [pc, #588]	; (8007398 <cc110_dumpRegisters+0x2fc>)
 800714c:	f240 2279 	movw	r2, #633	; 0x279
 8007150:	4981      	ldr	r1, [pc, #516]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007152:	2003      	movs	r0, #3
 8007154:	f000 fe28 	bl	8007da8 <log_event>
    log_info("CC110_RXBYTES_DATA: %02x", CC110_RXBYTES_DATA.data);
 8007158:	4b90      	ldr	r3, [pc, #576]	; (800739c <cc110_dumpRegisters+0x300>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4b90      	ldr	r3, [pc, #576]	; (80073a0 <cc110_dumpRegisters+0x304>)
 8007160:	f240 227a 	movw	r2, #634	; 0x27a
 8007164:	497c      	ldr	r1, [pc, #496]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007166:	2003      	movs	r0, #3
 8007168:	f000 fe1e 	bl	8007da8 <log_event>

    // Dump config registers
    log_info("=== CC110 CONFIG REGISTERS ===");
 800716c:	4b8d      	ldr	r3, [pc, #564]	; (80073a4 <cc110_dumpRegisters+0x308>)
 800716e:	f240 227d 	movw	r2, #637	; 0x27d
 8007172:	4979      	ldr	r1, [pc, #484]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007174:	2003      	movs	r0, #3
 8007176:	f000 fe17 	bl	8007da8 <log_event>
    log_info("CC110_IOCFG2_DATA: %02x", CC110_IOCFG2_DATA.data);
 800717a:	4b8b      	ldr	r3, [pc, #556]	; (80073a8 <cc110_dumpRegisters+0x30c>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <cc110_dumpRegisters+0x310>)
 8007182:	f240 227e 	movw	r2, #638	; 0x27e
 8007186:	4974      	ldr	r1, [pc, #464]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007188:	2003      	movs	r0, #3
 800718a:	f000 fe0d 	bl	8007da8 <log_event>
    log_info("CC110_IOCFG1_DATA: %02x", CC110_IOCFG1_DATA.data);
 800718e:	4b88      	ldr	r3, [pc, #544]	; (80073b0 <cc110_dumpRegisters+0x314>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	4b87      	ldr	r3, [pc, #540]	; (80073b4 <cc110_dumpRegisters+0x318>)
 8007196:	f240 227f 	movw	r2, #639	; 0x27f
 800719a:	496f      	ldr	r1, [pc, #444]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 800719c:	2003      	movs	r0, #3
 800719e:	f000 fe03 	bl	8007da8 <log_event>
    log_info("CC110_IOCFG0_DATA: %02x", CC110_IOCFG0_DATA.data);
 80071a2:	4b85      	ldr	r3, [pc, #532]	; (80073b8 <cc110_dumpRegisters+0x31c>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4b84      	ldr	r3, [pc, #528]	; (80073bc <cc110_dumpRegisters+0x320>)
 80071aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80071ae:	496a      	ldr	r1, [pc, #424]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80071b0:	2003      	movs	r0, #3
 80071b2:	f000 fdf9 	bl	8007da8 <log_event>
    log_info("CC110_FIFOTHR_DATA: %02x", CC110_FIFOTHR_DATA.data);
 80071b6:	4b82      	ldr	r3, [pc, #520]	; (80073c0 <cc110_dumpRegisters+0x324>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4b81      	ldr	r3, [pc, #516]	; (80073c4 <cc110_dumpRegisters+0x328>)
 80071be:	f240 2281 	movw	r2, #641	; 0x281
 80071c2:	4965      	ldr	r1, [pc, #404]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80071c4:	2003      	movs	r0, #3
 80071c6:	f000 fdef 	bl	8007da8 <log_event>
    log_info("CC110_SYNC1_DATA: %02x", CC110_SYNC1_DATA.data);
 80071ca:	4b7f      	ldr	r3, [pc, #508]	; (80073c8 <cc110_dumpRegisters+0x32c>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4b7e      	ldr	r3, [pc, #504]	; (80073cc <cc110_dumpRegisters+0x330>)
 80071d2:	f240 2282 	movw	r2, #642	; 0x282
 80071d6:	4960      	ldr	r1, [pc, #384]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80071d8:	2003      	movs	r0, #3
 80071da:	f000 fde5 	bl	8007da8 <log_event>
    log_info("CC110_SYNC2_DATA: %02x", CC110_SYNC2_DATA.data);
 80071de:	4b7c      	ldr	r3, [pc, #496]	; (80073d0 <cc110_dumpRegisters+0x334>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4b7b      	ldr	r3, [pc, #492]	; (80073d4 <cc110_dumpRegisters+0x338>)
 80071e6:	f240 2283 	movw	r2, #643	; 0x283
 80071ea:	495b      	ldr	r1, [pc, #364]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80071ec:	2003      	movs	r0, #3
 80071ee:	f000 fddb 	bl	8007da8 <log_event>
    log_info("CC110_PKTLEN_DATA: %02x", CC110_PKTLEN_DATA.data);
 80071f2:	4b79      	ldr	r3, [pc, #484]	; (80073d8 <cc110_dumpRegisters+0x33c>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4b78      	ldr	r3, [pc, #480]	; (80073dc <cc110_dumpRegisters+0x340>)
 80071fa:	f44f 7221 	mov.w	r2, #644	; 0x284
 80071fe:	4956      	ldr	r1, [pc, #344]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007200:	2003      	movs	r0, #3
 8007202:	f000 fdd1 	bl	8007da8 <log_event>
    log_info("CC110_PKTCTRL1_DATA: %02x", CC110_PKTCTRL1_DATA.data);
 8007206:	4b76      	ldr	r3, [pc, #472]	; (80073e0 <cc110_dumpRegisters+0x344>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4b75      	ldr	r3, [pc, #468]	; (80073e4 <cc110_dumpRegisters+0x348>)
 800720e:	f240 2285 	movw	r2, #645	; 0x285
 8007212:	4951      	ldr	r1, [pc, #324]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007214:	2003      	movs	r0, #3
 8007216:	f000 fdc7 	bl	8007da8 <log_event>
    log_info("CC110_PKTCTRL0_DATA: %02x", CC110_PKTCTRL0_DATA.data);
 800721a:	4b73      	ldr	r3, [pc, #460]	; (80073e8 <cc110_dumpRegisters+0x34c>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4b72      	ldr	r3, [pc, #456]	; (80073ec <cc110_dumpRegisters+0x350>)
 8007222:	f240 2286 	movw	r2, #646	; 0x286
 8007226:	494c      	ldr	r1, [pc, #304]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007228:	2003      	movs	r0, #3
 800722a:	f000 fdbd 	bl	8007da8 <log_event>
    log_info("CC110_ADDR_DATA: %02x", CC110_ADDR_DATA.data);
 800722e:	4b70      	ldr	r3, [pc, #448]	; (80073f0 <cc110_dumpRegisters+0x354>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4b6f      	ldr	r3, [pc, #444]	; (80073f4 <cc110_dumpRegisters+0x358>)
 8007236:	f240 2287 	movw	r2, #647	; 0x287
 800723a:	4947      	ldr	r1, [pc, #284]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 800723c:	2003      	movs	r0, #3
 800723e:	f000 fdb3 	bl	8007da8 <log_event>
    log_info("CC110_CHANNR_DATA: %02x", CC110_CHANNR_DATA.data);
 8007242:	4b6d      	ldr	r3, [pc, #436]	; (80073f8 <cc110_dumpRegisters+0x35c>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	4b6c      	ldr	r3, [pc, #432]	; (80073fc <cc110_dumpRegisters+0x360>)
 800724a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800724e:	4942      	ldr	r1, [pc, #264]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007250:	2003      	movs	r0, #3
 8007252:	f000 fda9 	bl	8007da8 <log_event>
    log_info("CC110_FSCTRL1_DATA: %02x", CC110_FSCTRL1_DATA.data);
 8007256:	4b6a      	ldr	r3, [pc, #424]	; (8007400 <cc110_dumpRegisters+0x364>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4b69      	ldr	r3, [pc, #420]	; (8007404 <cc110_dumpRegisters+0x368>)
 800725e:	f240 2289 	movw	r2, #649	; 0x289
 8007262:	493d      	ldr	r1, [pc, #244]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007264:	2003      	movs	r0, #3
 8007266:	f000 fd9f 	bl	8007da8 <log_event>
    log_info("CC110_FSCTRL0_DATA: %02x", CC110_FSCTRL0_DATA.data);
 800726a:	4b67      	ldr	r3, [pc, #412]	; (8007408 <cc110_dumpRegisters+0x36c>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	4b66      	ldr	r3, [pc, #408]	; (800740c <cc110_dumpRegisters+0x370>)
 8007272:	f240 228a 	movw	r2, #650	; 0x28a
 8007276:	4938      	ldr	r1, [pc, #224]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007278:	2003      	movs	r0, #3
 800727a:	f000 fd95 	bl	8007da8 <log_event>
    log_info("CC110_FREQ2_DATA: %02x", CC110_FREQ2_DATA.data);
 800727e:	4b64      	ldr	r3, [pc, #400]	; (8007410 <cc110_dumpRegisters+0x374>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4b63      	ldr	r3, [pc, #396]	; (8007414 <cc110_dumpRegisters+0x378>)
 8007286:	f240 228b 	movw	r2, #651	; 0x28b
 800728a:	4933      	ldr	r1, [pc, #204]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 800728c:	2003      	movs	r0, #3
 800728e:	f000 fd8b 	bl	8007da8 <log_event>
    log_info("CC110_FREQ1_DATA: %02x", CC110_FREQ1_DATA.data);
 8007292:	4b61      	ldr	r3, [pc, #388]	; (8007418 <cc110_dumpRegisters+0x37c>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4b60      	ldr	r3, [pc, #384]	; (800741c <cc110_dumpRegisters+0x380>)
 800729a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800729e:	492e      	ldr	r1, [pc, #184]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80072a0:	2003      	movs	r0, #3
 80072a2:	f000 fd81 	bl	8007da8 <log_event>
    log_info("CC110_FREQ0_DATA: %02x", CC110_FREQ0_DATA.data);
 80072a6:	4b5e      	ldr	r3, [pc, #376]	; (8007420 <cc110_dumpRegisters+0x384>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4b5d      	ldr	r3, [pc, #372]	; (8007424 <cc110_dumpRegisters+0x388>)
 80072ae:	f240 228d 	movw	r2, #653	; 0x28d
 80072b2:	4929      	ldr	r1, [pc, #164]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80072b4:	2003      	movs	r0, #3
 80072b6:	f000 fd77 	bl	8007da8 <log_event>
    log_info("CC110_MDMCFG4_DATA: %02x", CC110_MDMCFG4_DATA.data);
 80072ba:	4b5b      	ldr	r3, [pc, #364]	; (8007428 <cc110_dumpRegisters+0x38c>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4b5a      	ldr	r3, [pc, #360]	; (800742c <cc110_dumpRegisters+0x390>)
 80072c2:	f240 228e 	movw	r2, #654	; 0x28e
 80072c6:	4924      	ldr	r1, [pc, #144]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80072c8:	2003      	movs	r0, #3
 80072ca:	f000 fd6d 	bl	8007da8 <log_event>
    log_info("CC110_MDMCFG3_DATA: %02x", CC110_MDMCFG3_DATA.data);
 80072ce:	4b58      	ldr	r3, [pc, #352]	; (8007430 <cc110_dumpRegisters+0x394>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4b57      	ldr	r3, [pc, #348]	; (8007434 <cc110_dumpRegisters+0x398>)
 80072d6:	f240 228f 	movw	r2, #655	; 0x28f
 80072da:	491f      	ldr	r1, [pc, #124]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80072dc:	2003      	movs	r0, #3
 80072de:	f000 fd63 	bl	8007da8 <log_event>
    log_info("CC110_MDMCFG2_DATA: %02x", CC110_MDMCFG2_DATA.data);
 80072e2:	4b55      	ldr	r3, [pc, #340]	; (8007438 <cc110_dumpRegisters+0x39c>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4b54      	ldr	r3, [pc, #336]	; (800743c <cc110_dumpRegisters+0x3a0>)
 80072ea:	f44f 7224 	mov.w	r2, #656	; 0x290
 80072ee:	491a      	ldr	r1, [pc, #104]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 80072f0:	2003      	movs	r0, #3
 80072f2:	f000 fd59 	bl	8007da8 <log_event>
    log_info("CC110_MDMCFG1_DATA: %02x", CC110_MDMCFG1_DATA.data);
 80072f6:	4b52      	ldr	r3, [pc, #328]	; (8007440 <cc110_dumpRegisters+0x3a4>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4b51      	ldr	r3, [pc, #324]	; (8007444 <cc110_dumpRegisters+0x3a8>)
 80072fe:	f240 2291 	movw	r2, #657	; 0x291
 8007302:	4915      	ldr	r1, [pc, #84]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007304:	2003      	movs	r0, #3
 8007306:	f000 fd4f 	bl	8007da8 <log_event>
    log_info("CC110_MDMCFG0_DATA: %02x", CC110_MDMCFG0_DATA.data);
 800730a:	4b4f      	ldr	r3, [pc, #316]	; (8007448 <cc110_dumpRegisters+0x3ac>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	4b4e      	ldr	r3, [pc, #312]	; (800744c <cc110_dumpRegisters+0x3b0>)
 8007312:	f240 2292 	movw	r2, #658	; 0x292
 8007316:	4910      	ldr	r1, [pc, #64]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007318:	2003      	movs	r0, #3
 800731a:	f000 fd45 	bl	8007da8 <log_event>
    log_info("CC110_DEVIATN_DATA: %02x", CC110_DEVIATN_DATA.data);
 800731e:	4b4c      	ldr	r3, [pc, #304]	; (8007450 <cc110_dumpRegisters+0x3b4>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4b4b      	ldr	r3, [pc, #300]	; (8007454 <cc110_dumpRegisters+0x3b8>)
 8007326:	f240 2293 	movw	r2, #659	; 0x293
 800732a:	490b      	ldr	r1, [pc, #44]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 800732c:	2003      	movs	r0, #3
 800732e:	f000 fd3b 	bl	8007da8 <log_event>
    log_info("CC110_MCSM2_DATA: %02x", CC110_MCSM2_DATA.data);
 8007332:	4b49      	ldr	r3, [pc, #292]	; (8007458 <cc110_dumpRegisters+0x3bc>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	4b48      	ldr	r3, [pc, #288]	; (800745c <cc110_dumpRegisters+0x3c0>)
 800733a:	f44f 7225 	mov.w	r2, #660	; 0x294
 800733e:	4906      	ldr	r1, [pc, #24]	; (8007358 <cc110_dumpRegisters+0x2bc>)
 8007340:	2003      	movs	r0, #3
 8007342:	f000 fd31 	bl	8007da8 <log_event>
    log_info("CC110_MCSM1_DATA: %02x", CC110_MCSM1_DATA.data);
 8007346:	4b46      	ldr	r3, [pc, #280]	; (8007460 <cc110_dumpRegisters+0x3c4>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4b45      	ldr	r3, [pc, #276]	; (8007464 <cc110_dumpRegisters+0x3c8>)
 800734e:	f240 2295 	movw	r2, #661	; 0x295
 8007352:	e089      	b.n	8007468 <cc110_dumpRegisters+0x3cc>
 8007354:	08009d28 	.word	0x08009d28
 8007358:	08009bb0 	.word	0x08009bb0
 800735c:	20000db0 	.word	0x20000db0
 8007360:	08009d48 	.word	0x08009d48
 8007364:	20000db4 	.word	0x20000db4
 8007368:	08009d64 	.word	0x08009d64
 800736c:	20000db8 	.word	0x20000db8
 8007370:	08009d80 	.word	0x08009d80
 8007374:	20000dbc 	.word	0x20000dbc
 8007378:	08009d9c 	.word	0x08009d9c
 800737c:	20000dc0 	.word	0x20000dc0
 8007380:	08009db4 	.word	0x08009db4
 8007384:	20000dc4 	.word	0x20000dc4
 8007388:	08009dcc 	.word	0x08009dcc
 800738c:	20000dc8 	.word	0x20000dc8
 8007390:	08009de8 	.word	0x08009de8
 8007394:	20000dcc 	.word	0x20000dcc
 8007398:	08009e04 	.word	0x08009e04
 800739c:	20000dd0 	.word	0x20000dd0
 80073a0:	08009e20 	.word	0x08009e20
 80073a4:	08009e3c 	.word	0x08009e3c
 80073a8:	20000dd4 	.word	0x20000dd4
 80073ac:	08009e5c 	.word	0x08009e5c
 80073b0:	20000dd8 	.word	0x20000dd8
 80073b4:	08009e74 	.word	0x08009e74
 80073b8:	20000ddc 	.word	0x20000ddc
 80073bc:	08009e8c 	.word	0x08009e8c
 80073c0:	20000de0 	.word	0x20000de0
 80073c4:	08009ea4 	.word	0x08009ea4
 80073c8:	20000de4 	.word	0x20000de4
 80073cc:	08009ec0 	.word	0x08009ec0
 80073d0:	20000de8 	.word	0x20000de8
 80073d4:	08009ed8 	.word	0x08009ed8
 80073d8:	20000dec 	.word	0x20000dec
 80073dc:	08009ef0 	.word	0x08009ef0
 80073e0:	20000df0 	.word	0x20000df0
 80073e4:	08009f08 	.word	0x08009f08
 80073e8:	20000df4 	.word	0x20000df4
 80073ec:	08009f24 	.word	0x08009f24
 80073f0:	20000df8 	.word	0x20000df8
 80073f4:	08009f40 	.word	0x08009f40
 80073f8:	20000dfc 	.word	0x20000dfc
 80073fc:	08009f58 	.word	0x08009f58
 8007400:	20000e00 	.word	0x20000e00
 8007404:	08009f70 	.word	0x08009f70
 8007408:	20000e04 	.word	0x20000e04
 800740c:	08009f8c 	.word	0x08009f8c
 8007410:	20000e08 	.word	0x20000e08
 8007414:	08009fa8 	.word	0x08009fa8
 8007418:	20000e0c 	.word	0x20000e0c
 800741c:	08009fc0 	.word	0x08009fc0
 8007420:	20000e10 	.word	0x20000e10
 8007424:	08009fd8 	.word	0x08009fd8
 8007428:	20000e14 	.word	0x20000e14
 800742c:	08009ff0 	.word	0x08009ff0
 8007430:	20000e18 	.word	0x20000e18
 8007434:	0800a00c 	.word	0x0800a00c
 8007438:	20000e1c 	.word	0x20000e1c
 800743c:	0800a028 	.word	0x0800a028
 8007440:	20000e20 	.word	0x20000e20
 8007444:	0800a044 	.word	0x0800a044
 8007448:	20000e24 	.word	0x20000e24
 800744c:	0800a060 	.word	0x0800a060
 8007450:	20000e28 	.word	0x20000e28
 8007454:	0800a07c 	.word	0x0800a07c
 8007458:	20000e2c 	.word	0x20000e2c
 800745c:	0800a098 	.word	0x0800a098
 8007460:	20000e30 	.word	0x20000e30
 8007464:	0800a0b0 	.word	0x0800a0b0
 8007468:	494e      	ldr	r1, [pc, #312]	; (80075a4 <cc110_dumpRegisters+0x508>)
 800746a:	2003      	movs	r0, #3
 800746c:	f000 fc9c 	bl	8007da8 <log_event>
    log_info("CC110_MCSM0_DATA: %02x", CC110_MCSM0_DATA.data);
 8007470:	4b4d      	ldr	r3, [pc, #308]	; (80075a8 <cc110_dumpRegisters+0x50c>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4b4d      	ldr	r3, [pc, #308]	; (80075ac <cc110_dumpRegisters+0x510>)
 8007478:	f240 2296 	movw	r2, #662	; 0x296
 800747c:	4949      	ldr	r1, [pc, #292]	; (80075a4 <cc110_dumpRegisters+0x508>)
 800747e:	2003      	movs	r0, #3
 8007480:	f000 fc92 	bl	8007da8 <log_event>
    log_info("CC110_FOCCFG_DATA: %02x", CC110_FOCCFG_DATA.data);
 8007484:	4b4a      	ldr	r3, [pc, #296]	; (80075b0 <cc110_dumpRegisters+0x514>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	4b4a      	ldr	r3, [pc, #296]	; (80075b4 <cc110_dumpRegisters+0x518>)
 800748c:	f240 2297 	movw	r2, #663	; 0x297
 8007490:	4944      	ldr	r1, [pc, #272]	; (80075a4 <cc110_dumpRegisters+0x508>)
 8007492:	2003      	movs	r0, #3
 8007494:	f000 fc88 	bl	8007da8 <log_event>
    log_info("CC110_BSCFG_DATA: %02x", CC110_BSCFG_DATA.data);
 8007498:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <cc110_dumpRegisters+0x51c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4b47      	ldr	r3, [pc, #284]	; (80075bc <cc110_dumpRegisters+0x520>)
 80074a0:	f44f 7226 	mov.w	r2, #664	; 0x298
 80074a4:	493f      	ldr	r1, [pc, #252]	; (80075a4 <cc110_dumpRegisters+0x508>)
 80074a6:	2003      	movs	r0, #3
 80074a8:	f000 fc7e 	bl	8007da8 <log_event>
    log_info("CC110_AGCCTRL2_DATA: %02x", CC110_AGCCTRL2_DATA.data);
 80074ac:	4b44      	ldr	r3, [pc, #272]	; (80075c0 <cc110_dumpRegisters+0x524>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4b44      	ldr	r3, [pc, #272]	; (80075c4 <cc110_dumpRegisters+0x528>)
 80074b4:	f240 2299 	movw	r2, #665	; 0x299
 80074b8:	493a      	ldr	r1, [pc, #232]	; (80075a4 <cc110_dumpRegisters+0x508>)
 80074ba:	2003      	movs	r0, #3
 80074bc:	f000 fc74 	bl	8007da8 <log_event>
    log_info("CC110_AGCCTRL1_DATA: %02x", CC110_AGCCTRL1_DATA.data);
 80074c0:	4b41      	ldr	r3, [pc, #260]	; (80075c8 <cc110_dumpRegisters+0x52c>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	4b41      	ldr	r3, [pc, #260]	; (80075cc <cc110_dumpRegisters+0x530>)
 80074c8:	f240 229a 	movw	r2, #666	; 0x29a
 80074cc:	4935      	ldr	r1, [pc, #212]	; (80075a4 <cc110_dumpRegisters+0x508>)
 80074ce:	2003      	movs	r0, #3
 80074d0:	f000 fc6a 	bl	8007da8 <log_event>
    log_info("CC110_AGCCTRL0_DATA: %02x", CC110_AGCCTRL0_DATA.data);
 80074d4:	4b3e      	ldr	r3, [pc, #248]	; (80075d0 <cc110_dumpRegisters+0x534>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	4b3e      	ldr	r3, [pc, #248]	; (80075d4 <cc110_dumpRegisters+0x538>)
 80074dc:	f240 229b 	movw	r2, #667	; 0x29b
 80074e0:	4930      	ldr	r1, [pc, #192]	; (80075a4 <cc110_dumpRegisters+0x508>)
 80074e2:	2003      	movs	r0, #3
 80074e4:	f000 fc60 	bl	8007da8 <log_event>
    log_info("CC110_FREND1_DATA: %02x", CC110_FREND1_DATA.data);
 80074e8:	4b3b      	ldr	r3, [pc, #236]	; (80075d8 <cc110_dumpRegisters+0x53c>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4b3b      	ldr	r3, [pc, #236]	; (80075dc <cc110_dumpRegisters+0x540>)
 80074f0:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80074f4:	492b      	ldr	r1, [pc, #172]	; (80075a4 <cc110_dumpRegisters+0x508>)
 80074f6:	2003      	movs	r0, #3
 80074f8:	f000 fc56 	bl	8007da8 <log_event>
    log_info("CC110_FREND0_DATA: %02x", CC110_FREND0_DATA.data);
 80074fc:	4b38      	ldr	r3, [pc, #224]	; (80075e0 <cc110_dumpRegisters+0x544>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <cc110_dumpRegisters+0x548>)
 8007504:	f240 229d 	movw	r2, #669	; 0x29d
 8007508:	4926      	ldr	r1, [pc, #152]	; (80075a4 <cc110_dumpRegisters+0x508>)
 800750a:	2003      	movs	r0, #3
 800750c:	f000 fc4c 	bl	8007da8 <log_event>
    log_info("CC110_FSCAL3_DATA: %02x", CC110_FSCAL3_DATA.data);
 8007510:	4b35      	ldr	r3, [pc, #212]	; (80075e8 <cc110_dumpRegisters+0x54c>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4b35      	ldr	r3, [pc, #212]	; (80075ec <cc110_dumpRegisters+0x550>)
 8007518:	f240 229e 	movw	r2, #670	; 0x29e
 800751c:	4921      	ldr	r1, [pc, #132]	; (80075a4 <cc110_dumpRegisters+0x508>)
 800751e:	2003      	movs	r0, #3
 8007520:	f000 fc42 	bl	8007da8 <log_event>
    log_info("CC110_FSCAL2_DATA: %02x", CC110_FSCAL2_DATA.data);
 8007524:	4b32      	ldr	r3, [pc, #200]	; (80075f0 <cc110_dumpRegisters+0x554>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	4b32      	ldr	r3, [pc, #200]	; (80075f4 <cc110_dumpRegisters+0x558>)
 800752c:	f240 229f 	movw	r2, #671	; 0x29f
 8007530:	491c      	ldr	r1, [pc, #112]	; (80075a4 <cc110_dumpRegisters+0x508>)
 8007532:	2003      	movs	r0, #3
 8007534:	f000 fc38 	bl	8007da8 <log_event>
    log_info("CC110_FSCAL1_DATA: %02x", CC110_FSCAL1_DATA.data);
 8007538:	4b2f      	ldr	r3, [pc, #188]	; (80075f8 <cc110_dumpRegisters+0x55c>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	4b2f      	ldr	r3, [pc, #188]	; (80075fc <cc110_dumpRegisters+0x560>)
 8007540:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8007544:	4917      	ldr	r1, [pc, #92]	; (80075a4 <cc110_dumpRegisters+0x508>)
 8007546:	2003      	movs	r0, #3
 8007548:	f000 fc2e 	bl	8007da8 <log_event>
    log_info("CC110_FSCAL0_DATA: %02x", CC110_FSCAL0_DATA.data);
 800754c:	4b2c      	ldr	r3, [pc, #176]	; (8007600 <cc110_dumpRegisters+0x564>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	4b2c      	ldr	r3, [pc, #176]	; (8007604 <cc110_dumpRegisters+0x568>)
 8007554:	f240 22a1 	movw	r2, #673	; 0x2a1
 8007558:	4912      	ldr	r1, [pc, #72]	; (80075a4 <cc110_dumpRegisters+0x508>)
 800755a:	2003      	movs	r0, #3
 800755c:	f000 fc24 	bl	8007da8 <log_event>
    log_info("CC110_TEST2_DATA: %02x", CC110_TEST2_DATA.data);
 8007560:	4b29      	ldr	r3, [pc, #164]	; (8007608 <cc110_dumpRegisters+0x56c>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4b29      	ldr	r3, [pc, #164]	; (800760c <cc110_dumpRegisters+0x570>)
 8007568:	f240 22a2 	movw	r2, #674	; 0x2a2
 800756c:	490d      	ldr	r1, [pc, #52]	; (80075a4 <cc110_dumpRegisters+0x508>)
 800756e:	2003      	movs	r0, #3
 8007570:	f000 fc1a 	bl	8007da8 <log_event>
    log_info("CC110_TEST1_DATA: %02x", CC110_TEST1_DATA.data);
 8007574:	4b26      	ldr	r3, [pc, #152]	; (8007610 <cc110_dumpRegisters+0x574>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	4b26      	ldr	r3, [pc, #152]	; (8007614 <cc110_dumpRegisters+0x578>)
 800757c:	f240 22a3 	movw	r2, #675	; 0x2a3
 8007580:	4908      	ldr	r1, [pc, #32]	; (80075a4 <cc110_dumpRegisters+0x508>)
 8007582:	2003      	movs	r0, #3
 8007584:	f000 fc10 	bl	8007da8 <log_event>
    log_info("CC110_TEST0_DATA: %02x", CC110_TEST0_DATA.data);
 8007588:	4b23      	ldr	r3, [pc, #140]	; (8007618 <cc110_dumpRegisters+0x57c>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <cc110_dumpRegisters+0x580>)
 8007590:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 8007594:	4903      	ldr	r1, [pc, #12]	; (80075a4 <cc110_dumpRegisters+0x508>)
 8007596:	2003      	movs	r0, #3
 8007598:	f000 fc06 	bl	8007da8 <log_event>
}
 800759c:	bf00      	nop
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	08009bb0 	.word	0x08009bb0
 80075a8:	20000e34 	.word	0x20000e34
 80075ac:	0800a0c8 	.word	0x0800a0c8
 80075b0:	20000e38 	.word	0x20000e38
 80075b4:	0800a0e0 	.word	0x0800a0e0
 80075b8:	20000e3c 	.word	0x20000e3c
 80075bc:	0800a0f8 	.word	0x0800a0f8
 80075c0:	20000e40 	.word	0x20000e40
 80075c4:	0800a110 	.word	0x0800a110
 80075c8:	20000e44 	.word	0x20000e44
 80075cc:	0800a12c 	.word	0x0800a12c
 80075d0:	20000e48 	.word	0x20000e48
 80075d4:	0800a148 	.word	0x0800a148
 80075d8:	20000e4c 	.word	0x20000e4c
 80075dc:	0800a164 	.word	0x0800a164
 80075e0:	20000e50 	.word	0x20000e50
 80075e4:	0800a17c 	.word	0x0800a17c
 80075e8:	20000e54 	.word	0x20000e54
 80075ec:	0800a194 	.word	0x0800a194
 80075f0:	20000e58 	.word	0x20000e58
 80075f4:	0800a1ac 	.word	0x0800a1ac
 80075f8:	20000e5c 	.word	0x20000e5c
 80075fc:	0800a1c4 	.word	0x0800a1c4
 8007600:	20000e60 	.word	0x20000e60
 8007604:	0800a1dc 	.word	0x0800a1dc
 8007608:	20000e64 	.word	0x20000e64
 800760c:	0800a1f4 	.word	0x0800a1f4
 8007610:	20000e68 	.word	0x20000e68
 8007614:	0800a20c 	.word	0x0800a20c
 8007618:	20000e6c 	.word	0x20000e6c
 800761c:	0800a224 	.word	0x0800a224

08007620 <cc110_getStatus>:

static void cc110_getStatus(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
    // Grab latest status
    CC110_PARTNUM_DATA.data = cc110_burstReadRegister(CC110_PARTNUM_ADDR);
 8007624:	2030      	movs	r0, #48	; 0x30
 8007626:	f7ff fcdd 	bl	8006fe4 <cc110_burstReadRegister>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	4b2c      	ldr	r3, [pc, #176]	; (80076e0 <cc110_getStatus+0xc0>)
 8007630:	701a      	strb	r2, [r3, #0]
    CC110_VERSION_DATA.data = cc110_burstReadRegister(CC110_VERSION_ADDR);
 8007632:	2031      	movs	r0, #49	; 0x31
 8007634:	f7ff fcd6 	bl	8006fe4 <cc110_burstReadRegister>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <cc110_getStatus+0xc4>)
 800763e:	701a      	strb	r2, [r3, #0]
    CC110_FREQEST_DATA.data = cc110_burstReadRegister(CC110_FREQEST_ADDR);
 8007640:	2032      	movs	r0, #50	; 0x32
 8007642:	f7ff fccf 	bl	8006fe4 <cc110_burstReadRegister>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	4b27      	ldr	r3, [pc, #156]	; (80076e8 <cc110_getStatus+0xc8>)
 800764c:	701a      	strb	r2, [r3, #0]
    CC110_CRCOK_DATA.data = cc110_burstReadRegister(CC110_CRCOK_ADDR);
 800764e:	2033      	movs	r0, #51	; 0x33
 8007650:	f7ff fcc8 	bl	8006fe4 <cc110_burstReadRegister>
 8007654:	4603      	mov	r3, r0
 8007656:	461a      	mov	r2, r3
 8007658:	4b24      	ldr	r3, [pc, #144]	; (80076ec <cc110_getStatus+0xcc>)
 800765a:	701a      	strb	r2, [r3, #0]
    CC110_RSSI_DATA.data = cc110_burstReadRegister(CC110_RSSI_ADDR);
 800765c:	2034      	movs	r0, #52	; 0x34
 800765e:	f7ff fcc1 	bl	8006fe4 <cc110_burstReadRegister>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	4b22      	ldr	r3, [pc, #136]	; (80076f0 <cc110_getStatus+0xd0>)
 8007668:	701a      	strb	r2, [r3, #0]
    CC110_MARCSTATE_DATA.data = cc110_burstReadRegister(CC110_MARCSTATE_ADDR);
 800766a:	2035      	movs	r0, #53	; 0x35
 800766c:	f7ff fcba 	bl	8006fe4 <cc110_burstReadRegister>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	4b1f      	ldr	r3, [pc, #124]	; (80076f4 <cc110_getStatus+0xd4>)
 8007676:	701a      	strb	r2, [r3, #0]
    CC110_PKTSTATUS_DATA.data = cc110_burstReadRegister(CC110_PKTSTATUS_ADDR);
 8007678:	2038      	movs	r0, #56	; 0x38
 800767a:	f7ff fcb3 	bl	8006fe4 <cc110_burstReadRegister>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <cc110_getStatus+0xd8>)
 8007684:	701a      	strb	r2, [r3, #0]
    CC110_TXBYTES_DATA.data = cc110_burstReadRegister(CC110_TXBYTES_ADDR);
 8007686:	203a      	movs	r0, #58	; 0x3a
 8007688:	f7ff fcac 	bl	8006fe4 <cc110_burstReadRegister>
 800768c:	4603      	mov	r3, r0
 800768e:	461a      	mov	r2, r3
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <cc110_getStatus+0xdc>)
 8007692:	701a      	strb	r2, [r3, #0]
    CC110_RXBYTES_DATA.data = cc110_burstReadRegister(CC110_RXBYTES_ADDR);
 8007694:	203b      	movs	r0, #59	; 0x3b
 8007696:	f7ff fca5 	bl	8006fe4 <cc110_burstReadRegister>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	4b18      	ldr	r3, [pc, #96]	; (8007700 <cc110_getStatus+0xe0>)
 80076a0:	701a      	strb	r2, [r3, #0]

    // Compute RSSI in dBm - See TI DN505
    if (CC110_RSSI_DATA.RSSI >= 128)
 80076a2:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <cc110_getStatus+0xd0>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b25b      	sxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da0d      	bge.n	80076c8 <cc110_getStatus+0xa8>
    {
        cc110_rssiDbm = (int16_t) (((int16_t) CC110_RSSI_DATA.RSSI - 256) / 2) - CC110_RSSI_OFFSET;
 80076ac:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <cc110_getStatus+0xd0>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80076b4:	0fda      	lsrs	r2, r3, #31
 80076b6:	4413      	add	r3, r2
 80076b8:	105b      	asrs	r3, r3, #1
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b4a      	subs	r3, #74	; 0x4a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	b21a      	sxth	r2, r3
 80076c2:	4b10      	ldr	r3, [pc, #64]	; (8007704 <cc110_getStatus+0xe4>)
 80076c4:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        cc110_rssiDbm = (CC110_RSSI_DATA.RSSI / 2) - CC110_RSSI_OFFSET;
    }
}
 80076c6:	e009      	b.n	80076dc <cc110_getStatus+0xbc>
        cc110_rssiDbm = (CC110_RSSI_DATA.RSSI / 2) - CC110_RSSI_OFFSET;
 80076c8:	4b09      	ldr	r3, [pc, #36]	; (80076f0 <cc110_getStatus+0xd0>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b4a      	subs	r3, #74	; 0x4a
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	b21a      	sxth	r2, r3
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <cc110_getStatus+0xe4>)
 80076da:	801a      	strh	r2, [r3, #0]
}
 80076dc:	bf00      	nop
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20000db0 	.word	0x20000db0
 80076e4:	20000db4 	.word	0x20000db4
 80076e8:	20000db8 	.word	0x20000db8
 80076ec:	20000dbc 	.word	0x20000dbc
 80076f0:	20000dc0 	.word	0x20000dc0
 80076f4:	20000dc4 	.word	0x20000dc4
 80076f8:	20000dc8 	.word	0x20000dc8
 80076fc:	20000dcc 	.word	0x20000dcc
 8007700:	20000dd0 	.word	0x20000dd0
 8007704:	20000e6e 	.word	0x20000e6e

08007708 <cc110_getConfig>:

static void cc110_getConfig(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
    CC110_IOCFG2_DATA.data = cc110_readRegister(CC110_IOCFG2_ADDR);
 800770c:	2000      	movs	r0, #0
 800770e:	f7ff fc47 	bl	8006fa0 <cc110_readRegister>
 8007712:	4603      	mov	r3, r0
 8007714:	461a      	mov	r2, r3
 8007716:	4b87      	ldr	r3, [pc, #540]	; (8007934 <cc110_getConfig+0x22c>)
 8007718:	701a      	strb	r2, [r3, #0]
    CC110_IOCFG1_DATA.data = cc110_readRegister(CC110_IOCFG1_ADDR);
 800771a:	2001      	movs	r0, #1
 800771c:	f7ff fc40 	bl	8006fa0 <cc110_readRegister>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	4b84      	ldr	r3, [pc, #528]	; (8007938 <cc110_getConfig+0x230>)
 8007726:	701a      	strb	r2, [r3, #0]
    CC110_IOCFG0_DATA.data = cc110_readRegister(CC110_IOCFG0_ADDR);
 8007728:	2002      	movs	r0, #2
 800772a:	f7ff fc39 	bl	8006fa0 <cc110_readRegister>
 800772e:	4603      	mov	r3, r0
 8007730:	461a      	mov	r2, r3
 8007732:	4b82      	ldr	r3, [pc, #520]	; (800793c <cc110_getConfig+0x234>)
 8007734:	701a      	strb	r2, [r3, #0]
    CC110_FIFOTHR_DATA.data = cc110_readRegister(CC110_FIFOTHR_ADDR);
 8007736:	2003      	movs	r0, #3
 8007738:	f7ff fc32 	bl	8006fa0 <cc110_readRegister>
 800773c:	4603      	mov	r3, r0
 800773e:	461a      	mov	r2, r3
 8007740:	4b7f      	ldr	r3, [pc, #508]	; (8007940 <cc110_getConfig+0x238>)
 8007742:	701a      	strb	r2, [r3, #0]
    CC110_SYNC1_DATA.data = cc110_readRegister(CC110_SYNC1_ADDR);
 8007744:	2004      	movs	r0, #4
 8007746:	f7ff fc2b 	bl	8006fa0 <cc110_readRegister>
 800774a:	4603      	mov	r3, r0
 800774c:	461a      	mov	r2, r3
 800774e:	4b7d      	ldr	r3, [pc, #500]	; (8007944 <cc110_getConfig+0x23c>)
 8007750:	701a      	strb	r2, [r3, #0]
    CC110_SYNC2_DATA.data = cc110_readRegister(CC110_SYNC2_ADDR);
 8007752:	2005      	movs	r0, #5
 8007754:	f7ff fc24 	bl	8006fa0 <cc110_readRegister>
 8007758:	4603      	mov	r3, r0
 800775a:	461a      	mov	r2, r3
 800775c:	4b7a      	ldr	r3, [pc, #488]	; (8007948 <cc110_getConfig+0x240>)
 800775e:	701a      	strb	r2, [r3, #0]
    CC110_PKTLEN_DATA.data = cc110_readRegister(CC110_PKTLEN_ADDR);
 8007760:	2006      	movs	r0, #6
 8007762:	f7ff fc1d 	bl	8006fa0 <cc110_readRegister>
 8007766:	4603      	mov	r3, r0
 8007768:	461a      	mov	r2, r3
 800776a:	4b78      	ldr	r3, [pc, #480]	; (800794c <cc110_getConfig+0x244>)
 800776c:	701a      	strb	r2, [r3, #0]
    CC110_PKTCTRL1_DATA.data = cc110_readRegister(CC110_PKTCTRL1_ADDR);
 800776e:	2007      	movs	r0, #7
 8007770:	f7ff fc16 	bl	8006fa0 <cc110_readRegister>
 8007774:	4603      	mov	r3, r0
 8007776:	461a      	mov	r2, r3
 8007778:	4b75      	ldr	r3, [pc, #468]	; (8007950 <cc110_getConfig+0x248>)
 800777a:	701a      	strb	r2, [r3, #0]
    CC110_PKTCTRL0_DATA.data = cc110_readRegister(CC110_PKTCTRL0_ADDR);
 800777c:	2008      	movs	r0, #8
 800777e:	f7ff fc0f 	bl	8006fa0 <cc110_readRegister>
 8007782:	4603      	mov	r3, r0
 8007784:	461a      	mov	r2, r3
 8007786:	4b73      	ldr	r3, [pc, #460]	; (8007954 <cc110_getConfig+0x24c>)
 8007788:	701a      	strb	r2, [r3, #0]
    CC110_ADDR_DATA.data = cc110_readRegister(CC110_ADDR_ADDR);
 800778a:	2009      	movs	r0, #9
 800778c:	f7ff fc08 	bl	8006fa0 <cc110_readRegister>
 8007790:	4603      	mov	r3, r0
 8007792:	461a      	mov	r2, r3
 8007794:	4b70      	ldr	r3, [pc, #448]	; (8007958 <cc110_getConfig+0x250>)
 8007796:	701a      	strb	r2, [r3, #0]
    CC110_CHANNR_DATA.data = cc110_readRegister(CC110_CHANNR_ADDR);
 8007798:	20da      	movs	r0, #218	; 0xda
 800779a:	f7ff fc01 	bl	8006fa0 <cc110_readRegister>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b6e      	ldr	r3, [pc, #440]	; (800795c <cc110_getConfig+0x254>)
 80077a4:	701a      	strb	r2, [r3, #0]
    CC110_FSCTRL1_DATA.data = cc110_readRegister(CC110_FSCTRL1_ADDR);
 80077a6:	20db      	movs	r0, #219	; 0xdb
 80077a8:	f7ff fbfa 	bl	8006fa0 <cc110_readRegister>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	4b6b      	ldr	r3, [pc, #428]	; (8007960 <cc110_getConfig+0x258>)
 80077b2:	701a      	strb	r2, [r3, #0]
    CC110_FSCTRL0_DATA.data = cc110_readRegister(CC110_FSCTRL0_ADDR);
 80077b4:	200c      	movs	r0, #12
 80077b6:	f7ff fbf3 	bl	8006fa0 <cc110_readRegister>
 80077ba:	4603      	mov	r3, r0
 80077bc:	461a      	mov	r2, r3
 80077be:	4b69      	ldr	r3, [pc, #420]	; (8007964 <cc110_getConfig+0x25c>)
 80077c0:	701a      	strb	r2, [r3, #0]
    CC110_FREQ2_DATA.data = cc110_readRegister(CC110_FREQ2_ADDR);
 80077c2:	200d      	movs	r0, #13
 80077c4:	f7ff fbec 	bl	8006fa0 <cc110_readRegister>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	4b66      	ldr	r3, [pc, #408]	; (8007968 <cc110_getConfig+0x260>)
 80077ce:	701a      	strb	r2, [r3, #0]
    CC110_FREQ1_DATA.data = cc110_readRegister(CC110_FREQ1_ADDR);
 80077d0:	200e      	movs	r0, #14
 80077d2:	f7ff fbe5 	bl	8006fa0 <cc110_readRegister>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	4b64      	ldr	r3, [pc, #400]	; (800796c <cc110_getConfig+0x264>)
 80077dc:	701a      	strb	r2, [r3, #0]
    CC110_FREQ0_DATA.data = cc110_readRegister(CC110_FREQ0_ADDR);
 80077de:	200f      	movs	r0, #15
 80077e0:	f7ff fbde 	bl	8006fa0 <cc110_readRegister>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	4b61      	ldr	r3, [pc, #388]	; (8007970 <cc110_getConfig+0x268>)
 80077ea:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG4_DATA.data = cc110_readRegister(CC110_MDMCFG4_ADDR);
 80077ec:	2010      	movs	r0, #16
 80077ee:	f7ff fbd7 	bl	8006fa0 <cc110_readRegister>
 80077f2:	4603      	mov	r3, r0
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b5f      	ldr	r3, [pc, #380]	; (8007974 <cc110_getConfig+0x26c>)
 80077f8:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG3_DATA.data = cc110_readRegister(CC110_MDMCFG3_ADDR);
 80077fa:	2011      	movs	r0, #17
 80077fc:	f7ff fbd0 	bl	8006fa0 <cc110_readRegister>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	4b5c      	ldr	r3, [pc, #368]	; (8007978 <cc110_getConfig+0x270>)
 8007806:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG2_DATA.data = cc110_readRegister(CC110_MDMCFG2_ADDR);
 8007808:	2012      	movs	r0, #18
 800780a:	f7ff fbc9 	bl	8006fa0 <cc110_readRegister>
 800780e:	4603      	mov	r3, r0
 8007810:	461a      	mov	r2, r3
 8007812:	4b5a      	ldr	r3, [pc, #360]	; (800797c <cc110_getConfig+0x274>)
 8007814:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG1_DATA.data = cc110_readRegister(CC110_MDMCFG1_ADDR);
 8007816:	2013      	movs	r0, #19
 8007818:	f7ff fbc2 	bl	8006fa0 <cc110_readRegister>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	4b57      	ldr	r3, [pc, #348]	; (8007980 <cc110_getConfig+0x278>)
 8007822:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG0_DATA.data = cc110_readRegister(CC110_MDMCFG0_ADDR);
 8007824:	2014      	movs	r0, #20
 8007826:	f7ff fbbb 	bl	8006fa0 <cc110_readRegister>
 800782a:	4603      	mov	r3, r0
 800782c:	461a      	mov	r2, r3
 800782e:	4b55      	ldr	r3, [pc, #340]	; (8007984 <cc110_getConfig+0x27c>)
 8007830:	701a      	strb	r2, [r3, #0]
    CC110_DEVIATN_DATA.data = cc110_readRegister(CC110_DEVIATN_ADDR);
 8007832:	2015      	movs	r0, #21
 8007834:	f7ff fbb4 	bl	8006fa0 <cc110_readRegister>
 8007838:	4603      	mov	r3, r0
 800783a:	461a      	mov	r2, r3
 800783c:	4b52      	ldr	r3, [pc, #328]	; (8007988 <cc110_getConfig+0x280>)
 800783e:	701a      	strb	r2, [r3, #0]
    CC110_MCSM2_DATA.data = cc110_readRegister(CC110_MCSM2_ADDR);
 8007840:	2016      	movs	r0, #22
 8007842:	f7ff fbad 	bl	8006fa0 <cc110_readRegister>
 8007846:	4603      	mov	r3, r0
 8007848:	461a      	mov	r2, r3
 800784a:	4b50      	ldr	r3, [pc, #320]	; (800798c <cc110_getConfig+0x284>)
 800784c:	701a      	strb	r2, [r3, #0]
    CC110_MCSM1_DATA.data = cc110_readRegister(CC110_MCSM1_ADDR);
 800784e:	2017      	movs	r0, #23
 8007850:	f7ff fba6 	bl	8006fa0 <cc110_readRegister>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	4b4d      	ldr	r3, [pc, #308]	; (8007990 <cc110_getConfig+0x288>)
 800785a:	701a      	strb	r2, [r3, #0]
    CC110_MCSM0_DATA.data = cc110_readRegister(CC110_MCSM0_ADDR);
 800785c:	2018      	movs	r0, #24
 800785e:	f7ff fb9f 	bl	8006fa0 <cc110_readRegister>
 8007862:	4603      	mov	r3, r0
 8007864:	461a      	mov	r2, r3
 8007866:	4b4b      	ldr	r3, [pc, #300]	; (8007994 <cc110_getConfig+0x28c>)
 8007868:	701a      	strb	r2, [r3, #0]
    CC110_FOCCFG_DATA.data = cc110_readRegister(CC110_FOCCFG_ADDR);
 800786a:	2019      	movs	r0, #25
 800786c:	f7ff fb98 	bl	8006fa0 <cc110_readRegister>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	4b48      	ldr	r3, [pc, #288]	; (8007998 <cc110_getConfig+0x290>)
 8007876:	701a      	strb	r2, [r3, #0]
    CC110_BSCFG_DATA.data = cc110_readRegister(CC110_BSCFG_ADDR);
 8007878:	201a      	movs	r0, #26
 800787a:	f7ff fb91 	bl	8006fa0 <cc110_readRegister>
 800787e:	4603      	mov	r3, r0
 8007880:	461a      	mov	r2, r3
 8007882:	4b46      	ldr	r3, [pc, #280]	; (800799c <cc110_getConfig+0x294>)
 8007884:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL2_DATA.data = cc110_readRegister(CC110_AGCCTRL2_ADDR);
 8007886:	201b      	movs	r0, #27
 8007888:	f7ff fb8a 	bl	8006fa0 <cc110_readRegister>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	4b43      	ldr	r3, [pc, #268]	; (80079a0 <cc110_getConfig+0x298>)
 8007892:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL1_DATA.data = cc110_readRegister(CC110_AGCCTRL1_ADDR);
 8007894:	201c      	movs	r0, #28
 8007896:	f7ff fb83 	bl	8006fa0 <cc110_readRegister>
 800789a:	4603      	mov	r3, r0
 800789c:	461a      	mov	r2, r3
 800789e:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <cc110_getConfig+0x29c>)
 80078a0:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL0_DATA.data = cc110_readRegister(CC110_AGCCTRL0_ADDR);
 80078a2:	201d      	movs	r0, #29
 80078a4:	f7ff fb7c 	bl	8006fa0 <cc110_readRegister>
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	4b3e      	ldr	r3, [pc, #248]	; (80079a8 <cc110_getConfig+0x2a0>)
 80078ae:	701a      	strb	r2, [r3, #0]
    CC110_FREND1_DATA.data = cc110_readRegister(CC110_FREND1_ADDR);
 80078b0:	2021      	movs	r0, #33	; 0x21
 80078b2:	f7ff fb75 	bl	8006fa0 <cc110_readRegister>
 80078b6:	4603      	mov	r3, r0
 80078b8:	461a      	mov	r2, r3
 80078ba:	4b3c      	ldr	r3, [pc, #240]	; (80079ac <cc110_getConfig+0x2a4>)
 80078bc:	701a      	strb	r2, [r3, #0]
    CC110_FREND0_DATA.data = cc110_readRegister(CC110_FREND0_ADDR);
 80078be:	2022      	movs	r0, #34	; 0x22
 80078c0:	f7ff fb6e 	bl	8006fa0 <cc110_readRegister>
 80078c4:	4603      	mov	r3, r0
 80078c6:	461a      	mov	r2, r3
 80078c8:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <cc110_getConfig+0x2a8>)
 80078ca:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL3_DATA.data = cc110_readRegister(CC110_FSCAL3_ADDR);
 80078cc:	2023      	movs	r0, #35	; 0x23
 80078ce:	f7ff fb67 	bl	8006fa0 <cc110_readRegister>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	4b37      	ldr	r3, [pc, #220]	; (80079b4 <cc110_getConfig+0x2ac>)
 80078d8:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL2_DATA.data = cc110_readRegister(CC110_FSCAL2_ADDR);
 80078da:	2024      	movs	r0, #36	; 0x24
 80078dc:	f7ff fb60 	bl	8006fa0 <cc110_readRegister>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	4b34      	ldr	r3, [pc, #208]	; (80079b8 <cc110_getConfig+0x2b0>)
 80078e6:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL1_DATA.data = cc110_readRegister(CC110_FSCAL1_ADDR);
 80078e8:	2025      	movs	r0, #37	; 0x25
 80078ea:	f7ff fb59 	bl	8006fa0 <cc110_readRegister>
 80078ee:	4603      	mov	r3, r0
 80078f0:	461a      	mov	r2, r3
 80078f2:	4b32      	ldr	r3, [pc, #200]	; (80079bc <cc110_getConfig+0x2b4>)
 80078f4:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL0_DATA.data = cc110_readRegister(CC110_FSCAL0_ADDR);
 80078f6:	2026      	movs	r0, #38	; 0x26
 80078f8:	f7ff fb52 	bl	8006fa0 <cc110_readRegister>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	4b2f      	ldr	r3, [pc, #188]	; (80079c0 <cc110_getConfig+0x2b8>)
 8007902:	701a      	strb	r2, [r3, #0]
    CC110_TEST2_DATA.data = cc110_readRegister(CC110_TEST2_ADDR);
 8007904:	202c      	movs	r0, #44	; 0x2c
 8007906:	f7ff fb4b 	bl	8006fa0 <cc110_readRegister>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	4b2d      	ldr	r3, [pc, #180]	; (80079c4 <cc110_getConfig+0x2bc>)
 8007910:	701a      	strb	r2, [r3, #0]
    CC110_TEST1_DATA.data = cc110_readRegister(CC110_TEST1_ADDR);
 8007912:	202d      	movs	r0, #45	; 0x2d
 8007914:	f7ff fb44 	bl	8006fa0 <cc110_readRegister>
 8007918:	4603      	mov	r3, r0
 800791a:	461a      	mov	r2, r3
 800791c:	4b2a      	ldr	r3, [pc, #168]	; (80079c8 <cc110_getConfig+0x2c0>)
 800791e:	701a      	strb	r2, [r3, #0]
    CC110_TEST0_DATA.data = cc110_readRegister(CC110_TEST0_ADDR);
 8007920:	202e      	movs	r0, #46	; 0x2e
 8007922:	f7ff fb3d 	bl	8006fa0 <cc110_readRegister>
 8007926:	4603      	mov	r3, r0
 8007928:	461a      	mov	r2, r3
 800792a:	4b28      	ldr	r3, [pc, #160]	; (80079cc <cc110_getConfig+0x2c4>)
 800792c:	701a      	strb	r2, [r3, #0]
}
 800792e:	bf00      	nop
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000dd4 	.word	0x20000dd4
 8007938:	20000dd8 	.word	0x20000dd8
 800793c:	20000ddc 	.word	0x20000ddc
 8007940:	20000de0 	.word	0x20000de0
 8007944:	20000de4 	.word	0x20000de4
 8007948:	20000de8 	.word	0x20000de8
 800794c:	20000dec 	.word	0x20000dec
 8007950:	20000df0 	.word	0x20000df0
 8007954:	20000df4 	.word	0x20000df4
 8007958:	20000df8 	.word	0x20000df8
 800795c:	20000dfc 	.word	0x20000dfc
 8007960:	20000e00 	.word	0x20000e00
 8007964:	20000e04 	.word	0x20000e04
 8007968:	20000e08 	.word	0x20000e08
 800796c:	20000e0c 	.word	0x20000e0c
 8007970:	20000e10 	.word	0x20000e10
 8007974:	20000e14 	.word	0x20000e14
 8007978:	20000e18 	.word	0x20000e18
 800797c:	20000e1c 	.word	0x20000e1c
 8007980:	20000e20 	.word	0x20000e20
 8007984:	20000e24 	.word	0x20000e24
 8007988:	20000e28 	.word	0x20000e28
 800798c:	20000e2c 	.word	0x20000e2c
 8007990:	20000e30 	.word	0x20000e30
 8007994:	20000e34 	.word	0x20000e34
 8007998:	20000e38 	.word	0x20000e38
 800799c:	20000e3c 	.word	0x20000e3c
 80079a0:	20000e40 	.word	0x20000e40
 80079a4:	20000e44 	.word	0x20000e44
 80079a8:	20000e48 	.word	0x20000e48
 80079ac:	20000e4c 	.word	0x20000e4c
 80079b0:	20000e50 	.word	0x20000e50
 80079b4:	20000e54 	.word	0x20000e54
 80079b8:	20000e58 	.word	0x20000e58
 80079bc:	20000e5c 	.word	0x20000e5c
 80079c0:	20000e60 	.word	0x20000e60
 80079c4:	20000e64 	.word	0x20000e64
 80079c8:	20000e68 	.word	0x20000e68
 80079cc:	20000e6c 	.word	0x20000e6c

080079d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80079d6:	2300      	movs	r3, #0
 80079d8:	607b      	str	r3, [r7, #4]
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <MX_DMA_Init+0x78>)
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	4a1a      	ldr	r2, [pc, #104]	; (8007a48 <MX_DMA_Init+0x78>)
 80079e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079e4:	6313      	str	r3, [r2, #48]	; 0x30
 80079e6:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <MX_DMA_Init+0x78>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ee:	607b      	str	r3, [r7, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80079f2:	2300      	movs	r3, #0
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <MX_DMA_Init+0x78>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <MX_DMA_Init+0x78>)
 80079fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a00:	6313      	str	r3, [r2, #48]	; 0x30
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <MX_DMA_Init+0x78>)
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2105      	movs	r1, #5
 8007a12:	200e      	movs	r0, #14
 8007a14:	f7f8 fef2 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007a18:	200e      	movs	r0, #14
 8007a1a:	f7f8 ff0b 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2105      	movs	r1, #5
 8007a22:	200f      	movs	r0, #15
 8007a24:	f7f8 feea 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007a28:	200f      	movs	r0, #15
 8007a2a:	f7f8 ff03 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2105      	movs	r1, #5
 8007a32:	2046      	movs	r0, #70	; 0x46
 8007a34:	f7f8 fee2 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007a38:	2046      	movs	r0, #70	; 0x46
 8007a3a:	f7f8 fefb 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	40023800 	.word	0x40023800

08007a4c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of heartbeatTask */
  heartbeatTaskHandle = osThreadNew(StartHeartbeatTask, NULL, &heartbeatTask_attributes);
 8007a50:	4a0c      	ldr	r2, [pc, #48]	; (8007a84 <MX_FREERTOS_Init+0x38>)
 8007a52:	2100      	movs	r1, #0
 8007a54:	480c      	ldr	r0, [pc, #48]	; (8007a88 <MX_FREERTOS_Init+0x3c>)
 8007a56:	f7fc fc5b 	bl	8004310 <osThreadNew>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <MX_FREERTOS_Init+0x40>)
 8007a5e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    consoleTaskHandle = osThreadNew(StartConsoleTask, NULL, &consoleTask_attributes);
 8007a60:	4a0b      	ldr	r2, [pc, #44]	; (8007a90 <MX_FREERTOS_Init+0x44>)
 8007a62:	2100      	movs	r1, #0
 8007a64:	480b      	ldr	r0, [pc, #44]	; (8007a94 <MX_FREERTOS_Init+0x48>)
 8007a66:	f7fc fc53 	bl	8004310 <osThreadNew>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <MX_FREERTOS_Init+0x4c>)
 8007a6e:	601a      	str	r2, [r3, #0]
    // TODO: Re-eanble this and figure out how to do I2C DMA
    //displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
    radioTaskHandle = osThreadNew(StartRadioTask, NULL, &radioTask_attributes);
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <MX_FREERTOS_Init+0x50>)
 8007a72:	2100      	movs	r1, #0
 8007a74:	480a      	ldr	r0, [pc, #40]	; (8007aa0 <MX_FREERTOS_Init+0x54>)
 8007a76:	f7fc fc4b 	bl	8004310 <osThreadNew>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <MX_FREERTOS_Init+0x58>)
 8007a7e:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 8007a80:	bf00      	nop
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	0800a49c 	.word	0x0800a49c
 8007a88:	08007aa9 	.word	0x08007aa9
 8007a8c:	20004084 	.word	0x20004084
 8007a90:	0800a454 	.word	0x0800a454
 8007a94:	08007ad9 	.word	0x08007ad9
 8007a98:	20004088 	.word	0x20004088
 8007a9c:	0800a478 	.word	0x0800a478
 8007aa0:	08007b01 	.word	0x08007b01
 8007aa4:	20004090 	.word	0x20004090

08007aa8 <StartHeartbeatTask>:
 * @param  argument: Not used 
 * @retval None
 */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
    log_info("Starting heartbeat task");
 8007ab0:	4b06      	ldr	r3, [pc, #24]	; (8007acc <StartHeartbeatTask+0x24>)
 8007ab2:	2284      	movs	r2, #132	; 0x84
 8007ab4:	4906      	ldr	r1, [pc, #24]	; (8007ad0 <StartHeartbeatTask+0x28>)
 8007ab6:	2003      	movs	r0, #3
 8007ab8:	f000 f976 	bl	8007da8 <log_event>
    /* Infinite loop */
    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007abc:	2140      	movs	r1, #64	; 0x40
 8007abe:	4805      	ldr	r0, [pc, #20]	; (8007ad4 <StartHeartbeatTask+0x2c>)
 8007ac0:	f7f9 fd87 	bl	80015d2 <HAL_GPIO_TogglePin>
        osDelay(200);
 8007ac4:	20c8      	movs	r0, #200	; 0xc8
 8007ac6:	f7fc fcc9 	bl	800445c <osDelay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007aca:	e7f7      	b.n	8007abc <StartHeartbeatTask+0x14>
 8007acc:	0800a270 	.word	0x0800a270
 8007ad0:	0800a288 	.word	0x0800a288
 8007ad4:	40020000 	.word	0x40020000

08007ad8 <StartConsoleTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartConsoleTask(void* argument)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
    log_info("Starting console task");
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <StartConsoleTask+0x20>)
 8007ae2:	2292      	movs	r2, #146	; 0x92
 8007ae4:	4905      	ldr	r1, [pc, #20]	; (8007afc <StartConsoleTask+0x24>)
 8007ae6:	2003      	movs	r0, #3
 8007ae8:	f000 f95e 	bl	8007da8 <log_event>
    while (1)
    {
        log_read();
 8007aec:	f000 fa70 	bl	8007fd0 <log_read>
        osDelay(1);
 8007af0:	2001      	movs	r0, #1
 8007af2:	f7fc fcb3 	bl	800445c <osDelay>
        log_read();
 8007af6:	e7f9      	b.n	8007aec <StartConsoleTask+0x14>
 8007af8:	0800a29c 	.word	0x0800a29c
 8007afc:	0800a288 	.word	0x0800a288

08007b00 <StartRadioTask>:
        osDelay(100);
    }
}

void StartRadioTask(void* argument)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
    // Init display
    log_info("Starting radio task");
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <StartRadioTask+0x2c>)
 8007b0a:	22a9      	movs	r2, #169	; 0xa9
 8007b0c:	4908      	ldr	r1, [pc, #32]	; (8007b30 <StartRadioTask+0x30>)
 8007b0e:	2003      	movs	r0, #3
 8007b10:	f000 f94a 	bl	8007da8 <log_event>
    cc110_init();
 8007b14:	f7fe ff20 	bl	8006958 <cc110_init>
    osDelay(1000);        // Allow other tasks to startup
 8007b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b1c:	f7fc fc9e 	bl	800445c <osDelay>
#ifdef TRANSMITTER
        cc110_test();   // Perform test
        osDelay(1000);
#endif
#ifdef RECEIVER
        cc110_printRssi();
 8007b20:	f7fe ffba 	bl	8006a98 <cc110_printRssi>
        osDelay(100);  // Do nothing
 8007b24:	2064      	movs	r0, #100	; 0x64
 8007b26:	f7fc fc99 	bl	800445c <osDelay>
        cc110_printRssi();
 8007b2a:	e7f9      	b.n	8007b20 <StartRadioTask+0x20>
 8007b2c:	0800a2cc 	.word	0x0800a2cc
 8007b30:	0800a288 	.word	0x0800a288

08007b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	; 0x28
 8007b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b3a:	f107 0314 	add.w	r3, r7, #20
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	605a      	str	r2, [r3, #4]
 8007b44:	609a      	str	r2, [r3, #8]
 8007b46:	60da      	str	r2, [r3, #12]
 8007b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	4a4f      	ldr	r2, [pc, #316]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b54:	f043 0310 	orr.w	r3, r3, #16
 8007b58:	6313      	str	r3, [r2, #48]	; 0x30
 8007b5a:	4b4d      	ldr	r3, [pc, #308]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	4b49      	ldr	r3, [pc, #292]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	4a48      	ldr	r2, [pc, #288]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b74:	6313      	str	r3, [r2, #48]	; 0x30
 8007b76:	4b46      	ldr	r3, [pc, #280]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b82:	2300      	movs	r3, #0
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	4b42      	ldr	r3, [pc, #264]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	4a41      	ldr	r2, [pc, #260]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b8c:	f043 0304 	orr.w	r3, r3, #4
 8007b90:	6313      	str	r3, [r2, #48]	; 0x30
 8007b92:	4b3f      	ldr	r3, [pc, #252]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	607b      	str	r3, [r7, #4]
 8007ba2:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	4a3a      	ldr	r2, [pc, #232]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	6313      	str	r3, [r2, #48]	; 0x30
 8007bae:	4b38      	ldr	r3, [pc, #224]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	607b      	str	r3, [r7, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bba:	2300      	movs	r3, #0
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	4b34      	ldr	r3, [pc, #208]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	4a33      	ldr	r2, [pc, #204]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007bc4:	f043 0302 	orr.w	r3, r3, #2
 8007bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bca:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <MX_GPIO_Init+0x15c>)
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2140      	movs	r1, #64	; 0x40
 8007bda:	482e      	ldr	r0, [pc, #184]	; (8007c94 <MX_GPIO_Init+0x160>)
 8007bdc:	f7f9 fce0 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007be0:	2201      	movs	r2, #1
 8007be2:	2180      	movs	r1, #128	; 0x80
 8007be4:	482b      	ldr	r0, [pc, #172]	; (8007c94 <MX_GPIO_Init+0x160>)
 8007be6:	f7f9 fcdb 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EVENT_LED_GPIO_Port, EVENT_LED_Pin, GPIO_PIN_RESET);
 8007bea:	2200      	movs	r2, #0
 8007bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bf0:	4829      	ldr	r0, [pc, #164]	; (8007c98 <MX_GPIO_Init+0x164>)
 8007bf2:	f7f9 fcd5 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007bfc:	4826      	ldr	r0, [pc, #152]	; (8007c98 <MX_GPIO_Init+0x164>)
 8007bfe:	f7f9 fccf 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007c02:	2308      	movs	r3, #8
 8007c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c0e:	f107 0314 	add.w	r3, r7, #20
 8007c12:	4619      	mov	r1, r3
 8007c14:	4821      	ldr	r0, [pc, #132]	; (8007c9c <MX_GPIO_Init+0x168>)
 8007c16:	f7f9 fa17 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c22:	2301      	movs	r3, #1
 8007c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8007c26:	f107 0314 	add.w	r3, r7, #20
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	481b      	ldr	r0, [pc, #108]	; (8007c9c <MX_GPIO_Init+0x168>)
 8007c2e:	f7f9 fa0b 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8007c32:	2340      	movs	r3, #64	; 0x40
 8007c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c36:	2301      	movs	r3, #1
 8007c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007c42:	f107 0314 	add.w	r3, r7, #20
 8007c46:	4619      	mov	r1, r3
 8007c48:	4812      	ldr	r0, [pc, #72]	; (8007c94 <MX_GPIO_Init+0x160>)
 8007c4a:	f7f9 f9fd 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8007c4e:	2380      	movs	r3, #128	; 0x80
 8007c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c52:	2301      	movs	r3, #1
 8007c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8007c5e:	f107 0314 	add.w	r3, r7, #20
 8007c62:	4619      	mov	r1, r3
 8007c64:	480b      	ldr	r0, [pc, #44]	; (8007c94 <MX_GPIO_Init+0x160>)
 8007c66:	f7f9 f9ef 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EVENT_LED_Pin|SPI2_NSS_Pin;
 8007c6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c70:	2301      	movs	r3, #1
 8007c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c7c:	f107 0314 	add.w	r3, r7, #20
 8007c80:	4619      	mov	r1, r3
 8007c82:	4805      	ldr	r0, [pc, #20]	; (8007c98 <MX_GPIO_Init+0x164>)
 8007c84:	f7f9 f9e0 	bl	8001048 <HAL_GPIO_Init>

}
 8007c88:	bf00      	nop
 8007c8a:	3728      	adds	r7, #40	; 0x28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40020000 	.word	0x40020000
 8007c98:	40020400 	.word	0x40020400
 8007c9c:	40021000 	.word	0x40021000

08007ca0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007ca4:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007ca6:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <MX_I2C1_Init+0x54>)
 8007ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007caa:	4b11      	ldr	r3, [pc, #68]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cac:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <MX_I2C1_Init+0x58>)
 8007cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007cb0:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007cb6:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007cca:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007cd6:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007cdc:	4804      	ldr	r0, [pc, #16]	; (8007cf0 <MX_I2C1_Init+0x50>)
 8007cde:	f7f9 fc93 	bl	8001608 <HAL_I2C_Init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007ce8:	f000 fb18 	bl	800831c <Error_Handler>
  }

}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20004094 	.word	0x20004094
 8007cf4:	40005400 	.word	0x40005400
 8007cf8:	000186a0 	.word	0x000186a0

08007cfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d04:	f107 0314 	add.w	r3, r7, #20
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a19      	ldr	r2, [pc, #100]	; (8007d80 <HAL_I2C_MspInit+0x84>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d12b      	bne.n	8007d76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	4b18      	ldr	r3, [pc, #96]	; (8007d84 <HAL_I2C_MspInit+0x88>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <HAL_I2C_MspInit+0x88>)
 8007d28:	f043 0302 	orr.w	r3, r3, #2
 8007d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d2e:	4b15      	ldr	r3, [pc, #84]	; (8007d84 <HAL_I2C_MspInit+0x88>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d3a:	23c0      	movs	r3, #192	; 0xc0
 8007d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d3e:	2312      	movs	r3, #18
 8007d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d46:	2303      	movs	r3, #3
 8007d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d4e:	f107 0314 	add.w	r3, r7, #20
 8007d52:	4619      	mov	r1, r3
 8007d54:	480c      	ldr	r0, [pc, #48]	; (8007d88 <HAL_I2C_MspInit+0x8c>)
 8007d56:	f7f9 f977 	bl	8001048 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <HAL_I2C_MspInit+0x88>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	4a08      	ldr	r2, [pc, #32]	; (8007d84 <HAL_I2C_MspInit+0x88>)
 8007d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d68:	6413      	str	r3, [r2, #64]	; 0x40
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <HAL_I2C_MspInit+0x88>)
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007d76:	bf00      	nop
 8007d78:	3728      	adds	r7, #40	; 0x28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40005400 	.word	0x40005400
 8007d84:	40023800 	.word	0x40023800
 8007d88:	40020400 	.word	0x40020400

08007d8c <ustrlen>:
    return (uint8_t*)strcat((char *)dst, (char *)src);
}

// Unsigned string length function (equivalent to strlen from string.h)
static inline uint8_t ustrlen(uint8_t *str)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
    return (uint8_t)strlen((char *)str);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7f8 fa1b 	bl	80001d0 <strlen>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	b2db      	uxtb	r3, r3
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <log_event>:
int8_t log_write(char* str, uint32_t len);
int8_t log_writeByte(uint8_t byte);

/* Public Function Definitions -----------------------------------------------*/
void log_event(uint8_t level, const char* file, unsigned int line, const char* format, ...)
{
 8007da8:	b408      	push	{r3}
 8007daa:	b580      	push	{r7, lr}
 8007dac:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8007db0:	af04      	add	r7, sp, #16
 8007db2:	f107 0308 	add.w	r3, r7, #8
 8007db6:	6019      	str	r1, [r3, #0]
 8007db8:	1d3b      	adds	r3, r7, #4
 8007dba:	601a      	str	r2, [r3, #0]
 8007dbc:	f107 030f 	add.w	r3, r7, #15
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	701a      	strb	r2, [r3, #0]
    // Temporary buffers
    char msg[LOG_MSG_MAX_SIZE] = { 0 };
 8007dc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	f000 ff94 	bl	8008cfe <memset>
    char tag[LOG_MSG_MAX_SIZE] = { 0 };
 8007dd6:	f107 0318 	add.w	r3, r7, #24
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007de0:	461a      	mov	r2, r3
 8007de2:	2100      	movs	r1, #0
 8007de4:	f000 ff8b 	bl	8008cfe <memset>

    // Get and format current time in ss:ms
    unsigned int timeMs = HAL_GetTick();
 8007de8:	f7f8 fc00 	bl	80005ec <HAL_GetTick>
 8007dec:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    unsigned int timeS = timeMs / 1000;
 8007df0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007df4:	4a55      	ldr	r2, [pc, #340]	; (8007f4c <log_event+0x1a4>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	099b      	lsrs	r3, r3, #6
 8007dfc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    timeMs = timeMs % 1000;
 8007e00:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007e04:	4a51      	ldr	r2, [pc, #324]	; (8007f4c <log_event+0x1a4>)
 8007e06:	fba2 1203 	umull	r1, r2, r2, r3
 8007e0a:	0992      	lsrs	r2, r2, #6
 8007e0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e10:	fb01 f202 	mul.w	r2, r1, r2
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    if (level <= LOG_LEVEL)
 8007e1a:	f107 030f 	add.w	r3, r7, #15
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	f200 808a 	bhi.w	8007f3a <log_event+0x192>
    {
        // Create tag for log message
        switch (level)
 8007e26:	f107 030f 	add.w	r3, r7, #15
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d85a      	bhi.n	8007ee8 <log_event+0x140>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <log_event+0x90>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e49 	.word	0x08007e49
 8007e3c:	08007e71 	.word	0x08007e71
 8007e40:	08007e99 	.word	0x08007e99
 8007e44:	08007ec1 	.word	0x08007ec1
        {
            case LOG_ERROR:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [ERROR] %s(%u) ", timeS, timeMs,
 8007e48:	f107 0018 	add.w	r0, r7, #24
 8007e4c:	1d3b      	adds	r3, r7, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	9302      	str	r3, [sp, #8]
 8007e52:	f107 0308 	add.w	r3, r7, #8
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007e64:	4a3a      	ldr	r2, [pc, #232]	; (8007f50 <log_event+0x1a8>)
 8007e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e6a:	f001 f8bf 	bl	8008fec <sniprintf>
                         file, line);
                break;
 8007e6e:	e03c      	b.n	8007eea <log_event+0x142>

            case LOG_WARN:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [WARN] %s(%u) ", timeS, timeMs, file,
 8007e70:	f107 0018 	add.w	r0, r7, #24
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	9302      	str	r3, [sp, #8]
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007e8c:	4a31      	ldr	r2, [pc, #196]	; (8007f54 <log_event+0x1ac>)
 8007e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e92:	f001 f8ab 	bl	8008fec <sniprintf>
                         line);
                break;
 8007e96:	e028      	b.n	8007eea <log_event+0x142>

            case LOG_INFO:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [INFO] %s(%u) ", timeS, timeMs, file,
 8007e98:	f107 0018 	add.w	r0, r7, #24
 8007e9c:	1d3b      	adds	r3, r7, #4
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	9302      	str	r3, [sp, #8]
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007eb4:	4a28      	ldr	r2, [pc, #160]	; (8007f58 <log_event+0x1b0>)
 8007eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007eba:	f001 f897 	bl	8008fec <sniprintf>
                         line);
                break;
 8007ebe:	e014      	b.n	8007eea <log_event+0x142>

            case LOG_DEBUG:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [DEBUG] %s(%u) ", timeS, timeMs,
 8007ec0:	f107 0018 	add.w	r0, r7, #24
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	9302      	str	r3, [sp, #8]
 8007eca:	f107 0308 	add.w	r3, r7, #8
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007edc:	4a1f      	ldr	r2, [pc, #124]	; (8007f5c <log_event+0x1b4>)
 8007ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ee2:	f001 f883 	bl	8008fec <sniprintf>
                         file, line);
                break;
 8007ee6:	e000      	b.n	8007eea <log_event+0x142>

            default:
                // Do nothing
                break;
 8007ee8:	bf00      	nop
        }

        // Copy log message
        va_list arg;
        va_start(arg, format);
 8007eea:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8007eee:	f107 0314 	add.w	r3, r7, #20
 8007ef2:	601a      	str	r2, [r3, #0]
        vsprintf(msg, format, arg);
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8007f02:	f001 f8cd 	bl	80090a0 <vsiprintf>
        va_end(arg);

        // Prepend tag to message
        strcat(tag, msg);
 8007f06:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007f0a:	f107 0318 	add.w	r3, r7, #24
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f89f 	bl	8009054 <strcat>

        // Write to the log buffer
        while (log_writeLock == LOG_WRITE_BUSY)
 8007f16:	bf00      	nop
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <log_event+0x1b8>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d0fb      	beq.n	8007f18 <log_event+0x170>
        {
            // Do nothing
        }
        log_write(tag, strlen(tag) + 1);
 8007f20:	f107 0318 	add.w	r3, r7, #24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7f8 f953 	bl	80001d0 <strlen>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	f107 0318 	add.w	r3, r7, #24
 8007f32:	4611      	mov	r1, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f8a9 	bl	800808c <log_write>
    }
}
 8007f3a:	bf00      	nop
 8007f3c:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8007f40:	46bd      	mov	sp, r7
 8007f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f46:	b001      	add	sp, #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	10624dd3 	.word	0x10624dd3
 8007f50:	0800a2e0 	.word	0x0800a2e0
 8007f54:	0800a2fc 	.word	0x0800a2fc
 8007f58:	0800a318 	.word	0x0800a318
 8007f5c:	0800a334 	.word	0x0800a334
 8007f60:	20003f2c 	.word	0x20003f2c

08007f64 <log_bufReadByte>:

int8_t log_bufReadByte(uint8_t* ret_byte)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
    if (log_writeIndex == log_readIndex)
 8007f6c:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <log_bufReadByte+0x5c>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <log_bufReadByte+0x60>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d103      	bne.n	8007f80 <log_bufReadByte+0x1c>
    {
        log_status = LOG_EMPTY;
 8007f78:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <log_bufReadByte+0x64>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e00c      	b.n	8007f9a <log_bufReadByte+0x36>
    }
    else
    {
        *ret_byte = log_buf[log_readIndex];
 8007f80:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <log_bufReadByte+0x60>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <log_bufReadByte+0x68>)
 8007f86:	5cd2      	ldrb	r2, [r2, r3]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	701a      	strb	r2, [r3, #0]
        log_readIndex = (log_readIndex + 1) % LOG_BUF_SIZE;
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <log_bufReadByte+0x60>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f96:	4a0b      	ldr	r2, [pc, #44]	; (8007fc4 <log_bufReadByte+0x60>)
 8007f98:	6013      	str	r3, [r2, #0]
    }

    // Check after the last read if the log is empty
    if (log_writeIndex == log_readIndex)
 8007f9a:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <log_bufReadByte+0x5c>)
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <log_bufReadByte+0x60>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d102      	bne.n	8007fac <log_bufReadByte+0x48>
    {
        log_status = LOG_EMPTY;
 8007fa6:	4b08      	ldr	r3, [pc, #32]	; (8007fc8 <log_bufReadByte+0x64>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
    }

    return (log_status);
 8007fac:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <log_bufReadByte+0x64>)
 8007fae:	f993 3000 	ldrsb.w	r3, [r3]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20003f28 	.word	0x20003f28
 8007fc4:	20003f24 	.word	0x20003f24
 8007fc8:	2000000f 	.word	0x2000000f
 8007fcc:	20002f24 	.word	0x20002f24

08007fd0 <log_read>:

// Example log_read implementation sending logs to a UART
void log_read(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
    static uint8_t log_errorMsg[] = "\n\r\[ERROR] Log buffer overflow!\n\r";
    uint32_t msg_index = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60fb      	str	r3, [r7, #12]
    uint32_t timeMs = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60bb      	str	r3, [r7, #8]
    uint32_t timeoutMs = 10000;
 8007fde:	f242 7310 	movw	r3, #10000	; 0x2710
 8007fe2:	607b      	str	r3, [r7, #4]

    // Wait for previous transfer to complete if it hasn't already
    while ((Usart_DmaTxComplete != 1) && (timeMs < timeoutMs))
 8007fe4:	e005      	b.n	8007ff2 <log_read+0x22>
    {
        HAL_Delay(1);
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	f7f8 fb0c 	bl	8000604 <HAL_Delay>
        timeMs++;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60bb      	str	r3, [r7, #8]
    while ((Usart_DmaTxComplete != 1) && (timeMs < timeoutMs))
 8007ff2:	4b21      	ldr	r3, [pc, #132]	; (8008078 <log_read+0xa8>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d003      	beq.n	8008004 <log_read+0x34>
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	d3f0      	bcc.n	8007fe6 <log_read+0x16>
    }

    // Read out string from log buffer, stopping when reaching a null character
    if (log_status != LOG_EMPTY)
 8008004:	4b1d      	ldr	r3, [pc, #116]	; (800807c <log_read+0xac>)
 8008006:	f993 3000 	ldrsb.w	r3, [r3]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d02f      	beq.n	800806e <log_read+0x9e>
    {
        // If the log got full, output an error immediately
        if (log_status == LOG_FULL)
 800800e:	4b1b      	ldr	r3, [pc, #108]	; (800807c <log_read+0xac>)
 8008010:	f993 3000 	ldrsb.w	r3, [r3]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d10b      	bne.n	8008032 <log_read+0x62>
        {
            HAL_UART_Transmit(&huart1, log_errorMsg, ustrlen(log_errorMsg), HAL_MAX_DELAY);
 800801a:	4819      	ldr	r0, [pc, #100]	; (8008080 <log_read+0xb0>)
 800801c:	f7ff feb6 	bl	8007d8c <ustrlen>
 8008020:	4603      	mov	r3, r0
 8008022:	b29a      	uxth	r2, r3
 8008024:	f04f 33ff 	mov.w	r3, #4294967295
 8008028:	4915      	ldr	r1, [pc, #84]	; (8008080 <log_read+0xb0>)
 800802a:	4816      	ldr	r0, [pc, #88]	; (8008084 <log_read+0xb4>)
 800802c:	f7fb f95d 	bl	80032ea <HAL_UART_Transmit>
 8008030:	e011      	b.n	8008056 <log_read+0x86>
        else
        {
            // Copy last string
            do
            {
                log_bufReadByte(&log_msg_dma[msg_index]);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4a14      	ldr	r2, [pc, #80]	; (8008088 <log_read+0xb8>)
 8008036:	4413      	add	r3, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff ff93 	bl	8007f64 <log_bufReadByte>
                msg_index++;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
            }
            while ((log_msg_dma[msg_index - 1] != '\0') && (msg_index < (LOG_MSG_MAX_SIZE - 1)));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3b01      	subs	r3, #1
 8008048:	4a0f      	ldr	r2, [pc, #60]	; (8008088 <log_read+0xb8>)
 800804a:	5cd3      	ldrb	r3, [r2, r3]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <log_read+0x86>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2bfe      	cmp	r3, #254	; 0xfe
 8008054:	d9ed      	bls.n	8008032 <log_read+0x62>
        }

        // Reset transfer flag and send new string via DMA to UART
        Usart_DmaTxComplete = 0;
 8008056:	4b08      	ldr	r3, [pc, #32]	; (8008078 <log_read+0xa8>)
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, log_msg_dma, (msg_index - 1));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29b      	uxth	r3, r3
 8008064:	461a      	mov	r2, r3
 8008066:	4908      	ldr	r1, [pc, #32]	; (8008088 <log_read+0xb8>)
 8008068:	4806      	ldr	r0, [pc, #24]	; (8008084 <log_read+0xb4>)
 800806a:	f7fb f9d7 	bl	800341c <HAL_UART_Transmit_DMA>
    }
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000038 	.word	0x20000038
 800807c:	2000000f 	.word	0x2000000f
 8008080:	20000010 	.word	0x20000010
 8008084:	20004280 	.word	0x20004280
 8008088:	20003f30 	.word	0x20003f30

0800808c <log_write>:

/* Private Function Definitions ----------------------------------------------*/
int8_t log_write(char* str, uint32_t len)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]

    if (len >= LOG_MSG_MAX_SIZE)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2bff      	cmp	r3, #255	; 0xff
 800809e:	d913      	bls.n	80080c8 <log_write+0x3c>
    {
        log_warn("Something tried to write a log message >= %d!!!", LOG_MSG_MAX_SIZE);
 80080a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4b11      	ldr	r3, [pc, #68]	; (80080ec <log_write+0x60>)
 80080a8:	229d      	movs	r2, #157	; 0x9d
 80080aa:	4911      	ldr	r1, [pc, #68]	; (80080f0 <log_write+0x64>)
 80080ac:	2002      	movs	r0, #2
 80080ae:	f7ff fe7b 	bl	8007da8 <log_event>
    }

    // TODO: Wrap this in a mutex
    // Write data to buffer, terminating if log is full
    while ((i < len) && (log_status != LOG_FULL))
 80080b2:	e009      	b.n	80080c8 <log_write+0x3c>
    {
        log_writeByte(str[i]);
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f81b 	bl	80080f8 <log_writeByte>
        i++;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
    while ((i < len) && (log_status != LOG_FULL))
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d205      	bcs.n	80080dc <log_write+0x50>
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <log_write+0x68>)
 80080d2:	f993 3000 	ldrsb.w	r3, [r3]
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080da:	d1eb      	bne.n	80080b4 <log_write+0x28>
    }

    return (log_status);
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <log_write+0x68>)
 80080de:	f993 3000 	ldrsb.w	r3, [r3]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	0800a350 	.word	0x0800a350
 80080f0:	0800a380 	.word	0x0800a380
 80080f4:	2000000f 	.word	0x2000000f

080080f8 <log_writeByte>:

int8_t log_writeByte(uint8_t byte)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	71fb      	strb	r3, [r7, #7]
    // Check to see if log buffer is full
    if (log_writeIndex == ((log_readIndex - 1 + LOG_BUF_SIZE) % LOG_BUF_SIZE))
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <log_writeByte+0x64>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800810a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800810e:	4b14      	ldr	r3, [pc, #80]	; (8008160 <log_writeByte+0x68>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d103      	bne.n	800811e <log_writeByte+0x26>
    {
        log_status = LOG_FULL;
 8008116:	4b13      	ldr	r3, [pc, #76]	; (8008164 <log_writeByte+0x6c>)
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e014      	b.n	8008148 <log_writeByte+0x50>
    }
    else    // Copy byte if not full
    {
        log_status = LOG_OK;
 800811e:	4b11      	ldr	r3, [pc, #68]	; (8008164 <log_writeByte+0x6c>)
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
        log_writeLock = LOG_WRITE_BUSY;
 8008124:	4b10      	ldr	r3, [pc, #64]	; (8008168 <log_writeByte+0x70>)
 8008126:	2201      	movs	r2, #1
 8008128:	701a      	strb	r2, [r3, #0]
        log_buf[log_writeIndex] = byte;
 800812a:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <log_writeByte+0x68>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	490f      	ldr	r1, [pc, #60]	; (800816c <log_writeByte+0x74>)
 8008130:	79fa      	ldrb	r2, [r7, #7]
 8008132:	54ca      	strb	r2, [r1, r3]
        log_writeLock = LOG_WRITE_FREE;
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <log_writeByte+0x70>)
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
        log_writeIndex = (log_writeIndex + 1) % LOG_BUF_SIZE;
 800813a:	4b09      	ldr	r3, [pc, #36]	; (8008160 <log_writeByte+0x68>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008144:	4a06      	ldr	r2, [pc, #24]	; (8008160 <log_writeByte+0x68>)
 8008146:	6013      	str	r3, [r2, #0]
    }

    return (log_status);
 8008148:	4b06      	ldr	r3, [pc, #24]	; (8008164 <log_writeByte+0x6c>)
 800814a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20003f24 	.word	0x20003f24
 8008160:	20003f28 	.word	0x20003f28
 8008164:	2000000f 	.word	0x2000000f
 8008168:	20003f2c 	.word	0x20003f2c
 800816c:	20002f24 	.word	0x20002f24

08008170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  log_info("\n\r\n\rSTM32F407VETx Running\n\r");
 8008174:	4b22      	ldr	r3, [pc, #136]	; (8008200 <main+0x90>)
 8008176:	224b      	movs	r2, #75	; 0x4b
 8008178:	4922      	ldr	r1, [pc, #136]	; (8008204 <main+0x94>)
 800817a:	2003      	movs	r0, #3
 800817c:	f7ff fe14 	bl	8007da8 <log_event>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008180:	f7f8 f9fe 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008184:	f000 f84e 	bl	8008224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008188:	f7ff fcd4 	bl	8007b34 <MX_GPIO_Init>
  MX_DMA_Init();
 800818c:	f7ff fc20 	bl	80079d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8008190:	f7ff fd86 	bl	8007ca0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8008194:	f000 fc7c 	bl	8008a90 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8008198:	f000 f8ce 	bl	8008338 <MX_SPI2_Init>
  MX_TIM10_Init();
 800819c:	f000 fc0e 	bl	80089bc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  // Deinit TIM10 - this should only be init'd just before we need to do CC110 tx/rx
  HAL_TIM_Base_MspDeInit(&htim10);
 80081a0:	4819      	ldr	r0, [pc, #100]	; (8008208 <main+0x98>)
 80081a2:	f000 fc5b 	bl	8008a5c <HAL_TIM_Base_MspDeInit>
  setbuf(stdout, NULL);
 80081a6:	4b19      	ldr	r3, [pc, #100]	; (800820c <main+0x9c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fe66 	bl	8008e80 <setbuf>
  log_info("GPIO Initialized");
 80081b4:	4b16      	ldr	r3, [pc, #88]	; (8008210 <main+0xa0>)
 80081b6:	2269      	movs	r2, #105	; 0x69
 80081b8:	4912      	ldr	r1, [pc, #72]	; (8008204 <main+0x94>)
 80081ba:	2003      	movs	r0, #3
 80081bc:	f7ff fdf4 	bl	8007da8 <log_event>
  log_info("TIM10 Initialized");
 80081c0:	4b14      	ldr	r3, [pc, #80]	; (8008214 <main+0xa4>)
 80081c2:	226a      	movs	r2, #106	; 0x6a
 80081c4:	490f      	ldr	r1, [pc, #60]	; (8008204 <main+0x94>)
 80081c6:	2003      	movs	r0, #3
 80081c8:	f7ff fdee 	bl	8007da8 <log_event>
  log_info("I2C1 Initialized");
 80081cc:	4b12      	ldr	r3, [pc, #72]	; (8008218 <main+0xa8>)
 80081ce:	226b      	movs	r2, #107	; 0x6b
 80081d0:	490c      	ldr	r1, [pc, #48]	; (8008204 <main+0x94>)
 80081d2:	2003      	movs	r0, #3
 80081d4:	f7ff fde8 	bl	8007da8 <log_event>
  log_info("USART1 Initialized");
 80081d8:	4b10      	ldr	r3, [pc, #64]	; (800821c <main+0xac>)
 80081da:	226c      	movs	r2, #108	; 0x6c
 80081dc:	4909      	ldr	r1, [pc, #36]	; (8008204 <main+0x94>)
 80081de:	2003      	movs	r0, #3
 80081e0:	f7ff fde2 	bl	8007da8 <log_event>
  log_info("Starting OS...");
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <main+0xb0>)
 80081e6:	226d      	movs	r2, #109	; 0x6d
 80081e8:	4906      	ldr	r1, [pc, #24]	; (8008204 <main+0x94>)
 80081ea:	2003      	movs	r0, #3
 80081ec:	f7ff fddc 	bl	8007da8 <log_event>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80081f0:	f7fc f824 	bl	800423c <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80081f4:	f7ff fc2a 	bl	8007a4c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80081f8:	f7fc f854 	bl	80042a4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80081fc:	e7fe      	b.n	80081fc <main+0x8c>
 80081fe:	bf00      	nop
 8008200:	0800a390 	.word	0x0800a390
 8008204:	0800a3ac 	.word	0x0800a3ac
 8008208:	20004240 	.word	0x20004240
 800820c:	2000003c 	.word	0x2000003c
 8008210:	0800a3bc 	.word	0x0800a3bc
 8008214:	0800a3d0 	.word	0x0800a3d0
 8008218:	0800a3e4 	.word	0x0800a3e4
 800821c:	0800a3f8 	.word	0x0800a3f8
 8008220:	0800a40c 	.word	0x0800a40c

08008224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b094      	sub	sp, #80	; 0x50
 8008228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800822a:	f107 0320 	add.w	r3, r7, #32
 800822e:	2230      	movs	r2, #48	; 0x30
 8008230:	2100      	movs	r1, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fd63 	bl	8008cfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	609a      	str	r2, [r3, #8]
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008248:	2300      	movs	r3, #0
 800824a:	60bb      	str	r3, [r7, #8]
 800824c:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <SystemClock_Config+0xcc>)
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	4a27      	ldr	r2, [pc, #156]	; (80082f0 <SystemClock_Config+0xcc>)
 8008252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008256:	6413      	str	r3, [r2, #64]	; 0x40
 8008258:	4b25      	ldr	r3, [pc, #148]	; (80082f0 <SystemClock_Config+0xcc>)
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008260:	60bb      	str	r3, [r7, #8]
 8008262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008264:	2300      	movs	r3, #0
 8008266:	607b      	str	r3, [r7, #4]
 8008268:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <SystemClock_Config+0xd0>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a21      	ldr	r2, [pc, #132]	; (80082f4 <SystemClock_Config+0xd0>)
 800826e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	4b1f      	ldr	r3, [pc, #124]	; (80082f4 <SystemClock_Config+0xd0>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008280:	2301      	movs	r3, #1
 8008282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800828a:	2302      	movs	r3, #2
 800828c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800828e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008294:	2304      	movs	r3, #4
 8008296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008298:	23a8      	movs	r3, #168	; 0xa8
 800829a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800829c:	2302      	movs	r3, #2
 800829e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80082a0:	2307      	movs	r3, #7
 80082a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082a4:	f107 0320 	add.w	r3, r7, #32
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7f9 fae5 	bl	8001878 <HAL_RCC_OscConfig>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80082b4:	f000 f832 	bl	800831c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082b8:	230f      	movs	r3, #15
 80082ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082bc:	2302      	movs	r3, #2
 80082be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80082c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80082c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80082ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	2105      	movs	r1, #5
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7f9 fd3e 	bl	8001d58 <HAL_RCC_ClockConfig>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80082e2:	f000 f81b 	bl	800831c <Error_Handler>
  }
}
 80082e6:	bf00      	nop
 80082e8:	3750      	adds	r7, #80	; 0x50
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40023800 	.word	0x40023800
 80082f4:	40007000 	.word	0x40007000

080082f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a04      	ldr	r2, [pc, #16]	; (8008318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d101      	bne.n	800830e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800830a:	f7f8 f95b 	bl	80005c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40001400 	.word	0x40001400

0800831c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    log_error("\n\r\n\rERROR Handler Caught an Exception!\n\r\n\r");
 8008320:	4b03      	ldr	r3, [pc, #12]	; (8008330 <Error_Handler+0x14>)
 8008322:	22cd      	movs	r2, #205	; 0xcd
 8008324:	4903      	ldr	r1, [pc, #12]	; (8008334 <Error_Handler+0x18>)
 8008326:	2001      	movs	r0, #1
 8008328:	f7ff fd3e 	bl	8007da8 <log_event>
  /* USER CODE END Error_Handler_Debug */
}
 800832c:	bf00      	nop
 800832e:	bd80      	pop	{r7, pc}
 8008330:	0800a41c 	.word	0x0800a41c
 8008334:	0800a3ac 	.word	0x0800a3ac

08008338 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800833c:	4b17      	ldr	r3, [pc, #92]	; (800839c <MX_SPI2_Init+0x64>)
 800833e:	4a18      	ldr	r2, [pc, #96]	; (80083a0 <MX_SPI2_Init+0x68>)
 8008340:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008342:	4b16      	ldr	r3, [pc, #88]	; (800839c <MX_SPI2_Init+0x64>)
 8008344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008348:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800834a:	4b14      	ldr	r3, [pc, #80]	; (800839c <MX_SPI2_Init+0x64>)
 800834c:	2200      	movs	r2, #0
 800834e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008350:	4b12      	ldr	r3, [pc, #72]	; (800839c <MX_SPI2_Init+0x64>)
 8008352:	2200      	movs	r2, #0
 8008354:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008356:	4b11      	ldr	r3, [pc, #68]	; (800839c <MX_SPI2_Init+0x64>)
 8008358:	2200      	movs	r2, #0
 800835a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800835c:	4b0f      	ldr	r3, [pc, #60]	; (800839c <MX_SPI2_Init+0x64>)
 800835e:	2200      	movs	r2, #0
 8008360:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008362:	4b0e      	ldr	r3, [pc, #56]	; (800839c <MX_SPI2_Init+0x64>)
 8008364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008368:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800836a:	4b0c      	ldr	r3, [pc, #48]	; (800839c <MX_SPI2_Init+0x64>)
 800836c:	2210      	movs	r2, #16
 800836e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <MX_SPI2_Init+0x64>)
 8008372:	2200      	movs	r2, #0
 8008374:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <MX_SPI2_Init+0x64>)
 8008378:	2200      	movs	r2, #0
 800837a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800837c:	4b07      	ldr	r3, [pc, #28]	; (800839c <MX_SPI2_Init+0x64>)
 800837e:	2200      	movs	r2, #0
 8008380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008382:	4b06      	ldr	r3, [pc, #24]	; (800839c <MX_SPI2_Init+0x64>)
 8008384:	220a      	movs	r2, #10
 8008386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008388:	4804      	ldr	r0, [pc, #16]	; (800839c <MX_SPI2_Init+0x64>)
 800838a:	f7f9 ff09 	bl	80021a0 <HAL_SPI_Init>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008394:	f7ff ffc2 	bl	800831c <Error_Handler>
  }

}
 8008398:	bf00      	nop
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200040e8 	.word	0x200040e8
 80083a0:	40003800 	.word	0x40003800

080083a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	; 0x28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	605a      	str	r2, [r3, #4]
 80083b6:	609a      	str	r2, [r3, #8]
 80083b8:	60da      	str	r2, [r3, #12]
 80083ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a5b      	ldr	r2, [pc, #364]	; (8008530 <HAL_SPI_MspInit+0x18c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	f040 80af 	bne.w	8008526 <HAL_SPI_MspInit+0x182>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80083c8:	2300      	movs	r3, #0
 80083ca:	613b      	str	r3, [r7, #16]
 80083cc:	4b59      	ldr	r3, [pc, #356]	; (8008534 <HAL_SPI_MspInit+0x190>)
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	4a58      	ldr	r2, [pc, #352]	; (8008534 <HAL_SPI_MspInit+0x190>)
 80083d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083d6:	6413      	str	r3, [r2, #64]	; 0x40
 80083d8:	4b56      	ldr	r3, [pc, #344]	; (8008534 <HAL_SPI_MspInit+0x190>)
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	4b52      	ldr	r3, [pc, #328]	; (8008534 <HAL_SPI_MspInit+0x190>)
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	4a51      	ldr	r2, [pc, #324]	; (8008534 <HAL_SPI_MspInit+0x190>)
 80083ee:	f043 0304 	orr.w	r3, r3, #4
 80083f2:	6313      	str	r3, [r2, #48]	; 0x30
 80083f4:	4b4f      	ldr	r3, [pc, #316]	; (8008534 <HAL_SPI_MspInit+0x190>)
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008400:	2300      	movs	r3, #0
 8008402:	60bb      	str	r3, [r7, #8]
 8008404:	4b4b      	ldr	r3, [pc, #300]	; (8008534 <HAL_SPI_MspInit+0x190>)
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	4a4a      	ldr	r2, [pc, #296]	; (8008534 <HAL_SPI_MspInit+0x190>)
 800840a:	f043 0302 	orr.w	r3, r3, #2
 800840e:	6313      	str	r3, [r2, #48]	; 0x30
 8008410:	4b48      	ldr	r3, [pc, #288]	; (8008534 <HAL_SPI_MspInit+0x190>)
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	60bb      	str	r3, [r7, #8]
 800841a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800841c:	230c      	movs	r3, #12
 800841e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008420:	2302      	movs	r3, #2
 8008422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008424:	2300      	movs	r3, #0
 8008426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008428:	2300      	movs	r3, #0
 800842a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800842c:	2305      	movs	r3, #5
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	4619      	mov	r1, r3
 8008436:	4840      	ldr	r0, [pc, #256]	; (8008538 <HAL_SPI_MspInit+0x194>)
 8008438:	f7f8 fe06 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800843c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008442:	2302      	movs	r3, #2
 8008444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800844a:	2300      	movs	r3, #0
 800844c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800844e:	2305      	movs	r3, #5
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008452:	f107 0314 	add.w	r3, r7, #20
 8008456:	4619      	mov	r1, r3
 8008458:	4838      	ldr	r0, [pc, #224]	; (800853c <HAL_SPI_MspInit+0x198>)
 800845a:	f7f8 fdf5 	bl	8001048 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800845e:	4b38      	ldr	r3, [pc, #224]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 8008460:	4a38      	ldr	r2, [pc, #224]	; (8008544 <HAL_SPI_MspInit+0x1a0>)
 8008462:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8008464:	4b36      	ldr	r3, [pc, #216]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 8008466:	2200      	movs	r2, #0
 8008468:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800846a:	4b35      	ldr	r3, [pc, #212]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 800846c:	2200      	movs	r2, #0
 800846e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008470:	4b33      	ldr	r3, [pc, #204]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 8008472:	2200      	movs	r2, #0
 8008474:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008476:	4b32      	ldr	r3, [pc, #200]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 8008478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800847c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800847e:	4b30      	ldr	r3, [pc, #192]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 8008480:	2200      	movs	r2, #0
 8008482:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008484:	4b2e      	ldr	r3, [pc, #184]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 8008486:	2200      	movs	r2, #0
 8008488:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800848a:	4b2d      	ldr	r3, [pc, #180]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 800848c:	2200      	movs	r2, #0
 800848e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008490:	4b2b      	ldr	r3, [pc, #172]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 8008492:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008496:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008498:	4b29      	ldr	r3, [pc, #164]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 800849a:	2200      	movs	r2, #0
 800849c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800849e:	4828      	ldr	r0, [pc, #160]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 80084a0:	f7f8 f9e4 	bl	800086c <HAL_DMA_Init>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80084aa:	f7ff ff37 	bl	800831c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a23      	ldr	r2, [pc, #140]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 80084b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80084b4:	4a22      	ldr	r2, [pc, #136]	; (8008540 <HAL_SPI_MspInit+0x19c>)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80084ba:	4b23      	ldr	r3, [pc, #140]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084bc:	4a23      	ldr	r2, [pc, #140]	; (800854c <HAL_SPI_MspInit+0x1a8>)
 80084be:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80084c0:	4b21      	ldr	r3, [pc, #132]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80084c6:	4b20      	ldr	r3, [pc, #128]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084c8:	2240      	movs	r2, #64	; 0x40
 80084ca:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084cc:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80084d2:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084d8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80084da:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084dc:	2200      	movs	r2, #0
 80084de:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80084e0:	4b19      	ldr	r3, [pc, #100]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80084e6:	4b18      	ldr	r3, [pc, #96]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80084ec:	4b16      	ldr	r3, [pc, #88]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80084f2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80084f4:	4b14      	ldr	r3, [pc, #80]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80084fa:	4813      	ldr	r0, [pc, #76]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 80084fc:	f7f8 f9b6 	bl	800086c <HAL_DMA_Init>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8008506:	f7ff ff09 	bl	800831c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a0e      	ldr	r2, [pc, #56]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 800850e:	649a      	str	r2, [r3, #72]	; 0x48
 8008510:	4a0d      	ldr	r2, [pc, #52]	; (8008548 <HAL_SPI_MspInit+0x1a4>)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8008516:	2200      	movs	r2, #0
 8008518:	2105      	movs	r1, #5
 800851a:	2024      	movs	r0, #36	; 0x24
 800851c:	f7f8 f96e 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008520:	2024      	movs	r0, #36	; 0x24
 8008522:	f7f8 f987 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008526:	bf00      	nop
 8008528:	3728      	adds	r7, #40	; 0x28
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40003800 	.word	0x40003800
 8008534:	40023800 	.word	0x40023800
 8008538:	40020800 	.word	0x40020800
 800853c:	40020400 	.word	0x40020400
 8008540:	200041a0 	.word	0x200041a0
 8008544:	40026058 	.word	0x40026058
 8008548:	20004140 	.word	0x20004140
 800854c:	40026070 	.word	0x40026070

08008550 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a11      	ldr	r2, [pc, #68]	; (80085a4 <HAL_SPI_MspDeInit+0x54>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d11b      	bne.n	800859a <HAL_SPI_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8008562:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <HAL_SPI_MspDeInit+0x58>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	4a10      	ldr	r2, [pc, #64]	; (80085a8 <HAL_SPI_MspDeInit+0x58>)
 8008568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800856c:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 800856e:	210c      	movs	r1, #12
 8008570:	480e      	ldr	r0, [pc, #56]	; (80085ac <HAL_SPI_MspDeInit+0x5c>)
 8008572:	f7f8 ff03 	bl	800137c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8008576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800857a:	480d      	ldr	r0, [pc, #52]	; (80085b0 <HAL_SPI_MspDeInit+0x60>)
 800857c:	f7f8 fefe 	bl	800137c <HAL_GPIO_DeInit>

    /* SPI2 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008584:	4618      	mov	r0, r3
 8008586:	f7f8 fa1f 	bl	80009c8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800858e:	4618      	mov	r0, r3
 8008590:	f7f8 fa1a 	bl	80009c8 <HAL_DMA_DeInit>

    /* SPI2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8008594:	2024      	movs	r0, #36	; 0x24
 8008596:	f7f8 f95b 	bl	8000850 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
} 
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	40003800 	.word	0x40003800
 80085a8:	40023800 	.word	0x40023800
 80085ac:	40020800 	.word	0x40020800
 80085b0:	40020400 	.word	0x40020400

080085b4 <Spi_start>:

/* USER CODE BEGIN 1 */
void Spi_start(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
    while (Spi_Busy != 0)
 80085ba:	bf00      	nop
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <Spi_start+0x40>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1fa      	bne.n	80085bc <Spi_start+0x8>
    {
        // Do nothing
    }
    Spi_Busy = 1;
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <Spi_start+0x40>)
 80085c8:	2201      	movs	r2, #1
 80085ca:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80085cc:	2200      	movs	r2, #0
 80085ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085d2:	4809      	ldr	r0, [pc, #36]	; (80085f8 <Spi_start+0x44>)
 80085d4:	f7f8 ffe4 	bl	80015a0 <HAL_GPIO_WritePin>
    for (volatile uint32_t i = 0; i < 5; i++);
 80085d8:	2300      	movs	r3, #0
 80085da:	607b      	str	r3, [r7, #4]
 80085dc:	e002      	b.n	80085e4 <Spi_start+0x30>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3301      	adds	r3, #1
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d9f9      	bls.n	80085de <Spi_start+0x2a>
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20004030 	.word	0x20004030
 80085f8:	40020400 	.word	0x40020400

080085fc <Spi_stop>:

void Spi_stop(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8008602:	2201      	movs	r2, #1
 8008604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008608:	4809      	ldr	r0, [pc, #36]	; (8008630 <Spi_stop+0x34>)
 800860a:	f7f8 ffc9 	bl	80015a0 <HAL_GPIO_WritePin>
    for (volatile uint32_t i = 0; i < 5; i++);
 800860e:	2300      	movs	r3, #0
 8008610:	607b      	str	r3, [r7, #4]
 8008612:	e002      	b.n	800861a <Spi_stop+0x1e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3301      	adds	r3, #1
 8008618:	607b      	str	r3, [r7, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b04      	cmp	r3, #4
 800861e:	d9f9      	bls.n	8008614 <Spi_stop+0x18>
    Spi_Busy = 0;
 8008620:	4b04      	ldr	r3, [pc, #16]	; (8008634 <Spi_stop+0x38>)
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40020400 	.word	0x40020400
 8008634:	20004030 	.word	0x20004030

08008638 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *spiHandle)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
    if (spiHandle->Instance==SPI2)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a05      	ldr	r2, [pc, #20]	; (800865c <HAL_SPI_TxRxCpltCallback+0x24>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d104      	bne.n	8008654 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        Spi_stop();
 800864a:	f7ff ffd7 	bl	80085fc <Spi_stop>
        Spi_DmaTxRxComplete = 1;
 800864e:	4b04      	ldr	r3, [pc, #16]	; (8008660 <HAL_SPI_TxRxCpltCallback+0x28>)
 8008650:	2201      	movs	r2, #1
 8008652:	701a      	strb	r2, [r3, #0]
    }
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40003800 	.word	0x40003800
 8008660:	20000031 	.word	0x20000031

08008664 <HAL_SPI_RxCpltCallback>:
        Spi_stop();
    }
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *spiHandle)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
    if (spiHandle->Instance==SPI2)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a04      	ldr	r2, [pc, #16]	; (8008684 <HAL_SPI_RxCpltCallback+0x20>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d101      	bne.n	800867a <HAL_SPI_RxCpltCallback+0x16>
    {
        Spi_stop();
 8008676:	f7ff ffc1 	bl	80085fc <Spi_stop>
    }
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40003800 	.word	0x40003800

08008688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800868e:	2300      	movs	r3, #0
 8008690:	607b      	str	r3, [r7, #4]
 8008692:	4b12      	ldr	r3, [pc, #72]	; (80086dc <HAL_MspInit+0x54>)
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	4a11      	ldr	r2, [pc, #68]	; (80086dc <HAL_MspInit+0x54>)
 8008698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800869c:	6453      	str	r3, [r2, #68]	; 0x44
 800869e:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <HAL_MspInit+0x54>)
 80086a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a6:	607b      	str	r3, [r7, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80086aa:	2300      	movs	r3, #0
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <HAL_MspInit+0x54>)
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <HAL_MspInit+0x54>)
 80086b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6413      	str	r3, [r2, #64]	; 0x40
 80086ba:	4b08      	ldr	r3, [pc, #32]	; (80086dc <HAL_MspInit+0x54>)
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80086c6:	2200      	movs	r2, #0
 80086c8:	210f      	movs	r1, #15
 80086ca:	f06f 0001 	mvn.w	r0, #1
 80086ce:	f7f8 f895 	bl	80007fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40023800 	.word	0x40023800

080086e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08c      	sub	sp, #48	; 0x30
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80086f0:	2200      	movs	r2, #0
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	2037      	movs	r0, #55	; 0x37
 80086f6:	f7f8 f881 	bl	80007fc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 80086fa:	2037      	movs	r0, #55	; 0x37
 80086fc:	f7f8 f89a 	bl	8000834 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8008700:	2300      	movs	r3, #0
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	4b1f      	ldr	r3, [pc, #124]	; (8008784 <HAL_InitTick+0xa4>)
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	4a1e      	ldr	r2, [pc, #120]	; (8008784 <HAL_InitTick+0xa4>)
 800870a:	f043 0320 	orr.w	r3, r3, #32
 800870e:	6413      	str	r3, [r2, #64]	; 0x40
 8008710:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <HAL_InitTick+0xa4>)
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800871c:	f107 0210 	add.w	r2, r7, #16
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7f9 fd08 	bl	800213c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800872c:	f7f9 fcde 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8008730:	4603      	mov	r3, r0
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	4a13      	ldr	r2, [pc, #76]	; (8008788 <HAL_InitTick+0xa8>)
 800873a:	fba2 2303 	umull	r2, r3, r2, r3
 800873e:	0c9b      	lsrs	r3, r3, #18
 8008740:	3b01      	subs	r3, #1
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8008744:	4b11      	ldr	r3, [pc, #68]	; (800878c <HAL_InitTick+0xac>)
 8008746:	4a12      	ldr	r2, [pc, #72]	; (8008790 <HAL_InitTick+0xb0>)
 8008748:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <HAL_InitTick+0xac>)
 800874c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008750:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8008752:	4a0e      	ldr	r2, [pc, #56]	; (800878c <HAL_InitTick+0xac>)
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8008758:	4b0c      	ldr	r3, [pc, #48]	; (800878c <HAL_InitTick+0xac>)
 800875a:	2200      	movs	r2, #0
 800875c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <HAL_InitTick+0xac>)
 8008760:	2200      	movs	r2, #0
 8008762:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8008764:	4809      	ldr	r0, [pc, #36]	; (800878c <HAL_InitTick+0xac>)
 8008766:	f7fa fb3f 	bl	8002de8 <HAL_TIM_Base_Init>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d104      	bne.n	800877a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8008770:	4806      	ldr	r0, [pc, #24]	; (800878c <HAL_InitTick+0xac>)
 8008772:	f7fa fb64 	bl	8002e3e <HAL_TIM_Base_Start_IT>
 8008776:	4603      	mov	r3, r0
 8008778:	e000      	b.n	800877c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
}
 800877c:	4618      	mov	r0, r3
 800877e:	3730      	adds	r7, #48	; 0x30
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	40023800 	.word	0x40023800
 8008788:	431bde83 	.word	0x431bde83
 800878c:	20004200 	.word	0x20004200
 8008790:	40001400 	.word	0x40001400

08008794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008798:	bf00      	nop
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087a2:	b480      	push	{r7}
 80087a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087a6:	e7fe      	b.n	80087a6 <HardFault_Handler+0x4>

080087a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80087ac:	e7fe      	b.n	80087ac <MemManage_Handler+0x4>

080087ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80087ae:	b480      	push	{r7}
 80087b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80087b2:	e7fe      	b.n	80087b2 <BusFault_Handler+0x4>

080087b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80087b8:	e7fe      	b.n	80087b8 <UsageFault_Handler+0x4>

080087ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087ba:	b480      	push	{r7}
 80087bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087be:	bf00      	nop
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80087cc:	4802      	ldr	r0, [pc, #8]	; (80087d8 <DMA1_Stream3_IRQHandler+0x10>)
 80087ce:	f7f8 f9d3 	bl	8000b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80087d2:	bf00      	nop
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200041a0 	.word	0x200041a0

080087dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80087e0:	4802      	ldr	r0, [pc, #8]	; (80087ec <DMA1_Stream4_IRQHandler+0x10>)
 80087e2:	f7f8 f9c9 	bl	8000b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80087e6:	bf00      	nop
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20004140 	.word	0x20004140

080087f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  HAL_GPIO_WritePin(EVENT_LED_GPIO_Port, EVENT_LED_Pin, GPIO_PIN_SET);    // Measure time in ISR
 80087f4:	2201      	movs	r2, #1
 80087f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087fa:	4808      	ldr	r0, [pc, #32]	; (800881c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80087fc:	f7f8 fed0 	bl	80015a0 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8008800:	4807      	ldr	r0, [pc, #28]	; (8008820 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8008802:	f7fa fb40 	bl	8002e86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  cc110_txrx();
 8008806:	f7fe f97d 	bl	8006b04 <cc110_txrx>
  HAL_GPIO_WritePin(EVENT_LED_GPIO_Port, EVENT_LED_Pin, GPIO_PIN_RESET);  // Measure time in ISR
 800880a:	2200      	movs	r2, #0
 800880c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008810:	4802      	ldr	r0, [pc, #8]	; (800881c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8008812:	f7f8 fec5 	bl	80015a0 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008816:	bf00      	nop
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40020400 	.word	0x40020400
 8008820:	20004240 	.word	0x20004240

08008824 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008828:	4802      	ldr	r0, [pc, #8]	; (8008834 <SPI2_IRQHandler+0x10>)
 800882a:	f7f9 ffc1 	bl	80027b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200040e8 	.word	0x200040e8

08008838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800883c:	4802      	ldr	r0, [pc, #8]	; (8008848 <USART1_IRQHandler+0x10>)
 800883e:	f7fa fe59 	bl	80034f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008842:	bf00      	nop
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20004280 	.word	0x20004280

0800884c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008850:	4802      	ldr	r0, [pc, #8]	; (800885c <TIM7_IRQHandler+0x10>)
 8008852:	f7fa fb18 	bl	8002e86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008856:	bf00      	nop
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20004200 	.word	0x20004200

08008860 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008864:	4802      	ldr	r0, [pc, #8]	; (8008870 <DMA2_Stream7_IRQHandler+0x10>)
 8008866:	f7f8 f987 	bl	8000b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800886a:	bf00      	nop
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200042c0 	.word	0x200042c0

08008874 <_read>:
    {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char* ptr, int len)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	e00a      	b.n	800889c <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8008886:	f3af 8000 	nop.w
 800888a:	4601      	mov	r1, r0
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	60ba      	str	r2, [r7, #8]
 8008892:	b2ca      	uxtb	r2, r1
 8008894:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	3301      	adds	r3, #1
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	dbf0      	blt.n	8008886 <_read+0x12>
    }

    return len;
 80088a4:	687b      	ldr	r3, [r7, #4]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <_write>:

__attribute__((weak)) int _write(int file, char* ptr, int len)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	e009      	b.n	80088d4 <_write+0x26>
    {
        __io_putchar(*ptr++);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	60ba      	str	r2, [r7, #8]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3301      	adds	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	429a      	cmp	r2, r3
 80088da:	dbf1      	blt.n	80088c0 <_write+0x12>
    }
    return len;
 80088dc:	687b      	ldr	r3, [r7, #4]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <_close>:

int _close(int file)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
    return -1;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <_fstat>:

int _fstat(int file, struct stat* st)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800890e:	605a      	str	r2, [r3, #4]
    return 0;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <_lseek>:
{
    return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
    return 0;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
 **/
caddr_t _sbrk(int incr)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char* heap_end;
    char* prev_heap_end;

    if (heap_end == 0)
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <_sbrk+0x50>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <_sbrk+0x16>
        heap_end = &end;
 8008948:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <_sbrk+0x50>)
 800894a:	4a10      	ldr	r2, [pc, #64]	; (800898c <_sbrk+0x54>)
 800894c:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 800894e:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <_sbrk+0x50>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <_sbrk+0x50>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4413      	add	r3, r2
 800895c:	466a      	mov	r2, sp
 800895e:	4293      	cmp	r3, r2
 8008960:	d907      	bls.n	8008972 <_sbrk+0x3a>
    {
        errno = ENOMEM;
 8008962:	f000 f987 	bl	8008c74 <__errno>
 8008966:	4602      	mov	r2, r0
 8008968:	230c      	movs	r3, #12
 800896a:	6013      	str	r3, [r2, #0]
        return (caddr_t) -1;
 800896c:	f04f 33ff 	mov.w	r3, #4294967295
 8008970:	e006      	b.n	8008980 <_sbrk+0x48>
    }

    heap_end += incr;
 8008972:	4b05      	ldr	r3, [pc, #20]	; (8008988 <_sbrk+0x50>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4413      	add	r3, r2
 800897a:	4a03      	ldr	r2, [pc, #12]	; (8008988 <_sbrk+0x50>)
 800897c:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20004034 	.word	0x20004034
 800898c:	20004328 	.word	0x20004328

08008990 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8008990:	b480      	push	{r7}
 8008992:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008994:	4b08      	ldr	r3, [pc, #32]	; (80089b8 <SystemInit+0x28>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899a:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <SystemInit+0x28>)
 800899c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80089a4:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <SystemInit+0x28>)
 80089a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089aa:	609a      	str	r2, [r3, #8]
#endif
}
 80089ac:	bf00      	nop
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	e000ed00 	.word	0xe000ed00

080089bc <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 80089c0:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <MX_TIM10_Init+0x40>)
 80089c2:	4a0f      	ldr	r2, [pc, #60]	; (8008a00 <MX_TIM10_Init+0x44>)
 80089c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 799;
 80089c6:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <MX_TIM10_Init+0x40>)
 80089c8:	f240 321f 	movw	r2, #799	; 0x31f
 80089cc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089ce:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <MX_TIM10_Init+0x40>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 24;
 80089d4:	4b09      	ldr	r3, [pc, #36]	; (80089fc <MX_TIM10_Init+0x40>)
 80089d6:	2218      	movs	r2, #24
 80089d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089da:	4b08      	ldr	r3, [pc, #32]	; (80089fc <MX_TIM10_Init+0x40>)
 80089dc:	2200      	movs	r2, #0
 80089de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <MX_TIM10_Init+0x40>)
 80089e2:	2280      	movs	r2, #128	; 0x80
 80089e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80089e6:	4805      	ldr	r0, [pc, #20]	; (80089fc <MX_TIM10_Init+0x40>)
 80089e8:	f7fa f9fe 	bl	8002de8 <HAL_TIM_Base_Init>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80089f2:	f7ff fc93 	bl	800831c <Error_Handler>
  }

}
 80089f6:	bf00      	nop
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20004240 	.word	0x20004240
 8008a00:	40014400 	.word	0x40014400

08008a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a0f      	ldr	r2, [pc, #60]	; (8008a50 <HAL_TIM_Base_MspInit+0x4c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d118      	bne.n	8008a48 <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <HAL_TIM_Base_MspInit+0x50>)
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	4a0d      	ldr	r2, [pc, #52]	; (8008a54 <HAL_TIM_Base_MspInit+0x50>)
 8008a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a24:	6453      	str	r3, [r2, #68]	; 0x44
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <HAL_TIM_Base_MspInit+0x50>)
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8008a32:	2200      	movs	r2, #0
 8008a34:	2105      	movs	r1, #5
 8008a36:	2019      	movs	r0, #25
 8008a38:	f7f7 fee0 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008a3c:	2019      	movs	r0, #25
 8008a3e:	f7f7 fef9 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */
    HAL_TIM_Base_Start_IT(&htim10);
 8008a42:	4805      	ldr	r0, [pc, #20]	; (8008a58 <HAL_TIM_Base_MspInit+0x54>)
 8008a44:	f7fa f9fb 	bl	8002e3e <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8008a48:	bf00      	nop
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40014400 	.word	0x40014400
 8008a54:	40023800 	.word	0x40023800
 8008a58:	20004240 	.word	0x20004240

08008a5c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a07      	ldr	r2, [pc, #28]	; (8008a88 <HAL_TIM_Base_MspDeInit+0x2c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d108      	bne.n	8008a80 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM10_MspDeInit 0 */

  /* USER CODE END TIM10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM10_CLK_DISABLE();
 8008a6e:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <HAL_TIM_Base_MspDeInit+0x30>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	4a06      	ldr	r2, [pc, #24]	; (8008a8c <HAL_TIM_Base_MspDeInit+0x30>)
 8008a74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a78:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM10 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 8008a7a:	2019      	movs	r0, #25
 8008a7c:	f7f7 fee8 	bl	8000850 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM10_MspDeInit 1 */

  /* USER CODE END TIM10_MspDeInit 1 */
  }
} 
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40014400 	.word	0x40014400
 8008a8c:	40023800 	.word	0x40023800

08008a90 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008a94:	4b11      	ldr	r3, [pc, #68]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008a96:	4a12      	ldr	r2, [pc, #72]	; (8008ae0 <MX_USART1_UART_Init+0x50>)
 8008a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a9a:	4b10      	ldr	r3, [pc, #64]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008aa2:	4b0e      	ldr	r3, [pc, #56]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008aa8:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008aae:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8008ab4:	4b09      	ldr	r3, [pc, #36]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008ab6:	2208      	movs	r2, #8
 8008ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008aba:	4b08      	ldr	r3, [pc, #32]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008ac6:	4805      	ldr	r0, [pc, #20]	; (8008adc <MX_USART1_UART_Init+0x4c>)
 8008ac8:	f7fa fbc2 	bl	8003250 <HAL_UART_Init>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008ad2:	f7ff fc23 	bl	800831c <Error_Handler>
  }

}
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20004280 	.word	0x20004280
 8008ae0:	40011000 	.word	0x40011000

08008ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08a      	sub	sp, #40	; 0x28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aec:	f107 0314 	add.w	r3, r7, #20
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	60da      	str	r2, [r3, #12]
 8008afa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a36      	ldr	r2, [pc, #216]	; (8008bdc <HAL_UART_MspInit+0xf8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d165      	bne.n	8008bd2 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	4b35      	ldr	r3, [pc, #212]	; (8008be0 <HAL_UART_MspInit+0xfc>)
 8008b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0e:	4a34      	ldr	r2, [pc, #208]	; (8008be0 <HAL_UART_MspInit+0xfc>)
 8008b10:	f043 0310 	orr.w	r3, r3, #16
 8008b14:	6453      	str	r3, [r2, #68]	; 0x44
 8008b16:	4b32      	ldr	r3, [pc, #200]	; (8008be0 <HAL_UART_MspInit+0xfc>)
 8008b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1a:	f003 0310 	and.w	r3, r3, #16
 8008b1e:	613b      	str	r3, [r7, #16]
 8008b20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <HAL_UART_MspInit+0xfc>)
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	4a2d      	ldr	r2, [pc, #180]	; (8008be0 <HAL_UART_MspInit+0xfc>)
 8008b2c:	f043 0301 	orr.w	r3, r3, #1
 8008b30:	6313      	str	r3, [r2, #48]	; 0x30
 8008b32:	4b2b      	ldr	r3, [pc, #172]	; (8008be0 <HAL_UART_MspInit+0xfc>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b44:	2302      	movs	r3, #2
 8008b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008b50:	2307      	movs	r3, #7
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b54:	f107 0314 	add.w	r3, r7, #20
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4822      	ldr	r0, [pc, #136]	; (8008be4 <HAL_UART_MspInit+0x100>)
 8008b5c:	f7f8 fa74 	bl	8001048 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008b60:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b62:	4a22      	ldr	r2, [pc, #136]	; (8008bec <HAL_UART_MspInit+0x108>)
 8008b64:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8008b66:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b6e:	4b1e      	ldr	r3, [pc, #120]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b70:	2240      	movs	r2, #64	; 0x40
 8008b72:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b74:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b7a:	4b1b      	ldr	r3, [pc, #108]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b80:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b82:	4b19      	ldr	r3, [pc, #100]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b88:	4b17      	ldr	r3, [pc, #92]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008b8e:	4b16      	ldr	r3, [pc, #88]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008b94:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b9a:	4b13      	ldr	r3, [pc, #76]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008ba0:	4811      	ldr	r0, [pc, #68]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008ba2:	f7f7 fe63 	bl	800086c <HAL_DMA_Init>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008bac:	f7ff fbb6 	bl	800831c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a0d      	ldr	r2, [pc, #52]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8008bb6:	4a0c      	ldr	r2, [pc, #48]	; (8008be8 <HAL_UART_MspInit+0x104>)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2105      	movs	r1, #5
 8008bc0:	2025      	movs	r0, #37	; 0x25
 8008bc2:	f7f7 fe1b 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008bc6:	2025      	movs	r0, #37	; 0x25
 8008bc8:	f7f7 fe34 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    Usart_DmaTxComplete = 1;
 8008bcc:	4b08      	ldr	r3, [pc, #32]	; (8008bf0 <HAL_UART_MspInit+0x10c>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	3728      	adds	r7, #40	; 0x28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	40011000 	.word	0x40011000
 8008be0:	40023800 	.word	0x40023800
 8008be4:	40020000 	.word	0x40020000
 8008be8:	200042c0 	.word	0x200042c0
 8008bec:	400264b8 	.word	0x400264b8
 8008bf0:	20000038 	.word	0x20000038

08008bf4 <HAL_UART_TxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
    if (huart->Instance==USART1)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a05      	ldr	r2, [pc, #20]	; (8008c18 <HAL_UART_TxCpltCallback+0x24>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d102      	bne.n	8008c0c <HAL_UART_TxCpltCallback+0x18>
    {
        Usart_DmaTxComplete = 1;
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <HAL_UART_TxCpltCallback+0x28>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	701a      	strb	r2, [r3, #0]
    }
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	40011000 	.word	0x40011000
 8008c1c:	20000038 	.word	0x20000038

08008c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c26:	e003      	b.n	8008c30 <LoopCopyDataInit>

08008c28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008c28:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008c2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008c2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008c2e:	3104      	adds	r1, #4

08008c30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c30:	480b      	ldr	r0, [pc, #44]	; (8008c60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008c32:	4b0c      	ldr	r3, [pc, #48]	; (8008c64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008c34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008c36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008c38:	d3f6      	bcc.n	8008c28 <CopyDataInit>
  ldr  r2, =_sbss
 8008c3a:	4a0b      	ldr	r2, [pc, #44]	; (8008c68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008c3c:	e002      	b.n	8008c44 <LoopFillZerobss>

08008c3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008c3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008c40:	f842 3b04 	str.w	r3, [r2], #4

08008c44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008c44:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008c46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008c48:	d3f9      	bcc.n	8008c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008c4a:	f7ff fea1 	bl	8008990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c4e:	f000 f817 	bl	8008c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c52:	f7ff fa8d 	bl	8008170 <main>
  bx  lr    
 8008c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008c58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008c5c:	0800a580 	.word	0x0800a580
  ldr  r0, =_sdata
 8008c60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008c64:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8008c68:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8008c6c:	20004324 	.word	0x20004324

08008c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c70:	e7fe      	b.n	8008c70 <ADC_IRQHandler>
	...

08008c74 <__errno>:
 8008c74:	4b01      	ldr	r3, [pc, #4]	; (8008c7c <__errno+0x8>)
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	2000003c 	.word	0x2000003c

08008c80 <__libc_init_array>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	4e0d      	ldr	r6, [pc, #52]	; (8008cb8 <__libc_init_array+0x38>)
 8008c84:	4c0d      	ldr	r4, [pc, #52]	; (8008cbc <__libc_init_array+0x3c>)
 8008c86:	1ba4      	subs	r4, r4, r6
 8008c88:	10a4      	asrs	r4, r4, #2
 8008c8a:	2500      	movs	r5, #0
 8008c8c:	42a5      	cmp	r5, r4
 8008c8e:	d109      	bne.n	8008ca4 <__libc_init_array+0x24>
 8008c90:	4e0b      	ldr	r6, [pc, #44]	; (8008cc0 <__libc_init_array+0x40>)
 8008c92:	4c0c      	ldr	r4, [pc, #48]	; (8008cc4 <__libc_init_array+0x44>)
 8008c94:	f000 ff6c 	bl	8009b70 <_init>
 8008c98:	1ba4      	subs	r4, r4, r6
 8008c9a:	10a4      	asrs	r4, r4, #2
 8008c9c:	2500      	movs	r5, #0
 8008c9e:	42a5      	cmp	r5, r4
 8008ca0:	d105      	bne.n	8008cae <__libc_init_array+0x2e>
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ca8:	4798      	blx	r3
 8008caa:	3501      	adds	r5, #1
 8008cac:	e7ee      	b.n	8008c8c <__libc_init_array+0xc>
 8008cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cb2:	4798      	blx	r3
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	e7f2      	b.n	8008c9e <__libc_init_array+0x1e>
 8008cb8:	0800a578 	.word	0x0800a578
 8008cbc:	0800a578 	.word	0x0800a578
 8008cc0:	0800a578 	.word	0x0800a578
 8008cc4:	0800a57c 	.word	0x0800a57c

08008cc8 <malloc>:
 8008cc8:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <malloc+0xc>)
 8008cca:	4601      	mov	r1, r0
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f000 b86d 	b.w	8008dac <_malloc_r>
 8008cd2:	bf00      	nop
 8008cd4:	2000003c 	.word	0x2000003c

08008cd8 <free>:
 8008cd8:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <free+0xc>)
 8008cda:	4601      	mov	r1, r0
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	f000 b817 	b.w	8008d10 <_free_r>
 8008ce2:	bf00      	nop
 8008ce4:	2000003c 	.word	0x2000003c

08008ce8 <memcpy>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	1e43      	subs	r3, r0, #1
 8008cec:	440a      	add	r2, r1
 8008cee:	4291      	cmp	r1, r2
 8008cf0:	d100      	bne.n	8008cf4 <memcpy+0xc>
 8008cf2:	bd10      	pop	{r4, pc}
 8008cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfc:	e7f7      	b.n	8008cee <memcpy+0x6>

08008cfe <memset>:
 8008cfe:	4402      	add	r2, r0
 8008d00:	4603      	mov	r3, r0
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d100      	bne.n	8008d08 <memset+0xa>
 8008d06:	4770      	bx	lr
 8008d08:	f803 1b01 	strb.w	r1, [r3], #1
 8008d0c:	e7f9      	b.n	8008d02 <memset+0x4>
	...

08008d10 <_free_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4605      	mov	r5, r0
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d045      	beq.n	8008da4 <_free_r+0x94>
 8008d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d1c:	1f0c      	subs	r4, r1, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bfb8      	it	lt
 8008d22:	18e4      	addlt	r4, r4, r3
 8008d24:	f000 fb64 	bl	80093f0 <__malloc_lock>
 8008d28:	4a1f      	ldr	r2, [pc, #124]	; (8008da8 <_free_r+0x98>)
 8008d2a:	6813      	ldr	r3, [r2, #0]
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	b933      	cbnz	r3, 8008d3e <_free_r+0x2e>
 8008d30:	6063      	str	r3, [r4, #4]
 8008d32:	6014      	str	r4, [r2, #0]
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d3a:	f000 bb5a 	b.w	80093f2 <__malloc_unlock>
 8008d3e:	42a3      	cmp	r3, r4
 8008d40:	d90c      	bls.n	8008d5c <_free_r+0x4c>
 8008d42:	6821      	ldr	r1, [r4, #0]
 8008d44:	1862      	adds	r2, r4, r1
 8008d46:	4293      	cmp	r3, r2
 8008d48:	bf04      	itt	eq
 8008d4a:	681a      	ldreq	r2, [r3, #0]
 8008d4c:	685b      	ldreq	r3, [r3, #4]
 8008d4e:	6063      	str	r3, [r4, #4]
 8008d50:	bf04      	itt	eq
 8008d52:	1852      	addeq	r2, r2, r1
 8008d54:	6022      	streq	r2, [r4, #0]
 8008d56:	6004      	str	r4, [r0, #0]
 8008d58:	e7ec      	b.n	8008d34 <_free_r+0x24>
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	b10a      	cbz	r2, 8008d64 <_free_r+0x54>
 8008d60:	42a2      	cmp	r2, r4
 8008d62:	d9fa      	bls.n	8008d5a <_free_r+0x4a>
 8008d64:	6819      	ldr	r1, [r3, #0]
 8008d66:	1858      	adds	r0, r3, r1
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d10b      	bne.n	8008d84 <_free_r+0x74>
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	4401      	add	r1, r0
 8008d70:	1858      	adds	r0, r3, r1
 8008d72:	4282      	cmp	r2, r0
 8008d74:	6019      	str	r1, [r3, #0]
 8008d76:	d1dd      	bne.n	8008d34 <_free_r+0x24>
 8008d78:	6810      	ldr	r0, [r2, #0]
 8008d7a:	6852      	ldr	r2, [r2, #4]
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	4401      	add	r1, r0
 8008d80:	6019      	str	r1, [r3, #0]
 8008d82:	e7d7      	b.n	8008d34 <_free_r+0x24>
 8008d84:	d902      	bls.n	8008d8c <_free_r+0x7c>
 8008d86:	230c      	movs	r3, #12
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	e7d3      	b.n	8008d34 <_free_r+0x24>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	1821      	adds	r1, r4, r0
 8008d90:	428a      	cmp	r2, r1
 8008d92:	bf04      	itt	eq
 8008d94:	6811      	ldreq	r1, [r2, #0]
 8008d96:	6852      	ldreq	r2, [r2, #4]
 8008d98:	6062      	str	r2, [r4, #4]
 8008d9a:	bf04      	itt	eq
 8008d9c:	1809      	addeq	r1, r1, r0
 8008d9e:	6021      	streq	r1, [r4, #0]
 8008da0:	605c      	str	r4, [r3, #4]
 8008da2:	e7c7      	b.n	8008d34 <_free_r+0x24>
 8008da4:	bd38      	pop	{r3, r4, r5, pc}
 8008da6:	bf00      	nop
 8008da8:	20004038 	.word	0x20004038

08008dac <_malloc_r>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	1ccd      	adds	r5, r1, #3
 8008db0:	f025 0503 	bic.w	r5, r5, #3
 8008db4:	3508      	adds	r5, #8
 8008db6:	2d0c      	cmp	r5, #12
 8008db8:	bf38      	it	cc
 8008dba:	250c      	movcc	r5, #12
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	db01      	blt.n	8008dc6 <_malloc_r+0x1a>
 8008dc2:	42a9      	cmp	r1, r5
 8008dc4:	d903      	bls.n	8008dce <_malloc_r+0x22>
 8008dc6:	230c      	movs	r3, #12
 8008dc8:	6033      	str	r3, [r6, #0]
 8008dca:	2000      	movs	r0, #0
 8008dcc:	bd70      	pop	{r4, r5, r6, pc}
 8008dce:	f000 fb0f 	bl	80093f0 <__malloc_lock>
 8008dd2:	4a21      	ldr	r2, [pc, #132]	; (8008e58 <_malloc_r+0xac>)
 8008dd4:	6814      	ldr	r4, [r2, #0]
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	b991      	cbnz	r1, 8008e00 <_malloc_r+0x54>
 8008dda:	4c20      	ldr	r4, [pc, #128]	; (8008e5c <_malloc_r+0xb0>)
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	b91b      	cbnz	r3, 8008de8 <_malloc_r+0x3c>
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 f83d 	bl	8008e60 <_sbrk_r>
 8008de6:	6020      	str	r0, [r4, #0]
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f000 f838 	bl	8008e60 <_sbrk_r>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d124      	bne.n	8008e3e <_malloc_r+0x92>
 8008df4:	230c      	movs	r3, #12
 8008df6:	6033      	str	r3, [r6, #0]
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f000 fafa 	bl	80093f2 <__malloc_unlock>
 8008dfe:	e7e4      	b.n	8008dca <_malloc_r+0x1e>
 8008e00:	680b      	ldr	r3, [r1, #0]
 8008e02:	1b5b      	subs	r3, r3, r5
 8008e04:	d418      	bmi.n	8008e38 <_malloc_r+0x8c>
 8008e06:	2b0b      	cmp	r3, #11
 8008e08:	d90f      	bls.n	8008e2a <_malloc_r+0x7e>
 8008e0a:	600b      	str	r3, [r1, #0]
 8008e0c:	50cd      	str	r5, [r1, r3]
 8008e0e:	18cc      	adds	r4, r1, r3
 8008e10:	4630      	mov	r0, r6
 8008e12:	f000 faee 	bl	80093f2 <__malloc_unlock>
 8008e16:	f104 000b 	add.w	r0, r4, #11
 8008e1a:	1d23      	adds	r3, r4, #4
 8008e1c:	f020 0007 	bic.w	r0, r0, #7
 8008e20:	1ac3      	subs	r3, r0, r3
 8008e22:	d0d3      	beq.n	8008dcc <_malloc_r+0x20>
 8008e24:	425a      	negs	r2, r3
 8008e26:	50e2      	str	r2, [r4, r3]
 8008e28:	e7d0      	b.n	8008dcc <_malloc_r+0x20>
 8008e2a:	428c      	cmp	r4, r1
 8008e2c:	684b      	ldr	r3, [r1, #4]
 8008e2e:	bf16      	itet	ne
 8008e30:	6063      	strne	r3, [r4, #4]
 8008e32:	6013      	streq	r3, [r2, #0]
 8008e34:	460c      	movne	r4, r1
 8008e36:	e7eb      	b.n	8008e10 <_malloc_r+0x64>
 8008e38:	460c      	mov	r4, r1
 8008e3a:	6849      	ldr	r1, [r1, #4]
 8008e3c:	e7cc      	b.n	8008dd8 <_malloc_r+0x2c>
 8008e3e:	1cc4      	adds	r4, r0, #3
 8008e40:	f024 0403 	bic.w	r4, r4, #3
 8008e44:	42a0      	cmp	r0, r4
 8008e46:	d005      	beq.n	8008e54 <_malloc_r+0xa8>
 8008e48:	1a21      	subs	r1, r4, r0
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f000 f808 	bl	8008e60 <_sbrk_r>
 8008e50:	3001      	adds	r0, #1
 8008e52:	d0cf      	beq.n	8008df4 <_malloc_r+0x48>
 8008e54:	6025      	str	r5, [r4, #0]
 8008e56:	e7db      	b.n	8008e10 <_malloc_r+0x64>
 8008e58:	20004038 	.word	0x20004038
 8008e5c:	2000403c 	.word	0x2000403c

08008e60 <_sbrk_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4c06      	ldr	r4, [pc, #24]	; (8008e7c <_sbrk_r+0x1c>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4605      	mov	r5, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	f7ff fd64 	bl	8008938 <_sbrk>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_sbrk_r+0x1a>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_sbrk_r+0x1a>
 8008e78:	602b      	str	r3, [r5, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	20004320 	.word	0x20004320

08008e80 <setbuf>:
 8008e80:	2900      	cmp	r1, #0
 8008e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e86:	bf0c      	ite	eq
 8008e88:	2202      	moveq	r2, #2
 8008e8a:	2200      	movne	r2, #0
 8008e8c:	f000 b800 	b.w	8008e90 <setvbuf>

08008e90 <setvbuf>:
 8008e90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	461d      	mov	r5, r3
 8008e96:	4b51      	ldr	r3, [pc, #324]	; (8008fdc <setvbuf+0x14c>)
 8008e98:	681e      	ldr	r6, [r3, #0]
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	460f      	mov	r7, r1
 8008e9e:	4690      	mov	r8, r2
 8008ea0:	b126      	cbz	r6, 8008eac <setvbuf+0x1c>
 8008ea2:	69b3      	ldr	r3, [r6, #24]
 8008ea4:	b913      	cbnz	r3, 8008eac <setvbuf+0x1c>
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f000 f9f4 	bl	8009294 <__sinit>
 8008eac:	4b4c      	ldr	r3, [pc, #304]	; (8008fe0 <setvbuf+0x150>)
 8008eae:	429c      	cmp	r4, r3
 8008eb0:	d152      	bne.n	8008f58 <setvbuf+0xc8>
 8008eb2:	6874      	ldr	r4, [r6, #4]
 8008eb4:	f1b8 0f02 	cmp.w	r8, #2
 8008eb8:	d006      	beq.n	8008ec8 <setvbuf+0x38>
 8008eba:	f1b8 0f01 	cmp.w	r8, #1
 8008ebe:	f200 8089 	bhi.w	8008fd4 <setvbuf+0x144>
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	f2c0 8086 	blt.w	8008fd4 <setvbuf+0x144>
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f000 f978 	bl	80091c0 <_fflush_r>
 8008ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed2:	b141      	cbz	r1, 8008ee6 <setvbuf+0x56>
 8008ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	d002      	beq.n	8008ee2 <setvbuf+0x52>
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff ff17 	bl	8008d10 <_free_r>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61a3      	str	r3, [r4, #24]
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	061b      	lsls	r3, r3, #24
 8008ef0:	d503      	bpl.n	8008efa <setvbuf+0x6a>
 8008ef2:	6921      	ldr	r1, [r4, #16]
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff ff0b 	bl	8008d10 <_free_r>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008f00:	f023 0303 	bic.w	r3, r3, #3
 8008f04:	f1b8 0f02 	cmp.w	r8, #2
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	d05d      	beq.n	8008fc8 <setvbuf+0x138>
 8008f0c:	ab01      	add	r3, sp, #4
 8008f0e:	466a      	mov	r2, sp
 8008f10:	4621      	mov	r1, r4
 8008f12:	4630      	mov	r0, r6
 8008f14:	f000 fa48 	bl	80093a8 <__swhatbuf_r>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	4318      	orrs	r0, r3
 8008f1c:	81a0      	strh	r0, [r4, #12]
 8008f1e:	bb2d      	cbnz	r5, 8008f6c <setvbuf+0xdc>
 8008f20:	9d00      	ldr	r5, [sp, #0]
 8008f22:	4628      	mov	r0, r5
 8008f24:	f7ff fed0 	bl	8008cc8 <malloc>
 8008f28:	4607      	mov	r7, r0
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d14e      	bne.n	8008fcc <setvbuf+0x13c>
 8008f2e:	f8dd 9000 	ldr.w	r9, [sp]
 8008f32:	45a9      	cmp	r9, r5
 8008f34:	d13c      	bne.n	8008fb0 <setvbuf+0x120>
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	f043 0302 	orr.w	r3, r3, #2
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	2300      	movs	r3, #0
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	6163      	str	r3, [r4, #20]
 8008f52:	b003      	add	sp, #12
 8008f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f58:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <setvbuf+0x154>)
 8008f5a:	429c      	cmp	r4, r3
 8008f5c:	d101      	bne.n	8008f62 <setvbuf+0xd2>
 8008f5e:	68b4      	ldr	r4, [r6, #8]
 8008f60:	e7a8      	b.n	8008eb4 <setvbuf+0x24>
 8008f62:	4b21      	ldr	r3, [pc, #132]	; (8008fe8 <setvbuf+0x158>)
 8008f64:	429c      	cmp	r4, r3
 8008f66:	bf08      	it	eq
 8008f68:	68f4      	ldreq	r4, [r6, #12]
 8008f6a:	e7a3      	b.n	8008eb4 <setvbuf+0x24>
 8008f6c:	2f00      	cmp	r7, #0
 8008f6e:	d0d8      	beq.n	8008f22 <setvbuf+0x92>
 8008f70:	69b3      	ldr	r3, [r6, #24]
 8008f72:	b913      	cbnz	r3, 8008f7a <setvbuf+0xea>
 8008f74:	4630      	mov	r0, r6
 8008f76:	f000 f98d 	bl	8009294 <__sinit>
 8008f7a:	f1b8 0f01 	cmp.w	r8, #1
 8008f7e:	bf08      	it	eq
 8008f80:	89a3      	ldrheq	r3, [r4, #12]
 8008f82:	6027      	str	r7, [r4, #0]
 8008f84:	bf04      	itt	eq
 8008f86:	f043 0301 	orreq.w	r3, r3, #1
 8008f8a:	81a3      	strheq	r3, [r4, #12]
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f013 0008 	ands.w	r0, r3, #8
 8008f92:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008f96:	d01b      	beq.n	8008fd0 <setvbuf+0x140>
 8008f98:	f013 0001 	ands.w	r0, r3, #1
 8008f9c:	bf18      	it	ne
 8008f9e:	426d      	negne	r5, r5
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	bf1d      	ittte	ne
 8008fa6:	60a3      	strne	r3, [r4, #8]
 8008fa8:	61a5      	strne	r5, [r4, #24]
 8008faa:	4618      	movne	r0, r3
 8008fac:	60a5      	streq	r5, [r4, #8]
 8008fae:	e7d0      	b.n	8008f52 <setvbuf+0xc2>
 8008fb0:	4648      	mov	r0, r9
 8008fb2:	f7ff fe89 	bl	8008cc8 <malloc>
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d0bc      	beq.n	8008f36 <setvbuf+0xa6>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc2:	81a3      	strh	r3, [r4, #12]
 8008fc4:	464d      	mov	r5, r9
 8008fc6:	e7d3      	b.n	8008f70 <setvbuf+0xe0>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7b6      	b.n	8008f3a <setvbuf+0xaa>
 8008fcc:	46a9      	mov	r9, r5
 8008fce:	e7f5      	b.n	8008fbc <setvbuf+0x12c>
 8008fd0:	60a0      	str	r0, [r4, #8]
 8008fd2:	e7be      	b.n	8008f52 <setvbuf+0xc2>
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	e7bb      	b.n	8008f52 <setvbuf+0xc2>
 8008fda:	bf00      	nop
 8008fdc:	2000003c 	.word	0x2000003c
 8008fe0:	0800a4fc 	.word	0x0800a4fc
 8008fe4:	0800a51c 	.word	0x0800a51c
 8008fe8:	0800a4dc 	.word	0x0800a4dc

08008fec <sniprintf>:
 8008fec:	b40c      	push	{r2, r3}
 8008fee:	b530      	push	{r4, r5, lr}
 8008ff0:	4b17      	ldr	r3, [pc, #92]	; (8009050 <sniprintf+0x64>)
 8008ff2:	1e0c      	subs	r4, r1, #0
 8008ff4:	b09d      	sub	sp, #116	; 0x74
 8008ff6:	681d      	ldr	r5, [r3, #0]
 8008ff8:	da08      	bge.n	800900c <sniprintf+0x20>
 8008ffa:	238b      	movs	r3, #139	; 0x8b
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8009002:	b01d      	add	sp, #116	; 0x74
 8009004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009008:	b002      	add	sp, #8
 800900a:	4770      	bx	lr
 800900c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009010:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009014:	bf14      	ite	ne
 8009016:	f104 33ff 	addne.w	r3, r4, #4294967295
 800901a:	4623      	moveq	r3, r4
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	9307      	str	r3, [sp, #28]
 8009020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009024:	9002      	str	r0, [sp, #8]
 8009026:	9006      	str	r0, [sp, #24]
 8009028:	f8ad 3016 	strh.w	r3, [sp, #22]
 800902c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800902e:	ab21      	add	r3, sp, #132	; 0x84
 8009030:	a902      	add	r1, sp, #8
 8009032:	4628      	mov	r0, r5
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	f000 fa37 	bl	80094a8 <_svfiprintf_r>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	bfbc      	itt	lt
 800903e:	238b      	movlt	r3, #139	; 0x8b
 8009040:	602b      	strlt	r3, [r5, #0]
 8009042:	2c00      	cmp	r4, #0
 8009044:	d0dd      	beq.n	8009002 <sniprintf+0x16>
 8009046:	9b02      	ldr	r3, [sp, #8]
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	e7d9      	b.n	8009002 <sniprintf+0x16>
 800904e:	bf00      	nop
 8009050:	2000003c 	.word	0x2000003c

08009054 <strcat>:
 8009054:	b510      	push	{r4, lr}
 8009056:	4603      	mov	r3, r0
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	1c5c      	adds	r4, r3, #1
 800905c:	b93a      	cbnz	r2, 800906e <strcat+0x1a>
 800905e:	3b01      	subs	r3, #1
 8009060:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009064:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009068:	2a00      	cmp	r2, #0
 800906a:	d1f9      	bne.n	8009060 <strcat+0xc>
 800906c:	bd10      	pop	{r4, pc}
 800906e:	4623      	mov	r3, r4
 8009070:	e7f2      	b.n	8009058 <strcat+0x4>
	...

08009074 <_vsiprintf_r>:
 8009074:	b500      	push	{lr}
 8009076:	b09b      	sub	sp, #108	; 0x6c
 8009078:	9100      	str	r1, [sp, #0]
 800907a:	9104      	str	r1, [sp, #16]
 800907c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009080:	9105      	str	r1, [sp, #20]
 8009082:	9102      	str	r1, [sp, #8]
 8009084:	4905      	ldr	r1, [pc, #20]	; (800909c <_vsiprintf_r+0x28>)
 8009086:	9103      	str	r1, [sp, #12]
 8009088:	4669      	mov	r1, sp
 800908a:	f000 fa0d 	bl	80094a8 <_svfiprintf_r>
 800908e:	9b00      	ldr	r3, [sp, #0]
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
 8009094:	b01b      	add	sp, #108	; 0x6c
 8009096:	f85d fb04 	ldr.w	pc, [sp], #4
 800909a:	bf00      	nop
 800909c:	ffff0208 	.word	0xffff0208

080090a0 <vsiprintf>:
 80090a0:	4613      	mov	r3, r2
 80090a2:	460a      	mov	r2, r1
 80090a4:	4601      	mov	r1, r0
 80090a6:	4802      	ldr	r0, [pc, #8]	; (80090b0 <vsiprintf+0x10>)
 80090a8:	6800      	ldr	r0, [r0, #0]
 80090aa:	f7ff bfe3 	b.w	8009074 <_vsiprintf_r>
 80090ae:	bf00      	nop
 80090b0:	2000003c 	.word	0x2000003c

080090b4 <__sflush_r>:
 80090b4:	898a      	ldrh	r2, [r1, #12]
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	4605      	mov	r5, r0
 80090bc:	0710      	lsls	r0, r2, #28
 80090be:	460c      	mov	r4, r1
 80090c0:	d458      	bmi.n	8009174 <__sflush_r+0xc0>
 80090c2:	684b      	ldr	r3, [r1, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dc05      	bgt.n	80090d4 <__sflush_r+0x20>
 80090c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dc02      	bgt.n	80090d4 <__sflush_r+0x20>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d0f9      	beq.n	80090ce <__sflush_r+0x1a>
 80090da:	2300      	movs	r3, #0
 80090dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e0:	682f      	ldr	r7, [r5, #0]
 80090e2:	6a21      	ldr	r1, [r4, #32]
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	d032      	beq.n	800914e <__sflush_r+0x9a>
 80090e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	075a      	lsls	r2, r3, #29
 80090ee:	d505      	bpl.n	80090fc <__sflush_r+0x48>
 80090f0:	6863      	ldr	r3, [r4, #4]
 80090f2:	1ac0      	subs	r0, r0, r3
 80090f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090f6:	b10b      	cbz	r3, 80090fc <__sflush_r+0x48>
 80090f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090fa:	1ac0      	subs	r0, r0, r3
 80090fc:	2300      	movs	r3, #0
 80090fe:	4602      	mov	r2, r0
 8009100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009102:	6a21      	ldr	r1, [r4, #32]
 8009104:	4628      	mov	r0, r5
 8009106:	47b0      	blx	r6
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	d106      	bne.n	800911c <__sflush_r+0x68>
 800910e:	6829      	ldr	r1, [r5, #0]
 8009110:	291d      	cmp	r1, #29
 8009112:	d848      	bhi.n	80091a6 <__sflush_r+0xf2>
 8009114:	4a29      	ldr	r2, [pc, #164]	; (80091bc <__sflush_r+0x108>)
 8009116:	40ca      	lsrs	r2, r1
 8009118:	07d6      	lsls	r6, r2, #31
 800911a:	d544      	bpl.n	80091a6 <__sflush_r+0xf2>
 800911c:	2200      	movs	r2, #0
 800911e:	6062      	str	r2, [r4, #4]
 8009120:	04d9      	lsls	r1, r3, #19
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	6022      	str	r2, [r4, #0]
 8009126:	d504      	bpl.n	8009132 <__sflush_r+0x7e>
 8009128:	1c42      	adds	r2, r0, #1
 800912a:	d101      	bne.n	8009130 <__sflush_r+0x7c>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b903      	cbnz	r3, 8009132 <__sflush_r+0x7e>
 8009130:	6560      	str	r0, [r4, #84]	; 0x54
 8009132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009134:	602f      	str	r7, [r5, #0]
 8009136:	2900      	cmp	r1, #0
 8009138:	d0c9      	beq.n	80090ce <__sflush_r+0x1a>
 800913a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800913e:	4299      	cmp	r1, r3
 8009140:	d002      	beq.n	8009148 <__sflush_r+0x94>
 8009142:	4628      	mov	r0, r5
 8009144:	f7ff fde4 	bl	8008d10 <_free_r>
 8009148:	2000      	movs	r0, #0
 800914a:	6360      	str	r0, [r4, #52]	; 0x34
 800914c:	e7c0      	b.n	80090d0 <__sflush_r+0x1c>
 800914e:	2301      	movs	r3, #1
 8009150:	4628      	mov	r0, r5
 8009152:	47b0      	blx	r6
 8009154:	1c41      	adds	r1, r0, #1
 8009156:	d1c8      	bne.n	80090ea <__sflush_r+0x36>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0c5      	beq.n	80090ea <__sflush_r+0x36>
 800915e:	2b1d      	cmp	r3, #29
 8009160:	d001      	beq.n	8009166 <__sflush_r+0xb2>
 8009162:	2b16      	cmp	r3, #22
 8009164:	d101      	bne.n	800916a <__sflush_r+0xb6>
 8009166:	602f      	str	r7, [r5, #0]
 8009168:	e7b1      	b.n	80090ce <__sflush_r+0x1a>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7ad      	b.n	80090d0 <__sflush_r+0x1c>
 8009174:	690f      	ldr	r7, [r1, #16]
 8009176:	2f00      	cmp	r7, #0
 8009178:	d0a9      	beq.n	80090ce <__sflush_r+0x1a>
 800917a:	0793      	lsls	r3, r2, #30
 800917c:	680e      	ldr	r6, [r1, #0]
 800917e:	bf08      	it	eq
 8009180:	694b      	ldreq	r3, [r1, #20]
 8009182:	600f      	str	r7, [r1, #0]
 8009184:	bf18      	it	ne
 8009186:	2300      	movne	r3, #0
 8009188:	eba6 0807 	sub.w	r8, r6, r7
 800918c:	608b      	str	r3, [r1, #8]
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	dd9c      	ble.n	80090ce <__sflush_r+0x1a>
 8009194:	4643      	mov	r3, r8
 8009196:	463a      	mov	r2, r7
 8009198:	6a21      	ldr	r1, [r4, #32]
 800919a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800919c:	4628      	mov	r0, r5
 800919e:	47b0      	blx	r6
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dc06      	bgt.n	80091b2 <__sflush_r+0xfe>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e78e      	b.n	80090d0 <__sflush_r+0x1c>
 80091b2:	4407      	add	r7, r0
 80091b4:	eba8 0800 	sub.w	r8, r8, r0
 80091b8:	e7e9      	b.n	800918e <__sflush_r+0xda>
 80091ba:	bf00      	nop
 80091bc:	20400001 	.word	0x20400001

080091c0 <_fflush_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b1db      	cbz	r3, 8009202 <_fflush_r+0x42>
 80091ca:	b118      	cbz	r0, 80091d4 <_fflush_r+0x14>
 80091cc:	6983      	ldr	r3, [r0, #24]
 80091ce:	b90b      	cbnz	r3, 80091d4 <_fflush_r+0x14>
 80091d0:	f000 f860 	bl	8009294 <__sinit>
 80091d4:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <_fflush_r+0x48>)
 80091d6:	429c      	cmp	r4, r3
 80091d8:	d109      	bne.n	80091ee <_fflush_r+0x2e>
 80091da:	686c      	ldr	r4, [r5, #4]
 80091dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e0:	b17b      	cbz	r3, 8009202 <_fflush_r+0x42>
 80091e2:	4621      	mov	r1, r4
 80091e4:	4628      	mov	r0, r5
 80091e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ea:	f7ff bf63 	b.w	80090b4 <__sflush_r>
 80091ee:	4b07      	ldr	r3, [pc, #28]	; (800920c <_fflush_r+0x4c>)
 80091f0:	429c      	cmp	r4, r3
 80091f2:	d101      	bne.n	80091f8 <_fflush_r+0x38>
 80091f4:	68ac      	ldr	r4, [r5, #8]
 80091f6:	e7f1      	b.n	80091dc <_fflush_r+0x1c>
 80091f8:	4b05      	ldr	r3, [pc, #20]	; (8009210 <_fflush_r+0x50>)
 80091fa:	429c      	cmp	r4, r3
 80091fc:	bf08      	it	eq
 80091fe:	68ec      	ldreq	r4, [r5, #12]
 8009200:	e7ec      	b.n	80091dc <_fflush_r+0x1c>
 8009202:	2000      	movs	r0, #0
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	0800a4fc 	.word	0x0800a4fc
 800920c:	0800a51c 	.word	0x0800a51c
 8009210:	0800a4dc 	.word	0x0800a4dc

08009214 <std>:
 8009214:	2300      	movs	r3, #0
 8009216:	b510      	push	{r4, lr}
 8009218:	4604      	mov	r4, r0
 800921a:	e9c0 3300 	strd	r3, r3, [r0]
 800921e:	6083      	str	r3, [r0, #8]
 8009220:	8181      	strh	r1, [r0, #12]
 8009222:	6643      	str	r3, [r0, #100]	; 0x64
 8009224:	81c2      	strh	r2, [r0, #14]
 8009226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800922a:	6183      	str	r3, [r0, #24]
 800922c:	4619      	mov	r1, r3
 800922e:	2208      	movs	r2, #8
 8009230:	305c      	adds	r0, #92	; 0x5c
 8009232:	f7ff fd64 	bl	8008cfe <memset>
 8009236:	4b05      	ldr	r3, [pc, #20]	; (800924c <std+0x38>)
 8009238:	6263      	str	r3, [r4, #36]	; 0x24
 800923a:	4b05      	ldr	r3, [pc, #20]	; (8009250 <std+0x3c>)
 800923c:	62a3      	str	r3, [r4, #40]	; 0x28
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <std+0x40>)
 8009240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009242:	4b05      	ldr	r3, [pc, #20]	; (8009258 <std+0x44>)
 8009244:	6224      	str	r4, [r4, #32]
 8009246:	6323      	str	r3, [r4, #48]	; 0x30
 8009248:	bd10      	pop	{r4, pc}
 800924a:	bf00      	nop
 800924c:	080099a9 	.word	0x080099a9
 8009250:	080099cb 	.word	0x080099cb
 8009254:	08009a03 	.word	0x08009a03
 8009258:	08009a27 	.word	0x08009a27

0800925c <_cleanup_r>:
 800925c:	4901      	ldr	r1, [pc, #4]	; (8009264 <_cleanup_r+0x8>)
 800925e:	f000 b885 	b.w	800936c <_fwalk_reent>
 8009262:	bf00      	nop
 8009264:	080091c1 	.word	0x080091c1

08009268 <__sfmoreglue>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	1e4a      	subs	r2, r1, #1
 800926c:	2568      	movs	r5, #104	; 0x68
 800926e:	4355      	muls	r5, r2
 8009270:	460e      	mov	r6, r1
 8009272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009276:	f7ff fd99 	bl	8008dac <_malloc_r>
 800927a:	4604      	mov	r4, r0
 800927c:	b140      	cbz	r0, 8009290 <__sfmoreglue+0x28>
 800927e:	2100      	movs	r1, #0
 8009280:	e9c0 1600 	strd	r1, r6, [r0]
 8009284:	300c      	adds	r0, #12
 8009286:	60a0      	str	r0, [r4, #8]
 8009288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800928c:	f7ff fd37 	bl	8008cfe <memset>
 8009290:	4620      	mov	r0, r4
 8009292:	bd70      	pop	{r4, r5, r6, pc}

08009294 <__sinit>:
 8009294:	6983      	ldr	r3, [r0, #24]
 8009296:	b510      	push	{r4, lr}
 8009298:	4604      	mov	r4, r0
 800929a:	bb33      	cbnz	r3, 80092ea <__sinit+0x56>
 800929c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80092a0:	6503      	str	r3, [r0, #80]	; 0x50
 80092a2:	4b12      	ldr	r3, [pc, #72]	; (80092ec <__sinit+0x58>)
 80092a4:	4a12      	ldr	r2, [pc, #72]	; (80092f0 <__sinit+0x5c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6282      	str	r2, [r0, #40]	; 0x28
 80092aa:	4298      	cmp	r0, r3
 80092ac:	bf04      	itt	eq
 80092ae:	2301      	moveq	r3, #1
 80092b0:	6183      	streq	r3, [r0, #24]
 80092b2:	f000 f81f 	bl	80092f4 <__sfp>
 80092b6:	6060      	str	r0, [r4, #4]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 f81b 	bl	80092f4 <__sfp>
 80092be:	60a0      	str	r0, [r4, #8]
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 f817 	bl	80092f4 <__sfp>
 80092c6:	2200      	movs	r2, #0
 80092c8:	60e0      	str	r0, [r4, #12]
 80092ca:	2104      	movs	r1, #4
 80092cc:	6860      	ldr	r0, [r4, #4]
 80092ce:	f7ff ffa1 	bl	8009214 <std>
 80092d2:	2201      	movs	r2, #1
 80092d4:	2109      	movs	r1, #9
 80092d6:	68a0      	ldr	r0, [r4, #8]
 80092d8:	f7ff ff9c 	bl	8009214 <std>
 80092dc:	2202      	movs	r2, #2
 80092de:	2112      	movs	r1, #18
 80092e0:	68e0      	ldr	r0, [r4, #12]
 80092e2:	f7ff ff97 	bl	8009214 <std>
 80092e6:	2301      	movs	r3, #1
 80092e8:	61a3      	str	r3, [r4, #24]
 80092ea:	bd10      	pop	{r4, pc}
 80092ec:	0800a4d8 	.word	0x0800a4d8
 80092f0:	0800925d 	.word	0x0800925d

080092f4 <__sfp>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <__sfp+0x70>)
 80092f8:	681e      	ldr	r6, [r3, #0]
 80092fa:	69b3      	ldr	r3, [r6, #24]
 80092fc:	4607      	mov	r7, r0
 80092fe:	b913      	cbnz	r3, 8009306 <__sfp+0x12>
 8009300:	4630      	mov	r0, r6
 8009302:	f7ff ffc7 	bl	8009294 <__sinit>
 8009306:	3648      	adds	r6, #72	; 0x48
 8009308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800930c:	3b01      	subs	r3, #1
 800930e:	d503      	bpl.n	8009318 <__sfp+0x24>
 8009310:	6833      	ldr	r3, [r6, #0]
 8009312:	b133      	cbz	r3, 8009322 <__sfp+0x2e>
 8009314:	6836      	ldr	r6, [r6, #0]
 8009316:	e7f7      	b.n	8009308 <__sfp+0x14>
 8009318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800931c:	b16d      	cbz	r5, 800933a <__sfp+0x46>
 800931e:	3468      	adds	r4, #104	; 0x68
 8009320:	e7f4      	b.n	800930c <__sfp+0x18>
 8009322:	2104      	movs	r1, #4
 8009324:	4638      	mov	r0, r7
 8009326:	f7ff ff9f 	bl	8009268 <__sfmoreglue>
 800932a:	6030      	str	r0, [r6, #0]
 800932c:	2800      	cmp	r0, #0
 800932e:	d1f1      	bne.n	8009314 <__sfp+0x20>
 8009330:	230c      	movs	r3, #12
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	4604      	mov	r4, r0
 8009336:	4620      	mov	r0, r4
 8009338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933a:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <__sfp+0x74>)
 800933c:	6665      	str	r5, [r4, #100]	; 0x64
 800933e:	e9c4 5500 	strd	r5, r5, [r4]
 8009342:	60a5      	str	r5, [r4, #8]
 8009344:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009348:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800934c:	2208      	movs	r2, #8
 800934e:	4629      	mov	r1, r5
 8009350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009354:	f7ff fcd3 	bl	8008cfe <memset>
 8009358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800935c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009360:	e7e9      	b.n	8009336 <__sfp+0x42>
 8009362:	bf00      	nop
 8009364:	0800a4d8 	.word	0x0800a4d8
 8009368:	ffff0001 	.word	0xffff0001

0800936c <_fwalk_reent>:
 800936c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009370:	4680      	mov	r8, r0
 8009372:	4689      	mov	r9, r1
 8009374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009378:	2600      	movs	r6, #0
 800937a:	b914      	cbnz	r4, 8009382 <_fwalk_reent+0x16>
 800937c:	4630      	mov	r0, r6
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009386:	3f01      	subs	r7, #1
 8009388:	d501      	bpl.n	800938e <_fwalk_reent+0x22>
 800938a:	6824      	ldr	r4, [r4, #0]
 800938c:	e7f5      	b.n	800937a <_fwalk_reent+0xe>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d907      	bls.n	80093a4 <_fwalk_reent+0x38>
 8009394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009398:	3301      	adds	r3, #1
 800939a:	d003      	beq.n	80093a4 <_fwalk_reent+0x38>
 800939c:	4629      	mov	r1, r5
 800939e:	4640      	mov	r0, r8
 80093a0:	47c8      	blx	r9
 80093a2:	4306      	orrs	r6, r0
 80093a4:	3568      	adds	r5, #104	; 0x68
 80093a6:	e7ee      	b.n	8009386 <_fwalk_reent+0x1a>

080093a8 <__swhatbuf_r>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	460e      	mov	r6, r1
 80093ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b0:	2900      	cmp	r1, #0
 80093b2:	b096      	sub	sp, #88	; 0x58
 80093b4:	4614      	mov	r4, r2
 80093b6:	461d      	mov	r5, r3
 80093b8:	da07      	bge.n	80093ca <__swhatbuf_r+0x22>
 80093ba:	2300      	movs	r3, #0
 80093bc:	602b      	str	r3, [r5, #0]
 80093be:	89b3      	ldrh	r3, [r6, #12]
 80093c0:	061a      	lsls	r2, r3, #24
 80093c2:	d410      	bmi.n	80093e6 <__swhatbuf_r+0x3e>
 80093c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c8:	e00e      	b.n	80093e8 <__swhatbuf_r+0x40>
 80093ca:	466a      	mov	r2, sp
 80093cc:	f000 fb52 	bl	8009a74 <_fstat_r>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	dbf2      	blt.n	80093ba <__swhatbuf_r+0x12>
 80093d4:	9a01      	ldr	r2, [sp, #4]
 80093d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093de:	425a      	negs	r2, r3
 80093e0:	415a      	adcs	r2, r3
 80093e2:	602a      	str	r2, [r5, #0]
 80093e4:	e7ee      	b.n	80093c4 <__swhatbuf_r+0x1c>
 80093e6:	2340      	movs	r3, #64	; 0x40
 80093e8:	2000      	movs	r0, #0
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	b016      	add	sp, #88	; 0x58
 80093ee:	bd70      	pop	{r4, r5, r6, pc}

080093f0 <__malloc_lock>:
 80093f0:	4770      	bx	lr

080093f2 <__malloc_unlock>:
 80093f2:	4770      	bx	lr

080093f4 <__ssputs_r>:
 80093f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f8:	688e      	ldr	r6, [r1, #8]
 80093fa:	429e      	cmp	r6, r3
 80093fc:	4682      	mov	sl, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	4690      	mov	r8, r2
 8009402:	4699      	mov	r9, r3
 8009404:	d837      	bhi.n	8009476 <__ssputs_r+0x82>
 8009406:	898a      	ldrh	r2, [r1, #12]
 8009408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800940c:	d031      	beq.n	8009472 <__ssputs_r+0x7e>
 800940e:	6825      	ldr	r5, [r4, #0]
 8009410:	6909      	ldr	r1, [r1, #16]
 8009412:	1a6f      	subs	r7, r5, r1
 8009414:	6965      	ldr	r5, [r4, #20]
 8009416:	2302      	movs	r3, #2
 8009418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800941c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009420:	f109 0301 	add.w	r3, r9, #1
 8009424:	443b      	add	r3, r7
 8009426:	429d      	cmp	r5, r3
 8009428:	bf38      	it	cc
 800942a:	461d      	movcc	r5, r3
 800942c:	0553      	lsls	r3, r2, #21
 800942e:	d530      	bpl.n	8009492 <__ssputs_r+0x9e>
 8009430:	4629      	mov	r1, r5
 8009432:	f7ff fcbb 	bl	8008dac <_malloc_r>
 8009436:	4606      	mov	r6, r0
 8009438:	b950      	cbnz	r0, 8009450 <__ssputs_r+0x5c>
 800943a:	230c      	movs	r3, #12
 800943c:	f8ca 3000 	str.w	r3, [sl]
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009450:	463a      	mov	r2, r7
 8009452:	6921      	ldr	r1, [r4, #16]
 8009454:	f7ff fc48 	bl	8008ce8 <memcpy>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800945e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	6126      	str	r6, [r4, #16]
 8009466:	6165      	str	r5, [r4, #20]
 8009468:	443e      	add	r6, r7
 800946a:	1bed      	subs	r5, r5, r7
 800946c:	6026      	str	r6, [r4, #0]
 800946e:	60a5      	str	r5, [r4, #8]
 8009470:	464e      	mov	r6, r9
 8009472:	454e      	cmp	r6, r9
 8009474:	d900      	bls.n	8009478 <__ssputs_r+0x84>
 8009476:	464e      	mov	r6, r9
 8009478:	4632      	mov	r2, r6
 800947a:	4641      	mov	r1, r8
 800947c:	6820      	ldr	r0, [r4, #0]
 800947e:	f000 fb1d 	bl	8009abc <memmove>
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	1b9b      	subs	r3, r3, r6
 8009486:	60a3      	str	r3, [r4, #8]
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	441e      	add	r6, r3
 800948c:	6026      	str	r6, [r4, #0]
 800948e:	2000      	movs	r0, #0
 8009490:	e7dc      	b.n	800944c <__ssputs_r+0x58>
 8009492:	462a      	mov	r2, r5
 8009494:	f000 fb2b 	bl	8009aee <_realloc_r>
 8009498:	4606      	mov	r6, r0
 800949a:	2800      	cmp	r0, #0
 800949c:	d1e2      	bne.n	8009464 <__ssputs_r+0x70>
 800949e:	6921      	ldr	r1, [r4, #16]
 80094a0:	4650      	mov	r0, sl
 80094a2:	f7ff fc35 	bl	8008d10 <_free_r>
 80094a6:	e7c8      	b.n	800943a <__ssputs_r+0x46>

080094a8 <_svfiprintf_r>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	461d      	mov	r5, r3
 80094ae:	898b      	ldrh	r3, [r1, #12]
 80094b0:	061f      	lsls	r7, r3, #24
 80094b2:	b09d      	sub	sp, #116	; 0x74
 80094b4:	4680      	mov	r8, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	4616      	mov	r6, r2
 80094ba:	d50f      	bpl.n	80094dc <_svfiprintf_r+0x34>
 80094bc:	690b      	ldr	r3, [r1, #16]
 80094be:	b96b      	cbnz	r3, 80094dc <_svfiprintf_r+0x34>
 80094c0:	2140      	movs	r1, #64	; 0x40
 80094c2:	f7ff fc73 	bl	8008dac <_malloc_r>
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	6120      	str	r0, [r4, #16]
 80094ca:	b928      	cbnz	r0, 80094d8 <_svfiprintf_r+0x30>
 80094cc:	230c      	movs	r3, #12
 80094ce:	f8c8 3000 	str.w	r3, [r8]
 80094d2:	f04f 30ff 	mov.w	r0, #4294967295
 80094d6:	e0c8      	b.n	800966a <_svfiprintf_r+0x1c2>
 80094d8:	2340      	movs	r3, #64	; 0x40
 80094da:	6163      	str	r3, [r4, #20]
 80094dc:	2300      	movs	r3, #0
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	2320      	movs	r3, #32
 80094e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094e6:	2330      	movs	r3, #48	; 0x30
 80094e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094ec:	9503      	str	r5, [sp, #12]
 80094ee:	f04f 0b01 	mov.w	fp, #1
 80094f2:	4637      	mov	r7, r6
 80094f4:	463d      	mov	r5, r7
 80094f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094fa:	b10b      	cbz	r3, 8009500 <_svfiprintf_r+0x58>
 80094fc:	2b25      	cmp	r3, #37	; 0x25
 80094fe:	d13e      	bne.n	800957e <_svfiprintf_r+0xd6>
 8009500:	ebb7 0a06 	subs.w	sl, r7, r6
 8009504:	d00b      	beq.n	800951e <_svfiprintf_r+0x76>
 8009506:	4653      	mov	r3, sl
 8009508:	4632      	mov	r2, r6
 800950a:	4621      	mov	r1, r4
 800950c:	4640      	mov	r0, r8
 800950e:	f7ff ff71 	bl	80093f4 <__ssputs_r>
 8009512:	3001      	adds	r0, #1
 8009514:	f000 80a4 	beq.w	8009660 <_svfiprintf_r+0x1b8>
 8009518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951a:	4453      	add	r3, sl
 800951c:	9309      	str	r3, [sp, #36]	; 0x24
 800951e:	783b      	ldrb	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 809d 	beq.w	8009660 <_svfiprintf_r+0x1b8>
 8009526:	2300      	movs	r3, #0
 8009528:	f04f 32ff 	mov.w	r2, #4294967295
 800952c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	9307      	str	r3, [sp, #28]
 8009534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009538:	931a      	str	r3, [sp, #104]	; 0x68
 800953a:	462f      	mov	r7, r5
 800953c:	2205      	movs	r2, #5
 800953e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009542:	4850      	ldr	r0, [pc, #320]	; (8009684 <_svfiprintf_r+0x1dc>)
 8009544:	f7f6 fe4c 	bl	80001e0 <memchr>
 8009548:	9b04      	ldr	r3, [sp, #16]
 800954a:	b9d0      	cbnz	r0, 8009582 <_svfiprintf_r+0xda>
 800954c:	06d9      	lsls	r1, r3, #27
 800954e:	bf44      	itt	mi
 8009550:	2220      	movmi	r2, #32
 8009552:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009556:	071a      	lsls	r2, r3, #28
 8009558:	bf44      	itt	mi
 800955a:	222b      	movmi	r2, #43	; 0x2b
 800955c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009560:	782a      	ldrb	r2, [r5, #0]
 8009562:	2a2a      	cmp	r2, #42	; 0x2a
 8009564:	d015      	beq.n	8009592 <_svfiprintf_r+0xea>
 8009566:	9a07      	ldr	r2, [sp, #28]
 8009568:	462f      	mov	r7, r5
 800956a:	2000      	movs	r0, #0
 800956c:	250a      	movs	r5, #10
 800956e:	4639      	mov	r1, r7
 8009570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009574:	3b30      	subs	r3, #48	; 0x30
 8009576:	2b09      	cmp	r3, #9
 8009578:	d94d      	bls.n	8009616 <_svfiprintf_r+0x16e>
 800957a:	b1b8      	cbz	r0, 80095ac <_svfiprintf_r+0x104>
 800957c:	e00f      	b.n	800959e <_svfiprintf_r+0xf6>
 800957e:	462f      	mov	r7, r5
 8009580:	e7b8      	b.n	80094f4 <_svfiprintf_r+0x4c>
 8009582:	4a40      	ldr	r2, [pc, #256]	; (8009684 <_svfiprintf_r+0x1dc>)
 8009584:	1a80      	subs	r0, r0, r2
 8009586:	fa0b f000 	lsl.w	r0, fp, r0
 800958a:	4318      	orrs	r0, r3
 800958c:	9004      	str	r0, [sp, #16]
 800958e:	463d      	mov	r5, r7
 8009590:	e7d3      	b.n	800953a <_svfiprintf_r+0x92>
 8009592:	9a03      	ldr	r2, [sp, #12]
 8009594:	1d11      	adds	r1, r2, #4
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	9103      	str	r1, [sp, #12]
 800959a:	2a00      	cmp	r2, #0
 800959c:	db01      	blt.n	80095a2 <_svfiprintf_r+0xfa>
 800959e:	9207      	str	r2, [sp, #28]
 80095a0:	e004      	b.n	80095ac <_svfiprintf_r+0x104>
 80095a2:	4252      	negs	r2, r2
 80095a4:	f043 0302 	orr.w	r3, r3, #2
 80095a8:	9207      	str	r2, [sp, #28]
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	783b      	ldrb	r3, [r7, #0]
 80095ae:	2b2e      	cmp	r3, #46	; 0x2e
 80095b0:	d10c      	bne.n	80095cc <_svfiprintf_r+0x124>
 80095b2:	787b      	ldrb	r3, [r7, #1]
 80095b4:	2b2a      	cmp	r3, #42	; 0x2a
 80095b6:	d133      	bne.n	8009620 <_svfiprintf_r+0x178>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	1d1a      	adds	r2, r3, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	9203      	str	r2, [sp, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfb8      	it	lt
 80095c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80095c8:	3702      	adds	r7, #2
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	4d2e      	ldr	r5, [pc, #184]	; (8009688 <_svfiprintf_r+0x1e0>)
 80095ce:	7839      	ldrb	r1, [r7, #0]
 80095d0:	2203      	movs	r2, #3
 80095d2:	4628      	mov	r0, r5
 80095d4:	f7f6 fe04 	bl	80001e0 <memchr>
 80095d8:	b138      	cbz	r0, 80095ea <_svfiprintf_r+0x142>
 80095da:	2340      	movs	r3, #64	; 0x40
 80095dc:	1b40      	subs	r0, r0, r5
 80095de:	fa03 f000 	lsl.w	r0, r3, r0
 80095e2:	9b04      	ldr	r3, [sp, #16]
 80095e4:	4303      	orrs	r3, r0
 80095e6:	3701      	adds	r7, #1
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	7839      	ldrb	r1, [r7, #0]
 80095ec:	4827      	ldr	r0, [pc, #156]	; (800968c <_svfiprintf_r+0x1e4>)
 80095ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095f2:	2206      	movs	r2, #6
 80095f4:	1c7e      	adds	r6, r7, #1
 80095f6:	f7f6 fdf3 	bl	80001e0 <memchr>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d038      	beq.n	8009670 <_svfiprintf_r+0x1c8>
 80095fe:	4b24      	ldr	r3, [pc, #144]	; (8009690 <_svfiprintf_r+0x1e8>)
 8009600:	bb13      	cbnz	r3, 8009648 <_svfiprintf_r+0x1a0>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	3307      	adds	r3, #7
 8009606:	f023 0307 	bic.w	r3, r3, #7
 800960a:	3308      	adds	r3, #8
 800960c:	9303      	str	r3, [sp, #12]
 800960e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009610:	444b      	add	r3, r9
 8009612:	9309      	str	r3, [sp, #36]	; 0x24
 8009614:	e76d      	b.n	80094f2 <_svfiprintf_r+0x4a>
 8009616:	fb05 3202 	mla	r2, r5, r2, r3
 800961a:	2001      	movs	r0, #1
 800961c:	460f      	mov	r7, r1
 800961e:	e7a6      	b.n	800956e <_svfiprintf_r+0xc6>
 8009620:	2300      	movs	r3, #0
 8009622:	3701      	adds	r7, #1
 8009624:	9305      	str	r3, [sp, #20]
 8009626:	4619      	mov	r1, r3
 8009628:	250a      	movs	r5, #10
 800962a:	4638      	mov	r0, r7
 800962c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009630:	3a30      	subs	r2, #48	; 0x30
 8009632:	2a09      	cmp	r2, #9
 8009634:	d903      	bls.n	800963e <_svfiprintf_r+0x196>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0c8      	beq.n	80095cc <_svfiprintf_r+0x124>
 800963a:	9105      	str	r1, [sp, #20]
 800963c:	e7c6      	b.n	80095cc <_svfiprintf_r+0x124>
 800963e:	fb05 2101 	mla	r1, r5, r1, r2
 8009642:	2301      	movs	r3, #1
 8009644:	4607      	mov	r7, r0
 8009646:	e7f0      	b.n	800962a <_svfiprintf_r+0x182>
 8009648:	ab03      	add	r3, sp, #12
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	4622      	mov	r2, r4
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <_svfiprintf_r+0x1ec>)
 8009650:	a904      	add	r1, sp, #16
 8009652:	4640      	mov	r0, r8
 8009654:	f3af 8000 	nop.w
 8009658:	f1b0 3fff 	cmp.w	r0, #4294967295
 800965c:	4681      	mov	r9, r0
 800965e:	d1d6      	bne.n	800960e <_svfiprintf_r+0x166>
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	065b      	lsls	r3, r3, #25
 8009664:	f53f af35 	bmi.w	80094d2 <_svfiprintf_r+0x2a>
 8009668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800966a:	b01d      	add	sp, #116	; 0x74
 800966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009670:	ab03      	add	r3, sp, #12
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	4622      	mov	r2, r4
 8009676:	4b07      	ldr	r3, [pc, #28]	; (8009694 <_svfiprintf_r+0x1ec>)
 8009678:	a904      	add	r1, sp, #16
 800967a:	4640      	mov	r0, r8
 800967c:	f000 f882 	bl	8009784 <_printf_i>
 8009680:	e7ea      	b.n	8009658 <_svfiprintf_r+0x1b0>
 8009682:	bf00      	nop
 8009684:	0800a53c 	.word	0x0800a53c
 8009688:	0800a542 	.word	0x0800a542
 800968c:	0800a546 	.word	0x0800a546
 8009690:	00000000 	.word	0x00000000
 8009694:	080093f5 	.word	0x080093f5

08009698 <_printf_common>:
 8009698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	4691      	mov	r9, r2
 800969e:	461f      	mov	r7, r3
 80096a0:	688a      	ldr	r2, [r1, #8]
 80096a2:	690b      	ldr	r3, [r1, #16]
 80096a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	bfb8      	it	lt
 80096ac:	4613      	movlt	r3, r2
 80096ae:	f8c9 3000 	str.w	r3, [r9]
 80096b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096b6:	4606      	mov	r6, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	b112      	cbz	r2, 80096c2 <_printf_common+0x2a>
 80096bc:	3301      	adds	r3, #1
 80096be:	f8c9 3000 	str.w	r3, [r9]
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	0699      	lsls	r1, r3, #26
 80096c6:	bf42      	ittt	mi
 80096c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096cc:	3302      	addmi	r3, #2
 80096ce:	f8c9 3000 	strmi.w	r3, [r9]
 80096d2:	6825      	ldr	r5, [r4, #0]
 80096d4:	f015 0506 	ands.w	r5, r5, #6
 80096d8:	d107      	bne.n	80096ea <_printf_common+0x52>
 80096da:	f104 0a19 	add.w	sl, r4, #25
 80096de:	68e3      	ldr	r3, [r4, #12]
 80096e0:	f8d9 2000 	ldr.w	r2, [r9]
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	42ab      	cmp	r3, r5
 80096e8:	dc28      	bgt.n	800973c <_printf_common+0xa4>
 80096ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096ee:	6822      	ldr	r2, [r4, #0]
 80096f0:	3300      	adds	r3, #0
 80096f2:	bf18      	it	ne
 80096f4:	2301      	movne	r3, #1
 80096f6:	0692      	lsls	r2, r2, #26
 80096f8:	d42d      	bmi.n	8009756 <_printf_common+0xbe>
 80096fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096fe:	4639      	mov	r1, r7
 8009700:	4630      	mov	r0, r6
 8009702:	47c0      	blx	r8
 8009704:	3001      	adds	r0, #1
 8009706:	d020      	beq.n	800974a <_printf_common+0xb2>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	68e5      	ldr	r5, [r4, #12]
 800970c:	f8d9 2000 	ldr.w	r2, [r9]
 8009710:	f003 0306 	and.w	r3, r3, #6
 8009714:	2b04      	cmp	r3, #4
 8009716:	bf08      	it	eq
 8009718:	1aad      	subeq	r5, r5, r2
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	6922      	ldr	r2, [r4, #16]
 800971e:	bf0c      	ite	eq
 8009720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009724:	2500      	movne	r5, #0
 8009726:	4293      	cmp	r3, r2
 8009728:	bfc4      	itt	gt
 800972a:	1a9b      	subgt	r3, r3, r2
 800972c:	18ed      	addgt	r5, r5, r3
 800972e:	f04f 0900 	mov.w	r9, #0
 8009732:	341a      	adds	r4, #26
 8009734:	454d      	cmp	r5, r9
 8009736:	d11a      	bne.n	800976e <_printf_common+0xd6>
 8009738:	2000      	movs	r0, #0
 800973a:	e008      	b.n	800974e <_printf_common+0xb6>
 800973c:	2301      	movs	r3, #1
 800973e:	4652      	mov	r2, sl
 8009740:	4639      	mov	r1, r7
 8009742:	4630      	mov	r0, r6
 8009744:	47c0      	blx	r8
 8009746:	3001      	adds	r0, #1
 8009748:	d103      	bne.n	8009752 <_printf_common+0xba>
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009752:	3501      	adds	r5, #1
 8009754:	e7c3      	b.n	80096de <_printf_common+0x46>
 8009756:	18e1      	adds	r1, r4, r3
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	2030      	movs	r0, #48	; 0x30
 800975c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009760:	4422      	add	r2, r4
 8009762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800976a:	3302      	adds	r3, #2
 800976c:	e7c5      	b.n	80096fa <_printf_common+0x62>
 800976e:	2301      	movs	r3, #1
 8009770:	4622      	mov	r2, r4
 8009772:	4639      	mov	r1, r7
 8009774:	4630      	mov	r0, r6
 8009776:	47c0      	blx	r8
 8009778:	3001      	adds	r0, #1
 800977a:	d0e6      	beq.n	800974a <_printf_common+0xb2>
 800977c:	f109 0901 	add.w	r9, r9, #1
 8009780:	e7d8      	b.n	8009734 <_printf_common+0x9c>
	...

08009784 <_printf_i>:
 8009784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009788:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800978c:	460c      	mov	r4, r1
 800978e:	7e09      	ldrb	r1, [r1, #24]
 8009790:	b085      	sub	sp, #20
 8009792:	296e      	cmp	r1, #110	; 0x6e
 8009794:	4617      	mov	r7, r2
 8009796:	4606      	mov	r6, r0
 8009798:	4698      	mov	r8, r3
 800979a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800979c:	f000 80b3 	beq.w	8009906 <_printf_i+0x182>
 80097a0:	d822      	bhi.n	80097e8 <_printf_i+0x64>
 80097a2:	2963      	cmp	r1, #99	; 0x63
 80097a4:	d036      	beq.n	8009814 <_printf_i+0x90>
 80097a6:	d80a      	bhi.n	80097be <_printf_i+0x3a>
 80097a8:	2900      	cmp	r1, #0
 80097aa:	f000 80b9 	beq.w	8009920 <_printf_i+0x19c>
 80097ae:	2958      	cmp	r1, #88	; 0x58
 80097b0:	f000 8083 	beq.w	80098ba <_printf_i+0x136>
 80097b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097bc:	e032      	b.n	8009824 <_printf_i+0xa0>
 80097be:	2964      	cmp	r1, #100	; 0x64
 80097c0:	d001      	beq.n	80097c6 <_printf_i+0x42>
 80097c2:	2969      	cmp	r1, #105	; 0x69
 80097c4:	d1f6      	bne.n	80097b4 <_printf_i+0x30>
 80097c6:	6820      	ldr	r0, [r4, #0]
 80097c8:	6813      	ldr	r3, [r2, #0]
 80097ca:	0605      	lsls	r5, r0, #24
 80097cc:	f103 0104 	add.w	r1, r3, #4
 80097d0:	d52a      	bpl.n	8009828 <_printf_i+0xa4>
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6011      	str	r1, [r2, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	da03      	bge.n	80097e2 <_printf_i+0x5e>
 80097da:	222d      	movs	r2, #45	; 0x2d
 80097dc:	425b      	negs	r3, r3
 80097de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097e2:	486f      	ldr	r0, [pc, #444]	; (80099a0 <_printf_i+0x21c>)
 80097e4:	220a      	movs	r2, #10
 80097e6:	e039      	b.n	800985c <_printf_i+0xd8>
 80097e8:	2973      	cmp	r1, #115	; 0x73
 80097ea:	f000 809d 	beq.w	8009928 <_printf_i+0x1a4>
 80097ee:	d808      	bhi.n	8009802 <_printf_i+0x7e>
 80097f0:	296f      	cmp	r1, #111	; 0x6f
 80097f2:	d020      	beq.n	8009836 <_printf_i+0xb2>
 80097f4:	2970      	cmp	r1, #112	; 0x70
 80097f6:	d1dd      	bne.n	80097b4 <_printf_i+0x30>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	f043 0320 	orr.w	r3, r3, #32
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	e003      	b.n	800980a <_printf_i+0x86>
 8009802:	2975      	cmp	r1, #117	; 0x75
 8009804:	d017      	beq.n	8009836 <_printf_i+0xb2>
 8009806:	2978      	cmp	r1, #120	; 0x78
 8009808:	d1d4      	bne.n	80097b4 <_printf_i+0x30>
 800980a:	2378      	movs	r3, #120	; 0x78
 800980c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009810:	4864      	ldr	r0, [pc, #400]	; (80099a4 <_printf_i+0x220>)
 8009812:	e055      	b.n	80098c0 <_printf_i+0x13c>
 8009814:	6813      	ldr	r3, [r2, #0]
 8009816:	1d19      	adds	r1, r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6011      	str	r1, [r2, #0]
 800981c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009824:	2301      	movs	r3, #1
 8009826:	e08c      	b.n	8009942 <_printf_i+0x1be>
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6011      	str	r1, [r2, #0]
 800982c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009830:	bf18      	it	ne
 8009832:	b21b      	sxthne	r3, r3
 8009834:	e7cf      	b.n	80097d6 <_printf_i+0x52>
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	6825      	ldr	r5, [r4, #0]
 800983a:	1d18      	adds	r0, r3, #4
 800983c:	6010      	str	r0, [r2, #0]
 800983e:	0628      	lsls	r0, r5, #24
 8009840:	d501      	bpl.n	8009846 <_printf_i+0xc2>
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	e002      	b.n	800984c <_printf_i+0xc8>
 8009846:	0668      	lsls	r0, r5, #25
 8009848:	d5fb      	bpl.n	8009842 <_printf_i+0xbe>
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	4854      	ldr	r0, [pc, #336]	; (80099a0 <_printf_i+0x21c>)
 800984e:	296f      	cmp	r1, #111	; 0x6f
 8009850:	bf14      	ite	ne
 8009852:	220a      	movne	r2, #10
 8009854:	2208      	moveq	r2, #8
 8009856:	2100      	movs	r1, #0
 8009858:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800985c:	6865      	ldr	r5, [r4, #4]
 800985e:	60a5      	str	r5, [r4, #8]
 8009860:	2d00      	cmp	r5, #0
 8009862:	f2c0 8095 	blt.w	8009990 <_printf_i+0x20c>
 8009866:	6821      	ldr	r1, [r4, #0]
 8009868:	f021 0104 	bic.w	r1, r1, #4
 800986c:	6021      	str	r1, [r4, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d13d      	bne.n	80098ee <_printf_i+0x16a>
 8009872:	2d00      	cmp	r5, #0
 8009874:	f040 808e 	bne.w	8009994 <_printf_i+0x210>
 8009878:	4665      	mov	r5, ip
 800987a:	2a08      	cmp	r2, #8
 800987c:	d10b      	bne.n	8009896 <_printf_i+0x112>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	07db      	lsls	r3, r3, #31
 8009882:	d508      	bpl.n	8009896 <_printf_i+0x112>
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	6862      	ldr	r2, [r4, #4]
 8009888:	429a      	cmp	r2, r3
 800988a:	bfde      	ittt	le
 800988c:	2330      	movle	r3, #48	; 0x30
 800988e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009892:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009896:	ebac 0305 	sub.w	r3, ip, r5
 800989a:	6123      	str	r3, [r4, #16]
 800989c:	f8cd 8000 	str.w	r8, [sp]
 80098a0:	463b      	mov	r3, r7
 80098a2:	aa03      	add	r2, sp, #12
 80098a4:	4621      	mov	r1, r4
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff fef6 	bl	8009698 <_printf_common>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d14d      	bne.n	800994c <_printf_i+0x1c8>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b005      	add	sp, #20
 80098b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ba:	4839      	ldr	r0, [pc, #228]	; (80099a0 <_printf_i+0x21c>)
 80098bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098c0:	6813      	ldr	r3, [r2, #0]
 80098c2:	6821      	ldr	r1, [r4, #0]
 80098c4:	1d1d      	adds	r5, r3, #4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6015      	str	r5, [r2, #0]
 80098ca:	060a      	lsls	r2, r1, #24
 80098cc:	d50b      	bpl.n	80098e6 <_printf_i+0x162>
 80098ce:	07ca      	lsls	r2, r1, #31
 80098d0:	bf44      	itt	mi
 80098d2:	f041 0120 	orrmi.w	r1, r1, #32
 80098d6:	6021      	strmi	r1, [r4, #0]
 80098d8:	b91b      	cbnz	r3, 80098e2 <_printf_i+0x15e>
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	f022 0220 	bic.w	r2, r2, #32
 80098e0:	6022      	str	r2, [r4, #0]
 80098e2:	2210      	movs	r2, #16
 80098e4:	e7b7      	b.n	8009856 <_printf_i+0xd2>
 80098e6:	064d      	lsls	r5, r1, #25
 80098e8:	bf48      	it	mi
 80098ea:	b29b      	uxthmi	r3, r3
 80098ec:	e7ef      	b.n	80098ce <_printf_i+0x14a>
 80098ee:	4665      	mov	r5, ip
 80098f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80098f4:	fb02 3311 	mls	r3, r2, r1, r3
 80098f8:	5cc3      	ldrb	r3, [r0, r3]
 80098fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098fe:	460b      	mov	r3, r1
 8009900:	2900      	cmp	r1, #0
 8009902:	d1f5      	bne.n	80098f0 <_printf_i+0x16c>
 8009904:	e7b9      	b.n	800987a <_printf_i+0xf6>
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	6825      	ldr	r5, [r4, #0]
 800990a:	6961      	ldr	r1, [r4, #20]
 800990c:	1d18      	adds	r0, r3, #4
 800990e:	6010      	str	r0, [r2, #0]
 8009910:	0628      	lsls	r0, r5, #24
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	d501      	bpl.n	800991a <_printf_i+0x196>
 8009916:	6019      	str	r1, [r3, #0]
 8009918:	e002      	b.n	8009920 <_printf_i+0x19c>
 800991a:	066a      	lsls	r2, r5, #25
 800991c:	d5fb      	bpl.n	8009916 <_printf_i+0x192>
 800991e:	8019      	strh	r1, [r3, #0]
 8009920:	2300      	movs	r3, #0
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	4665      	mov	r5, ip
 8009926:	e7b9      	b.n	800989c <_printf_i+0x118>
 8009928:	6813      	ldr	r3, [r2, #0]
 800992a:	1d19      	adds	r1, r3, #4
 800992c:	6011      	str	r1, [r2, #0]
 800992e:	681d      	ldr	r5, [r3, #0]
 8009930:	6862      	ldr	r2, [r4, #4]
 8009932:	2100      	movs	r1, #0
 8009934:	4628      	mov	r0, r5
 8009936:	f7f6 fc53 	bl	80001e0 <memchr>
 800993a:	b108      	cbz	r0, 8009940 <_printf_i+0x1bc>
 800993c:	1b40      	subs	r0, r0, r5
 800993e:	6060      	str	r0, [r4, #4]
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	6123      	str	r3, [r4, #16]
 8009944:	2300      	movs	r3, #0
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994a:	e7a7      	b.n	800989c <_printf_i+0x118>
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	462a      	mov	r2, r5
 8009950:	4639      	mov	r1, r7
 8009952:	4630      	mov	r0, r6
 8009954:	47c0      	blx	r8
 8009956:	3001      	adds	r0, #1
 8009958:	d0aa      	beq.n	80098b0 <_printf_i+0x12c>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	079b      	lsls	r3, r3, #30
 800995e:	d413      	bmi.n	8009988 <_printf_i+0x204>
 8009960:	68e0      	ldr	r0, [r4, #12]
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	4298      	cmp	r0, r3
 8009966:	bfb8      	it	lt
 8009968:	4618      	movlt	r0, r3
 800996a:	e7a3      	b.n	80098b4 <_printf_i+0x130>
 800996c:	2301      	movs	r3, #1
 800996e:	464a      	mov	r2, r9
 8009970:	4639      	mov	r1, r7
 8009972:	4630      	mov	r0, r6
 8009974:	47c0      	blx	r8
 8009976:	3001      	adds	r0, #1
 8009978:	d09a      	beq.n	80098b0 <_printf_i+0x12c>
 800997a:	3501      	adds	r5, #1
 800997c:	68e3      	ldr	r3, [r4, #12]
 800997e:	9a03      	ldr	r2, [sp, #12]
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	42ab      	cmp	r3, r5
 8009984:	dcf2      	bgt.n	800996c <_printf_i+0x1e8>
 8009986:	e7eb      	b.n	8009960 <_printf_i+0x1dc>
 8009988:	2500      	movs	r5, #0
 800998a:	f104 0919 	add.w	r9, r4, #25
 800998e:	e7f5      	b.n	800997c <_printf_i+0x1f8>
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1ac      	bne.n	80098ee <_printf_i+0x16a>
 8009994:	7803      	ldrb	r3, [r0, #0]
 8009996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800999a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800999e:	e76c      	b.n	800987a <_printf_i+0xf6>
 80099a0:	0800a54d 	.word	0x0800a54d
 80099a4:	0800a55e 	.word	0x0800a55e

080099a8 <__sread>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	f000 f8c4 	bl	8009b3c <_read_r>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	bfab      	itete	ge
 80099b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ba:	89a3      	ldrhlt	r3, [r4, #12]
 80099bc:	181b      	addge	r3, r3, r0
 80099be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099c2:	bfac      	ite	ge
 80099c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099c6:	81a3      	strhlt	r3, [r4, #12]
 80099c8:	bd10      	pop	{r4, pc}

080099ca <__swrite>:
 80099ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	461f      	mov	r7, r3
 80099d0:	898b      	ldrh	r3, [r1, #12]
 80099d2:	05db      	lsls	r3, r3, #23
 80099d4:	4605      	mov	r5, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4616      	mov	r6, r2
 80099da:	d505      	bpl.n	80099e8 <__swrite+0x1e>
 80099dc:	2302      	movs	r3, #2
 80099de:	2200      	movs	r2, #0
 80099e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e4:	f000 f858 	bl	8009a98 <_lseek_r>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	4632      	mov	r2, r6
 80099f6:	463b      	mov	r3, r7
 80099f8:	4628      	mov	r0, r5
 80099fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099fe:	f000 b817 	b.w	8009a30 <_write_r>

08009a02 <__sseek>:
 8009a02:	b510      	push	{r4, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0a:	f000 f845 	bl	8009a98 <_lseek_r>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	bf15      	itete	ne
 8009a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a1e:	81a3      	strheq	r3, [r4, #12]
 8009a20:	bf18      	it	ne
 8009a22:	81a3      	strhne	r3, [r4, #12]
 8009a24:	bd10      	pop	{r4, pc}

08009a26 <__sclose>:
 8009a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2a:	f000 b813 	b.w	8009a54 <_close_r>
	...

08009a30 <_write_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4c07      	ldr	r4, [pc, #28]	; (8009a50 <_write_r+0x20>)
 8009a34:	4605      	mov	r5, r0
 8009a36:	4608      	mov	r0, r1
 8009a38:	4611      	mov	r1, r2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f7fe ff35 	bl	80088ae <_write>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_write_r+0x1e>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_write_r+0x1e>
 8009a4c:	602b      	str	r3, [r5, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	20004320 	.word	0x20004320

08009a54 <_close_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4c06      	ldr	r4, [pc, #24]	; (8009a70 <_close_r+0x1c>)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	f7fe ff41 	bl	80088e6 <_close>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_close_r+0x1a>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_close_r+0x1a>
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	20004320 	.word	0x20004320

08009a74 <_fstat_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4c07      	ldr	r4, [pc, #28]	; (8009a94 <_fstat_r+0x20>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	f7fe ff3c 	bl	80088fe <_fstat>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	d102      	bne.n	8009a90 <_fstat_r+0x1c>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	b103      	cbz	r3, 8009a90 <_fstat_r+0x1c>
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	bd38      	pop	{r3, r4, r5, pc}
 8009a92:	bf00      	nop
 8009a94:	20004320 	.word	0x20004320

08009a98 <_lseek_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4c07      	ldr	r4, [pc, #28]	; (8009ab8 <_lseek_r+0x20>)
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	4608      	mov	r0, r1
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	6022      	str	r2, [r4, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f7fe ff39 	bl	800891e <_lseek>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d102      	bne.n	8009ab6 <_lseek_r+0x1e>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	b103      	cbz	r3, 8009ab6 <_lseek_r+0x1e>
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	20004320 	.word	0x20004320

08009abc <memmove>:
 8009abc:	4288      	cmp	r0, r1
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	eb01 0302 	add.w	r3, r1, r2
 8009ac4:	d807      	bhi.n	8009ad6 <memmove+0x1a>
 8009ac6:	1e42      	subs	r2, r0, #1
 8009ac8:	4299      	cmp	r1, r3
 8009aca:	d00a      	beq.n	8009ae2 <memmove+0x26>
 8009acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ad0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009ad4:	e7f8      	b.n	8009ac8 <memmove+0xc>
 8009ad6:	4283      	cmp	r3, r0
 8009ad8:	d9f5      	bls.n	8009ac6 <memmove+0xa>
 8009ada:	1881      	adds	r1, r0, r2
 8009adc:	1ad2      	subs	r2, r2, r3
 8009ade:	42d3      	cmn	r3, r2
 8009ae0:	d100      	bne.n	8009ae4 <memmove+0x28>
 8009ae2:	bd10      	pop	{r4, pc}
 8009ae4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ae8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009aec:	e7f7      	b.n	8009ade <memmove+0x22>

08009aee <_realloc_r>:
 8009aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af0:	4607      	mov	r7, r0
 8009af2:	4614      	mov	r4, r2
 8009af4:	460e      	mov	r6, r1
 8009af6:	b921      	cbnz	r1, 8009b02 <_realloc_r+0x14>
 8009af8:	4611      	mov	r1, r2
 8009afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009afe:	f7ff b955 	b.w	8008dac <_malloc_r>
 8009b02:	b922      	cbnz	r2, 8009b0e <_realloc_r+0x20>
 8009b04:	f7ff f904 	bl	8008d10 <_free_r>
 8009b08:	4625      	mov	r5, r4
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b0e:	f000 f827 	bl	8009b60 <_malloc_usable_size_r>
 8009b12:	42a0      	cmp	r0, r4
 8009b14:	d20f      	bcs.n	8009b36 <_realloc_r+0x48>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff f947 	bl	8008dac <_malloc_r>
 8009b1e:	4605      	mov	r5, r0
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d0f2      	beq.n	8009b0a <_realloc_r+0x1c>
 8009b24:	4631      	mov	r1, r6
 8009b26:	4622      	mov	r2, r4
 8009b28:	f7ff f8de 	bl	8008ce8 <memcpy>
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4638      	mov	r0, r7
 8009b30:	f7ff f8ee 	bl	8008d10 <_free_r>
 8009b34:	e7e9      	b.n	8009b0a <_realloc_r+0x1c>
 8009b36:	4635      	mov	r5, r6
 8009b38:	e7e7      	b.n	8009b0a <_realloc_r+0x1c>
	...

08009b3c <_read_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4c07      	ldr	r4, [pc, #28]	; (8009b5c <_read_r+0x20>)
 8009b40:	4605      	mov	r5, r0
 8009b42:	4608      	mov	r0, r1
 8009b44:	4611      	mov	r1, r2
 8009b46:	2200      	movs	r2, #0
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f7fe fe92 	bl	8008874 <_read>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_read_r+0x1e>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_read_r+0x1e>
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	20004320 	.word	0x20004320

08009b60 <_malloc_usable_size_r>:
 8009b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b64:	1f18      	subs	r0, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfbc      	itt	lt
 8009b6a:	580b      	ldrlt	r3, [r1, r0]
 8009b6c:	18c0      	addlt	r0, r0, r3
 8009b6e:	4770      	bx	lr

08009b70 <_init>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	bf00      	nop
 8009b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b76:	bc08      	pop	{r3}
 8009b78:	469e      	mov	lr, r3
 8009b7a:	4770      	bx	lr

08009b7c <_fini>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	bf00      	nop
 8009b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b82:	bc08      	pop	{r3}
 8009b84:	469e      	mov	lr, r3
 8009b86:	4770      	bx	lr
