
DevBoardTestBasic2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a460  0800a460  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a468  0800a468  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a468  0800a468  0001a468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a46c  0800a46c  0001a46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800a470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004304  200000b0  0800a520  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 0000c004  200043b4  0800a520  000243b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a8a2  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000453e  00000000  00000000  0004a982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a68  00000000  00000000  0004eec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001870  00000000  00000000  00050928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027bc4  00000000  00000000  00052198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001781d  00000000  00000000  00079d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e899c  00000000  00000000  00091579  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000752c  00000000  00000000  00179f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a20 	.word	0x08009a20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08009a20 	.word	0x08009a20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f91c 	bl	80007e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f007 ffee 	bl	8008590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f007 ffc0 	bl	8008538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	200040d0 	.word	0x200040d0

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200040d0 	.word	0x200040d0

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	db10      	blt.n	800071c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f003 021f 	and.w	r2, r3, #31
 8000700:	4909      	ldr	r1, [pc, #36]	; (8000728 <__NVIC_DisableIRQ+0x40>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	095b      	lsrs	r3, r3, #5
 8000708:	2001      	movs	r0, #1
 800070a:	fa00 f202 	lsl.w	r2, r0, r2
 800070e:	3320      	adds	r3, #32
 8000710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000718:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff2a 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080e:	f7ff ff3f 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	f7ff ffb1 	bl	8000780 <NVIC_EncodePriority>
 800081e:	4602      	mov	r2, r0
 8000820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff80 	bl	800072c <__NVIC_SetPriority>
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff32 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff42 	bl	80006e8 <__NVIC_DisableIRQ>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff feb8 	bl	80005ec <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e099      	b.n	80009bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2202      	movs	r2, #2
 8000894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0201 	bic.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a8:	e00f      	b.n	80008ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008aa:	f7ff fe9f 	bl	80005ec <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d908      	bls.n	80008ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2220      	movs	r2, #32
 80008bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2203      	movs	r2, #3
 80008c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e078      	b.n	80009bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1e8      	bne.n	80008aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <HAL_DMA_Init+0x158>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	2b04      	cmp	r3, #4
 8000922:	d107      	bne.n	8000934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4313      	orrs	r3, r2
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4313      	orrs	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	4313      	orrs	r3, r2
 8000954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	2b04      	cmp	r3, #4
 800095c:	d117      	bne.n	800098e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4313      	orrs	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00e      	beq.n	800098e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 faef 	bl	8000f54 <DMA_CheckFifoParam>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d008      	beq.n	800098e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2240      	movs	r2, #64	; 0x40
 8000980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800098a:	2301      	movs	r3, #1
 800098c:	e016      	b.n	80009bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 faa6 	bl	8000ee8 <DMA_CalcBaseAndBitshift>
 800099c:	4603      	mov	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	223f      	movs	r2, #63	; 0x3f
 80009a6:	409a      	lsls	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	f010803f 	.word	0xf010803f

080009c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e050      	b.n	8000a7c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d101      	bne.n	80009ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80009e6:	2302      	movs	r3, #2
 80009e8:	e048      	b.n	8000a7c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0201 	bic.w	r2, r2, #1
 80009f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2221      	movs	r2, #33	; 0x21
 8000a28:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 fa5c 	bl	8000ee8 <DMA_CalcBaseAndBitshift>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5c:	223f      	movs	r2, #63	; 0x3f
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d101      	bne.n	8000aaa <HAL_DMA_Start_IT+0x26>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e040      	b.n	8000b2c <HAL_DMA_Start_IT+0xa8>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2201      	movs	r2, #1
 8000aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d12f      	bne.n	8000b1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f000 f9da 	bl	8000e8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	223f      	movs	r2, #63	; 0x3f
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0216 	orr.w	r2, r2, #22
 8000af2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d007      	beq.n	8000b0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0208 	orr.w	r2, r2, #8
 8000b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0201 	orr.w	r2, r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e005      	b.n	8000b2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000b26:	2302      	movs	r3, #2
 8000b28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d004      	beq.n	8000b52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00c      	b.n	8000b6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2205      	movs	r2, #5
 8000b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b84:	4b92      	ldr	r3, [pc, #584]	; (8000dd0 <HAL_DMA_IRQHandler+0x258>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a92      	ldr	r2, [pc, #584]	; (8000dd4 <HAL_DMA_IRQHandler+0x25c>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	0a9b      	lsrs	r3, r3, #10
 8000b90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d01a      	beq.n	8000be4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d013      	beq.n	8000be4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0204 	bic.w	r2, r2, #4
 8000bca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bdc:	f043 0201 	orr.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be8:	2201      	movs	r2, #1
 8000bea:	409a      	lsls	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d012      	beq.n	8000c1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00b      	beq.n	8000c1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c06:	2201      	movs	r2, #1
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c12:	f043 0202 	orr.w	r2, r3, #2
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1e:	2204      	movs	r2, #4
 8000c20:	409a      	lsls	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d012      	beq.n	8000c50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00b      	beq.n	8000c50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c48:	f043 0204 	orr.w	r2, r3, #4
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c54:	2210      	movs	r2, #16
 8000c56:	409a      	lsls	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d043      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d03c      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c72:	2210      	movs	r2, #16
 8000c74:	409a      	lsls	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d018      	beq.n	8000cba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d108      	bne.n	8000ca8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d024      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	4798      	blx	r3
 8000ca6:	e01f      	b.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d01b      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	4798      	blx	r3
 8000cb8:	e016      	b.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d107      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0208 	bic.w	r2, r2, #8
 8000cd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cec:	2220      	movs	r2, #32
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 808e 	beq.w	8000e16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8086 	beq.w	8000e16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d0e:	2220      	movs	r2, #32
 8000d10:	409a      	lsls	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d136      	bne.n	8000d90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0216 	bic.w	r2, r2, #22
 8000d30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x1da>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0208 	bic.w	r2, r2, #8
 8000d60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d66:	223f      	movs	r2, #63	; 0x3f
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d07d      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	4798      	blx	r3
        }
        return;
 8000d8e:	e078      	b.n	8000e82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d01c      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d108      	bne.n	8000dbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d030      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
 8000dbc:	e02b      	b.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d027      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	4798      	blx	r3
 8000dce:	e022      	b.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
 8000dd0:	20000044 	.word	0x20000044
 8000dd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0210 	bic.w	r2, r2, #16
 8000df4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d032      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d022      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3301      	adds	r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d307      	bcc.n	8000e5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f2      	bne.n	8000e42 <HAL_DMA_IRQHandler+0x2ca>
 8000e5c:	e000      	b.n	8000e60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000e5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	4798      	blx	r3
 8000e80:	e000      	b.n	8000e84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e82:	bf00      	nop
    }
  }
}
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop

08000e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ea8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b40      	cmp	r3, #64	; 0x40
 8000eb8:	d108      	bne.n	8000ecc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000eca:	e007      	b.n	8000edc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	60da      	str	r2, [r3, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3b10      	subs	r3, #16
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <DMA_CalcBaseAndBitshift+0x64>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <DMA_CalcBaseAndBitshift+0x68>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d909      	bls.n	8000f2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	1d1a      	adds	r2, r3, #4
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	659a      	str	r2, [r3, #88]	; 0x58
 8000f28:	e007      	b.n	8000f3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f32:	f023 0303 	bic.w	r3, r3, #3
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	aaaaaaab 	.word	0xaaaaaaab
 8000f50:	0800a338 	.word	0x0800a338

08000f54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11f      	bne.n	8000fae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d855      	bhi.n	8001020 <DMA_CheckFifoParam+0xcc>
 8000f74:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <DMA_CheckFifoParam+0x28>)
 8000f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7a:	bf00      	nop
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	08000f9f 	.word	0x08000f9f
 8000f84:	08000f8d 	.word	0x08000f8d
 8000f88:	08001021 	.word	0x08001021
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d045      	beq.n	8001024 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f9c:	e042      	b.n	8001024 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fa6:	d13f      	bne.n	8001028 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fac:	e03c      	b.n	8001028 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb6:	d121      	bne.n	8000ffc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d836      	bhi.n	800102c <DMA_CheckFifoParam+0xd8>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <DMA_CheckFifoParam+0x70>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08000fdb 	.word	0x08000fdb
 8000fcc:	08000fd5 	.word	0x08000fd5
 8000fd0:	08000fed 	.word	0x08000fed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8000fd8:	e02f      	b.n	800103a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d024      	beq.n	8001030 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fea:	e021      	b.n	8001030 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ff4:	d11e      	bne.n	8001034 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ffa:	e01b      	b.n	8001034 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d902      	bls.n	8001008 <DMA_CheckFifoParam+0xb4>
 8001002:	2b03      	cmp	r3, #3
 8001004:	d003      	beq.n	800100e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001006:	e018      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
      break;
 800100c:	e015      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00e      	beq.n	8001038 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
      break;
 800101e:	e00b      	b.n	8001038 <DMA_CheckFifoParam+0xe4>
      break;
 8001020:	bf00      	nop
 8001022:	e00a      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001024:	bf00      	nop
 8001026:	e008      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001028:	bf00      	nop
 800102a:	e006      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 800102c:	bf00      	nop
 800102e:	e004      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001030:	bf00      	nop
 8001032:	e002      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;   
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <DMA_CheckFifoParam+0xe6>
      break;
 8001038:	bf00      	nop
    }
  } 
  
  return status; 
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e16b      	b.n	800133c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 815a 	bne.w	8001336 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d00b      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	2b11      	cmp	r3, #17
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0xfc>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80b4 	beq.w	8001336 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_GPIO_Init+0x308>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5e      	ldr	r2, [pc, #376]	; (8001350 <HAL_GPIO_Init+0x308>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_GPIO_Init+0x308>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x310>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02b      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <HAL_GPIO_Init+0x314>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x318>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x31c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x324>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <HAL_GPIO_Init+0x328>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <HAL_GPIO_Init+0x32c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x20a>
 800124e:	2307      	movs	r3, #7
 8001250:	e00e      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001252:	2308      	movs	r3, #8
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001256:	2306      	movs	r3, #6
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4934      	ldr	r1, [pc, #208]	; (8001354 <HAL_GPIO_Init+0x30c>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x330>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x330>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae90 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	3724      	adds	r7, #36	; 0x24
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40021400 	.word	0x40021400
 8001370:	40021800 	.word	0x40021800
 8001374:	40021c00 	.word	0x40021c00
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e0cd      	b.n	8001534 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001398:	2201      	movs	r2, #1
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	f040 80bd 	bne.w	800152e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80013b4:	4a64      	ldr	r2, [pc, #400]	; (8001548 <HAL_GPIO_DeInit+0x1cc>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a5c      	ldr	r2, [pc, #368]	; (800154c <HAL_GPIO_DeInit+0x1d0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02b      	beq.n	8001436 <HAL_GPIO_DeInit+0xba>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a5b      	ldr	r2, [pc, #364]	; (8001550 <HAL_GPIO_DeInit+0x1d4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_DeInit+0xb6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a5a      	ldr	r2, [pc, #360]	; (8001554 <HAL_GPIO_DeInit+0x1d8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_DeInit+0xb2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a59      	ldr	r2, [pc, #356]	; (8001558 <HAL_GPIO_DeInit+0x1dc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_DeInit+0xae>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_GPIO_DeInit+0x1e0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_DeInit+0xaa>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_DeInit+0xa6>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_GPIO_DeInit+0x1e8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_DeInit+0xa2>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_GPIO_DeInit+0x1ec>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001416:	2307      	movs	r3, #7
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800141a:	2308      	movs	r3, #8
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_DeInit+0xbc>
 8001436:	2300      	movs	r3, #0
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	429a      	cmp	r2, r3
 8001446:	d132      	bne.n	80014ae <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	4946      	ldr	r1, [pc, #280]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001452:	4013      	ands	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43db      	mvns	r3, r3
 800145e:	4943      	ldr	r1, [pc, #268]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001460:	4013      	ands	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001464:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	493f      	ldr	r1, [pc, #252]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 800146e:	4013      	ands	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	493c      	ldr	r1, [pc, #240]	; (800156c <HAL_GPIO_DeInit+0x1f0>)
 800147c:	4013      	ands	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001490:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_GPIO_DeInit+0x1cc>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	43da      	mvns	r2, r3
 80014a0:	4829      	ldr	r0, [pc, #164]	; (8001548 <HAL_GPIO_DeInit+0x1cc>)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	400a      	ands	r2, r1
 80014a8:	3302      	adds	r3, #2
 80014aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2103      	movs	r1, #3
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	08d2      	lsrs	r2, r2, #3
 80014e4:	4019      	ands	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2103      	movs	r1, #3
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	2101      	movs	r1, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2103      	movs	r1, #3
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f67f af2e 	bls.w	8001398 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40021400 	.word	0x40021400
 8001564:	40021800 	.word	0x40021800
 8001568:	40021c00 	.word	0x40021c00
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	401a      	ands	r2, r3
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d104      	bne.n	80015f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e11f      	b.n	800185a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f006 fae4 	bl	8007bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800166c:	f000 fd3e 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8001670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a7b      	ldr	r2, [pc, #492]	; (8001864 <HAL_I2C_Init+0x25c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d807      	bhi.n	800168c <HAL_I2C_Init+0x84>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <HAL_I2C_Init+0x260>)
 8001680:	4293      	cmp	r3, r2
 8001682:	bf94      	ite	ls
 8001684:	2301      	movls	r3, #1
 8001686:	2300      	movhi	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e006      	b.n	800169a <HAL_I2C_Init+0x92>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a77      	ldr	r2, [pc, #476]	; (800186c <HAL_I2C_Init+0x264>)
 8001690:	4293      	cmp	r3, r2
 8001692:	bf94      	ite	ls
 8001694:	2301      	movls	r3, #1
 8001696:	2300      	movhi	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0db      	b.n	800185a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a72      	ldr	r2, [pc, #456]	; (8001870 <HAL_I2C_Init+0x268>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a64      	ldr	r2, [pc, #400]	; (8001864 <HAL_I2C_Init+0x25c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d802      	bhi.n	80016dc <HAL_I2C_Init+0xd4>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	e009      	b.n	80016f0 <HAL_I2C_Init+0xe8>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_I2C_Init+0x26c>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	3301      	adds	r3, #1
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4956      	ldr	r1, [pc, #344]	; (8001864 <HAL_I2C_Init+0x25c>)
 800170c:	428b      	cmp	r3, r1
 800170e:	d80d      	bhi.n	800172c <HAL_I2C_Init+0x124>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e59      	subs	r1, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fbb1 f3f3 	udiv	r3, r1, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	bf38      	it	cc
 8001728:	2304      	movcc	r3, #4
 800172a:	e04f      	b.n	80017cc <HAL_I2C_Init+0x1c4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_I2C_Init+0x150>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e012      	b.n	800177e <HAL_I2C_Init+0x176>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x17e>
 8001782:	2301      	movs	r3, #1
 8001784:	e022      	b.n	80017cc <HAL_I2C_Init+0x1c4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_I2C_Init+0x1a4>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e58      	subs	r0, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Init+0x1c4>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6809      	ldr	r1, [r1, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6911      	ldr	r1, [r2, #16]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	003d08ff 	.word	0x003d08ff
 8001870:	431bde83 	.word	0x431bde83
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e25b      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d075      	beq.n	8001982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001896:	4ba3      	ldr	r3, [pc, #652]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d00c      	beq.n	80018bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a2:	4ba0      	ldr	r3, [pc, #640]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d112      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ae:	4b9d      	ldr	r3, [pc, #628]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ba:	d10b      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	4b99      	ldr	r3, [pc, #612]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d05b      	beq.n	8001980 <HAL_RCC_OscConfig+0x108>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d157      	bne.n	8001980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e236      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x74>
 80018de:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a90      	ldr	r2, [pc, #576]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xb0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a8a      	ldr	r2, [pc, #552]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a87      	ldr	r2, [pc, #540]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xb0>
 8001910:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a83      	ldr	r2, [pc, #524]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b81      	ldr	r3, [pc, #516]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a80      	ldr	r2, [pc, #512]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe fe5c 	bl	80005ec <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7fe fe58 	bl	80005ec <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1fb      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xc0>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7fe fe48 	bl	80005ec <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7fe fe44 	bl	80005ec <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1e7      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0xe8>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800198e:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x152>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1bb      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4952      	ldr	r1, [pc, #328]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_RCC_OscConfig+0x2b0>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7fe fdfd 	bl	80005ec <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7fe fdf9 	bl	80005ec <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e19c      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4940      	ldr	r1, [pc, #256]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <HAL_RCC_OscConfig+0x2b0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7fe fddc 	bl	80005ec <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a38:	f7fe fdd8 	bl	80005ec <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e17b      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d030      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x2b4>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7fe fdbc 	bl	80005ec <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7fe fdb8 	bl	80005ec <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e15b      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x200>
 8001a96:	e015      	b.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x2b4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe fda5 	bl	80005ec <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fda1 	bl	80005ec <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e144      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a0 	beq.w	8001c12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afe:	2301      	movs	r3, #1
 8001b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_OscConfig+0x2b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d121      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_RCC_OscConfig+0x2b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_RCC_OscConfig+0x2b8>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1a:	f7fe fd67 	bl	80005ec <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	e011      	b.n	8001b46 <HAL_RCC_OscConfig+0x2ce>
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470000 	.word	0x42470000
 8001b2c:	42470e80 	.word	0x42470e80
 8001b30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b34:	f7fe fd5a 	bl	80005ec <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e0fd      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x4d4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d106      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
 8001b5a:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a7c      	ldr	r2, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	e01c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x32a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x312>
 8001b70:	4b77      	ldr	r3, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a76      	ldr	r2, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a73      	ldr	r2, [pc, #460]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x32a>
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a70      	ldr	r2, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d015      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7fe fd1f 	bl	80005ec <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7fe fd1b 	bl	80005ec <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0bc      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ee      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x33a>
 8001bd4:	e014      	b.n	8001c00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe fd09 	bl	80005ec <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe fd05 	bl	80005ec <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0a6      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d105      	bne.n	8001c12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c06:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8092 	beq.w	8001d40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d05c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d141      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x4dc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe fcd9 	bl	80005ec <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fcd5 	bl	80005ec <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e078      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	061b      	lsls	r3, r3, #24
 8001c80:	4933      	ldr	r1, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fcae 	bl	80005ec <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe fcaa 	bl	80005ec <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e04d      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x41c>
 8001cb2:	e045      	b.n	8001d40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x4dc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe fc97 	bl	80005ec <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7fe fc93 	bl	80005ec <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e036      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x44a>
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e029      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x4d8>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d115      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10d      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d106      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	42470060 	.word	0x42470060

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cc      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d90c      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d044      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e067      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7fe fbd0 	bl	80005ec <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7fe fbcc 	bl	80005ec <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f006 fb46 	bl	8008590 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	0800a3b0 	.word	0x0800a3b0
 8001f1c:	20000044 	.word	0x20000044
 8001f20:	20000000 	.word	0x20000000

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3a:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d007      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x32>
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d008      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x38>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80b4 	bne.w	80020b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f52:	60bb      	str	r3, [r7, #8]
       break;
 8001f54:	e0b3      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4b5e      	ldr	r3, [pc, #376]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f58:	60bb      	str	r3, [r7, #8]
      break;
 8001f5a:	e0b0      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04a      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	ea03 0501 	and.w	r5, r3, r1
 8001f88:	ea04 0602 	and.w	r6, r4, r2
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4632      	mov	r2, r6
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	1b49      	subs	r1, r1, r5
 8001fa6:	eb62 0206 	sbc.w	r2, r2, r6
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0194      	lsls	r4, r2, #6
 8001fb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb8:	018b      	lsls	r3, r1, #6
 8001fba:	1a5b      	subs	r3, r3, r1
 8001fbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	00e2      	lsls	r2, r4, #3
 8001fca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	195b      	adds	r3, r3, r5
 8001fd6:	eb44 0406 	adc.w	r4, r4, r6
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	0262      	lsls	r2, r4, #9
 8001fe4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fe8:	0259      	lsls	r1, r3, #9
 8001fea:	460b      	mov	r3, r1
 8001fec:	4614      	mov	r4, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f7fe f940 	bl	8000280 <__aeabi_uldivmod>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e049      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	ea03 0501 	and.w	r5, r3, r1
 800201e:	ea04 0602 	and.w	r6, r4, r2
 8002022:	4629      	mov	r1, r5
 8002024:	4632      	mov	r2, r6
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	f04f 0400 	mov.w	r4, #0
 800202e:	0154      	lsls	r4, r2, #5
 8002030:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002034:	014b      	lsls	r3, r1, #5
 8002036:	4619      	mov	r1, r3
 8002038:	4622      	mov	r2, r4
 800203a:	1b49      	subs	r1, r1, r5
 800203c:	eb62 0206 	sbc.w	r2, r2, r6
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	0194      	lsls	r4, r2, #6
 800204a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	1a5b      	subs	r3, r3, r1
 8002052:	eb64 0402 	sbc.w	r4, r4, r2
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	00e2      	lsls	r2, r4, #3
 8002060:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002064:	00d9      	lsls	r1, r3, #3
 8002066:	460b      	mov	r3, r1
 8002068:	4614      	mov	r4, r2
 800206a:	195b      	adds	r3, r3, r5
 800206c:	eb44 0406 	adc.w	r4, r4, r6
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	02a2      	lsls	r2, r4, #10
 800207a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800207e:	0299      	lsls	r1, r3, #10
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	4618      	mov	r0, r3
 8002086:	4621      	mov	r1, r4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	f7fe f8f5 	bl	8000280 <__aeabi_uldivmod>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	60bb      	str	r3, [r7, #8]
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020ba:	60bb      	str	r3, [r7, #8]
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	68bb      	ldr	r3, [r7, #8]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000044 	.word	0x20000044

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4601      	mov	r1, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	0800a3c0 	.word	0x0800a3c0

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002118:	f7ff ffdc 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800211c:	4601      	mov	r1, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0b5b      	lsrs	r3, r3, #13
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4a03      	ldr	r2, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	0800a3c0 	.word	0x0800a3c0

0800213c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	220f      	movs	r2, #15
 800214a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_RCC_GetClockConfig+0x60>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e056      	b.n	8002260 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 f869 	bl	80082a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	ea42 0103 	orr.w	r1, r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	f003 0104 	and.w	r1, r3, #4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002276:	2301      	movs	r3, #1
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_SPI_TransmitReceive+0x26>
 800228a:	2302      	movs	r3, #2
 800228c:	e18a      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x33c>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002296:	f7fe f9a9 	bl	80005ec <HAL_GetTick>
 800229a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d00f      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x70>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022be:	d107      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x68>
 80022c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d003      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022d6:	e15b      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x82>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x82>
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022f0:	e14e      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d003      	beq.n	8002306 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2205      	movs	r2, #5
 8002302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	887a      	ldrh	r2, [r7, #2]
 800232e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d007      	beq.n	800235a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002362:	d178      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x10a>
 800236c:	8b7b      	ldrh	r3, [r7, #26]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d166      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002396:	e053      	b.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d11b      	bne.n	80023de <HAL_SPI_TransmitReceive+0x176>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_SPI_TransmitReceive+0x176>
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d113      	bne.n	80023de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	1c9a      	adds	r2, r3, #2
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d119      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x1b8>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d014      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	b292      	uxth	r2, r2
 8002402:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800241c:	2301      	movs	r3, #1
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002420:	f7fe f8e4 	bl	80005ec <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800242c:	429a      	cmp	r2, r3
 800242e:	d807      	bhi.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d003      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800243e:	e0a7      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1a6      	bne.n	8002398 <HAL_SPI_TransmitReceive+0x130>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1a1      	bne.n	8002398 <HAL_SPI_TransmitReceive+0x130>
 8002454:	e07c      	b.n	8002550 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x1fc>
 800245e:	8b7b      	ldrh	r3, [r7, #26]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d16b      	bne.n	800253c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248a:	e057      	b.n	800253c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d11c      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x26c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d017      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x26c>
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d114      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d119      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x2ae>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d014      	beq.n	8002516 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002512:	2301      	movs	r3, #1
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002516:	f7fe f869 	bl	80005ec <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002522:	429a      	cmp	r2, r3
 8002524:	d803      	bhi.n	800252e <HAL_SPI_TransmitReceive+0x2c6>
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d102      	bne.n	8002534 <HAL_SPI_TransmitReceive+0x2cc>
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800253a:	e029      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1a2      	bne.n	800248c <HAL_SPI_TransmitReceive+0x224>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d19d      	bne.n	800248c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9b1 	bl	80028bc <SPI_EndRxTxTransaction>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800256c:	e010      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	e000      	b.n	8002590 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800258e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3730      	adds	r7, #48	; 0x30
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
    return;
 80025ee:	e0d8      	b.n	80027a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_SPI_IRQHandler+0x66>
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	09db      	lsrs	r3, r3, #7
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
    return;
 8002610:	e0c7      	b.n	80027a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_SPI_IRQHandler+0x8c>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80b5 	beq.w	80027a2 <HAL_SPI_IRQHandler+0x1f6>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80ae 	beq.w	80027a2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d023      	beq.n	800269a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b03      	cmp	r3, #3
 800265c:	d011      	beq.n	8002682 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	e00b      	b.n	800269a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
        return;
 8002698:	e083      	b.n	80027a2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d014      	beq.n	80026d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f043 0208 	orr.w	r2, r3, #8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d050      	beq.n	80027a0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800270c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <HAL_SPI_IRQHandler+0x17e>
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d034      	beq.n	8002794 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0203 	bic.w	r2, r2, #3
 8002738:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d011      	beq.n	8002766 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <HAL_SPI_IRQHandler+0x1fc>)
 8002748:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe f9f0 	bl	8000b34 <HAL_DMA_Abort_IT>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <HAL_SPI_IRQHandler+0x1fc>)
 8002774:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe f9da 	bl	8000b34 <HAL_DMA_Abort_IT>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002792:	e003      	b.n	800279c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f809 	bl	80027ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800279a:	e000      	b.n	800279e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800279c:	bf00      	nop
    return;
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
  }
}
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	080027c1 	.word	0x080027c1

080027ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff ffe6 	bl	80027ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027f8:	e04c      	b.n	8002894 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d048      	beq.n	8002894 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002802:	f7fd fef3 	bl	80005ec <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d902      	bls.n	8002818 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d13d      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002826:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002830:	d111      	bne.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283a:	d004      	beq.n	8002846 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002844:	d107      	bne.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002854:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285e:	d10f      	bne.n	8002880 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800287e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e00f      	b.n	80028b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d1a3      	bne.n	80027fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <SPI_EndRxTxTransaction+0x7c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <SPI_EndRxTxTransaction+0x80>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0d5b      	lsrs	r3, r3, #21
 80028d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e6:	d112      	bne.n	800290e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff ff78 	bl	80027e8 <SPI_WaitFlagStateUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e00f      	b.n	800292e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3b01      	subs	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b80      	cmp	r3, #128	; 0x80
 8002926:	d0f2      	beq.n	800290e <SPI_EndRxTxTransaction+0x52>
 8002928:	e000      	b.n	800292c <SPI_EndRxTxTransaction+0x70>
        break;
 800292a:	bf00      	nop
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000044 	.word	0x20000044
 800293c:	165e9f81 	.word	0x165e9f81

08002940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e01d      	b.n	800298e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f005 ffa4 	bl	80088b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 f95e 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d122      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11b      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0202 	mvn.w	r2, #2
 8002a0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f8ee 	bl	8002c02 <HAL_TIM_IC_CaptureCallback>
 8002a26:	e005      	b.n	8002a34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f8e0 	bl	8002bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8f1 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d122      	bne.n	8002a8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d11b      	bne.n	8002a8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0204 	mvn.w	r2, #4
 8002a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8c4 	bl	8002c02 <HAL_TIM_IC_CaptureCallback>
 8002a7a:	e005      	b.n	8002a88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f8b6 	bl	8002bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8c7 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d122      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f06f 0208 	mvn.w	r2, #8
 8002ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f89a 	bl	8002c02 <HAL_TIM_IC_CaptureCallback>
 8002ace:	e005      	b.n	8002adc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f88c 	bl	8002bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f89d 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d122      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d11b      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0210 	mvn.w	r2, #16
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f870 	bl	8002c02 <HAL_TIM_IC_CaptureCallback>
 8002b22:	e005      	b.n	8002b30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f862 	bl	8002bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f873 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10e      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f06f 0201 	mvn.w	r2, #1
 8002b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f005 fb4b 	bl	80081f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d10e      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b80      	cmp	r3, #128	; 0x80
 8002b7c:	d107      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f903 	bl	8002d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d10e      	bne.n	8002bba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d107      	bne.n	8002bba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f838 	bl	8002c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d10e      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d107      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0220 	mvn.w	r2, #32
 8002bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8cd 	bl	8002d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a40      	ldr	r2, [pc, #256]	; (8002d54 <TIM_Base_SetConfig+0x114>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d00f      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3d      	ldr	r2, [pc, #244]	; (8002d58 <TIM_Base_SetConfig+0x118>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00b      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3c      	ldr	r2, [pc, #240]	; (8002d5c <TIM_Base_SetConfig+0x11c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d007      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <TIM_Base_SetConfig+0x120>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d003      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a3a      	ldr	r2, [pc, #232]	; (8002d64 <TIM_Base_SetConfig+0x124>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d108      	bne.n	8002c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2f      	ldr	r2, [pc, #188]	; (8002d54 <TIM_Base_SetConfig+0x114>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca0:	d027      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2c      	ldr	r2, [pc, #176]	; (8002d58 <TIM_Base_SetConfig+0x118>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d023      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2b      	ldr	r2, [pc, #172]	; (8002d5c <TIM_Base_SetConfig+0x11c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <TIM_Base_SetConfig+0x120>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <TIM_Base_SetConfig+0x124>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d017      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <TIM_Base_SetConfig+0x128>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <TIM_Base_SetConfig+0x12c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <TIM_Base_SetConfig+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <TIM_Base_SetConfig+0x134>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <TIM_Base_SetConfig+0x138>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a23      	ldr	r2, [pc, #140]	; (8002d7c <TIM_Base_SetConfig+0x13c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <TIM_Base_SetConfig+0x114>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0xf8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <TIM_Base_SetConfig+0x124>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d103      	bne.n	8002d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	615a      	str	r2, [r3, #20]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40000c00 	.word	0x40000c00
 8002d64:	40010400 	.word	0x40010400
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	40001800 	.word	0x40001800
 8002d78:	40001c00 	.word	0x40001c00
 8002d7c:	40002000 	.word	0x40002000

08002d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e03f      	b.n	8002e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f005 fde0 	bl	8008994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fc4d 	bl	800368c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b088      	sub	sp, #32
 8002e46:	af02      	add	r7, sp, #8
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	f040 8083 	bne.w	8002f6a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Transmit+0x2e>
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e07b      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Transmit+0x40>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e074      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2221      	movs	r2, #33	; 0x21
 8002e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e98:	f7fd fba8 	bl	80005ec <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002eb2:	e042      	b.n	8002f3a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d122      	bne.n	8002f12 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa57 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e042      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3302      	adds	r3, #2
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	e017      	b.n	8002f3a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	e013      	b.n	8002f3a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fa34 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e01f      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	60ba      	str	r2, [r7, #8]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1b7      	bne.n	8002eb4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2140      	movs	r1, #64	; 0x40
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fa1b 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e006      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d153      	bne.n	8003036 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_UART_Transmit_DMA+0x26>
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e04c      	b.n	8003038 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Transmit_DMA+0x38>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e045      	b.n	8003038 <HAL_UART_Transmit_DMA+0xc4>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2221      	movs	r2, #33	; 0x21
 8002fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_UART_Transmit_DMA+0xcc>)
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_UART_Transmit_DMA+0xd0>)
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_UART_Transmit_DMA+0xd4>)
 8002fea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3304      	adds	r3, #4
 8003008:	461a      	mov	r2, r3
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	f7fd fd3a 	bl	8000a84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003018:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003030:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	08003289 	.word	0x08003289
 8003044:	080032db 	.word	0x080032db
 8003048:	080032f7 	.word	0x080032f7

0800304c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10d      	bne.n	800309e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_UART_IRQHandler+0x52>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa77 	bl	800358a <UART_Receive_IT>
      return;
 800309c:	e0d1      	b.n	8003242 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80b0 	beq.w	8003206 <HAL_UART_IRQHandler+0x1ba>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <HAL_UART_IRQHandler+0x70>
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a5 	beq.w	8003206 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_UART_IRQHandler+0x90>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_UART_IRQHandler+0xb0>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	f043 0202 	orr.w	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_UART_IRQHandler+0xd0>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	f043 0204 	orr.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00f      	beq.n	8003146 <HAL_UART_IRQHandler+0xfa>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_UART_IRQHandler+0xee>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d078      	beq.n	8003240 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_UART_IRQHandler+0x11c>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa11 	bl	800358a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_UART_IRQHandler+0x144>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d031      	beq.n	80031f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f95a 	bl	800344a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d123      	bne.n	80031ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	4a21      	ldr	r2, [pc, #132]	; (8003248 <HAL_UART_IRQHandler+0x1fc>)
 80031c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fcb3 	bl	8000b34 <HAL_DMA_Abort_IT>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d016      	beq.n	8003202 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031de:	4610      	mov	r0, r2
 80031e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e2:	e00e      	b.n	8003202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f845 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	e00a      	b.n	8003202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f841 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f2:	e006      	b.n	8003202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f83d 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003200:	e01e      	b.n	8003240 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003202:	bf00      	nop
    return;
 8003204:	e01c      	b.n	8003240 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_UART_IRQHandler+0x1d6>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f947 	bl	80034ae <UART_Transmit_IT>
    return;
 8003220:	e00f      	b.n	8003242 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_UART_IRQHandler+0x1f6>
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f98f 	bl	800355a <UART_EndTransmit_IT>
    return;
 800323c:	bf00      	nop
 800323e:	e000      	b.n	8003242 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003240:	bf00      	nop
  }
}
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	08003487 	.word	0x08003487

0800324c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d113      	bne.n	80032cc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032ca:	e002      	b.n	80032d2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f005 fbe9 	bl	8008aa4 <HAL_UART_TxCpltCallback>
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff ffaf 	bl	800324c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b21      	cmp	r3, #33	; 0x21
 8003328:	d108      	bne.n	800333c <UART_DMAError+0x46>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003336:	68b8      	ldr	r0, [r7, #8]
 8003338:	f000 f871 	bl	800341e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b22      	cmp	r3, #34	; 0x22
 800335c:	d108      	bne.n	8003370 <UART_DMAError+0x7a>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800336a:	68b8      	ldr	r0, [r7, #8]
 800336c:	f000 f86d 	bl	800344a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	f043 0210 	orr.w	r2, r3, #16
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f7ff ff79 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339a:	e02c      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d028      	beq.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
 80033aa:	f7fd f91f 	bl	80005ec <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d21d      	bcs.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e00f      	b.n	8003416 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4013      	ands	r3, r2
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	429a      	cmp	r2, r3
 8003412:	d0c3      	beq.n	800339c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003434:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003460:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fee7 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b21      	cmp	r3, #33	; 0x21
 80034c0:	d144      	bne.n	800354c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d11a      	bne.n	8003502 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	1c9a      	adds	r2, r3, #2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	621a      	str	r2, [r3, #32]
 80034f4:	e00e      	b.n	8003514 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]
 8003500:	e008      	b.n	8003514 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6211      	str	r1, [r2, #32]
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29b      	uxth	r3, r3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4619      	mov	r1, r3
 8003522:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10f      	bne.n	8003548 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003536:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003546:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003570:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f005 fa92 	bl	8008aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b22      	cmp	r3, #34	; 0x22
 800359c:	d171      	bne.n	8003682 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a6:	d123      	bne.n	80035f0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10e      	bne.n	80035d4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
 80035d2:	e029      	b.n	8003628 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28
 80035ee:	e01b      	b.n	8003628 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6858      	ldr	r0, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6291      	str	r1, [r2, #40]	; 0x28
 8003608:	b2c2      	uxtb	r2, r0
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e00c      	b.n	8003628 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	1c58      	adds	r0, r3, #1
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6288      	str	r0, [r1, #40]	; 0x28
 8003620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29b      	uxth	r3, r3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003638:	2b00      	cmp	r3, #0
 800363a:	d120      	bne.n	800367e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0220 	bic.w	r2, r2, #32
 800364a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800365a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fdf3 	bl	8003260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e002      	b.n	8003684 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036ce:	f023 030c 	bic.w	r3, r3, #12
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	430b      	orrs	r3, r1
 80036da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fa:	f040 818b 	bne.w	8003a14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4ac1      	ldr	r2, [pc, #772]	; (8003a08 <UART_SetConfig+0x37c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d005      	beq.n	8003714 <UART_SetConfig+0x88>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4abf      	ldr	r2, [pc, #764]	; (8003a0c <UART_SetConfig+0x380>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f040 80bd 	bne.w	800388e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003714:	f7fe fcfe 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	461d      	mov	r5, r3
 800371e:	f04f 0600 	mov.w	r6, #0
 8003722:	46a8      	mov	r8, r5
 8003724:	46b1      	mov	r9, r6
 8003726:	eb18 0308 	adds.w	r3, r8, r8
 800372a:	eb49 0409 	adc.w	r4, r9, r9
 800372e:	4698      	mov	r8, r3
 8003730:	46a1      	mov	r9, r4
 8003732:	eb18 0805 	adds.w	r8, r8, r5
 8003736:	eb49 0906 	adc.w	r9, r9, r6
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800374a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800374e:	4688      	mov	r8, r1
 8003750:	4691      	mov	r9, r2
 8003752:	eb18 0005 	adds.w	r0, r8, r5
 8003756:	eb49 0106 	adc.w	r1, r9, r6
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	461d      	mov	r5, r3
 8003760:	f04f 0600 	mov.w	r6, #0
 8003764:	196b      	adds	r3, r5, r5
 8003766:	eb46 0406 	adc.w	r4, r6, r6
 800376a:	461a      	mov	r2, r3
 800376c:	4623      	mov	r3, r4
 800376e:	f7fc fd87 	bl	8000280 <__aeabi_uldivmod>
 8003772:	4603      	mov	r3, r0
 8003774:	460c      	mov	r4, r1
 8003776:	461a      	mov	r2, r3
 8003778:	4ba5      	ldr	r3, [pc, #660]	; (8003a10 <UART_SetConfig+0x384>)
 800377a:	fba3 2302 	umull	r2, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	461d      	mov	r5, r3
 8003788:	f04f 0600 	mov.w	r6, #0
 800378c:	46a9      	mov	r9, r5
 800378e:	46b2      	mov	sl, r6
 8003790:	eb19 0309 	adds.w	r3, r9, r9
 8003794:	eb4a 040a 	adc.w	r4, sl, sl
 8003798:	4699      	mov	r9, r3
 800379a:	46a2      	mov	sl, r4
 800379c:	eb19 0905 	adds.w	r9, r9, r5
 80037a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b8:	4689      	mov	r9, r1
 80037ba:	4692      	mov	sl, r2
 80037bc:	eb19 0005 	adds.w	r0, r9, r5
 80037c0:	eb4a 0106 	adc.w	r1, sl, r6
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	461d      	mov	r5, r3
 80037ca:	f04f 0600 	mov.w	r6, #0
 80037ce:	196b      	adds	r3, r5, r5
 80037d0:	eb46 0406 	adc.w	r4, r6, r6
 80037d4:	461a      	mov	r2, r3
 80037d6:	4623      	mov	r3, r4
 80037d8:	f7fc fd52 	bl	8000280 <__aeabi_uldivmod>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <UART_SetConfig+0x384>)
 80037e4:	fba3 1302 	umull	r1, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	2164      	movs	r1, #100	; 0x64
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	3332      	adds	r3, #50	; 0x32
 80037f6:	4a86      	ldr	r2, [pc, #536]	; (8003a10 <UART_SetConfig+0x384>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003804:	4498      	add	r8, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	461d      	mov	r5, r3
 800380a:	f04f 0600 	mov.w	r6, #0
 800380e:	46a9      	mov	r9, r5
 8003810:	46b2      	mov	sl, r6
 8003812:	eb19 0309 	adds.w	r3, r9, r9
 8003816:	eb4a 040a 	adc.w	r4, sl, sl
 800381a:	4699      	mov	r9, r3
 800381c:	46a2      	mov	sl, r4
 800381e:	eb19 0905 	adds.w	r9, r9, r5
 8003822:	eb4a 0a06 	adc.w	sl, sl, r6
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003832:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800383a:	4689      	mov	r9, r1
 800383c:	4692      	mov	sl, r2
 800383e:	eb19 0005 	adds.w	r0, r9, r5
 8003842:	eb4a 0106 	adc.w	r1, sl, r6
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	461d      	mov	r5, r3
 800384c:	f04f 0600 	mov.w	r6, #0
 8003850:	196b      	adds	r3, r5, r5
 8003852:	eb46 0406 	adc.w	r4, r6, r6
 8003856:	461a      	mov	r2, r3
 8003858:	4623      	mov	r3, r4
 800385a:	f7fc fd11 	bl	8000280 <__aeabi_uldivmod>
 800385e:	4603      	mov	r3, r0
 8003860:	460c      	mov	r4, r1
 8003862:	461a      	mov	r2, r3
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <UART_SetConfig+0x384>)
 8003866:	fba3 1302 	umull	r1, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2164      	movs	r1, #100	; 0x64
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <UART_SetConfig+0x384>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 0207 	and.w	r2, r3, #7
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4442      	add	r2, r8
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	e26f      	b.n	8003d6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388e:	f7fe fc2d 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8003892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	461d      	mov	r5, r3
 8003898:	f04f 0600 	mov.w	r6, #0
 800389c:	46a8      	mov	r8, r5
 800389e:	46b1      	mov	r9, r6
 80038a0:	eb18 0308 	adds.w	r3, r8, r8
 80038a4:	eb49 0409 	adc.w	r4, r9, r9
 80038a8:	4698      	mov	r8, r3
 80038aa:	46a1      	mov	r9, r4
 80038ac:	eb18 0805 	adds.w	r8, r8, r5
 80038b0:	eb49 0906 	adc.w	r9, r9, r6
 80038b4:	f04f 0100 	mov.w	r1, #0
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038c8:	4688      	mov	r8, r1
 80038ca:	4691      	mov	r9, r2
 80038cc:	eb18 0005 	adds.w	r0, r8, r5
 80038d0:	eb49 0106 	adc.w	r1, r9, r6
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	461d      	mov	r5, r3
 80038da:	f04f 0600 	mov.w	r6, #0
 80038de:	196b      	adds	r3, r5, r5
 80038e0:	eb46 0406 	adc.w	r4, r6, r6
 80038e4:	461a      	mov	r2, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	f7fc fcca 	bl	8000280 <__aeabi_uldivmod>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <UART_SetConfig+0x384>)
 80038f4:	fba3 2302 	umull	r2, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	461d      	mov	r5, r3
 8003902:	f04f 0600 	mov.w	r6, #0
 8003906:	46a9      	mov	r9, r5
 8003908:	46b2      	mov	sl, r6
 800390a:	eb19 0309 	adds.w	r3, r9, r9
 800390e:	eb4a 040a 	adc.w	r4, sl, sl
 8003912:	4699      	mov	r9, r3
 8003914:	46a2      	mov	sl, r4
 8003916:	eb19 0905 	adds.w	r9, r9, r5
 800391a:	eb4a 0a06 	adc.w	sl, sl, r6
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800392a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800392e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003932:	4689      	mov	r9, r1
 8003934:	4692      	mov	sl, r2
 8003936:	eb19 0005 	adds.w	r0, r9, r5
 800393a:	eb4a 0106 	adc.w	r1, sl, r6
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	461d      	mov	r5, r3
 8003944:	f04f 0600 	mov.w	r6, #0
 8003948:	196b      	adds	r3, r5, r5
 800394a:	eb46 0406 	adc.w	r4, r6, r6
 800394e:	461a      	mov	r2, r3
 8003950:	4623      	mov	r3, r4
 8003952:	f7fc fc95 	bl	8000280 <__aeabi_uldivmod>
 8003956:	4603      	mov	r3, r0
 8003958:	460c      	mov	r4, r1
 800395a:	461a      	mov	r2, r3
 800395c:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <UART_SetConfig+0x384>)
 800395e:	fba3 1302 	umull	r1, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2164      	movs	r1, #100	; 0x64
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	3332      	adds	r3, #50	; 0x32
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <UART_SetConfig+0x384>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800397e:	4498      	add	r8, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	461d      	mov	r5, r3
 8003984:	f04f 0600 	mov.w	r6, #0
 8003988:	46a9      	mov	r9, r5
 800398a:	46b2      	mov	sl, r6
 800398c:	eb19 0309 	adds.w	r3, r9, r9
 8003990:	eb4a 040a 	adc.w	r4, sl, sl
 8003994:	4699      	mov	r9, r3
 8003996:	46a2      	mov	sl, r4
 8003998:	eb19 0905 	adds.w	r9, r9, r5
 800399c:	eb4a 0a06 	adc.w	sl, sl, r6
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b4:	4689      	mov	r9, r1
 80039b6:	4692      	mov	sl, r2
 80039b8:	eb19 0005 	adds.w	r0, r9, r5
 80039bc:	eb4a 0106 	adc.w	r1, sl, r6
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	461d      	mov	r5, r3
 80039c6:	f04f 0600 	mov.w	r6, #0
 80039ca:	196b      	adds	r3, r5, r5
 80039cc:	eb46 0406 	adc.w	r4, r6, r6
 80039d0:	461a      	mov	r2, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	f7fc fc54 	bl	8000280 <__aeabi_uldivmod>
 80039d8:	4603      	mov	r3, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	461a      	mov	r2, r3
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <UART_SetConfig+0x384>)
 80039e0:	fba3 1302 	umull	r1, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2164      	movs	r1, #100	; 0x64
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	3332      	adds	r3, #50	; 0x32
 80039f2:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <UART_SetConfig+0x384>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4442      	add	r2, r8
 8003a04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a06:	e1b2      	b.n	8003d6e <UART_SetConfig+0x6e2>
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4ad7      	ldr	r2, [pc, #860]	; (8003d78 <UART_SetConfig+0x6ec>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d005      	beq.n	8003a2a <UART_SetConfig+0x39e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4ad6      	ldr	r2, [pc, #856]	; (8003d7c <UART_SetConfig+0x6f0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f040 80d1 	bne.w	8003bcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a2a:	f7fe fb73 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003a2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	469a      	mov	sl, r3
 8003a34:	f04f 0b00 	mov.w	fp, #0
 8003a38:	46d0      	mov	r8, sl
 8003a3a:	46d9      	mov	r9, fp
 8003a3c:	eb18 0308 	adds.w	r3, r8, r8
 8003a40:	eb49 0409 	adc.w	r4, r9, r9
 8003a44:	4698      	mov	r8, r3
 8003a46:	46a1      	mov	r9, r4
 8003a48:	eb18 080a 	adds.w	r8, r8, sl
 8003a4c:	eb49 090b 	adc.w	r9, r9, fp
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a64:	4688      	mov	r8, r1
 8003a66:	4691      	mov	r9, r2
 8003a68:	eb1a 0508 	adds.w	r5, sl, r8
 8003a6c:	eb4b 0609 	adc.w	r6, fp, r9
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	f04f 0400 	mov.w	r4, #0
 8003a82:	0094      	lsls	r4, r2, #2
 8003a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a88:	008b      	lsls	r3, r1, #2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	4628      	mov	r0, r5
 8003a90:	4631      	mov	r1, r6
 8003a92:	f7fc fbf5 	bl	8000280 <__aeabi_uldivmod>
 8003a96:	4603      	mov	r3, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4bb8      	ldr	r3, [pc, #736]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	469b      	mov	fp, r3
 8003aac:	f04f 0c00 	mov.w	ip, #0
 8003ab0:	46d9      	mov	r9, fp
 8003ab2:	46e2      	mov	sl, ip
 8003ab4:	eb19 0309 	adds.w	r3, r9, r9
 8003ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8003abc:	4699      	mov	r9, r3
 8003abe:	46a2      	mov	sl, r4
 8003ac0:	eb19 090b 	adds.w	r9, r9, fp
 8003ac4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003adc:	4689      	mov	r9, r1
 8003ade:	4692      	mov	sl, r2
 8003ae0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ae4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	0094      	lsls	r4, r2, #2
 8003afc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b00:	008b      	lsls	r3, r1, #2
 8003b02:	461a      	mov	r2, r3
 8003b04:	4623      	mov	r3, r4
 8003b06:	4628      	mov	r0, r5
 8003b08:	4631      	mov	r1, r6
 8003b0a:	f7fc fbb9 	bl	8000280 <__aeabi_uldivmod>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b9a      	ldr	r3, [pc, #616]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003b16:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2164      	movs	r1, #100	; 0x64
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	3332      	adds	r3, #50	; 0x32
 8003b28:	4a95      	ldr	r2, [pc, #596]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b34:	4498      	add	r8, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	469b      	mov	fp, r3
 8003b3a:	f04f 0c00 	mov.w	ip, #0
 8003b3e:	46d9      	mov	r9, fp
 8003b40:	46e2      	mov	sl, ip
 8003b42:	eb19 0309 	adds.w	r3, r9, r9
 8003b46:	eb4a 040a 	adc.w	r4, sl, sl
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	46a2      	mov	sl, r4
 8003b4e:	eb19 090b 	adds.w	r9, r9, fp
 8003b52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b6a:	4689      	mov	r9, r1
 8003b6c:	4692      	mov	sl, r2
 8003b6e:	eb1b 0509 	adds.w	r5, fp, r9
 8003b72:	eb4c 060a 	adc.w	r6, ip, sl
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	0094      	lsls	r4, r2, #2
 8003b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b8e:	008b      	lsls	r3, r1, #2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	4628      	mov	r0, r5
 8003b96:	4631      	mov	r1, r6
 8003b98:	f7fc fb72 	bl	8000280 <__aeabi_uldivmod>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b77      	ldr	r3, [pc, #476]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a72      	ldr	r2, [pc, #456]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4442      	add	r2, r8
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	e0d0      	b.n	8003d6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7fe fa8e 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8003bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	469a      	mov	sl, r3
 8003bd6:	f04f 0b00 	mov.w	fp, #0
 8003bda:	46d0      	mov	r8, sl
 8003bdc:	46d9      	mov	r9, fp
 8003bde:	eb18 0308 	adds.w	r3, r8, r8
 8003be2:	eb49 0409 	adc.w	r4, r9, r9
 8003be6:	4698      	mov	r8, r3
 8003be8:	46a1      	mov	r9, r4
 8003bea:	eb18 080a 	adds.w	r8, r8, sl
 8003bee:	eb49 090b 	adc.w	r9, r9, fp
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c06:	4688      	mov	r8, r1
 8003c08:	4691      	mov	r9, r2
 8003c0a:	eb1a 0508 	adds.w	r5, sl, r8
 8003c0e:	eb4b 0609 	adc.w	r6, fp, r9
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4619      	mov	r1, r3
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	f04f 0400 	mov.w	r4, #0
 8003c24:	0094      	lsls	r4, r2, #2
 8003c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	4631      	mov	r1, r6
 8003c34:	f7fc fb24 	bl	8000280 <__aeabi_uldivmod>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003c40:	fba3 2302 	umull	r2, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	469b      	mov	fp, r3
 8003c4e:	f04f 0c00 	mov.w	ip, #0
 8003c52:	46d9      	mov	r9, fp
 8003c54:	46e2      	mov	sl, ip
 8003c56:	eb19 0309 	adds.w	r3, r9, r9
 8003c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c5e:	4699      	mov	r9, r3
 8003c60:	46a2      	mov	sl, r4
 8003c62:	eb19 090b 	adds.w	r9, r9, fp
 8003c66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c7e:	4689      	mov	r9, r1
 8003c80:	4692      	mov	sl, r2
 8003c82:	eb1b 0509 	adds.w	r5, fp, r9
 8003c86:	eb4c 060a 	adc.w	r6, ip, sl
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	0094      	lsls	r4, r2, #2
 8003c9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ca2:	008b      	lsls	r3, r1, #2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	4628      	mov	r0, r5
 8003caa:	4631      	mov	r1, r6
 8003cac:	f7fc fae8 	bl	8000280 <__aeabi_uldivmod>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	; 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	3332      	adds	r3, #50	; 0x32
 8003cca:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd6:	4498      	add	r8, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	469b      	mov	fp, r3
 8003cdc:	f04f 0c00 	mov.w	ip, #0
 8003ce0:	46d9      	mov	r9, fp
 8003ce2:	46e2      	mov	sl, ip
 8003ce4:	eb19 0309 	adds.w	r3, r9, r9
 8003ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cec:	4699      	mov	r9, r3
 8003cee:	46a2      	mov	sl, r4
 8003cf0:	eb19 090b 	adds.w	r9, r9, fp
 8003cf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cf8:	f04f 0100 	mov.w	r1, #0
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d0c:	4689      	mov	r9, r1
 8003d0e:	4692      	mov	sl, r2
 8003d10:	eb1b 0509 	adds.w	r5, fp, r9
 8003d14:	eb4c 060a 	adc.w	r6, ip, sl
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	f04f 0400 	mov.w	r4, #0
 8003d2a:	0094      	lsls	r4, r2, #2
 8003d2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d30:	008b      	lsls	r3, r1, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	4623      	mov	r3, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	4631      	mov	r1, r6
 8003d3a:	f7fc faa1 	bl	8000280 <__aeabi_uldivmod>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003d46:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2164      	movs	r1, #100	; 0x64
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	; 0x32
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4442      	add	r2, r8
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	e7ff      	b.n	8003d6e <UART_SetConfig+0x6e2>
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	40011400 	.word	0x40011400
 8003d80:	51eb851f 	.word	0x51eb851f

08003d84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d9a:	f3ef 8305 	mrs	r3, IPSR
 8003d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003da0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da6:	f3ef 8310 	mrs	r3, PRIMASK
 8003daa:	607b      	str	r3, [r7, #4]
  return(result);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d105      	bne.n	8003dbe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003db2:	f3ef 8311 	mrs	r3, BASEPRI
 8003db6:	603b      	str	r3, [r7, #0]
  return(result);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <osKernelInitialize+0x3a>
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <osKernelInitialize+0x64>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d103      	bne.n	8003dce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003dc6:	f06f 0305 	mvn.w	r3, #5
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e00c      	b.n	8003de8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <osKernelInitialize+0x64>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <osKernelInitialize+0x64>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e002      	b.n	8003de8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	200000cc 	.word	0x200000cc

08003dfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e02:	f3ef 8305 	mrs	r3, IPSR
 8003e06:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e12:	607b      	str	r3, [r7, #4]
  return(result);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <osKernelStart+0x3a>
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <osKernelStart+0x68>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d103      	bne.n	8003e36 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003e2e:	f06f 0305 	mvn.w	r3, #5
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e010      	b.n	8003e58 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <osKernelStart+0x68>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d109      	bne.n	8003e52 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e3e:	f7ff ffa1 	bl	8003d84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <osKernelStart+0x68>)
 8003e44:	2202      	movs	r2, #2
 8003e46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e48:	f001 f870 	bl	8004f2c <vTaskStartScheduler>
      stat = osOK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e002      	b.n	8003e58 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200000cc 	.word	0x200000cc

08003e68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b090      	sub	sp, #64	; 0x40
 8003e6c:	af04      	add	r7, sp, #16
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e78:	f3ef 8305 	mrs	r3, IPSR
 8003e7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e7e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f040 808f 	bne.w	8003fa4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e86:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e92:	f3ef 8311 	mrs	r3, BASEPRI
 8003e96:	617b      	str	r3, [r7, #20]
  return(result);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <osThreadNew+0x3e>
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <osThreadNew+0x148>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d07e      	beq.n	8003fa4 <osThreadNew+0x13c>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d07b      	beq.n	8003fa4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003eb0:	2318      	movs	r3, #24
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d045      	beq.n	8003f50 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <osThreadNew+0x6a>
        name = attr->name;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <osThreadNew+0x90>
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2b38      	cmp	r3, #56	; 0x38
 8003eea:	d805      	bhi.n	8003ef8 <osThreadNew+0x90>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <osThreadNew+0x94>
        return (NULL);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e054      	b.n	8003fa6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <osThreadNew+0xca>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b5b      	cmp	r3, #91	; 0x5b
 8003f1a:	d90a      	bls.n	8003f32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <osThreadNew+0xca>
        mem = 1;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	e010      	b.n	8003f54 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <osThreadNew+0xec>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <osThreadNew+0xec>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <osThreadNew+0xec>
          mem = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
 8003f4e:	e001      	b.n	8003f54 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d110      	bne.n	8003f7c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f62:	9202      	str	r2, [sp, #8]
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fe09 	bl	8004b88 <xTaskCreateStatic>
 8003f76:	4603      	mov	r3, r0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e013      	b.n	8003fa4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d110      	bne.n	8003fa4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fe51 	bl	8004c3c <xTaskCreate>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <osThreadNew+0x13c>
          hTask = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fa4:	693b      	ldr	r3, [r7, #16]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3730      	adds	r7, #48	; 0x30
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	200000cc 	.word	0x200000cc

08003fb4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fbc:	f3ef 8305 	mrs	r3, IPSR
 8003fc0:	613b      	str	r3, [r7, #16]
  return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10f      	bne.n	8003fe8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <osDelay+0x3c>
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <osDelay+0x58>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d103      	bne.n	8003ff0 <osDelay+0x3c>
    stat = osErrorISR;
 8003fe8:	f06f 0305 	mvn.w	r3, #5
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e007      	b.n	8004000 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 ff62 	bl	8004ec4 <vTaskDelay>
    }
  }

  return (stat);
 8004000:	697b      	ldr	r3, [r7, #20]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200000cc 	.word	0x200000cc

08004010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <vApplicationGetIdleTaskMemory+0x2c>)
 8004020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4a06      	ldr	r2, [pc, #24]	; (8004040 <vApplicationGetIdleTaskMemory+0x30>)
 8004026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	601a      	str	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200000d0 	.word	0x200000d0
 8004040:	2000012c 	.word	0x2000012c

08004044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <vApplicationGetTimerTaskMemory+0x2c>)
 8004054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4a06      	ldr	r2, [pc, #24]	; (8004074 <vApplicationGetTimerTaskMemory+0x30>)
 800405a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	2000032c 	.word	0x2000032c
 8004074:	20000388 	.word	0x20000388

08004078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f103 0208 	add.w	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f103 0208 	add.w	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f103 0208 	add.w	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d103      	bne.n	800413a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e00c      	b.n	8004154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3308      	adds	r3, #8
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e002      	b.n	8004148 <vListInsert+0x2e>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	d2f6      	bcs.n	8004142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6892      	ldr	r2, [r2, #8]
 80041a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6852      	ldr	r2, [r2, #4]
 80041ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d103      	bne.n	80041c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	e7fe      	b.n	8004206 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004208:	f002 f810 	bl	800622c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	68f9      	ldr	r1, [r7, #12]
 8004216:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	441a      	add	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	3b01      	subs	r3, #1
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	22ff      	movs	r2, #255	; 0xff
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	22ff      	movs	r2, #255	; 0xff
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d114      	bne.n	8004288 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01a      	beq.n	800429c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3310      	adds	r3, #16
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f8de 	bl	800542c <xTaskRemoveFromEventList>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d012      	beq.n	800429c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <xQueueGenericReset+0xcc>)
 8004278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	e009      	b.n	800429c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3310      	adds	r3, #16
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fef3 	bl	8004078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff feee 	bl	8004078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800429c:	f001 fff4 	bl	8006288 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042a0:	2301      	movs	r3, #1
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	; 0x38
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <xQueueGenericCreateStatic+0x28>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d6:	e7fe      	b.n	80042d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <xQueueGenericCreateStatic+0x42>
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <xQueueGenericCreateStatic+0x4e>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <xQueueGenericCreateStatic+0x52>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericCreateStatic+0x54>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <xQueueGenericCreateStatic+0x6c>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	e7fe      	b.n	800431a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <xQueueGenericCreateStatic+0x78>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueGenericCreateStatic+0x7c>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueGenericCreateStatic+0x7e>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <xQueueGenericCreateStatic+0x96>
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e7fe      	b.n	8004344 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004346:	2350      	movs	r3, #80	; 0x50
 8004348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d009      	beq.n	8004364 <xQueueGenericCreateStatic+0xb4>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e7fe      	b.n	8004362 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004364:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00d      	beq.n	800438c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004378:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f805 	bl	8004396 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800438e:	4618      	mov	r0, r3
 8004390:	3730      	adds	r7, #48	; 0x30
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e002      	b.n	80043b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043c4:	2101      	movs	r1, #1
 80043c6:	69b8      	ldr	r0, [r7, #24]
 80043c8:	f7ff ff0a 	bl	80041e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	; 0x38
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <xQueueGenericSend+0x30>
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
 800440a:	e7fe      	b.n	800440a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <xQueueGenericSend+0x3e>
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <xQueueGenericSend+0x42>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <xQueueGenericSend+0x44>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <xQueueGenericSend+0x5c>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e7fe      	b.n	8004436 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x6a>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <xQueueGenericSend+0x6e>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueGenericSend+0x70>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <xQueueGenericSend+0x88>
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	e7fe      	b.n	8004462 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004464:	f001 f998 	bl	8005798 <xTaskGetSchedulerState>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <xQueueGenericSend+0x98>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <xQueueGenericSend+0x9c>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <xQueueGenericSend+0x9e>
 8004478:	2300      	movs	r3, #0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <xQueueGenericSend+0xb6>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e7fe      	b.n	8004490 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004492:	f001 fecb 	bl	800622c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <xQueueGenericSend+0xcc>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d129      	bne.n	80044fc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ae:	f000 f9ff 	bl	80048b0 <prvCopyDataToQueue>
 80044b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	3324      	adds	r3, #36	; 0x24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 ffb3 	bl	800542c <xTaskRemoveFromEventList>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044cc:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <xQueueGenericSend+0x1f0>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	e00a      	b.n	80044f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044e4:	4b39      	ldr	r3, [pc, #228]	; (80045cc <xQueueGenericSend+0x1f0>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044f4:	f001 fec8 	bl	8006288 <vPortExitCritical>
				return pdPASS;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e063      	b.n	80045c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004502:	f001 fec1 	bl	8006288 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004506:	2300      	movs	r3, #0
 8004508:	e05c      	b.n	80045c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	4618      	mov	r0, r3
 8004516:	f000 ffeb 	bl	80054f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800451a:	2301      	movs	r3, #1
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800451e:	f001 feb3 	bl	8006288 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004522:	f000 fd67 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004526:	f001 fe81 	bl	800622c <vPortEnterCritical>
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004530:	b25b      	sxtb	r3, r3
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d103      	bne.n	8004540 <xQueueGenericSend+0x164>
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004546:	b25b      	sxtb	r3, r3
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d103      	bne.n	8004556 <xQueueGenericSend+0x17a>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004556:	f001 fe97 	bl	8006288 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800455a:	1d3a      	adds	r2, r7, #4
 800455c:	f107 0314 	add.w	r3, r7, #20
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f000 ffda 	bl	800551c <xTaskCheckForTimeOut>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d124      	bne.n	80045b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800456e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004570:	f000 fa96 	bl	8004aa0 <prvIsQueueFull>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d018      	beq.n	80045ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	3310      	adds	r3, #16
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 ff04 	bl	8005390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800458a:	f000 fa21 	bl	80049d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800458e:	f000 fd3f 	bl	8005010 <xTaskResumeAll>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f af7c 	bne.w	8004492 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <xQueueGenericSend+0x1f0>)
 800459c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	e772      	b.n	8004492 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ae:	f000 fa0f 	bl	80049d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045b2:	f000 fd2d 	bl	8005010 <xTaskResumeAll>
 80045b6:	e76c      	b.n	8004492 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ba:	f000 fa09 	bl	80049d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045be:	f000 fd27 	bl	8005010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3738      	adds	r7, #56	; 0x38
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	; 0x38
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <xQueueGenericSendFromISR+0x2c>
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e7fe      	b.n	80045fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <xQueueGenericSendFromISR+0x3a>
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <xQueueGenericSendFromISR+0x3e>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <xQueueGenericSendFromISR+0x40>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xQueueGenericSendFromISR+0x58>
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	e7fe      	b.n	8004626 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d103      	bne.n	8004636 <xQueueGenericSendFromISR+0x66>
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <xQueueGenericSendFromISR+0x6a>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <xQueueGenericSendFromISR+0x6c>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <xQueueGenericSendFromISR+0x84>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e7fe      	b.n	8004652 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004654:	f001 fec6 	bl	80063e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004658:	f3ef 8211 	mrs	r2, BASEPRI
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	61ba      	str	r2, [r7, #24]
 800466e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004670:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <xQueueGenericSendFromISR+0xb6>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d12c      	bne.n	80046e0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800468c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004696:	f000 f90b 	bl	80048b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800469a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d112      	bne.n	80046ca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d016      	beq.n	80046da <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	3324      	adds	r3, #36	; 0x24
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 febb 	bl	800542c <xTaskRemoveFromEventList>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e007      	b.n	80046da <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046ce:	3301      	adds	r3, #1
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	b25a      	sxtb	r2, r3
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046da:	2301      	movs	r3, #1
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80046de:	e001      	b.n	80046e4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3738      	adds	r7, #56	; 0x38
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	; 0x30
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004704:	2300      	movs	r3, #0
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <xQueueReceive+0x2e>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	e7fe      	b.n	8004724 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <xQueueReceive+0x3c>
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <xQueueReceive+0x40>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <xQueueReceive+0x42>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <xQueueReceive+0x5a>
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	e7fe      	b.n	8004750 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004752:	f001 f821 	bl	8005798 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <xQueueReceive+0x6a>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueReceive+0x6e>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueReceive+0x70>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <xQueueReceive+0x88>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e7fe      	b.n	800477e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004780:	f001 fd54 	bl	800622c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01f      	beq.n	80047d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004794:	f000 f8f6 	bl	8004984 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	3310      	adds	r3, #16
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fe3d 	bl	800542c <xTaskRemoveFromEventList>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047b8:	4b3c      	ldr	r3, [pc, #240]	; (80048ac <xQueueReceive+0x1b4>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047c8:	f001 fd5e 	bl	8006288 <vPortExitCritical>
				return pdPASS;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e069      	b.n	80048a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047d6:	f001 fd57 	bl	8006288 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047da:	2300      	movs	r3, #0
 80047dc:	e062      	b.n	80048a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e4:	f107 0310 	add.w	r3, r7, #16
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fe81 	bl	80054f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047ee:	2301      	movs	r3, #1
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047f2:	f001 fd49 	bl	8006288 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047f6:	f000 fbfd 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047fa:	f001 fd17 	bl	800622c <vPortEnterCritical>
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004804:	b25b      	sxtb	r3, r3
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d103      	bne.n	8004814 <xQueueReceive+0x11c>
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481a:	b25b      	sxtb	r3, r3
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d103      	bne.n	800482a <xQueueReceive+0x132>
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482a:	f001 fd2d 	bl	8006288 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800482e:	1d3a      	adds	r2, r7, #4
 8004830:	f107 0310 	add.w	r3, r7, #16
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fe70 	bl	800551c <xTaskCheckForTimeOut>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d123      	bne.n	800488a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004844:	f000 f916 	bl	8004a74 <prvIsQueueEmpty>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d017      	beq.n	800487e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	3324      	adds	r3, #36	; 0x24
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fd9a 	bl	8005390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800485c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485e:	f000 f8b7 	bl	80049d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004862:	f000 fbd5 	bl	8005010 <xTaskResumeAll>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d189      	bne.n	8004780 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <xQueueReceive+0x1b4>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	e780      	b.n	8004780 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800487e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004880:	f000 f8a6 	bl	80049d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004884:	f000 fbc4 	bl	8005010 <xTaskResumeAll>
 8004888:	e77a      	b.n	8004780 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800488a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800488c:	f000 f8a0 	bl	80049d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004890:	f000 fbbe 	bl	8005010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004896:	f000 f8ed 	bl	8004a74 <prvIsQueueEmpty>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	f43f af6f 	beq.w	8004780 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3730      	adds	r7, #48	; 0x30
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	e000ed04 	.word	0xe000ed04

080048b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10d      	bne.n	80048ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d14d      	bne.n	8004972 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 ff7a 	bl	80057d4 <xTaskPriorityDisinherit>
 80048e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	e043      	b.n	8004972 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d119      	bne.n	8004924 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6858      	ldr	r0, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	461a      	mov	r2, r3
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	f004 f94c 	bl	8008b98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	441a      	add	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	d32b      	bcc.n	8004972 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e026      	b.n	8004972 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68d8      	ldr	r0, [r3, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	461a      	mov	r2, r3
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	f004 f932 	bl	8008b98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	425b      	negs	r3, r3
 800493e:	441a      	add	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d207      	bcs.n	8004960 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	425b      	negs	r3, r3
 800495a:	441a      	add	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d105      	bne.n	8004972 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3b01      	subs	r3, #1
 8004970:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800497a:	697b      	ldr	r3, [r7, #20]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d018      	beq.n	80049c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	441a      	add	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d303      	bcc.n	80049b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68d9      	ldr	r1, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	461a      	mov	r2, r3
 80049c2:	6838      	ldr	r0, [r7, #0]
 80049c4:	f004 f8e8 	bl	8008b98 <memcpy>
	}
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049d8:	f001 fc28 	bl	800622c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049e4:	e011      	b.n	8004a0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d012      	beq.n	8004a14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3324      	adds	r3, #36	; 0x24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fd1a 	bl	800542c <xTaskRemoveFromEventList>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049fe:	f000 fded 	bl	80055dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	dce9      	bgt.n	80049e6 <prvUnlockQueue+0x16>
 8004a12:	e000      	b.n	8004a16 <prvUnlockQueue+0x46>
					break;
 8004a14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	22ff      	movs	r2, #255	; 0xff
 8004a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a1e:	f001 fc33 	bl	8006288 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a22:	f001 fc03 	bl	800622c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a2e:	e011      	b.n	8004a54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d012      	beq.n	8004a5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3310      	adds	r3, #16
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fcf5 	bl	800542c <xTaskRemoveFromEventList>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a48:	f000 fdc8 	bl	80055dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a4c:	7bbb      	ldrb	r3, [r7, #14]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	dce9      	bgt.n	8004a30 <prvUnlockQueue+0x60>
 8004a5c:	e000      	b.n	8004a60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	22ff      	movs	r2, #255	; 0xff
 8004a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a68:	f001 fc0e 	bl	8006288 <vPortExitCritical>
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a7c:	f001 fbd6 	bl	800622c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e001      	b.n	8004a92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a92:	f001 fbf9 	bl	8006288 <vPortExitCritical>

	return xReturn;
 8004a96:	68fb      	ldr	r3, [r7, #12]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aa8:	f001 fbc0 	bl	800622c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d102      	bne.n	8004abe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e001      	b.n	8004ac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ac2:	f001 fbe1 	bl	8006288 <vPortExitCritical>

	return xReturn;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e014      	b.n	8004b0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <vQueueAddToRegistry+0x4c>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004aec:	490b      	ldr	r1, [pc, #44]	; (8004b1c <vQueueAddToRegistry+0x4c>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <vQueueAddToRegistry+0x4c>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b02:	e005      	b.n	8004b10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3301      	adds	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b07      	cmp	r3, #7
 8004b0e:	d9e7      	bls.n	8004ae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	200040d4 	.word	0x200040d4

08004b20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b30:	f001 fb7c 	bl	800622c <vPortEnterCritical>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d103      	bne.n	8004b4a <vQueueWaitForMessageRestricted+0x2a>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d103      	bne.n	8004b60 <vQueueWaitForMessageRestricted+0x40>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b60:	f001 fb92 	bl	8006288 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	3324      	adds	r3, #36	; 0x24
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fc2f 	bl	80053d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b7a:	6978      	ldr	r0, [r7, #20]
 8004b7c:	f7ff ff28 	bl	80049d0 <prvUnlockQueue>
	}
 8004b80:	bf00      	nop
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	; 0x38
 8004b8c:	af04      	add	r7, sp, #16
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <xTaskCreateStatic+0x28>
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	e7fe      	b.n	8004bae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <xTaskCreateStatic+0x42>
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	e7fe      	b.n	8004bc8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bca:	235c      	movs	r3, #92	; 0x5c
 8004bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b5c      	cmp	r3, #92	; 0x5c
 8004bd2:	d009      	beq.n	8004be8 <xTaskCreateStatic+0x60>
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	e7fe      	b.n	8004be6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004be8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01e      	beq.n	8004c2e <xTaskCreateStatic+0xa6>
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01b      	beq.n	8004c2e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9303      	str	r3, [sp, #12]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	9302      	str	r3, [sp, #8]
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f850 	bl	8004cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c28:	f000 f8dc 	bl	8004de4 <prvAddNewTaskToReadyList>
 8004c2c:	e001      	b.n	8004c32 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c32:	697b      	ldr	r3, [r7, #20]
	}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08c      	sub	sp, #48	; 0x30
 8004c40:	af04      	add	r7, sp, #16
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 fc05 	bl	8006460 <pvPortMalloc>
 8004c56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00e      	beq.n	8004c7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c5e:	205c      	movs	r0, #92	; 0x5c
 8004c60:	f001 fbfe 	bl	8006460 <pvPortMalloc>
 8004c64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
 8004c72:	e005      	b.n	8004c80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	f001 fc05 	bl	8006484 <vPortFree>
 8004c7a:	e001      	b.n	8004c80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d017      	beq.n	8004cb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	2300      	movs	r3, #0
 8004c92:	9303      	str	r3, [sp, #12]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f80e 	bl	8004cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004caa:	69f8      	ldr	r0, [r7, #28]
 8004cac:	f000 f89a 	bl	8004de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e002      	b.n	8004cbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
	}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b088      	sub	sp, #32
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	21a5      	movs	r1, #165	; 0xa5
 8004ce0:	f003 ff65 	bl	8008bae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f023 0307 	bic.w	r3, r3, #7
 8004cfc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <prvInitialiseNewTask+0x56>
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	e7fe      	b.n	8004d1a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01f      	beq.n	8004d62 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e012      	b.n	8004d4e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	7819      	ldrb	r1, [r3, #0]
 8004d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	3334      	adds	r3, #52	; 0x34
 8004d38:	460a      	mov	r2, r1
 8004d3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d006      	beq.n	8004d56 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d9e9      	bls.n	8004d28 <prvInitialiseNewTask+0x62>
 8004d54:	e000      	b.n	8004d58 <prvInitialiseNewTask+0x92>
			{
				break;
 8004d56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d60:	e003      	b.n	8004d6a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	2b37      	cmp	r3, #55	; 0x37
 8004d6e:	d901      	bls.n	8004d74 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d70:	2337      	movs	r3, #55	; 0x37
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	2200      	movs	r2, #0
 8004d84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff f994 	bl	80040b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	3318      	adds	r3, #24
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff f98f 	bl	80040b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	2200      	movs	r2, #0
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	69b8      	ldr	r0, [r7, #24]
 8004dc4:	f001 f90c 	bl	8005fe0 <pxPortInitialiseStack>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dda:	bf00      	nop
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dec:	f001 fa1e 	bl	800622c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004df0:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <prvAddNewTaskToReadyList+0xc4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <prvAddNewTaskToReadyList+0xc4>)
 8004df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <prvAddNewTaskToReadyList+0xc8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e02:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <prvAddNewTaskToReadyList+0xc8>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e08:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <prvAddNewTaskToReadyList+0xc4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d110      	bne.n	8004e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e10:	f000 fc08 	bl	8005624 <prvInitialiseTaskLists>
 8004e14:	e00d      	b.n	8004e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <prvAddNewTaskToReadyList+0xcc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e1e:	4b23      	ldr	r3, [pc, #140]	; (8004eac <prvAddNewTaskToReadyList+0xc8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d802      	bhi.n	8004e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <prvAddNewTaskToReadyList+0xc8>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <prvAddNewTaskToReadyList+0xd0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <prvAddNewTaskToReadyList+0xd0>)
 8004e3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e3c:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <prvAddNewTaskToReadyList+0xd0>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <prvAddNewTaskToReadyList+0xd4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d903      	bls.n	8004e58 <prvAddNewTaskToReadyList+0x74>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <prvAddNewTaskToReadyList+0xd4>)
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <prvAddNewTaskToReadyList+0xd8>)
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f7ff f92f 	bl	80040d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e74:	f001 fa08 	bl	8006288 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e78:	4b0d      	ldr	r3, [pc, #52]	; (8004eb0 <prvAddNewTaskToReadyList+0xcc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <prvAddNewTaskToReadyList+0xc8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d207      	bcs.n	8004e9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <prvAddNewTaskToReadyList+0xdc>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000c5c 	.word	0x20000c5c
 8004eac:	20000788 	.word	0x20000788
 8004eb0:	20000c68 	.word	0x20000c68
 8004eb4:	20000c78 	.word	0x20000c78
 8004eb8:	20000c64 	.word	0x20000c64
 8004ebc:	2000078c 	.word	0x2000078c
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <vTaskDelay+0x60>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <vTaskDelay+0x2e>
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	e7fe      	b.n	8004ef0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004ef2:	f000 f87f 	bl	8004ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fcd7 	bl	80058ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004efe:	f000 f887 	bl	8005010 <xTaskResumeAll>
 8004f02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <vTaskDelay+0x64>)
 8004f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000c84 	.word	0x20000c84
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f3a:	463a      	mov	r2, r7
 8004f3c:	1d39      	adds	r1, r7, #4
 8004f3e:	f107 0308 	add.w	r3, r7, #8
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff f864 	bl	8004010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	9202      	str	r2, [sp, #8]
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	460a      	mov	r2, r1
 8004f5a:	4920      	ldr	r1, [pc, #128]	; (8004fdc <vTaskStartScheduler+0xb0>)
 8004f5c:	4820      	ldr	r0, [pc, #128]	; (8004fe0 <vTaskStartScheduler+0xb4>)
 8004f5e:	f7ff fe13 	bl	8004b88 <xTaskCreateStatic>
 8004f62:	4602      	mov	r2, r0
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <vTaskStartScheduler+0xb8>)
 8004f66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <vTaskStartScheduler+0xb8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e001      	b.n	8004f7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d102      	bne.n	8004f86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f80:	f000 fce8 	bl	8005954 <xTimerCreateTimerTask>
 8004f84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d115      	bne.n	8004fb8 <vTaskStartScheduler+0x8c>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <vTaskStartScheduler+0xbc>)
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa6:	4b11      	ldr	r3, [pc, #68]	; (8004fec <vTaskStartScheduler+0xc0>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <vTaskStartScheduler+0xc4>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fb2:	f001 f89d 	bl	80060f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb6:	e00d      	b.n	8004fd4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d109      	bne.n	8004fd4 <vTaskStartScheduler+0xa8>
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e7fe      	b.n	8004fd2 <vTaskStartScheduler+0xa6>
}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08009a38 	.word	0x08009a38
 8004fe0:	080055f5 	.word	0x080055f5
 8004fe4:	20000c80 	.word	0x20000c80
 8004fe8:	20000c7c 	.word	0x20000c7c
 8004fec:	20000c68 	.word	0x20000c68
 8004ff0:	20000c60 	.word	0x20000c60

08004ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <vTaskSuspendAll+0x18>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a03      	ldr	r2, [pc, #12]	; (800500c <vTaskSuspendAll+0x18>)
 8005000:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000c84 	.word	0x20000c84

08005010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800501e:	4b41      	ldr	r3, [pc, #260]	; (8005124 <xTaskResumeAll+0x114>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <xTaskResumeAll+0x2a>
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	e7fe      	b.n	8005038 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800503a:	f001 f8f7 	bl	800622c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800503e:	4b39      	ldr	r3, [pc, #228]	; (8005124 <xTaskResumeAll+0x114>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3b01      	subs	r3, #1
 8005044:	4a37      	ldr	r2, [pc, #220]	; (8005124 <xTaskResumeAll+0x114>)
 8005046:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <xTaskResumeAll+0x114>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d162      	bne.n	8005116 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005050:	4b35      	ldr	r3, [pc, #212]	; (8005128 <xTaskResumeAll+0x118>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d05e      	beq.n	8005116 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005058:	e02f      	b.n	80050ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <xTaskResumeAll+0x11c>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3318      	adds	r3, #24
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff f890 	bl	800418c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3304      	adds	r3, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff f88b 	bl	800418c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	4b2d      	ldr	r3, [pc, #180]	; (8005130 <xTaskResumeAll+0x120>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d903      	bls.n	800508a <xTaskResumeAll+0x7a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <xTaskResumeAll+0x120>)
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4a27      	ldr	r2, [pc, #156]	; (8005134 <xTaskResumeAll+0x124>)
 8005098:	441a      	add	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f7ff f816 	bl	80040d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <xTaskResumeAll+0x128>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80050b4:	4b21      	ldr	r3, [pc, #132]	; (800513c <xTaskResumeAll+0x12c>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ba:	4b1c      	ldr	r3, [pc, #112]	; (800512c <xTaskResumeAll+0x11c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1cb      	bne.n	800505a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050c8:	f000 fb46 	bl	8005758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <xTaskResumeAll+0x130>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d010      	beq.n	80050fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050d8:	f000 f846 	bl	8005168 <xTaskIncrementTick>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <xTaskResumeAll+0x12c>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f1      	bne.n	80050d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80050f4:	4b12      	ldr	r3, [pc, #72]	; (8005140 <xTaskResumeAll+0x130>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <xTaskResumeAll+0x12c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005102:	2301      	movs	r3, #1
 8005104:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <xTaskResumeAll+0x134>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005116:	f001 f8b7 	bl	8006288 <vPortExitCritical>

	return xAlreadyYielded;
 800511a:	68bb      	ldr	r3, [r7, #8]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000c84 	.word	0x20000c84
 8005128:	20000c5c 	.word	0x20000c5c
 800512c:	20000c1c 	.word	0x20000c1c
 8005130:	20000c64 	.word	0x20000c64
 8005134:	2000078c 	.word	0x2000078c
 8005138:	20000788 	.word	0x20000788
 800513c:	20000c70 	.word	0x20000c70
 8005140:	20000c6c 	.word	0x20000c6c
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <xTaskGetTickCount+0x1c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005154:	687b      	ldr	r3, [r7, #4]
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000c60 	.word	0x20000c60

08005168 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005172:	4b4e      	ldr	r3, [pc, #312]	; (80052ac <xTaskIncrementTick+0x144>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 8088 	bne.w	800528c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <xTaskIncrementTick+0x148>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005184:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <xTaskIncrementTick+0x148>)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11f      	bne.n	80051d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005190:	4b48      	ldr	r3, [pc, #288]	; (80052b4 <xTaskIncrementTick+0x14c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <xTaskIncrementTick+0x46>
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	e7fe      	b.n	80051ac <xTaskIncrementTick+0x44>
 80051ae:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	4b40      	ldr	r3, [pc, #256]	; (80052b8 <xTaskIncrementTick+0x150>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3e      	ldr	r2, [pc, #248]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4a3e      	ldr	r2, [pc, #248]	; (80052b8 <xTaskIncrementTick+0x150>)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4b3e      	ldr	r3, [pc, #248]	; (80052bc <xTaskIncrementTick+0x154>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3301      	adds	r3, #1
 80051c8:	4a3c      	ldr	r2, [pc, #240]	; (80052bc <xTaskIncrementTick+0x154>)
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	f000 fac4 	bl	8005758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051d0:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d349      	bcc.n	800526e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051da:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e4:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051e6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ea:	601a      	str	r2, [r3, #0]
					break;
 80051ec:	e03f      	b.n	800526e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ee:	4b31      	ldr	r3, [pc, #196]	; (80052b4 <xTaskIncrementTick+0x14c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d203      	bcs.n	800520e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005206:	4a2e      	ldr	r2, [pc, #184]	; (80052c0 <xTaskIncrementTick+0x158>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800520c:	e02f      	b.n	800526e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	3304      	adds	r3, #4
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe ffba 	bl	800418c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	3318      	adds	r3, #24
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe ffb1 	bl	800418c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <xTaskIncrementTick+0x15c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d903      	bls.n	800523e <xTaskIncrementTick+0xd6>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <xTaskIncrementTick+0x15c>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <xTaskIncrementTick+0x160>)
 800524c:	441a      	add	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f7fe ff3c 	bl	80040d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <xTaskIncrementTick+0x164>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d3b8      	bcc.n	80051da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800526c:	e7b5      	b.n	80051da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <xTaskIncrementTick+0x164>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4914      	ldr	r1, [pc, #80]	; (80052c8 <xTaskIncrementTick+0x160>)
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d907      	bls.n	8005296 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005286:	2301      	movs	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e004      	b.n	8005296 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800528c:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <xTaskIncrementTick+0x168>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	4a0f      	ldr	r2, [pc, #60]	; (80052d0 <xTaskIncrementTick+0x168>)
 8005294:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <xTaskIncrementTick+0x16c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000c84 	.word	0x20000c84
 80052b0:	20000c60 	.word	0x20000c60
 80052b4:	20000c14 	.word	0x20000c14
 80052b8:	20000c18 	.word	0x20000c18
 80052bc:	20000c74 	.word	0x20000c74
 80052c0:	20000c7c 	.word	0x20000c7c
 80052c4:	20000c64 	.word	0x20000c64
 80052c8:	2000078c 	.word	0x2000078c
 80052cc:	20000788 	.word	0x20000788
 80052d0:	20000c6c 	.word	0x20000c6c
 80052d4:	20000c70 	.word	0x20000c70

080052d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052de:	4b27      	ldr	r3, [pc, #156]	; (800537c <vTaskSwitchContext+0xa4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <vTaskSwitchContext+0xa8>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052ec:	e040      	b.n	8005370 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <vTaskSwitchContext+0xa8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f4:	4b23      	ldr	r3, [pc, #140]	; (8005384 <vTaskSwitchContext+0xac>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e00f      	b.n	800531c <vTaskSwitchContext+0x44>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <vTaskSwitchContext+0x3e>
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	e7fe      	b.n	8005314 <vTaskSwitchContext+0x3c>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b01      	subs	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	491a      	ldr	r1, [pc, #104]	; (8005388 <vTaskSwitchContext+0xb0>)
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0e5      	beq.n	80052fc <vTaskSwitchContext+0x24>
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4a13      	ldr	r2, [pc, #76]	; (8005388 <vTaskSwitchContext+0xb0>)
 800533c:	4413      	add	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3308      	adds	r3, #8
 8005352:	429a      	cmp	r2, r3
 8005354:	d104      	bne.n	8005360 <vTaskSwitchContext+0x88>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	605a      	str	r2, [r3, #4]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <vTaskSwitchContext+0xb4>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4a06      	ldr	r2, [pc, #24]	; (8005384 <vTaskSwitchContext+0xac>)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6013      	str	r3, [r2, #0]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	20000c84 	.word	0x20000c84
 8005380:	20000c70 	.word	0x20000c70
 8005384:	20000c64 	.word	0x20000c64
 8005388:	2000078c 	.word	0x2000078c
 800538c:	20000788 	.word	0x20000788

08005390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <vTaskPlaceOnEventList+0x24>
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e7fe      	b.n	80053b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <vTaskPlaceOnEventList+0x44>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3318      	adds	r3, #24
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fe feac 	bl	800411a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053c2:	2101      	movs	r1, #1
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	f000 fa71 	bl	80058ac <prvAddCurrentTaskToDelayedList>
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000788 	.word	0x20000788

080053d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <vTaskPlaceOnEventListRestricted+0x26>
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e7fe      	b.n	80053fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <vTaskPlaceOnEventListRestricted+0x50>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3318      	adds	r3, #24
 8005404:	4619      	mov	r1, r3
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7fe fe63 	bl	80040d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	68b8      	ldr	r0, [r7, #8]
 800541c:	f000 fa46 	bl	80058ac <prvAddCurrentTaskToDelayedList>
	}
 8005420:	bf00      	nop
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000788 	.word	0x20000788

0800542c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <xTaskRemoveFromEventList+0x2a>
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e7fe      	b.n	8005454 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3318      	adds	r3, #24
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe fe96 	bl	800418c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005460:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <xTaskRemoveFromEventList+0xac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11d      	bne.n	80054a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3304      	adds	r3, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fe8d 	bl	800418c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005476:	4b19      	ldr	r3, [pc, #100]	; (80054dc <xTaskRemoveFromEventList+0xb0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d903      	bls.n	8005486 <xTaskRemoveFromEventList+0x5a>
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	4a16      	ldr	r2, [pc, #88]	; (80054dc <xTaskRemoveFromEventList+0xb0>)
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <xTaskRemoveFromEventList+0xb4>)
 8005494:	441a      	add	r2, r3
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3304      	adds	r3, #4
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f7fe fe18 	bl	80040d2 <vListInsertEnd>
 80054a2:	e005      	b.n	80054b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	3318      	adds	r3, #24
 80054a8:	4619      	mov	r1, r3
 80054aa:	480e      	ldr	r0, [pc, #56]	; (80054e4 <xTaskRemoveFromEventList+0xb8>)
 80054ac:	f7fe fe11 	bl	80040d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <xTaskRemoveFromEventList+0xbc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d905      	bls.n	80054ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054be:	2301      	movs	r3, #1
 80054c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <xTaskRemoveFromEventList+0xc0>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e001      	b.n	80054ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054ce:	697b      	ldr	r3, [r7, #20]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000c84 	.word	0x20000c84
 80054dc:	20000c64 	.word	0x20000c64
 80054e0:	2000078c 	.word	0x2000078c
 80054e4:	20000c1c 	.word	0x20000c1c
 80054e8:	20000788 	.word	0x20000788
 80054ec:	20000c70 	.word	0x20000c70

080054f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <vTaskInternalSetTimeOutState+0x24>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <vTaskInternalSetTimeOutState+0x28>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	605a      	str	r2, [r3, #4]
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	20000c74 	.word	0x20000c74
 8005518:	20000c60 	.word	0x20000c60

0800551c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <xTaskCheckForTimeOut+0x24>
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e7fe      	b.n	800553e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <xTaskCheckForTimeOut+0x3e>
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e7fe      	b.n	8005558 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800555a:	f000 fe67 	bl	800622c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800555e:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <xTaskCheckForTimeOut+0xb8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d102      	bne.n	800557e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e023      	b.n	80055c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <xTaskCheckForTimeOut+0xbc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d007      	beq.n	800559a <xTaskCheckForTimeOut+0x7e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e015      	b.n	80055c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d20b      	bcs.n	80055bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ff9d 	bl	80054f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	e004      	b.n	80055c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055c6:	f000 fe5f 	bl	8006288 <vPortExitCritical>

	return xReturn;
 80055ca:	69fb      	ldr	r3, [r7, #28]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000c60 	.word	0x20000c60
 80055d8:	20000c74 	.word	0x20000c74

080055dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <vTaskMissedYield+0x14>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	bf00      	nop
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20000c70 	.word	0x20000c70

080055f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055fc:	f000 f852 	bl	80056a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <prvIdleTask+0x28>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d9f9      	bls.n	80055fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <prvIdleTask+0x2c>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005618:	e7f0      	b.n	80055fc <prvIdleTask+0x8>
 800561a:	bf00      	nop
 800561c:	2000078c 	.word	0x2000078c
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800562a:	2300      	movs	r3, #0
 800562c:	607b      	str	r3, [r7, #4]
 800562e:	e00c      	b.n	800564a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4a12      	ldr	r2, [pc, #72]	; (8005684 <prvInitialiseTaskLists+0x60>)
 800563c:	4413      	add	r3, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fd1a 	bl	8004078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3301      	adds	r3, #1
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b37      	cmp	r3, #55	; 0x37
 800564e:	d9ef      	bls.n	8005630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005650:	480d      	ldr	r0, [pc, #52]	; (8005688 <prvInitialiseTaskLists+0x64>)
 8005652:	f7fe fd11 	bl	8004078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005656:	480d      	ldr	r0, [pc, #52]	; (800568c <prvInitialiseTaskLists+0x68>)
 8005658:	f7fe fd0e 	bl	8004078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800565c:	480c      	ldr	r0, [pc, #48]	; (8005690 <prvInitialiseTaskLists+0x6c>)
 800565e:	f7fe fd0b 	bl	8004078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005662:	480c      	ldr	r0, [pc, #48]	; (8005694 <prvInitialiseTaskLists+0x70>)
 8005664:	f7fe fd08 	bl	8004078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005668:	480b      	ldr	r0, [pc, #44]	; (8005698 <prvInitialiseTaskLists+0x74>)
 800566a:	f7fe fd05 	bl	8004078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <prvInitialiseTaskLists+0x78>)
 8005670:	4a05      	ldr	r2, [pc, #20]	; (8005688 <prvInitialiseTaskLists+0x64>)
 8005672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <prvInitialiseTaskLists+0x7c>)
 8005676:	4a05      	ldr	r2, [pc, #20]	; (800568c <prvInitialiseTaskLists+0x68>)
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000078c 	.word	0x2000078c
 8005688:	20000bec 	.word	0x20000bec
 800568c:	20000c00 	.word	0x20000c00
 8005690:	20000c1c 	.word	0x20000c1c
 8005694:	20000c30 	.word	0x20000c30
 8005698:	20000c48 	.word	0x20000c48
 800569c:	20000c14 	.word	0x20000c14
 80056a0:	20000c18 	.word	0x20000c18

080056a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056aa:	e019      	b.n	80056e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056ac:	f000 fdbe 	bl	800622c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <prvCheckTasksWaitingTermination+0x4c>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fd65 	bl	800418c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056c2:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <prvCheckTasksWaitingTermination+0x50>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <prvCheckTasksWaitingTermination+0x50>)
 80056ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <prvCheckTasksWaitingTermination+0x54>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <prvCheckTasksWaitingTermination+0x54>)
 80056d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056d6:	f000 fdd7 	bl	8006288 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f80e 	bl	80056fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <prvCheckTasksWaitingTermination+0x54>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e1      	bne.n	80056ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000c30 	.word	0x20000c30
 80056f4:	20000c5c 	.word	0x20000c5c
 80056f8:	20000c44 	.word	0x20000c44

080056fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800570a:	2b00      	cmp	r3, #0
 800570c:	d108      	bne.n	8005720 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	4618      	mov	r0, r3
 8005714:	f000 feb6 	bl	8006484 <vPortFree>
				vPortFree( pxTCB );
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 feb3 	bl	8006484 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800571e:	e017      	b.n	8005750 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005726:	2b01      	cmp	r3, #1
 8005728:	d103      	bne.n	8005732 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 feaa 	bl	8006484 <vPortFree>
	}
 8005730:	e00e      	b.n	8005750 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005738:	2b02      	cmp	r3, #2
 800573a:	d009      	beq.n	8005750 <prvDeleteTCB+0x54>
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e7fe      	b.n	800574e <prvDeleteTCB+0x52>
	}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <prvResetNextTaskUnblockTime+0x38>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <prvResetNextTaskUnblockTime+0x3c>)
 800576a:	f04f 32ff 	mov.w	r2, #4294967295
 800576e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005770:	e008      	b.n	8005784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <prvResetNextTaskUnblockTime+0x38>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a04      	ldr	r2, [pc, #16]	; (8005794 <prvResetNextTaskUnblockTime+0x3c>)
 8005782:	6013      	str	r3, [r2, #0]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20000c14 	.word	0x20000c14
 8005794:	20000c7c 	.word	0x20000c7c

08005798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <xTaskGetSchedulerState+0x34>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057a6:	2301      	movs	r3, #1
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	e008      	b.n	80057be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ac:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <xTaskGetSchedulerState+0x38>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057b4:	2302      	movs	r3, #2
 80057b6:	607b      	str	r3, [r7, #4]
 80057b8:	e001      	b.n	80057be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057be:	687b      	ldr	r3, [r7, #4]
	}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000c68 	.word	0x20000c68
 80057d0:	20000c84 	.word	0x20000c84

080057d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d054      	beq.n	8005894 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057ea:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <xTaskPriorityDisinherit+0xcc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d009      	beq.n	8005808 <xTaskPriorityDisinherit+0x34>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e7fe      	b.n	8005806 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <xTaskPriorityDisinherit+0x50>
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	e7fe      	b.n	8005822 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	1e5a      	subs	r2, r3, #1
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	429a      	cmp	r2, r3
 8005838:	d02c      	beq.n	8005894 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	2b00      	cmp	r3, #0
 8005840:	d128      	bne.n	8005894 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3304      	adds	r3, #4
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fca0 	bl	800418c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <xTaskPriorityDisinherit+0xd0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d903      	bls.n	8005874 <xTaskPriorityDisinherit+0xa0>
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <xTaskPriorityDisinherit+0xd0>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <xTaskPriorityDisinherit+0xd4>)
 8005882:	441a      	add	r2, r3
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f7fe fc21 	bl	80040d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005894:	697b      	ldr	r3, [r7, #20]
	}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000788 	.word	0x20000788
 80058a4:	20000c64 	.word	0x20000c64
 80058a8:	2000078c 	.word	0x2000078c

080058ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058b6:	4b21      	ldr	r3, [pc, #132]	; (800593c <prvAddCurrentTaskToDelayedList+0x90>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <prvAddCurrentTaskToDelayedList+0x94>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fc62 	bl	800418c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d10a      	bne.n	80058e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d6:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4819      	ldr	r0, [pc, #100]	; (8005944 <prvAddCurrentTaskToDelayedList+0x98>)
 80058e0:	f7fe fbf7 	bl	80040d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058e4:	e026      	b.n	8005934 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4413      	add	r3, r2
 80058ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <prvAddCurrentTaskToDelayedList+0x94>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d209      	bcs.n	8005912 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <prvAddCurrentTaskToDelayedList+0x94>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f7fe fc05 	bl	800411a <vListInsert>
}
 8005910:	e010      	b.n	8005934 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005912:	4b0e      	ldr	r3, [pc, #56]	; (800594c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <prvAddCurrentTaskToDelayedList+0x94>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f7fe fbfb 	bl	800411a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d202      	bcs.n	8005934 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000c60 	.word	0x20000c60
 8005940:	20000788 	.word	0x20000788
 8005944:	20000c48 	.word	0x20000c48
 8005948:	20000c18 	.word	0x20000c18
 800594c:	20000c14 	.word	0x20000c14
 8005950:	20000c7c 	.word	0x20000c7c

08005954 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800595e:	f000 faff 	bl	8005f60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <xTimerCreateTimerTask+0x80>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d021      	beq.n	80059ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005972:	1d3a      	adds	r2, r7, #4
 8005974:	f107 0108 	add.w	r1, r7, #8
 8005978:	f107 030c 	add.w	r3, r7, #12
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe fb61 	bl	8004044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	9202      	str	r2, [sp, #8]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	2302      	movs	r3, #2
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	2300      	movs	r3, #0
 8005992:	460a      	mov	r2, r1
 8005994:	4910      	ldr	r1, [pc, #64]	; (80059d8 <xTimerCreateTimerTask+0x84>)
 8005996:	4811      	ldr	r0, [pc, #68]	; (80059dc <xTimerCreateTimerTask+0x88>)
 8005998:	f7ff f8f6 	bl	8004b88 <xTaskCreateStatic>
 800599c:	4602      	mov	r2, r0
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <xTimerCreateTimerTask+0x8c>)
 80059a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059a2:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <xTimerCreateTimerTask+0x8c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059aa:	2301      	movs	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <xTimerCreateTimerTask+0x74>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e7fe      	b.n	80059c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80059c8:	697b      	ldr	r3, [r7, #20]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000cb8 	.word	0x20000cb8
 80059d8:	08009a40 	.word	0x08009a40
 80059dc:	08005b15 	.word	0x08005b15
 80059e0:	20000cbc 	.word	0x20000cbc

080059e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <xTimerGenericCommand+0x2c>
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	e7fe      	b.n	8005a0e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <xTimerGenericCommand+0x94>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02a      	beq.n	8005a6e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b05      	cmp	r3, #5
 8005a28:	dc18      	bgt.n	8005a5c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a2a:	f7ff feb5 	bl	8005798 <xTaskGetSchedulerState>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d109      	bne.n	8005a48 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a34:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <xTimerGenericCommand+0x94>)
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	f107 0110 	add.w	r1, r7, #16
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a40:	f7fe fccc 	bl	80043dc <xQueueGenericSend>
 8005a44:	6278      	str	r0, [r7, #36]	; 0x24
 8005a46:	e012      	b.n	8005a6e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <xTimerGenericCommand+0x94>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	f107 0110 	add.w	r1, r7, #16
 8005a50:	2300      	movs	r3, #0
 8005a52:	2200      	movs	r2, #0
 8005a54:	f7fe fcc2 	bl	80043dc <xQueueGenericSend>
 8005a58:	6278      	str	r0, [r7, #36]	; 0x24
 8005a5a:	e008      	b.n	8005a6e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <xTimerGenericCommand+0x94>)
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	f107 0110 	add.w	r1, r7, #16
 8005a64:	2300      	movs	r3, #0
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	f7fe fdb2 	bl	80045d0 <xQueueGenericSendFromISR>
 8005a6c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3728      	adds	r7, #40	; 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000cb8 	.word	0x20000cb8

08005a7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a86:	4b22      	ldr	r3, [pc, #136]	; (8005b10 <prvProcessExpiredTimer+0x94>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fb79 	bl	800418c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d021      	beq.n	8005aec <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	18d1      	adds	r1, r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	6978      	ldr	r0, [r7, #20]
 8005ab6:	f000 f8d1 	bl	8005c5c <prvInsertTimerInActiveList>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01e      	beq.n	8005afe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	2100      	movs	r1, #0
 8005aca:	6978      	ldr	r0, [r7, #20]
 8005acc:	f7ff ff8a 	bl	80059e4 <xTimerGenericCommand>
 8005ad0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d112      	bne.n	8005afe <prvProcessExpiredTimer+0x82>
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e7fe      	b.n	8005aea <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	6978      	ldr	r0, [r7, #20]
 8005b04:	4798      	blx	r3
}
 8005b06:	bf00      	nop
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000cb0 	.word	0x20000cb0

08005b14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b1c:	f107 0308 	add.w	r3, r7, #8
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f857 	bl	8005bd4 <prvGetNextExpireTime>
 8005b26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f803 	bl	8005b38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b32:	f000 f8d5 	bl	8005ce0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b36:	e7f1      	b.n	8005b1c <prvTimerTask+0x8>

08005b38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b42:	f7ff fa57 	bl	8004ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b46:	f107 0308 	add.w	r3, r7, #8
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f866 	bl	8005c1c <prvSampleTimeNow>
 8005b50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d130      	bne.n	8005bba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <prvProcessTimerOrBlockTask+0x3c>
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d806      	bhi.n	8005b74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b66:	f7ff fa53 	bl	8005010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff ff85 	bl	8005a7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b72:	e024      	b.n	8005bbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <prvProcessTimerOrBlockTask+0x90>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <prvProcessTimerOrBlockTask+0x50>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <prvProcessTimerOrBlockTask+0x52>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <prvProcessTimerOrBlockTask+0x94>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f7fe ffc1 	bl	8004b20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b9e:	f7ff fa37 	bl	8005010 <xTaskResumeAll>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <prvProcessTimerOrBlockTask+0x98>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
}
 8005bb8:	e001      	b.n	8005bbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005bba:	f7ff fa29 	bl	8005010 <xTaskResumeAll>
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000cb4 	.word	0x20000cb4
 8005bcc:	20000cb8 	.word	0x20000cb8
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005bdc:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <prvGetNextExpireTime+0x44>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <prvGetNextExpireTime+0x16>
 8005be6:	2201      	movs	r2, #1
 8005be8:	e000      	b.n	8005bec <prvGetNextExpireTime+0x18>
 8005bea:	2200      	movs	r2, #0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bf8:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <prvGetNextExpireTime+0x44>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e001      	b.n	8005c08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000cb0 	.word	0x20000cb0

08005c1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c24:	f7ff fa90 	bl	8005148 <xTaskGetTickCount>
 8005c28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <prvSampleTimeNow+0x3c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d205      	bcs.n	8005c40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c34:	f000 f930 	bl	8005e98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c46:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <prvSampleTimeNow+0x3c>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000cc0 	.word	0x20000cc0

08005c5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d812      	bhi.n	8005ca8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e01b      	b.n	8005cce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <prvInsertTimerInActiveList+0x7c>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f7fe fa3a 	bl	800411a <vListInsert>
 8005ca6:	e012      	b.n	8005cce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d206      	bcs.n	8005cbe <prvInsertTimerInActiveList+0x62>
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e007      	b.n	8005cce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <prvInsertTimerInActiveList+0x80>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f7fe fa26 	bl	800411a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cce:	697b      	ldr	r3, [r7, #20]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	20000cb4 	.word	0x20000cb4
 8005cdc:	20000cb0 	.word	0x20000cb0

08005ce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08e      	sub	sp, #56	; 0x38
 8005ce4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ce6:	e0c6      	b.n	8005e76 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da17      	bge.n	8005d1e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <prvProcessReceivedCommands+0x2e>
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e7fe      	b.n	8005d0c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d14:	6850      	ldr	r0, [r2, #4]
 8005d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d18:	6892      	ldr	r2, [r2, #8]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f2c0 80a7 	blt.w	8005e74 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fa28 	bl	800418c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff ff6c 	bl	8005c1c <prvSampleTimeNow>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b09      	cmp	r3, #9
 8005d4a:	f200 8094 	bhi.w	8005e76 <prvProcessReceivedCommands+0x196>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <prvProcessReceivedCommands+0x74>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d7d 	.word	0x08005d7d
 8005d60:	08005def 	.word	0x08005def
 8005d64:	08005e03 	.word	0x08005e03
 8005d68:	08005e4b 	.word	0x08005e4b
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d7d 	.word	0x08005d7d
 8005d74:	08005def 	.word	0x08005def
 8005d78:	08005e03 	.word	0x08005e03
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	18d1      	adds	r1, r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9c:	f7ff ff5e 	bl	8005c5c <prvInsertTimerInActiveList>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d067      	beq.n	8005e76 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05c      	beq.n	8005e76 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	441a      	add	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dce:	f7ff fe09 	bl	80059e4 <xTimerGenericCommand>
 8005dd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d14d      	bne.n	8005e76 <prvProcessReceivedCommands+0x196>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	e7fe      	b.n	8005dec <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e00:	e039      	b.n	8005e76 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e08:	f043 0301 	orr.w	r3, r3, #1
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <prvProcessReceivedCommands+0x156>
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e7fe      	b.n	8005e34 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	18d1      	adds	r1, r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e44:	f7ff ff0a 	bl	8005c5c <prvInsertTimerInActiveList>
					break;
 8005e48:	e015      	b.n	8005e76 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e5a:	f000 fb13 	bl	8006484 <vPortFree>
 8005e5e:	e00a      	b.n	8005e76 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e66:	f023 0301 	bic.w	r3, r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e72:	e000      	b.n	8005e76 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <prvProcessReceivedCommands+0x1b4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1d39      	adds	r1, r7, #4
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fc3a 	bl	80046f8 <xQueueReceive>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f47f af2e 	bne.w	8005ce8 <prvProcessReceivedCommands+0x8>
	}
}
 8005e8c:	bf00      	nop
 8005e8e:	3730      	adds	r7, #48	; 0x30
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000cb8 	.word	0x20000cb8

08005e98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e9e:	e047      	b.n	8005f30 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <prvSwitchTimerLists+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eaa:	4b2b      	ldr	r3, [pc, #172]	; (8005f58 <prvSwitchTimerLists+0xc0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe f967 	bl	800418c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d02d      	beq.n	8005f30 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d90e      	bls.n	8005f04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ef2:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <prvSwitchTimerLists+0xc0>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe f90c 	bl	800411a <vListInsert>
 8005f02:	e015      	b.n	8005f30 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f04:	2300      	movs	r3, #0
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff fd68 	bl	80059e4 <xTimerGenericCommand>
 8005f14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <prvSwitchTimerLists+0x98>
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	e7fe      	b.n	8005f2e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <prvSwitchTimerLists+0xc0>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1b2      	bne.n	8005ea0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <prvSwitchTimerLists+0xc0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <prvSwitchTimerLists+0xc4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <prvSwitchTimerLists+0xc0>)
 8005f46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f48:	4a04      	ldr	r2, [pc, #16]	; (8005f5c <prvSwitchTimerLists+0xc4>)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	6013      	str	r3, [r2, #0]
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000cb0 	.word	0x20000cb0
 8005f5c:	20000cb4 	.word	0x20000cb4

08005f60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f66:	f000 f961 	bl	800622c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f6a:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <prvCheckForValidListAndQueue+0x60>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d120      	bne.n	8005fb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f72:	4814      	ldr	r0, [pc, #80]	; (8005fc4 <prvCheckForValidListAndQueue+0x64>)
 8005f74:	f7fe f880 	bl	8004078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f78:	4813      	ldr	r0, [pc, #76]	; (8005fc8 <prvCheckForValidListAndQueue+0x68>)
 8005f7a:	f7fe f87d 	bl	8004078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f7e:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <prvCheckForValidListAndQueue+0x6c>)
 8005f80:	4a10      	ldr	r2, [pc, #64]	; (8005fc4 <prvCheckForValidListAndQueue+0x64>)
 8005f82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <prvCheckForValidListAndQueue+0x70>)
 8005f86:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <prvCheckForValidListAndQueue+0x68>)
 8005f88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <prvCheckForValidListAndQueue+0x74>)
 8005f90:	4a11      	ldr	r2, [pc, #68]	; (8005fd8 <prvCheckForValidListAndQueue+0x78>)
 8005f92:	2110      	movs	r1, #16
 8005f94:	200a      	movs	r0, #10
 8005f96:	f7fe f98b 	bl	80042b0 <xQueueGenericCreateStatic>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b08      	ldr	r3, [pc, #32]	; (8005fc0 <prvCheckForValidListAndQueue+0x60>)
 8005f9e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <prvCheckForValidListAndQueue+0x60>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <prvCheckForValidListAndQueue+0x60>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	490b      	ldr	r1, [pc, #44]	; (8005fdc <prvCheckForValidListAndQueue+0x7c>)
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fd8e 	bl	8004ad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fb4:	f000 f968 	bl	8006288 <vPortExitCritical>
}
 8005fb8:	bf00      	nop
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000cb8 	.word	0x20000cb8
 8005fc4:	20000c88 	.word	0x20000c88
 8005fc8:	20000c9c 	.word	0x20000c9c
 8005fcc:	20000cb0 	.word	0x20000cb0
 8005fd0:	20000cb4 	.word	0x20000cb4
 8005fd4:	20000d64 	.word	0x20000d64
 8005fd8:	20000cc4 	.word	0x20000cc4
 8005fdc:	08009a48 	.word	0x08009a48

08005fe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3b04      	subs	r3, #4
 8005ff0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3b04      	subs	r3, #4
 8005ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3b04      	subs	r3, #4
 800600e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006010:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <pxPortInitialiseStack+0x64>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3b14      	subs	r3, #20
 800601a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3b04      	subs	r3, #4
 8006026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f06f 0202 	mvn.w	r2, #2
 800602e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b20      	subs	r3, #32
 8006034:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006036:	68fb      	ldr	r3, [r7, #12]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	08006049 	.word	0x08006049

08006048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <prvTaskExitError+0x50>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d009      	beq.n	8006070 <prvTaskExitError+0x28>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e7fe      	b.n	800606e <prvTaskExitError+0x26>
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006082:	bf00      	nop
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0fc      	beq.n	8006084 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20000008 	.word	0x20000008
 800609c:	00000000 	.word	0x00000000

080060a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060a0:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <pxCurrentTCBConst2>)
 80060a2:	6819      	ldr	r1, [r3, #0]
 80060a4:	6808      	ldr	r0, [r1, #0]
 80060a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060aa:	f380 8809 	msr	PSP, r0
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f380 8811 	msr	BASEPRI, r0
 80060ba:	4770      	bx	lr
 80060bc:	f3af 8000 	nop.w

080060c0 <pxCurrentTCBConst2>:
 80060c0:	20000788 	.word	0x20000788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop

080060c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060c8:	4808      	ldr	r0, [pc, #32]	; (80060ec <prvPortStartFirstTask+0x24>)
 80060ca:	6800      	ldr	r0, [r0, #0]
 80060cc:	6800      	ldr	r0, [r0, #0]
 80060ce:	f380 8808 	msr	MSP, r0
 80060d2:	f04f 0000 	mov.w	r0, #0
 80060d6:	f380 8814 	msr	CONTROL, r0
 80060da:	b662      	cpsie	i
 80060dc:	b661      	cpsie	f
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	df00      	svc	0
 80060e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ea:	bf00      	nop
 80060ec:	e000ed08 	.word	0xe000ed08

080060f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060f6:	4b44      	ldr	r3, [pc, #272]	; (8006208 <xPortStartScheduler+0x118>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a44      	ldr	r2, [pc, #272]	; (800620c <xPortStartScheduler+0x11c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d109      	bne.n	8006114 <xPortStartScheduler+0x24>
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	e7fe      	b.n	8006112 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006114:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <xPortStartScheduler+0x118>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a3d      	ldr	r2, [pc, #244]	; (8006210 <xPortStartScheduler+0x120>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d109      	bne.n	8006132 <xPortStartScheduler+0x42>
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e7fe      	b.n	8006130 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006132:	4b38      	ldr	r3, [pc, #224]	; (8006214 <xPortStartScheduler+0x124>)
 8006134:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	22ff      	movs	r2, #255	; 0xff
 8006142:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4b30      	ldr	r3, [pc, #192]	; (8006218 <xPortStartScheduler+0x128>)
 8006158:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800615a:	4b30      	ldr	r3, [pc, #192]	; (800621c <xPortStartScheduler+0x12c>)
 800615c:	2207      	movs	r2, #7
 800615e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006160:	e009      	b.n	8006176 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006162:	4b2e      	ldr	r3, [pc, #184]	; (800621c <xPortStartScheduler+0x12c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3b01      	subs	r3, #1
 8006168:	4a2c      	ldr	r2, [pc, #176]	; (800621c <xPortStartScheduler+0x12c>)
 800616a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	b2db      	uxtb	r3, r3
 8006174:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d0ef      	beq.n	8006162 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006182:	4b26      	ldr	r3, [pc, #152]	; (800621c <xPortStartScheduler+0x12c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f1c3 0307 	rsb	r3, r3, #7
 800618a:	2b04      	cmp	r3, #4
 800618c:	d009      	beq.n	80061a2 <xPortStartScheduler+0xb2>
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	e7fe      	b.n	80061a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061a2:	4b1e      	ldr	r3, [pc, #120]	; (800621c <xPortStartScheduler+0x12c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	4a1c      	ldr	r2, [pc, #112]	; (800621c <xPortStartScheduler+0x12c>)
 80061aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <xPortStartScheduler+0x12c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <xPortStartScheduler+0x12c>)
 80061b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061c0:	4b17      	ldr	r3, [pc, #92]	; (8006220 <xPortStartScheduler+0x130>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a16      	ldr	r2, [pc, #88]	; (8006220 <xPortStartScheduler+0x130>)
 80061c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061cc:	4b14      	ldr	r3, [pc, #80]	; (8006220 <xPortStartScheduler+0x130>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <xPortStartScheduler+0x130>)
 80061d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061d8:	f000 f8d6 	bl	8006388 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061dc:	4b11      	ldr	r3, [pc, #68]	; (8006224 <xPortStartScheduler+0x134>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061e2:	f000 f8f5 	bl	80063d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <xPortStartScheduler+0x138>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a0f      	ldr	r2, [pc, #60]	; (8006228 <xPortStartScheduler+0x138>)
 80061ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061f2:	f7ff ff69 	bl	80060c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061f6:	f7ff f86f 	bl	80052d8 <vTaskSwitchContext>
	prvTaskExitError();
 80061fa:	f7ff ff25 	bl	8006048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed00 	.word	0xe000ed00
 800620c:	410fc271 	.word	0x410fc271
 8006210:	410fc270 	.word	0x410fc270
 8006214:	e000e400 	.word	0xe000e400
 8006218:	20000db4 	.word	0x20000db4
 800621c:	20000db8 	.word	0x20000db8
 8006220:	e000ed20 	.word	0xe000ed20
 8006224:	20000008 	.word	0x20000008
 8006228:	e000ef34 	.word	0xe000ef34

0800622c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <vPortEnterCritical+0x54>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	4a0d      	ldr	r2, [pc, #52]	; (8006280 <vPortEnterCritical+0x54>)
 800624c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <vPortEnterCritical+0x54>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d10e      	bne.n	8006274 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <vPortEnterCritical+0x58>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <vPortEnterCritical+0x48>
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	e7fe      	b.n	8006272 <vPortEnterCritical+0x46>
	}
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20000008 	.word	0x20000008
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <vPortExitCritical+0x4c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <vPortExitCritical+0x22>
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	e7fe      	b.n	80062a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80062aa:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <vPortExitCritical+0x4c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <vPortExitCritical+0x4c>)
 80062b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <vPortExitCritical+0x4c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <vPortExitCritical+0x3e>
 80062bc:	2300      	movs	r3, #0
 80062be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000008 	.word	0x20000008
	...

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f01e 0f10 	tst.w	lr, #16
 80062f0:	bf08      	it	eq
 80062f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006304:	f380 8811 	msr	BASEPRI, r0
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f7fe ffe2 	bl	80052d8 <vTaskSwitchContext>
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f380 8811 	msr	BASEPRI, r0
 800631c:	bc09      	pop	{r0, r3}
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	6808      	ldr	r0, [r1, #0]
 8006322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006326:	f01e 0f10 	tst.w	lr, #16
 800632a:	bf08      	it	eq
 800632c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006330:	f380 8809 	msr	PSP, r0
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	f3af 8000 	nop.w

08006340 <pxCurrentTCBConst>:
 8006340:	20000788 	.word	0x20000788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006360:	f7fe ff02 	bl	8005168 <xTaskIncrementTick>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636a:	4b06      	ldr	r3, [pc, #24]	; (8006384 <SysTick_Handler+0x3c>)
 800636c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <vPortSetupTimerInterrupt+0x34>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006392:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <vPortSetupTimerInterrupt+0x38>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <vPortSetupTimerInterrupt+0x3c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <vPortSetupTimerInterrupt+0x40>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	099b      	lsrs	r3, r3, #6
 80063a4:	4a09      	ldr	r2, [pc, #36]	; (80063cc <vPortSetupTimerInterrupt+0x44>)
 80063a6:	3b01      	subs	r3, #1
 80063a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063aa:	4b04      	ldr	r3, [pc, #16]	; (80063bc <vPortSetupTimerInterrupt+0x34>)
 80063ac:	2207      	movs	r2, #7
 80063ae:	601a      	str	r2, [r3, #0]
}
 80063b0:	bf00      	nop
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	e000e010 	.word	0xe000e010
 80063c0:	e000e018 	.word	0xe000e018
 80063c4:	20000044 	.word	0x20000044
 80063c8:	10624dd3 	.word	0x10624dd3
 80063cc:	e000e014 	.word	0xe000e014

080063d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063e0 <vPortEnableVFP+0x10>
 80063d4:	6801      	ldr	r1, [r0, #0]
 80063d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063da:	6001      	str	r1, [r0, #0]
 80063dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063de:	bf00      	nop
 80063e0:	e000ed88 	.word	0xe000ed88

080063e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ea:	f3ef 8305 	mrs	r3, IPSR
 80063ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b0f      	cmp	r3, #15
 80063f4:	d913      	bls.n	800641e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063f6:	4a16      	ldr	r2, [pc, #88]	; (8006450 <vPortValidateInterruptPriority+0x6c>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006400:	4b14      	ldr	r3, [pc, #80]	; (8006454 <vPortValidateInterruptPriority+0x70>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	7afa      	ldrb	r2, [r7, #11]
 8006406:	429a      	cmp	r2, r3
 8006408:	d209      	bcs.n	800641e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	607b      	str	r3, [r7, #4]
 800641c:	e7fe      	b.n	800641c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800641e:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <vPortValidateInterruptPriority+0x74>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <vPortValidateInterruptPriority+0x78>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d909      	bls.n	8006442 <vPortValidateInterruptPriority+0x5e>
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	e7fe      	b.n	8006440 <vPortValidateInterruptPriority+0x5c>
	}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000e3f0 	.word	0xe000e3f0
 8006454:	20000db4 	.word	0x20000db4
 8006458:	e000ed0c 	.word	0xe000ed0c
 800645c:	20000db8 	.word	0x20000db8

08006460 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8006468:	f7fe fdc4 	bl	8004ff4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f002 fb83 	bl	8008b78 <malloc>
 8006472:	4603      	mov	r3, r0
 8006474:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006476:	f7fe fdcb 	bl	8005010 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800647a:	68fb      	ldr	r3, [r7, #12]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
	if( pv )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8006492:	f7fe fdaf 	bl	8004ff4 <vTaskSuspendAll>
		{
			free( pv );
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f002 fb76 	bl	8008b88 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800649c:	f7fe fdb8 	bl	8005010 <xTaskResumeAll>
	}
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <ustrlen>:
    return (uint8_t*)strcat((char *)dst, (char *)src);
}

// Unsigned string length function (equivalent to strlen from string.h)
static inline uint8_t ustrlen(uint8_t *str)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
    return (uint8_t)strlen((char *)str);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7f9 fe8d 	bl	80001d0 <strlen>
 80064b6:	4603      	mov	r3, r0
 80064b8:	b2db      	uxtb	r3, r3
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <cc110_init>:
static void cc110_writeConfig(void);
static void cc110_dumpRegisters(void);

/* Public function definitions -----------------------------------------------*/
int8_t cc110_init(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
    int8_t retval = CC110_OK;
 80064ca:	2301      	movs	r3, #1
 80064cc:	71fb      	strb	r3, [r7, #7]

    // De-init timer that takes care of tx/rx operations (this should already be done)
    HAL_TIM_Base_MspDeInit(&htim10);
 80064ce:	481c      	ldr	r0, [pc, #112]	; (8006540 <cc110_init+0x7c>)
 80064d0:	f002 fa1c 	bl	800890c <HAL_TIM_Base_MspDeInit>

    // Reset Device
    cc110_connectedStatus = cc110_reset();
 80064d4:	f000 fb38 	bl	8006b48 <cc110_reset>
 80064d8:	4603      	mov	r3, r0
 80064da:	461a      	mov	r2, r3
 80064dc:	4b19      	ldr	r3, [pc, #100]	; (8006544 <cc110_init+0x80>)
 80064de:	701a      	strb	r2, [r3, #0]
    if (cc110_connectedStatus == CC110_OK)
 80064e0:	4b18      	ldr	r3, [pc, #96]	; (8006544 <cc110_init+0x80>)
 80064e2:	f993 3000 	ldrsb.w	r3, [r3]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d11b      	bne.n	8006522 <cc110_init+0x5e>
    {
        log_info("CC110 Connected");
 80064ea:	4b17      	ldr	r3, [pc, #92]	; (8006548 <cc110_init+0x84>)
 80064ec:	2279      	movs	r2, #121	; 0x79
 80064ee:	4917      	ldr	r1, [pc, #92]	; (800654c <cc110_init+0x88>)
 80064f0:	2003      	movs	r0, #3
 80064f2:	f001 fbd9 	bl	8007ca8 <log_event>

        // Force to IDLE state
        cc110_strobeCmd(CC110_SIDLE_ADDR);
 80064f6:	2036      	movs	r0, #54	; 0x36
 80064f8:	f000 fc80 	bl	8006dfc <cc110_strobeCmd>

        // Flush FIFOs
        cc110_strobeCmd(CC110_SFRX_ADDR);
 80064fc:	203a      	movs	r0, #58	; 0x3a
 80064fe:	f000 fc7d 	bl	8006dfc <cc110_strobeCmd>
        cc110_strobeCmd(CC110_SFTX_ADDR);
 8006502:	203b      	movs	r0, #59	; 0x3b
 8006504:	f000 fc7a 	bl	8006dfc <cc110_strobeCmd>

        // Grab initial status from status registers
        cc110_getStatus();
 8006508:	f000 ff54 	bl	80073b4 <cc110_getStatus>
        cc110_writeRegister(CC110_AGCCTRL0_ADDR, 0xB2);
        cc110_writeRegister(CC110_BSCFG_ADDR, 0x1C);
        */


        cc110_writeConfig();
 800650c:	f001 f92a 	bl	8007764 <cc110_writeConfig>

        cc110_dumpRegisters();
 8006510:	f000 fc8e 	bl	8006e30 <cc110_dumpRegisters>
        cc110_txRxStatus = CC110_TXRX_BUSY;
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <cc110_init+0x8c>)
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]

        // Re-init the timer that takes care of reading/writing to/from the FIFOs
        HAL_TIM_Base_MspInit(&htim10);
 800651a:	4809      	ldr	r0, [pc, #36]	; (8006540 <cc110_init+0x7c>)
 800651c:	f002 f9ca 	bl	80088b4 <HAL_TIM_Base_MspInit>
 8006520:	e007      	b.n	8006532 <cc110_init+0x6e>

    }
    else
    {
        retval = CC110_FAIL;
 8006522:	2300      	movs	r3, #0
 8006524:	71fb      	strb	r3, [r7, #7]
        log_warn("CC110 device not found/unable to reset");
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <cc110_init+0x90>)
 8006528:	22e3      	movs	r2, #227	; 0xe3
 800652a:	4908      	ldr	r1, [pc, #32]	; (800654c <cc110_init+0x88>)
 800652c:	2002      	movs	r0, #2
 800652e:	f001 fbbb 	bl	8007ca8 <log_event>
    }

    return (retval);
 8006532:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200042d0 	.word	0x200042d0
 8006544:	2000000c 	.word	0x2000000c
 8006548:	08009a50 	.word	0x08009a50
 800654c:	08009a60 	.word	0x08009a60
 8006550:	20000e80 	.word	0x20000e80
 8006554:	08009a70 	.word	0x08009a70

08006558 <cc110_test>:

void cc110_test(void)
{
 8006558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655a:	b093      	sub	sp, #76	; 0x4c
 800655c:	af0a      	add	r7, sp, #40	; 0x28
    // Common Vars
    static uint8_t rx_tx = 0;   // 0 for rx, 1 for tx

    // Rx Vars
#define RX_MSG_BYTES         10
    uint8_t rx_msg[RX_MSG_BYTES] = {0};
 800655e:	f107 0314 	add.w	r3, r7, #20
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	811a      	strh	r2, [r3, #8]
    static uint8_t tx_once = 0;
    static uint8_t msg[] = "Hello World!";

    ///////////////////// Function Definition /////////////////////
    // Grab latest pushbutton state and set to rx/tx based on that
    rx_tx = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 800656a:	2110      	movs	r1, #16
 800656c:	4864      	ldr	r0, [pc, #400]	; (8006700 <cc110_test+0x1a8>)
 800656e:	f7fa ffff 	bl	8001570 <HAL_GPIO_ReadPin>
 8006572:	4603      	mov	r3, r0
 8006574:	461a      	mov	r2, r3
 8006576:	4b63      	ldr	r3, [pc, #396]	; (8006704 <cc110_test+0x1ac>)
 8006578:	701a      	strb	r2, [r3, #0]

    if (rx_tx != 0)
 800657a:	4b62      	ldr	r3, [pc, #392]	; (8006704 <cc110_test+0x1ac>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d079      	beq.n	8006676 <cc110_test+0x11e>
    {
        // Rx
        // Turn off LED when in rx
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006582:	2201      	movs	r2, #1
 8006584:	2180      	movs	r1, #128	; 0x80
 8006586:	4860      	ldr	r0, [pc, #384]	; (8006708 <cc110_test+0x1b0>)
 8006588:	f7fb f80a 	bl	80015a0 <HAL_GPIO_WritePin>

        // Set Rx State
        cc110_txRxStatus = CC110_TXRX_RX;
 800658c:	4b5f      	ldr	r3, [pc, #380]	; (800670c <cc110_test+0x1b4>)
 800658e:	2202      	movs	r2, #2
 8006590:	701a      	strb	r2, [r3, #0]

        // Grab latest status
        cc110_getStatus();
 8006592:	f000 ff0f 	bl	80073b4 <cc110_getStatus>

        log_info("RSSI: %d dBm", cc110_rssiDbm);
 8006596:	4b5e      	ldr	r3, [pc, #376]	; (8006710 <cc110_test+0x1b8>)
 8006598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4b5d      	ldr	r3, [pc, #372]	; (8006714 <cc110_test+0x1bc>)
 80065a0:	f44f 7284 	mov.w	r2, #264	; 0x108
 80065a4:	495c      	ldr	r1, [pc, #368]	; (8006718 <cc110_test+0x1c0>)
 80065a6:	2003      	movs	r0, #3
 80065a8:	f001 fb7e 	bl	8007ca8 <log_event>
        log_info("State: %d", CC110_STATUS_DATA.STATE);
 80065ac:	4b5b      	ldr	r3, [pc, #364]	; (800671c <cc110_test+0x1c4>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	4b59      	ldr	r3, [pc, #356]	; (8006720 <cc110_test+0x1c8>)
 80065ba:	f240 1209 	movw	r2, #265	; 0x109
 80065be:	4956      	ldr	r1, [pc, #344]	; (8006718 <cc110_test+0x1c0>)
 80065c0:	2003      	movs	r0, #3
 80065c2:	f001 fb71 	bl	8007ca8 <log_event>

        cc110_readRxBuf(rx_msg, RX_MSG_BYTES);
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	210a      	movs	r1, #10
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fa53 	bl	8006a78 <cc110_readRxBuf>
        log_info("MSG: %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x ", rx_msg[0], rx_msg[1],
 80065d2:	7d3b      	ldrb	r3, [r7, #20]
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	7d7a      	ldrb	r2, [r7, #21]
 80065d8:	7db9      	ldrb	r1, [r7, #22]
 80065da:	7df8      	ldrb	r0, [r7, #23]
 80065dc:	7e3c      	ldrb	r4, [r7, #24]
 80065de:	7e7d      	ldrb	r5, [r7, #25]
 80065e0:	7ebe      	ldrb	r6, [r7, #26]
 80065e2:	f897 c01b 	ldrb.w	ip, [r7, #27]
 80065e6:	f8c7 c008 	str.w	ip, [r7, #8]
 80065ea:	f897 c01c 	ldrb.w	ip, [r7, #28]
 80065ee:	f8c7 c004 	str.w	ip, [r7, #4]
 80065f2:	f897 c01d 	ldrb.w	ip, [r7, #29]
 80065f6:	4663      	mov	r3, ip
 80065f8:	9309      	str	r3, [sp, #36]	; 0x24
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	9308      	str	r3, [sp, #32]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	9307      	str	r3, [sp, #28]
 8006602:	9606      	str	r6, [sp, #24]
 8006604:	9505      	str	r5, [sp, #20]
 8006606:	9404      	str	r4, [sp, #16]
 8006608:	9003      	str	r0, [sp, #12]
 800660a:	9102      	str	r1, [sp, #8]
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4b44      	ldr	r3, [pc, #272]	; (8006724 <cc110_test+0x1cc>)
 8006614:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8006618:	493f      	ldr	r1, [pc, #252]	; (8006718 <cc110_test+0x1c0>)
 800661a:	2003      	movs	r0, #3
 800661c:	f001 fb44 	bl	8007ca8 <log_event>
                 rx_msg[2], rx_msg[3], rx_msg[4], rx_msg[5], rx_msg[6], rx_msg[7], rx_msg[8],
                 rx_msg[9]);
        log_info("MSG: %c%c%c%c%c%c%c%c%c%c", rx_msg[0], rx_msg[1], rx_msg[2], rx_msg[3], rx_msg[4],
 8006620:	7d3b      	ldrb	r3, [r7, #20]
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	7d7a      	ldrb	r2, [r7, #21]
 8006626:	7db9      	ldrb	r1, [r7, #22]
 8006628:	7df8      	ldrb	r0, [r7, #23]
 800662a:	7e3c      	ldrb	r4, [r7, #24]
 800662c:	7e7d      	ldrb	r5, [r7, #25]
 800662e:	7ebe      	ldrb	r6, [r7, #26]
 8006630:	f897 c01b 	ldrb.w	ip, [r7, #27]
 8006634:	f8c7 c008 	str.w	ip, [r7, #8]
 8006638:	f897 c01c 	ldrb.w	ip, [r7, #28]
 800663c:	f8c7 c004 	str.w	ip, [r7, #4]
 8006640:	f897 c01d 	ldrb.w	ip, [r7, #29]
 8006644:	4663      	mov	r3, ip
 8006646:	9309      	str	r3, [sp, #36]	; 0x24
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	9308      	str	r3, [sp, #32]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	9307      	str	r3, [sp, #28]
 8006650:	9606      	str	r6, [sp, #24]
 8006652:	9505      	str	r5, [sp, #20]
 8006654:	9404      	str	r4, [sp, #16]
 8006656:	9003      	str	r0, [sp, #12]
 8006658:	9102      	str	r1, [sp, #8]
 800665a:	9201      	str	r2, [sp, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	4b31      	ldr	r3, [pc, #196]	; (8006728 <cc110_test+0x1d0>)
 8006662:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006666:	492c      	ldr	r1, [pc, #176]	; (8006718 <cc110_test+0x1c0>)
 8006668:	2003      	movs	r0, #3
 800666a:	f001 fb1d 	bl	8007ca8 <log_event>
                 rx_msg[5], rx_msg[6], rx_msg[7], rx_msg[8], rx_msg[9]);

        tx_once = 0;
 800666e:	4b2f      	ldr	r3, [pc, #188]	; (800672c <cc110_test+0x1d4>)
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
                log_info("CC110 in %x state", CC110_STATUS_DATA.STATE);
            }
            tx_once = 1;
        }
    }
}
 8006674:	e03f      	b.n	80066f6 <cc110_test+0x19e>
        if ((cc110_connectedStatus == CC110_OK))
 8006676:	4b2e      	ldr	r3, [pc, #184]	; (8006730 <cc110_test+0x1d8>)
 8006678:	f993 3000 	ldrsb.w	r3, [r3]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d13a      	bne.n	80066f6 <cc110_test+0x19e>
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	4820      	ldr	r0, [pc, #128]	; (8006708 <cc110_test+0x1b0>)
 8006686:	f7fa ff8b 	bl	80015a0 <HAL_GPIO_WritePin>
            cc110_getStatus();
 800668a:	f000 fe93 	bl	80073b4 <cc110_getStatus>
                log_info("Writing %s to tx cbuf and tx'ing", msg);
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <cc110_test+0x1dc>)
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	4b29      	ldr	r3, [pc, #164]	; (8006738 <cc110_test+0x1e0>)
 8006694:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006698:	491f      	ldr	r1, [pc, #124]	; (8006718 <cc110_test+0x1c0>)
 800669a:	2003      	movs	r0, #3
 800669c:	f001 fb04 	bl	8007ca8 <log_event>
                cc110_writeTxBuf(msg, ustrlen(msg));
 80066a0:	4824      	ldr	r0, [pc, #144]	; (8006734 <cc110_test+0x1dc>)
 80066a2:	f7ff ff01 	bl	80064a8 <ustrlen>
 80066a6:	4603      	mov	r3, r0
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	4821      	ldr	r0, [pc, #132]	; (8006734 <cc110_test+0x1dc>)
 80066ae:	f000 f98b 	bl	80069c8 <cc110_writeTxBuf>
            cc110_txRxStatus = CC110_TXRX_TX;
 80066b2:	4b16      	ldr	r3, [pc, #88]	; (800670c <cc110_test+0x1b4>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
            if (CC110_STATUS_DATA.STATE == CC110_STATUS_BYTE_STATE_TX)
 80066b8:	4b18      	ldr	r3, [pc, #96]	; (800671c <cc110_test+0x1c4>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d107      	bne.n	80066d6 <cc110_test+0x17e>
                log_info("CC110 in TX state");
 80066c6:	4b1d      	ldr	r3, [pc, #116]	; (800673c <cc110_test+0x1e4>)
 80066c8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80066cc:	4912      	ldr	r1, [pc, #72]	; (8006718 <cc110_test+0x1c0>)
 80066ce:	2003      	movs	r0, #3
 80066d0:	f001 faea 	bl	8007ca8 <log_event>
 80066d4:	e00c      	b.n	80066f0 <cc110_test+0x198>
                log_info("CC110 in %x state", CC110_STATUS_DATA.STATE);
 80066d6:	4b11      	ldr	r3, [pc, #68]	; (800671c <cc110_test+0x1c4>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	4b17      	ldr	r3, [pc, #92]	; (8006740 <cc110_test+0x1e8>)
 80066e4:	f44f 7299 	mov.w	r2, #306	; 0x132
 80066e8:	490b      	ldr	r1, [pc, #44]	; (8006718 <cc110_test+0x1c0>)
 80066ea:	2003      	movs	r0, #3
 80066ec:	f001 fadc 	bl	8007ca8 <log_event>
            tx_once = 1;
 80066f0:	4b0e      	ldr	r3, [pc, #56]	; (800672c <cc110_test+0x1d4>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	3724      	adds	r7, #36	; 0x24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000
 8006704:	20002f25 	.word	0x20002f25
 8006708:	40020000 	.word	0x40020000
 800670c:	20000e80 	.word	0x20000e80
 8006710:	20000e7e 	.word	0x20000e7e
 8006714:	08009a98 	.word	0x08009a98
 8006718:	08009a60 	.word	0x08009a60
 800671c:	20000dbc 	.word	0x20000dbc
 8006720:	08009aa8 	.word	0x08009aa8
 8006724:	08009ab4 	.word	0x08009ab4
 8006728:	08009aec 	.word	0x08009aec
 800672c:	20002f26 	.word	0x20002f26
 8006730:	2000000c 	.word	0x2000000c
 8006734:	20000010 	.word	0x20000010
 8006738:	08009b08 	.word	0x08009b08
 800673c:	08009b2c 	.word	0x08009b2c
 8006740:	08009b40 	.word	0x08009b40

08006744 <cc110_txrx>:
// This function should be called in a timer ISR that is set to trigger at a 33.784 kHz rate (~67.5 kbps OTA)
// TX/RX DMA Complete callback should reset the Spi_DmaTxRxComplete flag
// Every time this function is called the next available data from the tx buf will be transmitted and the
// last data received from the CC110 will be put into the rx buf
void cc110_txrx(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
    static uint8_t rx_bytes_avaiable_previous;
    static uint8_t rx_data_ready = 0;
    static uint8_t dma_index = 0;

    // Check for previous transfer complete
    if (Spi_DmaTxRxComplete != 1)
 8006748:	4b86      	ldr	r3, [pc, #536]	; (8006964 <cc110_txrx+0x220>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	d007      	beq.n	8006762 <cc110_txrx+0x1e>
    {
        log_error("SPI DMA TxRx not complete!");
 8006752:	4b85      	ldr	r3, [pc, #532]	; (8006968 <cc110_txrx+0x224>)
 8006754:	f240 1249 	movw	r2, #329	; 0x149
 8006758:	4984      	ldr	r1, [pc, #528]	; (800696c <cc110_txrx+0x228>)
 800675a:	2001      	movs	r0, #1
 800675c:	f001 faa4 	bl	8007ca8 <log_event>
            default:
                rx_data_ready = 0; // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
                break;
        }
    }
}
 8006760:	e0fd      	b.n	800695e <cc110_txrx+0x21a>
    else if (Spi_Busy != 0)
 8006762:	4b83      	ldr	r3, [pc, #524]	; (8006970 <cc110_txrx+0x22c>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 80f8 	bne.w	800695e <cc110_txrx+0x21a>
        switch (cc110_txRxStatus)
 800676e:	4b81      	ldr	r3, [pc, #516]	; (8006974 <cc110_txrx+0x230>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d008      	beq.n	8006788 <cc110_txrx+0x44>
 8006776:	2b02      	cmp	r3, #2
 8006778:	d069      	beq.n	800684e <cc110_txrx+0x10a>
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 80ea 	bne.w	8006954 <cc110_txrx+0x210>
                rx_data_ready = 0; // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
 8006780:	4b7d      	ldr	r3, [pc, #500]	; (8006978 <cc110_txrx+0x234>)
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
                break;
 8006786:	e0ea      	b.n	800695e <cc110_txrx+0x21a>
                rx_data_ready = 0; // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
 8006788:	4b7b      	ldr	r3, [pc, #492]	; (8006978 <cc110_txrx+0x234>)
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
                CC110_TXBYTES_DATA.data = cc110_burstReadRegister(CC110_TXBYTES_ADDR);
 800678e:	203a      	movs	r0, #58	; 0x3a
 8006790:	f000 fac4 	bl	8006d1c <cc110_burstReadRegister>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	4b78      	ldr	r3, [pc, #480]	; (800697c <cc110_txrx+0x238>)
 800679a:	701a      	strb	r2, [r3, #0]
                tx_bytes_free = CC110_FIFO_SIZE - CC110_TXBYTES_DATA.NUM_TXBYTES;
 800679c:	4b77      	ldr	r3, [pc, #476]	; (800697c <cc110_txrx+0x238>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	4b74      	ldr	r3, [pc, #464]	; (8006980 <cc110_txrx+0x23c>)
 80067ae:	701a      	strb	r2, [r3, #0]
                if (CC110_STATUS_DATA.STATE == CC110_STATUS_BYTE_STATE_TXFIFO_UNDERFLOW)
 80067b0:	4b74      	ldr	r3, [pc, #464]	; (8006984 <cc110_txrx+0x240>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b70      	cmp	r3, #112	; 0x70
 80067bc:	d102      	bne.n	80067c4 <cc110_txrx+0x80>
                    cc110_strobeCmd(CC110_SFTX_ADDR);
 80067be:	203b      	movs	r0, #59	; 0x3b
 80067c0:	f000 fb1c 	bl	8006dfc <cc110_strobeCmd>
                if (cc110_txBufStatus != CC110_BUF_EMPTY)
 80067c4:	4b70      	ldr	r3, [pc, #448]	; (8006988 <cc110_txrx+0x244>)
 80067c6:	f993 3000 	ldrsb.w	r3, [r3]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	f000 80c6 	beq.w	800695c <cc110_txrx+0x218>
                    cc110_dmaBufTx[0] = CC110_BURST_WRITE | CC110_TXFIFO_ADDR;
 80067d0:	4b6e      	ldr	r3, [pc, #440]	; (800698c <cc110_txrx+0x248>)
 80067d2:	227f      	movs	r2, #127	; 0x7f
 80067d4:	701a      	strb	r2, [r3, #0]
                    dma_index = 1;
 80067d6:	4b6e      	ldr	r3, [pc, #440]	; (8006990 <cc110_txrx+0x24c>)
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
                    while ((cc110_txBufReadIndex != cc110_txBufWriteIndex)
 80067dc:	e015      	b.n	800680a <cc110_txrx+0xc6>
                        cc110_dmaBufTx[dma_index] = cc110_txBuf[cc110_txBufReadIndex];
 80067de:	4b6d      	ldr	r3, [pc, #436]	; (8006994 <cc110_txrx+0x250>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a6b      	ldr	r2, [pc, #428]	; (8006990 <cc110_txrx+0x24c>)
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	4611      	mov	r1, r2
 80067e8:	4a6b      	ldr	r2, [pc, #428]	; (8006998 <cc110_txrx+0x254>)
 80067ea:	5cd2      	ldrb	r2, [r2, r3]
 80067ec:	4b67      	ldr	r3, [pc, #412]	; (800698c <cc110_txrx+0x248>)
 80067ee:	545a      	strb	r2, [r3, r1]
                        cc110_txBufReadIndex = (cc110_txBufReadIndex + 1) % CC110_TXRX_BUF_SIZE;
 80067f0:	4b68      	ldr	r3, [pc, #416]	; (8006994 <cc110_txrx+0x250>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067fa:	4a66      	ldr	r2, [pc, #408]	; (8006994 <cc110_txrx+0x250>)
 80067fc:	6013      	str	r3, [r2, #0]
                        dma_index++;
 80067fe:	4b64      	ldr	r3, [pc, #400]	; (8006990 <cc110_txrx+0x24c>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	b2da      	uxtb	r2, r3
 8006806:	4b62      	ldr	r3, [pc, #392]	; (8006990 <cc110_txrx+0x24c>)
 8006808:	701a      	strb	r2, [r3, #0]
                    while ((cc110_txBufReadIndex != cc110_txBufWriteIndex)
 800680a:	4b62      	ldr	r3, [pc, #392]	; (8006994 <cc110_txrx+0x250>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b63      	ldr	r3, [pc, #396]	; (800699c <cc110_txrx+0x258>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d005      	beq.n	8006822 <cc110_txrx+0xde>
                            && (dma_index < tx_bytes_free))
 8006816:	4b5e      	ldr	r3, [pc, #376]	; (8006990 <cc110_txrx+0x24c>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b59      	ldr	r3, [pc, #356]	; (8006980 <cc110_txrx+0x23c>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d3dd      	bcc.n	80067de <cc110_txrx+0x9a>
                    if (cc110_txBufReadIndex == cc110_txBufWriteIndex)
 8006822:	4b5c      	ldr	r3, [pc, #368]	; (8006994 <cc110_txrx+0x250>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b5d      	ldr	r3, [pc, #372]	; (800699c <cc110_txrx+0x258>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d102      	bne.n	8006834 <cc110_txrx+0xf0>
                        cc110_txBufStatus = CC110_BUF_EMPTY;
 800682e:	4b56      	ldr	r3, [pc, #344]	; (8006988 <cc110_txrx+0x244>)
 8006830:	2201      	movs	r2, #1
 8006832:	701a      	strb	r2, [r3, #0]
                    cc110_burstWrite(CC110_TXFIFO_ADDR, &cc110_dmaBufTx[1], dma_index - 1);
 8006834:	4b56      	ldr	r3, [pc, #344]	; (8006990 <cc110_txrx+0x24c>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	3b01      	subs	r3, #1
 800683a:	b2db      	uxtb	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	4958      	ldr	r1, [pc, #352]	; (80069a0 <cc110_txrx+0x25c>)
 8006840:	203f      	movs	r0, #63	; 0x3f
 8006842:	f000 faad 	bl	8006da0 <cc110_burstWrite>
                    cc110_strobeCmd(CC110_STX_ADDR);
 8006846:	2035      	movs	r0, #53	; 0x35
 8006848:	f000 fad8 	bl	8006dfc <cc110_strobeCmd>
                break;
 800684c:	e086      	b.n	800695c <cc110_txrx+0x218>
                cc110_getStatus();
 800684e:	f000 fdb1 	bl	80073b4 <cc110_getStatus>
                if (CC110_STATUS_DATA.STATE == CC110_STATUS_BYTE_STATE_RXFIFO_OVERFLOW)
 8006852:	4b4c      	ldr	r3, [pc, #304]	; (8006984 <cc110_txrx+0x240>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b60      	cmp	r3, #96	; 0x60
 800685e:	d105      	bne.n	800686c <cc110_txrx+0x128>
                    cc110_strobeCmd(CC110_SFRX_ADDR);
 8006860:	203a      	movs	r0, #58	; 0x3a
 8006862:	f000 facb 	bl	8006dfc <cc110_strobeCmd>
                    rx_data_ready = 0;
 8006866:	4b44      	ldr	r3, [pc, #272]	; (8006978 <cc110_txrx+0x234>)
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
                rx_bytes_avaiable_previous = rx_bytes_avaiable;
 800686c:	4b4d      	ldr	r3, [pc, #308]	; (80069a4 <cc110_txrx+0x260>)
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	4b4d      	ldr	r3, [pc, #308]	; (80069a8 <cc110_txrx+0x264>)
 8006872:	701a      	strb	r2, [r3, #0]
                CC110_RXBYTES_DATA.data = cc110_burstReadRegister(CC110_RXBYTES_ADDR);
 8006874:	203b      	movs	r0, #59	; 0x3b
 8006876:	f000 fa51 	bl	8006d1c <cc110_burstReadRegister>
 800687a:	4603      	mov	r3, r0
 800687c:	461a      	mov	r2, r3
 800687e:	4b4b      	ldr	r3, [pc, #300]	; (80069ac <cc110_txrx+0x268>)
 8006880:	701a      	strb	r2, [r3, #0]
                rx_bytes_avaiable = CC110_RXBYTES_DATA.NUM_RXBYTES;
 8006882:	4b4a      	ldr	r3, [pc, #296]	; (80069ac <cc110_txrx+0x268>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800688a:	b2db      	uxtb	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	4b45      	ldr	r3, [pc, #276]	; (80069a4 <cc110_txrx+0x260>)
 8006890:	701a      	strb	r2, [r3, #0]
                if (rx_bytes_avaiable > 0)
 8006892:	4b44      	ldr	r3, [pc, #272]	; (80069a4 <cc110_txrx+0x260>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d000      	beq.n	800689c <cc110_txrx+0x158>
                    asm("NOP");         // For breakpoint
 800689a:	bf00      	nop
                if (rx_data_ready == 1)
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <cc110_txrx+0x234>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d146      	bne.n	8006932 <cc110_txrx+0x1ee>
                    cc110_dmaBufTx[0] = CC110_BURST_READ | CC110_RXFIFO_ADDR;
 80068a4:	4b39      	ldr	r3, [pc, #228]	; (800698c <cc110_txrx+0x248>)
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	701a      	strb	r2, [r3, #0]
                    dma_index = 1;
 80068aa:	4b39      	ldr	r3, [pc, #228]	; (8006990 <cc110_txrx+0x24c>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
                            == ((cc110_rxBufReadIndex - 1 + CC110_TXRX_BUF_SIZE)
 80068b0:	4b3f      	ldr	r3, [pc, #252]	; (80069b0 <cc110_txrx+0x26c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
                                    % CC110_TXRX_BUF_SIZE))
 80068b8:	f3c3 020b 	ubfx	r2, r3, #0, #12
                            == ((cc110_rxBufReadIndex - 1 + CC110_TXRX_BUF_SIZE)
 80068bc:	4b3d      	ldr	r3, [pc, #244]	; (80069b4 <cc110_txrx+0x270>)
 80068be:	681b      	ldr	r3, [r3, #0]
                    if (cc110_rxBufWriteIndex
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d103      	bne.n	80068cc <cc110_txrx+0x188>
                        cc110_rxBufStatus = CC110_BUF_FULL;
 80068c4:	4b3c      	ldr	r3, [pc, #240]	; (80069b8 <cc110_txrx+0x274>)
 80068c6:	22ff      	movs	r2, #255	; 0xff
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	e038      	b.n	800693e <cc110_txrx+0x1fa>
                        cc110_rxBufStatus = CC110_BUF_OK;
 80068cc:	4b3a      	ldr	r3, [pc, #232]	; (80069b8 <cc110_txrx+0x274>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
                        cc110_rxBufWriteLock = CC110_BUF_WRITE_BUSY;
 80068d2:	4b3a      	ldr	r3, [pc, #232]	; (80069bc <cc110_txrx+0x278>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	701a      	strb	r2, [r3, #0]
                        while ((cc110_rxBufWriteIndex
 80068d8:	e015      	b.n	8006906 <cc110_txrx+0x1c2>
                            cc110_rxBuf[cc110_rxBufWriteIndex] = cc110_dmaBufRx[dma_index];
 80068da:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <cc110_txrx+0x24c>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	4619      	mov	r1, r3
 80068e0:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <cc110_txrx+0x270>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a36      	ldr	r2, [pc, #216]	; (80069c0 <cc110_txrx+0x27c>)
 80068e6:	5c51      	ldrb	r1, [r2, r1]
 80068e8:	4a36      	ldr	r2, [pc, #216]	; (80069c4 <cc110_txrx+0x280>)
 80068ea:	54d1      	strb	r1, [r2, r3]
                            dma_index++;
 80068ec:	4b28      	ldr	r3, [pc, #160]	; (8006990 <cc110_txrx+0x24c>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	4b26      	ldr	r3, [pc, #152]	; (8006990 <cc110_txrx+0x24c>)
 80068f6:	701a      	strb	r2, [r3, #0]
                            cc110_rxBufWriteIndex = (cc110_rxBufWriteIndex + 1)
 80068f8:	4b2e      	ldr	r3, [pc, #184]	; (80069b4 <cc110_txrx+0x270>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3301      	adds	r3, #1
                                    % CC110_TXRX_BUF_SIZE;
 80068fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
                            cc110_rxBufWriteIndex = (cc110_rxBufWriteIndex + 1)
 8006902:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <cc110_txrx+0x270>)
 8006904:	6013      	str	r3, [r2, #0]
                                != ((cc110_rxBufReadIndex - 1 + CC110_TXRX_BUF_SIZE)
 8006906:	4b2a      	ldr	r3, [pc, #168]	; (80069b0 <cc110_txrx+0x26c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
                                        % CC110_TXRX_BUF_SIZE))
 800690e:	f3c3 020b 	ubfx	r2, r3, #0, #12
                                != ((cc110_rxBufReadIndex - 1 + CC110_TXRX_BUF_SIZE)
 8006912:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <cc110_txrx+0x270>)
 8006914:	681b      	ldr	r3, [r3, #0]
                        while ((cc110_rxBufWriteIndex
 8006916:	429a      	cmp	r2, r3
 8006918:	d007      	beq.n	800692a <cc110_txrx+0x1e6>
                                && (dma_index < rx_bytes_avaiable_previous + 1))
 800691a:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <cc110_txrx+0x24c>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <cc110_txrx+0x264>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	429a      	cmp	r2, r3
 8006928:	dbd7      	blt.n	80068da <cc110_txrx+0x196>
                        cc110_rxBufWriteLock = CC110_BUF_WRITE_FREE;
 800692a:	4b24      	ldr	r3, [pc, #144]	; (80069bc <cc110_txrx+0x278>)
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	e005      	b.n	800693e <cc110_txrx+0x1fa>
                    cc110_strobeCmd(CC110_SRX_ADDR);
 8006932:	2034      	movs	r0, #52	; 0x34
 8006934:	f000 fa62 	bl	8006dfc <cc110_strobeCmd>
                    rx_data_ready = 1;       // Reset flag for data ready
 8006938:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <cc110_txrx+0x234>)
 800693a:	2201      	movs	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
                cc110_spi_xfer(cc110_dmaBufTx, cc110_dmaBufRx, rx_bytes_avaiable + 1);
 800693e:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <cc110_txrx+0x260>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	3301      	adds	r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	491d      	ldr	r1, [pc, #116]	; (80069c0 <cc110_txrx+0x27c>)
 800694c:	480f      	ldr	r0, [pc, #60]	; (800698c <cc110_txrx+0x248>)
 800694e:	f000 f8df 	bl	8006b10 <cc110_spi_xfer>
                break;
 8006952:	e004      	b.n	800695e <cc110_txrx+0x21a>
                rx_data_ready = 0; // When not in Rx mode set the flag that a new SPI xfer has to happen to have valid data
 8006954:	4b08      	ldr	r3, [pc, #32]	; (8006978 <cc110_txrx+0x234>)
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
                break;
 800695a:	e000      	b.n	800695e <cc110_txrx+0x21a>
                break;
 800695c:	bf00      	nop
}
 800695e:	bf00      	nop
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000041 	.word	0x20000041
 8006968:	08009b54 	.word	0x08009b54
 800696c:	08009a60 	.word	0x08009a60
 8006970:	200040c0 	.word	0x200040c0
 8006974:	20000e80 	.word	0x20000e80
 8006978:	20002f27 	.word	0x20002f27
 800697c:	20000ddc 	.word	0x20000ddc
 8006980:	20002f28 	.word	0x20002f28
 8006984:	20000dbc 	.word	0x20000dbc
 8006988:	2000000d 	.word	0x2000000d
 800698c:	20000e84 	.word	0x20000e84
 8006990:	20002f29 	.word	0x20002f29
 8006994:	20001f0c 	.word	0x20001f0c
 8006998:	20000f0c 	.word	0x20000f0c
 800699c:	20001f10 	.word	0x20001f10
 80069a0:	20000e85 	.word	0x20000e85
 80069a4:	20002f2a 	.word	0x20002f2a
 80069a8:	20002f2b 	.word	0x20002f2b
 80069ac:	20000de0 	.word	0x20000de0
 80069b0:	20002f18 	.word	0x20002f18
 80069b4:	20002f1c 	.word	0x20002f1c
 80069b8:	2000000e 	.word	0x2000000e
 80069bc:	20002f20 	.word	0x20002f20
 80069c0:	20000ec8 	.word	0x20000ec8
 80069c4:	20001f18 	.word	0x20001f18

080069c8 <cc110_writeTxBuf>:

void cc110_writeTxBuf(uint8_t* txData, uint16_t len)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	81fb      	strh	r3, [r7, #14]

    // Check if the Tx buf is full
    if (cc110_txBufWriteIndex
            == ((cc110_txBufReadIndex - 1 + CC110_TXRX_BUF_SIZE) % CC110_TXRX_BUF_SIZE))
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <cc110_writeTxBuf+0x94>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80069e0:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80069e4:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <cc110_writeTxBuf+0x98>)
 80069e6:	681b      	ldr	r3, [r3, #0]
    if (cc110_txBufWriteIndex
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d10a      	bne.n	8006a02 <cc110_writeTxBuf+0x3a>
    {
        cc110_txBufStatus = CC110_BUF_FULL;
 80069ec:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <cc110_writeTxBuf+0x9c>)
 80069ee:	22ff      	movs	r2, #255	; 0xff
 80069f0:	701a      	strb	r2, [r3, #0]
        log_warn("Write attempted on CC110 txBuf when full");
 80069f2:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <cc110_writeTxBuf+0xa0>)
 80069f4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80069f8:	491c      	ldr	r1, [pc, #112]	; (8006a6c <cc110_writeTxBuf+0xa4>)
 80069fa:	2002      	movs	r0, #2
 80069fc:	f001 f954 	bl	8007ca8 <log_event>
            index++;
            cc110_txBufWriteIndex = (cc110_txBufWriteIndex + 1) % CC110_TXRX_BUF_SIZE;
        }
        cc110_txBufWriteLock = CC110_BUF_WRITE_FREE;
    }
}
 8006a00:	e027      	b.n	8006a52 <cc110_writeTxBuf+0x8a>
        cc110_txBufStatus = CC110_BUF_OK;
 8006a02:	4b18      	ldr	r3, [pc, #96]	; (8006a64 <cc110_writeTxBuf+0x9c>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
        cc110_txBufWriteLock = CC110_BUF_WRITE_BUSY;
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <cc110_writeTxBuf+0xa8>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
        while ((cc110_txBufWriteIndex != ((cc110_txBufReadIndex - 1 + CC110_TXRX_BUF_SIZE)))
 8006a0e:	e011      	b.n	8006a34 <cc110_writeTxBuf+0x6c>
            cc110_txBuf[cc110_txBufWriteIndex] = txData[index];
 8006a10:	89fb      	ldrh	r3, [r7, #14]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <cc110_writeTxBuf+0x98>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	7811      	ldrb	r1, [r2, #0]
 8006a1c:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <cc110_writeTxBuf+0xac>)
 8006a1e:	54d1      	strb	r1, [r2, r3]
            index++;
 8006a20:	89fb      	ldrh	r3, [r7, #14]
 8006a22:	3301      	adds	r3, #1
 8006a24:	81fb      	strh	r3, [r7, #14]
            cc110_txBufWriteIndex = (cc110_txBufWriteIndex + 1) % CC110_TXRX_BUF_SIZE;
 8006a26:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <cc110_writeTxBuf+0x98>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a30:	4a0b      	ldr	r2, [pc, #44]	; (8006a60 <cc110_writeTxBuf+0x98>)
 8006a32:	6013      	str	r3, [r2, #0]
        while ((cc110_txBufWriteIndex != ((cc110_txBufReadIndex - 1 + CC110_TXRX_BUF_SIZE)))
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <cc110_writeTxBuf+0x94>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f603 72ff 	addw	r2, r3, #4095	; 0xfff
 8006a3c:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <cc110_writeTxBuf+0x98>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d003      	beq.n	8006a4c <cc110_writeTxBuf+0x84>
                && (index < len))
 8006a44:	89fa      	ldrh	r2, [r7, #14]
 8006a46:	887b      	ldrh	r3, [r7, #2]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d3e1      	bcc.n	8006a10 <cc110_writeTxBuf+0x48>
        cc110_txBufWriteLock = CC110_BUF_WRITE_FREE;
 8006a4c:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <cc110_writeTxBuf+0xa8>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	701a      	strb	r2, [r3, #0]
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20001f0c 	.word	0x20001f0c
 8006a60:	20001f10 	.word	0x20001f10
 8006a64:	2000000d 	.word	0x2000000d
 8006a68:	08009b70 	.word	0x08009b70
 8006a6c:	08009a60 	.word	0x08009a60
 8006a70:	20001f14 	.word	0x20001f14
 8006a74:	20000f0c 	.word	0x20000f0c

08006a78 <cc110_readRxBuf>:

void cc110_readRxBuf(uint8_t* rxData, uint16_t len)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	81fb      	strh	r3, [r7, #14]

    // Check if Rx buf is empty
    if (cc110_rxBufStatus != CC110_BUF_EMPTY)
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <cc110_readRxBuf+0x80>)
 8006a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d026      	beq.n	8006ae0 <cc110_readRxBuf+0x68>
    {
        // Copy as much data as possible to DMA buffer (bytes free in tx buffer or until tx buf is empty)
        while ((cc110_rxBufReadIndex != cc110_rxBufWriteIndex) && (index < len))
 8006a92:	e011      	b.n	8006ab8 <cc110_readRxBuf+0x40>
        {
            rxData[index] = cc110_rxBuf[cc110_rxBufReadIndex];
 8006a94:	4b19      	ldr	r3, [pc, #100]	; (8006afc <cc110_readRxBuf+0x84>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	89fb      	ldrh	r3, [r7, #14]
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	440b      	add	r3, r1
 8006a9e:	4918      	ldr	r1, [pc, #96]	; (8006b00 <cc110_readRxBuf+0x88>)
 8006aa0:	5c8a      	ldrb	r2, [r1, r2]
 8006aa2:	701a      	strb	r2, [r3, #0]
            cc110_rxBufReadIndex = (cc110_rxBufReadIndex + 1) % CC110_TXRX_BUF_SIZE;
 8006aa4:	4b15      	ldr	r3, [pc, #84]	; (8006afc <cc110_readRxBuf+0x84>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aae:	4a13      	ldr	r2, [pc, #76]	; (8006afc <cc110_readRxBuf+0x84>)
 8006ab0:	6013      	str	r3, [r2, #0]
            index++;
 8006ab2:	89fb      	ldrh	r3, [r7, #14]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	81fb      	strh	r3, [r7, #14]
        while ((cc110_rxBufReadIndex != cc110_rxBufWriteIndex) && (index < len))
 8006ab8:	4b10      	ldr	r3, [pc, #64]	; (8006afc <cc110_readRxBuf+0x84>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <cc110_readRxBuf+0x8c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d003      	beq.n	8006acc <cc110_readRxBuf+0x54>
 8006ac4:	89fa      	ldrh	r2, [r7, #14]
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d3e3      	bcc.n	8006a94 <cc110_readRxBuf+0x1c>
        }

        // Update buffer status if we emptied the whole buffer
        if (cc110_rxBufReadIndex == cc110_rxBufWriteIndex)
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <cc110_readRxBuf+0x84>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <cc110_readRxBuf+0x8c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d10a      	bne.n	8006aee <cc110_readRxBuf+0x76>
        {
            cc110_rxBufStatus = CC110_BUF_EMPTY;
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <cc110_readRxBuf+0x80>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        log_warn("Read attempted on CC110 rxBuf when empty");
    }
}
 8006ade:	e006      	b.n	8006aee <cc110_readRxBuf+0x76>
        log_warn("Read attempted on CC110 rxBuf when empty");
 8006ae0:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <cc110_readRxBuf+0x90>)
 8006ae2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8006ae6:	4909      	ldr	r1, [pc, #36]	; (8006b0c <cc110_readRxBuf+0x94>)
 8006ae8:	2002      	movs	r0, #2
 8006aea:	f001 f8dd 	bl	8007ca8 <log_event>
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	2000000e 	.word	0x2000000e
 8006afc:	20002f18 	.word	0x20002f18
 8006b00:	20001f18 	.word	0x20001f18
 8006b04:	20002f1c 	.word	0x20002f1c
 8006b08:	08009b9c 	.word	0x08009b9c
 8006b0c:	08009a60 	.word	0x08009a60

08006b10 <cc110_spi_xfer>:

/* Private function definitions ----------------------------------------------*/
static inline void cc110_spi_xfer(uint8_t* txData, uint8_t* rxData, uint16_t len)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
    Spi_start();
 8006b1e:	f001 fcc9 	bl	80084b4 <Spi_start>
    HAL_SPI_TransmitReceive(&hspi2, txData, rxData, len, HAL_MAX_DELAY);
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	68f9      	ldr	r1, [r7, #12]
 8006b30:	4804      	ldr	r0, [pc, #16]	; (8006b44 <cc110_spi_xfer+0x34>)
 8006b32:	f7fb fb99 	bl	8002268 <HAL_SPI_TransmitReceive>
    Spi_stop();
 8006b36:	f001 fce1 	bl	80084fc <Spi_stop>
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20004178 	.word	0x20004178

08006b48 <cc110_reset>:

static int8_t cc110_reset(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
    // TODO: Fix retval stuff & make timeouts shorter
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006b4e:	463b      	mov	r3, r7
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	609a      	str	r2, [r3, #8]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	611a      	str	r2, [r3, #16]
    static const uint8_t timeoutMs = 10;
    static uint8_t timeMs = 0;
    int8_t retval = CC110_OK;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]

    // De-init SPI, set SCK output, 1; MOSI output, 0; MISO input
    HAL_SPI_MspDeInit(&hspi2);
 8006b60:	4854      	ldr	r0, [pc, #336]	; (8006cb4 <cc110_reset+0x16c>)
 8006b62:	f001 fc75 	bl	8008450 <HAL_SPI_MspDeInit>

    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8006b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b6a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SPI2_SCK_Port, &GPIO_InitStruct);
 8006b78:	463b      	mov	r3, r7
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	484e      	ldr	r0, [pc, #312]	; (8006cb8 <cc110_reset+0x170>)
 8006b7e:	f7fa fa63 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8006b82:	2308      	movs	r3, #8
 8006b84:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b86:	2301      	movs	r3, #1
 8006b88:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SPI2_MOSI_Port, &GPIO_InitStruct);
 8006b92:	463b      	mov	r3, r7
 8006b94:	4619      	mov	r1, r3
 8006b96:	4849      	ldr	r0, [pc, #292]	; (8006cbc <cc110_reset+0x174>)
 8006b98:	f7fa fa56 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin;
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(SPI2_MISO_Port, &GPIO_InitStruct);
 8006ba8:	463b      	mov	r3, r7
 8006baa:	4619      	mov	r1, r3
 8006bac:	4843      	ldr	r0, [pc, #268]	; (8006cbc <cc110_reset+0x174>)
 8006bae:	f7fa fa4b 	bl	8001048 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(SPI2_SCK_Port, SPI2_SCK_Pin, GPIO_PIN_SET);
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bb8:	483f      	ldr	r0, [pc, #252]	; (8006cb8 <cc110_reset+0x170>)
 8006bba:	f7fa fcf1 	bl	80015a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f7f9 fd20 	bl	8000604 <HAL_Delay>
    HAL_GPIO_WritePin(SPI2_MOSI_Port, SPI2_MOSI_Pin, GPIO_PIN_RESET);
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2108      	movs	r1, #8
 8006bc8:	483c      	ldr	r0, [pc, #240]	; (8006cbc <cc110_reset+0x174>)
 8006bca:	f7fa fce9 	bl	80015a0 <HAL_GPIO_WritePin>

    // Strobe CSn Low/High, Hold CSn High for min 40 usec
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bd4:	4838      	ldr	r0, [pc, #224]	; (8006cb8 <cc110_reset+0x170>)
 8006bd6:	f7fa fce3 	bl	80015a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f7f9 fd12 	bl	8000604 <HAL_Delay>
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8006be0:	2201      	movs	r2, #1
 8006be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006be6:	4834      	ldr	r0, [pc, #208]	; (8006cb8 <cc110_reset+0x170>)
 8006be8:	f7fa fcda 	bl	80015a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006bec:	2001      	movs	r0, #1
 8006bee:	f7f9 fd09 	bl	8000604 <HAL_Delay>

    // Pull CSn Low and wait for MISO to go low
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bf8:	482f      	ldr	r0, [pc, #188]	; (8006cb8 <cc110_reset+0x170>)
 8006bfa:	f7fa fcd1 	bl	80015a0 <HAL_GPIO_WritePin>
    while ((HAL_GPIO_ReadPin(SPI2_MISO_Port, SPI2_MISO_Pin) != GPIO_PIN_RESET)
 8006bfe:	e008      	b.n	8006c12 <cc110_reset+0xca>
            && (timeMs < timeoutMs))
    {
        HAL_Delay(1);
 8006c00:	2001      	movs	r0, #1
 8006c02:	f7f9 fcff 	bl	8000604 <HAL_Delay>
        timeMs++;
 8006c06:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <cc110_reset+0x178>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <cc110_reset+0x178>)
 8006c10:	701a      	strb	r2, [r3, #0]
    while ((HAL_GPIO_ReadPin(SPI2_MISO_Port, SPI2_MISO_Pin) != GPIO_PIN_RESET)
 8006c12:	2104      	movs	r1, #4
 8006c14:	4829      	ldr	r0, [pc, #164]	; (8006cbc <cc110_reset+0x174>)
 8006c16:	f7fa fcab 	bl	8001570 <HAL_GPIO_ReadPin>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <cc110_reset+0xe4>
            && (timeMs < timeoutMs))
 8006c20:	4b27      	ldr	r3, [pc, #156]	; (8006cc0 <cc110_reset+0x178>)
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <cc110_reset+0x17c>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d3e9      	bcc.n	8006c00 <cc110_reset+0xb8>
    }
    if (timeMs >= timeoutMs)
 8006c2c:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <cc110_reset+0x178>)
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <cc110_reset+0x17c>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d308      	bcc.n	8006c4a <cc110_reset+0x102>
    {
        retval = CC110_FAIL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]
        log_warn("Timed out waiting for MISO to go low");
 8006c3c:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <cc110_reset+0x180>)
 8006c3e:	f240 2249 	movw	r2, #585	; 0x249
 8006c42:	4922      	ldr	r1, [pc, #136]	; (8006ccc <cc110_reset+0x184>)
 8006c44:	2002      	movs	r0, #2
 8006c46:	f001 f82f 	bl	8007ca8 <log_event>
    }

    // Re-init SPI
    HAL_SPI_MspInit(&hspi2);
 8006c4a:	481a      	ldr	r0, [pc, #104]	; (8006cb4 <cc110_reset+0x16c>)
 8006c4c:	f001 fb2a 	bl	80082a4 <HAL_SPI_MspInit>

    // Issues SRES strobe
    cc110_strobeCmd(CC110_SRES_ADDR);
 8006c50:	2030      	movs	r0, #48	; 0x30
 8006c52:	f000 f8d3 	bl	8006dfc <cc110_strobeCmd>

    // Poll for CC110 status via NOP strobes until Status == 0x0F
    timeMs = 0;
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <cc110_reset+0x178>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
    while ((CC110_STATUS_DATA.data != 0x0F) && (timeMs < timeoutMs))
 8006c5c:	e00b      	b.n	8006c76 <cc110_reset+0x12e>
    {
        cc110_strobeCmd(CC110_SNOP_ADDR);
 8006c5e:	203d      	movs	r0, #61	; 0x3d
 8006c60:	f000 f8cc 	bl	8006dfc <cc110_strobeCmd>
        HAL_Delay(1);
 8006c64:	2001      	movs	r0, #1
 8006c66:	f7f9 fccd 	bl	8000604 <HAL_Delay>
        timeMs++;
 8006c6a:	4b15      	ldr	r3, [pc, #84]	; (8006cc0 <cc110_reset+0x178>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <cc110_reset+0x178>)
 8006c74:	701a      	strb	r2, [r3, #0]
    while ((CC110_STATUS_DATA.data != 0x0F) && (timeMs < timeoutMs))
 8006c76:	4b16      	ldr	r3, [pc, #88]	; (8006cd0 <cc110_reset+0x188>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d005      	beq.n	8006c8a <cc110_reset+0x142>
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <cc110_reset+0x178>)
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <cc110_reset+0x17c>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d3e9      	bcc.n	8006c5e <cc110_reset+0x116>
    }

    if (timeMs >= timeoutMs)
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <cc110_reset+0x178>)
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <cc110_reset+0x17c>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d308      	bcc.n	8006ca8 <cc110_reset+0x160>
    {
        retval = CC110_FAIL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]
        ;
        log_warn("Timed out waiting for STATUS == 0x0F");
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <cc110_reset+0x18c>)
 8006c9c:	f240 225f 	movw	r2, #607	; 0x25f
 8006ca0:	490a      	ldr	r1, [pc, #40]	; (8006ccc <cc110_reset+0x184>)
 8006ca2:	2002      	movs	r0, #2
 8006ca4:	f001 f800 	bl	8007ca8 <log_event>
    }

    return (retval);
 8006ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20004178 	.word	0x20004178
 8006cb8:	40020400 	.word	0x40020400
 8006cbc:	40020800 	.word	0x40020800
 8006cc0:	20002fb1 	.word	0x20002fb1
 8006cc4:	0800a340 	.word	0x0800a340
 8006cc8:	08009bc8 	.word	0x08009bc8
 8006ccc:	08009a60 	.word	0x08009a60
 8006cd0:	20000dbc 	.word	0x20000dbc
 8006cd4:	08009bf0 	.word	0x08009bf0

08006cd8 <cc110_readRegister>:

static inline uint8_t cc110_readRegister(uint8_t addr)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
    uint8_t tx_buf[2] = {
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	733b      	strb	r3, [r7, #12]
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	737b      	strb	r3, [r7, #13]
    CC110_BYTE_READ | addr, tmp };
    uint8_t rx_buf[2] = { 0 };
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	813b      	strh	r3, [r7, #8]

    cc110_spi_xfer(tx_buf, rx_buf, 2);
 8006cf8:	f107 0108 	add.w	r1, r7, #8
 8006cfc:	f107 030c 	add.w	r3, r7, #12
 8006d00:	2202      	movs	r2, #2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff ff04 	bl	8006b10 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8006d08:	7a3a      	ldrb	r2, [r7, #8]
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <cc110_readRegister+0x40>)
 8006d0c:	701a      	strb	r2, [r3, #0]
    return (rx_buf[1]);
 8006d0e:	7a7b      	ldrb	r3, [r7, #9]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000dbc 	.word	0x20000dbc

08006d1c <cc110_burstReadRegister>:

static inline uint8_t cc110_burstReadRegister(uint8_t addr)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
    uint8_t tx_buf[2] = {
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	733b      	strb	r3, [r7, #12]
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	737b      	strb	r3, [r7, #13]
    CC110_BURST_READ | addr, tmp };
    uint8_t rx_buf[2] = { 0 };
 8006d38:	2300      	movs	r3, #0
 8006d3a:	813b      	strh	r3, [r7, #8]

    cc110_spi_xfer(tx_buf, rx_buf, 2);
 8006d3c:	f107 0108 	add.w	r1, r7, #8
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	2202      	movs	r2, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fee2 	bl	8006b10 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8006d4c:	7a3a      	ldrb	r2, [r7, #8]
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <cc110_burstReadRegister+0x40>)
 8006d50:	701a      	strb	r2, [r3, #0]
    return (rx_buf[1]);
 8006d52:	7a7b      	ldrb	r3, [r7, #9]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000dbc 	.word	0x20000dbc

08006d60 <cc110_writeRegister>:

static inline void cc110_writeRegister(uint8_t addr, uint8_t data)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	460a      	mov	r2, r1
 8006d6a:	71fb      	strb	r3, [r7, #7]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[2] = { CC110_BYTE_WRITE | addr, data };
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	733b      	strb	r3, [r7, #12]
 8006d74:	79bb      	ldrb	r3, [r7, #6]
 8006d76:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf[2] = { 0 };
 8006d78:	2300      	movs	r3, #0
 8006d7a:	813b      	strh	r3, [r7, #8]

    cc110_spi_xfer(tx_buf, rx_buf, 2);
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	f107 030c 	add.w	r3, r7, #12
 8006d84:	2202      	movs	r2, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff fec2 	bl	8006b10 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8006d8c:	7a3a      	ldrb	r2, [r7, #8]
 8006d8e:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <cc110_writeRegister+0x3c>)
 8006d90:	701a      	strb	r2, [r3, #0]
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000dbc 	.word	0x20000dbc

08006da0 <cc110_burstWrite>:

static inline void cc110_burstWrite(uint8_t addr, uint8_t* data, uint8_t len)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	71fb      	strb	r3, [r7, #7]
 8006dac:	4613      	mov	r3, r2
 8006dae:	71bb      	strb	r3, [r7, #6]
    static uint8_t rx_buf[CC110_FIFO_SIZE + 1];
    static uint8_t tx_buf[CC110_FIFO_SIZE + 1];
    tx_buf[0] = CC110_BURST_WRITE | addr;
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <cc110_burstWrite+0x4c>)
 8006dba:	701a      	strb	r2, [r3, #0]

    // Copy into FIFO
    memcpy(&tx_buf[1], data, len);
 8006dbc:	79bb      	ldrb	r3, [r7, #6]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	480b      	ldr	r0, [pc, #44]	; (8006df0 <cc110_burstWrite+0x50>)
 8006dc4:	f001 fee8 	bl	8008b98 <memcpy>

    // Write FIFO to CC110
    cc110_spi_xfer(tx_buf, rx_buf, len + 1);
 8006dc8:	79bb      	ldrb	r3, [r7, #6]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4908      	ldr	r1, [pc, #32]	; (8006df4 <cc110_burstWrite+0x54>)
 8006dd4:	4805      	ldr	r0, [pc, #20]	; (8006dec <cc110_burstWrite+0x4c>)
 8006dd6:	f7ff fe9b 	bl	8006b10 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8006dda:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <cc110_burstWrite+0x54>)
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <cc110_burstWrite+0x58>)
 8006de0:	701a      	strb	r2, [r3, #0]
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20002f2c 	.word	0x20002f2c
 8006df0:	20002f2d 	.word	0x20002f2d
 8006df4:	20002f70 	.word	0x20002f70
 8006df8:	20000dbc 	.word	0x20000dbc

08006dfc <cc110_strobeCmd>:

static inline void cc110_strobeCmd(uint8_t cmd)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	71fb      	strb	r3, [r7, #7]
    static uint8_t rx_buf[1];
    cmd = cmd | CC110_BYTE_WRITE;
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	71fb      	strb	r3, [r7, #7]
    cc110_spi_xfer(&cmd, rx_buf, 1);
 8006e0a:	1dfb      	adds	r3, r7, #7
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4906      	ldr	r1, [pc, #24]	; (8006e28 <cc110_strobeCmd+0x2c>)
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fe7d 	bl	8006b10 <cc110_spi_xfer>
    CC110_STATUS_DATA.data = rx_buf[0];
 8006e16:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <cc110_strobeCmd+0x2c>)
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <cc110_strobeCmd+0x30>)
 8006e1c:	701a      	strb	r2, [r3, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20002f24 	.word	0x20002f24
 8006e2c:	20000dbc 	.word	0x20000dbc

08006e30 <cc110_dumpRegisters>:

static void cc110_dumpRegisters(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af02      	add	r7, sp, #8
    cc110_getStatus();
 8006e36:	f000 fabd 	bl	80073b4 <cc110_getStatus>
    cc110_getConfig();
 8006e3a:	f000 fb2f 	bl	800749c <cc110_getConfig>

    // Dump status registers
    log_info("=== CC110 STATUS REGISTERS ===");
 8006e3e:	4baa      	ldr	r3, [pc, #680]	; (80070e8 <cc110_dumpRegisters+0x2b8>)
 8006e40:	f240 22a2 	movw	r2, #674	; 0x2a2
 8006e44:	49a9      	ldr	r1, [pc, #676]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006e46:	2003      	movs	r0, #3
 8006e48:	f000 ff2e 	bl	8007ca8 <log_event>
    log_info("CC110_PARTNUM_DATA: %02x", CC110_PARTNUM_DATA.data);
 8006e4c:	4ba8      	ldr	r3, [pc, #672]	; (80070f0 <cc110_dumpRegisters+0x2c0>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4ba8      	ldr	r3, [pc, #672]	; (80070f4 <cc110_dumpRegisters+0x2c4>)
 8006e54:	f240 22a3 	movw	r2, #675	; 0x2a3
 8006e58:	49a4      	ldr	r1, [pc, #656]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006e5a:	2003      	movs	r0, #3
 8006e5c:	f000 ff24 	bl	8007ca8 <log_event>
    log_info("CC110_VERSION_DATA: %02x", CC110_VERSION_DATA.data);
 8006e60:	4ba5      	ldr	r3, [pc, #660]	; (80070f8 <cc110_dumpRegisters+0x2c8>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	4ba5      	ldr	r3, [pc, #660]	; (80070fc <cc110_dumpRegisters+0x2cc>)
 8006e68:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 8006e6c:	499f      	ldr	r1, [pc, #636]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006e6e:	2003      	movs	r0, #3
 8006e70:	f000 ff1a 	bl	8007ca8 <log_event>
    log_info("CC110_FREQEST_DATA: %02x", CC110_FREQEST_DATA.data);
 8006e74:	4ba2      	ldr	r3, [pc, #648]	; (8007100 <cc110_dumpRegisters+0x2d0>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	4ba2      	ldr	r3, [pc, #648]	; (8007104 <cc110_dumpRegisters+0x2d4>)
 8006e7c:	f240 22a5 	movw	r2, #677	; 0x2a5
 8006e80:	499a      	ldr	r1, [pc, #616]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006e82:	2003      	movs	r0, #3
 8006e84:	f000 ff10 	bl	8007ca8 <log_event>
    log_info("CC110_CRCOK_DATA: %02x", CC110_CRCOK_DATA.data);
 8006e88:	4b9f      	ldr	r3, [pc, #636]	; (8007108 <cc110_dumpRegisters+0x2d8>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4b9f      	ldr	r3, [pc, #636]	; (800710c <cc110_dumpRegisters+0x2dc>)
 8006e90:	f240 22a6 	movw	r2, #678	; 0x2a6
 8006e94:	4995      	ldr	r1, [pc, #596]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006e96:	2003      	movs	r0, #3
 8006e98:	f000 ff06 	bl	8007ca8 <log_event>
    log_info("CC110_RSSI_DATA: %02x", CC110_RSSI_DATA.data);
 8006e9c:	4b9c      	ldr	r3, [pc, #624]	; (8007110 <cc110_dumpRegisters+0x2e0>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4b9c      	ldr	r3, [pc, #624]	; (8007114 <cc110_dumpRegisters+0x2e4>)
 8006ea4:	f240 22a7 	movw	r2, #679	; 0x2a7
 8006ea8:	4990      	ldr	r1, [pc, #576]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006eaa:	2003      	movs	r0, #3
 8006eac:	f000 fefc 	bl	8007ca8 <log_event>
    log_info("CC110_MARCSTATE_DATA: %02x", CC110_MARCSTATE_DATA.data);
 8006eb0:	4b99      	ldr	r3, [pc, #612]	; (8007118 <cc110_dumpRegisters+0x2e8>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	4b99      	ldr	r3, [pc, #612]	; (800711c <cc110_dumpRegisters+0x2ec>)
 8006eb8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8006ebc:	498b      	ldr	r1, [pc, #556]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006ebe:	2003      	movs	r0, #3
 8006ec0:	f000 fef2 	bl	8007ca8 <log_event>
    log_info("CC110_PKTSTATUS_DATA: %02x", CC110_PKTSTATUS_DATA.data);
 8006ec4:	4b96      	ldr	r3, [pc, #600]	; (8007120 <cc110_dumpRegisters+0x2f0>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	4b96      	ldr	r3, [pc, #600]	; (8007124 <cc110_dumpRegisters+0x2f4>)
 8006ecc:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006ed0:	4986      	ldr	r1, [pc, #536]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006ed2:	2003      	movs	r0, #3
 8006ed4:	f000 fee8 	bl	8007ca8 <log_event>
    log_info("CC110_TXBYTES_DATA: %02x", CC110_TXBYTES_DATA.data);
 8006ed8:	4b93      	ldr	r3, [pc, #588]	; (8007128 <cc110_dumpRegisters+0x2f8>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	4b93      	ldr	r3, [pc, #588]	; (800712c <cc110_dumpRegisters+0x2fc>)
 8006ee0:	f240 22aa 	movw	r2, #682	; 0x2aa
 8006ee4:	4981      	ldr	r1, [pc, #516]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006ee6:	2003      	movs	r0, #3
 8006ee8:	f000 fede 	bl	8007ca8 <log_event>
    log_info("CC110_RXBYTES_DATA: %02x", CC110_RXBYTES_DATA.data);
 8006eec:	4b90      	ldr	r3, [pc, #576]	; (8007130 <cc110_dumpRegisters+0x300>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4b90      	ldr	r3, [pc, #576]	; (8007134 <cc110_dumpRegisters+0x304>)
 8006ef4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006ef8:	497c      	ldr	r1, [pc, #496]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006efa:	2003      	movs	r0, #3
 8006efc:	f000 fed4 	bl	8007ca8 <log_event>

    // Dump config registers
    log_info("=== CC110 CONFIG REGISTERS ===");
 8006f00:	4b8d      	ldr	r3, [pc, #564]	; (8007138 <cc110_dumpRegisters+0x308>)
 8006f02:	f240 22ae 	movw	r2, #686	; 0x2ae
 8006f06:	4979      	ldr	r1, [pc, #484]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f08:	2003      	movs	r0, #3
 8006f0a:	f000 fecd 	bl	8007ca8 <log_event>
    log_info("CC110_IOCFG2_DATA: %02x", CC110_IOCFG2_DATA.data);
 8006f0e:	4b8b      	ldr	r3, [pc, #556]	; (800713c <cc110_dumpRegisters+0x30c>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	4b8a      	ldr	r3, [pc, #552]	; (8007140 <cc110_dumpRegisters+0x310>)
 8006f16:	f240 22af 	movw	r2, #687	; 0x2af
 8006f1a:	4974      	ldr	r1, [pc, #464]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f1c:	2003      	movs	r0, #3
 8006f1e:	f000 fec3 	bl	8007ca8 <log_event>
    log_info("CC110_IOCFG1_DATA: %02x", CC110_IOCFG1_DATA.data);
 8006f22:	4b88      	ldr	r3, [pc, #544]	; (8007144 <cc110_dumpRegisters+0x314>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4b87      	ldr	r3, [pc, #540]	; (8007148 <cc110_dumpRegisters+0x318>)
 8006f2a:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8006f2e:	496f      	ldr	r1, [pc, #444]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f30:	2003      	movs	r0, #3
 8006f32:	f000 feb9 	bl	8007ca8 <log_event>
    log_info("CC110_IOCFG0_DATA: %02x", CC110_IOCFG0_DATA.data);
 8006f36:	4b85      	ldr	r3, [pc, #532]	; (800714c <cc110_dumpRegisters+0x31c>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	4b84      	ldr	r3, [pc, #528]	; (8007150 <cc110_dumpRegisters+0x320>)
 8006f3e:	f240 22b1 	movw	r2, #689	; 0x2b1
 8006f42:	496a      	ldr	r1, [pc, #424]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f44:	2003      	movs	r0, #3
 8006f46:	f000 feaf 	bl	8007ca8 <log_event>
    log_info("CC110_FIFOTHR_DATA: %02x", CC110_FIFOTHR_DATA.data);
 8006f4a:	4b82      	ldr	r3, [pc, #520]	; (8007154 <cc110_dumpRegisters+0x324>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	4b81      	ldr	r3, [pc, #516]	; (8007158 <cc110_dumpRegisters+0x328>)
 8006f52:	f240 22b2 	movw	r2, #690	; 0x2b2
 8006f56:	4965      	ldr	r1, [pc, #404]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f58:	2003      	movs	r0, #3
 8006f5a:	f000 fea5 	bl	8007ca8 <log_event>
    log_info("CC110_SYNC1_DATA: %02x", CC110_SYNC1_DATA.data);
 8006f5e:	4b7f      	ldr	r3, [pc, #508]	; (800715c <cc110_dumpRegisters+0x32c>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4b7e      	ldr	r3, [pc, #504]	; (8007160 <cc110_dumpRegisters+0x330>)
 8006f66:	f240 22b3 	movw	r2, #691	; 0x2b3
 8006f6a:	4960      	ldr	r1, [pc, #384]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f6c:	2003      	movs	r0, #3
 8006f6e:	f000 fe9b 	bl	8007ca8 <log_event>
    log_info("CC110_SYNC0_DATA: %02x", CC110_SYNC0_DATA.data);
 8006f72:	4b7c      	ldr	r3, [pc, #496]	; (8007164 <cc110_dumpRegisters+0x334>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4b7b      	ldr	r3, [pc, #492]	; (8007168 <cc110_dumpRegisters+0x338>)
 8006f7a:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8006f7e:	495b      	ldr	r1, [pc, #364]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f80:	2003      	movs	r0, #3
 8006f82:	f000 fe91 	bl	8007ca8 <log_event>
    log_info("CC110_PKTLEN_DATA: %02x", CC110_PKTLEN_DATA.data);
 8006f86:	4b79      	ldr	r3, [pc, #484]	; (800716c <cc110_dumpRegisters+0x33c>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4b78      	ldr	r3, [pc, #480]	; (8007170 <cc110_dumpRegisters+0x340>)
 8006f8e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8006f92:	4956      	ldr	r1, [pc, #344]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006f94:	2003      	movs	r0, #3
 8006f96:	f000 fe87 	bl	8007ca8 <log_event>
    log_info("CC110_PKTCTRL1_DATA: %02x", CC110_PKTCTRL1_DATA.data);
 8006f9a:	4b76      	ldr	r3, [pc, #472]	; (8007174 <cc110_dumpRegisters+0x344>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	4b75      	ldr	r3, [pc, #468]	; (8007178 <cc110_dumpRegisters+0x348>)
 8006fa2:	f240 22b6 	movw	r2, #694	; 0x2b6
 8006fa6:	4951      	ldr	r1, [pc, #324]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006fa8:	2003      	movs	r0, #3
 8006faa:	f000 fe7d 	bl	8007ca8 <log_event>
    log_info("CC110_PKTCTRL0_DATA: %02x", CC110_PKTCTRL0_DATA.data);
 8006fae:	4b73      	ldr	r3, [pc, #460]	; (800717c <cc110_dumpRegisters+0x34c>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	4b72      	ldr	r3, [pc, #456]	; (8007180 <cc110_dumpRegisters+0x350>)
 8006fb6:	f240 22b7 	movw	r2, #695	; 0x2b7
 8006fba:	494c      	ldr	r1, [pc, #304]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006fbc:	2003      	movs	r0, #3
 8006fbe:	f000 fe73 	bl	8007ca8 <log_event>
    log_info("CC110_ADDR_DATA: %02x", CC110_ADDR_DATA.data);
 8006fc2:	4b70      	ldr	r3, [pc, #448]	; (8007184 <cc110_dumpRegisters+0x354>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	; (8007188 <cc110_dumpRegisters+0x358>)
 8006fca:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006fce:	4947      	ldr	r1, [pc, #284]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006fd0:	2003      	movs	r0, #3
 8006fd2:	f000 fe69 	bl	8007ca8 <log_event>
    log_info("CC110_CHANNR_DATA: %02x", CC110_CHANNR_DATA.data);
 8006fd6:	4b6d      	ldr	r3, [pc, #436]	; (800718c <cc110_dumpRegisters+0x35c>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	4b6c      	ldr	r3, [pc, #432]	; (8007190 <cc110_dumpRegisters+0x360>)
 8006fde:	f240 22b9 	movw	r2, #697	; 0x2b9
 8006fe2:	4942      	ldr	r1, [pc, #264]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006fe4:	2003      	movs	r0, #3
 8006fe6:	f000 fe5f 	bl	8007ca8 <log_event>
    log_info("CC110_FSCTRL1_DATA: %02x", CC110_FSCTRL1_DATA.data);
 8006fea:	4b6a      	ldr	r3, [pc, #424]	; (8007194 <cc110_dumpRegisters+0x364>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	4b69      	ldr	r3, [pc, #420]	; (8007198 <cc110_dumpRegisters+0x368>)
 8006ff2:	f240 22ba 	movw	r2, #698	; 0x2ba
 8006ff6:	493d      	ldr	r1, [pc, #244]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8006ff8:	2003      	movs	r0, #3
 8006ffa:	f000 fe55 	bl	8007ca8 <log_event>
    log_info("CC110_FSCTRL0_DATA: %02x", CC110_FSCTRL0_DATA.data);
 8006ffe:	4b67      	ldr	r3, [pc, #412]	; (800719c <cc110_dumpRegisters+0x36c>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	4b66      	ldr	r3, [pc, #408]	; (80071a0 <cc110_dumpRegisters+0x370>)
 8007006:	f240 22bb 	movw	r2, #699	; 0x2bb
 800700a:	4938      	ldr	r1, [pc, #224]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 800700c:	2003      	movs	r0, #3
 800700e:	f000 fe4b 	bl	8007ca8 <log_event>
    log_info("CC110_FREQ2_DATA: %02x", CC110_FREQ2_DATA.data);
 8007012:	4b64      	ldr	r3, [pc, #400]	; (80071a4 <cc110_dumpRegisters+0x374>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4b63      	ldr	r3, [pc, #396]	; (80071a8 <cc110_dumpRegisters+0x378>)
 800701a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800701e:	4933      	ldr	r1, [pc, #204]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8007020:	2003      	movs	r0, #3
 8007022:	f000 fe41 	bl	8007ca8 <log_event>
    log_info("CC110_FREQ1_DATA: %02x", CC110_FREQ1_DATA.data);
 8007026:	4b61      	ldr	r3, [pc, #388]	; (80071ac <cc110_dumpRegisters+0x37c>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4b60      	ldr	r3, [pc, #384]	; (80071b0 <cc110_dumpRegisters+0x380>)
 800702e:	f240 22bd 	movw	r2, #701	; 0x2bd
 8007032:	492e      	ldr	r1, [pc, #184]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8007034:	2003      	movs	r0, #3
 8007036:	f000 fe37 	bl	8007ca8 <log_event>
    log_info("CC110_FREQ0_DATA: %02x", CC110_FREQ0_DATA.data);
 800703a:	4b5e      	ldr	r3, [pc, #376]	; (80071b4 <cc110_dumpRegisters+0x384>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4b5d      	ldr	r3, [pc, #372]	; (80071b8 <cc110_dumpRegisters+0x388>)
 8007042:	f240 22be 	movw	r2, #702	; 0x2be
 8007046:	4929      	ldr	r1, [pc, #164]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8007048:	2003      	movs	r0, #3
 800704a:	f000 fe2d 	bl	8007ca8 <log_event>
    log_info("CC110_MDMCFG4_DATA: %02x", CC110_MDMCFG4_DATA.data);
 800704e:	4b5b      	ldr	r3, [pc, #364]	; (80071bc <cc110_dumpRegisters+0x38c>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4b5a      	ldr	r3, [pc, #360]	; (80071c0 <cc110_dumpRegisters+0x390>)
 8007056:	f240 22bf 	movw	r2, #703	; 0x2bf
 800705a:	4924      	ldr	r1, [pc, #144]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 800705c:	2003      	movs	r0, #3
 800705e:	f000 fe23 	bl	8007ca8 <log_event>
    log_info("CC110_MDMCFG3_DATA: %02x", CC110_MDMCFG3_DATA.data);
 8007062:	4b58      	ldr	r3, [pc, #352]	; (80071c4 <cc110_dumpRegisters+0x394>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	4b57      	ldr	r3, [pc, #348]	; (80071c8 <cc110_dumpRegisters+0x398>)
 800706a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800706e:	491f      	ldr	r1, [pc, #124]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8007070:	2003      	movs	r0, #3
 8007072:	f000 fe19 	bl	8007ca8 <log_event>
    log_info("CC110_MDMCFG2_DATA: %02x", CC110_MDMCFG2_DATA.data);
 8007076:	4b55      	ldr	r3, [pc, #340]	; (80071cc <cc110_dumpRegisters+0x39c>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	4b54      	ldr	r3, [pc, #336]	; (80071d0 <cc110_dumpRegisters+0x3a0>)
 800707e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8007082:	491a      	ldr	r1, [pc, #104]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8007084:	2003      	movs	r0, #3
 8007086:	f000 fe0f 	bl	8007ca8 <log_event>
    log_info("CC110_MDMCFG1_DATA: %02x", CC110_MDMCFG1_DATA.data);
 800708a:	4b52      	ldr	r3, [pc, #328]	; (80071d4 <cc110_dumpRegisters+0x3a4>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4b51      	ldr	r3, [pc, #324]	; (80071d8 <cc110_dumpRegisters+0x3a8>)
 8007092:	f240 22c2 	movw	r2, #706	; 0x2c2
 8007096:	4915      	ldr	r1, [pc, #84]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 8007098:	2003      	movs	r0, #3
 800709a:	f000 fe05 	bl	8007ca8 <log_event>
    log_info("CC110_MDMCFG0_DATA: %02x", CC110_MDMCFG0_DATA.data);
 800709e:	4b4f      	ldr	r3, [pc, #316]	; (80071dc <cc110_dumpRegisters+0x3ac>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4b4e      	ldr	r3, [pc, #312]	; (80071e0 <cc110_dumpRegisters+0x3b0>)
 80070a6:	f240 22c3 	movw	r2, #707	; 0x2c3
 80070aa:	4910      	ldr	r1, [pc, #64]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 80070ac:	2003      	movs	r0, #3
 80070ae:	f000 fdfb 	bl	8007ca8 <log_event>
    log_info("CC110_DEVIATN_DATA: %02x", CC110_DEVIATN_DATA.data);
 80070b2:	4b4c      	ldr	r3, [pc, #304]	; (80071e4 <cc110_dumpRegisters+0x3b4>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4b4b      	ldr	r3, [pc, #300]	; (80071e8 <cc110_dumpRegisters+0x3b8>)
 80070ba:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80070be:	490b      	ldr	r1, [pc, #44]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 80070c0:	2003      	movs	r0, #3
 80070c2:	f000 fdf1 	bl	8007ca8 <log_event>
    log_info("CC110_MCSM2_DATA: %02x", CC110_MCSM2_DATA.data);
 80070c6:	4b49      	ldr	r3, [pc, #292]	; (80071ec <cc110_dumpRegisters+0x3bc>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4b48      	ldr	r3, [pc, #288]	; (80071f0 <cc110_dumpRegisters+0x3c0>)
 80070ce:	f240 22c5 	movw	r2, #709	; 0x2c5
 80070d2:	4906      	ldr	r1, [pc, #24]	; (80070ec <cc110_dumpRegisters+0x2bc>)
 80070d4:	2003      	movs	r0, #3
 80070d6:	f000 fde7 	bl	8007ca8 <log_event>
    log_info("CC110_MCSM1_DATA: %02x", CC110_MCSM1_DATA.data);
 80070da:	4b46      	ldr	r3, [pc, #280]	; (80071f4 <cc110_dumpRegisters+0x3c4>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	4b45      	ldr	r3, [pc, #276]	; (80071f8 <cc110_dumpRegisters+0x3c8>)
 80070e2:	f240 22c6 	movw	r2, #710	; 0x2c6
 80070e6:	e089      	b.n	80071fc <cc110_dumpRegisters+0x3cc>
 80070e8:	08009c18 	.word	0x08009c18
 80070ec:	08009a60 	.word	0x08009a60
 80070f0:	20000dc0 	.word	0x20000dc0
 80070f4:	08009c38 	.word	0x08009c38
 80070f8:	20000dc4 	.word	0x20000dc4
 80070fc:	08009c54 	.word	0x08009c54
 8007100:	20000dc8 	.word	0x20000dc8
 8007104:	08009c70 	.word	0x08009c70
 8007108:	20000dcc 	.word	0x20000dcc
 800710c:	08009c8c 	.word	0x08009c8c
 8007110:	20000dd0 	.word	0x20000dd0
 8007114:	08009ca4 	.word	0x08009ca4
 8007118:	20000dd4 	.word	0x20000dd4
 800711c:	08009cbc 	.word	0x08009cbc
 8007120:	20000dd8 	.word	0x20000dd8
 8007124:	08009cd8 	.word	0x08009cd8
 8007128:	20000ddc 	.word	0x20000ddc
 800712c:	08009cf4 	.word	0x08009cf4
 8007130:	20000de0 	.word	0x20000de0
 8007134:	08009d10 	.word	0x08009d10
 8007138:	08009d2c 	.word	0x08009d2c
 800713c:	20000de4 	.word	0x20000de4
 8007140:	08009d4c 	.word	0x08009d4c
 8007144:	20000de8 	.word	0x20000de8
 8007148:	08009d64 	.word	0x08009d64
 800714c:	20000dec 	.word	0x20000dec
 8007150:	08009d7c 	.word	0x08009d7c
 8007154:	20000df0 	.word	0x20000df0
 8007158:	08009d94 	.word	0x08009d94
 800715c:	20000df4 	.word	0x20000df4
 8007160:	08009db0 	.word	0x08009db0
 8007164:	20000df8 	.word	0x20000df8
 8007168:	08009dc8 	.word	0x08009dc8
 800716c:	20000dfc 	.word	0x20000dfc
 8007170:	08009de0 	.word	0x08009de0
 8007174:	20000e00 	.word	0x20000e00
 8007178:	08009df8 	.word	0x08009df8
 800717c:	20000e04 	.word	0x20000e04
 8007180:	08009e14 	.word	0x08009e14
 8007184:	20000e08 	.word	0x20000e08
 8007188:	08009e30 	.word	0x08009e30
 800718c:	20000e0c 	.word	0x20000e0c
 8007190:	08009e48 	.word	0x08009e48
 8007194:	20000e10 	.word	0x20000e10
 8007198:	08009e60 	.word	0x08009e60
 800719c:	20000e14 	.word	0x20000e14
 80071a0:	08009e7c 	.word	0x08009e7c
 80071a4:	20000e18 	.word	0x20000e18
 80071a8:	08009e98 	.word	0x08009e98
 80071ac:	20000e1c 	.word	0x20000e1c
 80071b0:	08009eb0 	.word	0x08009eb0
 80071b4:	20000e20 	.word	0x20000e20
 80071b8:	08009ec8 	.word	0x08009ec8
 80071bc:	20000e24 	.word	0x20000e24
 80071c0:	08009ee0 	.word	0x08009ee0
 80071c4:	20000e28 	.word	0x20000e28
 80071c8:	08009efc 	.word	0x08009efc
 80071cc:	20000e2c 	.word	0x20000e2c
 80071d0:	08009f18 	.word	0x08009f18
 80071d4:	20000e30 	.word	0x20000e30
 80071d8:	08009f34 	.word	0x08009f34
 80071dc:	20000e34 	.word	0x20000e34
 80071e0:	08009f50 	.word	0x08009f50
 80071e4:	20000e38 	.word	0x20000e38
 80071e8:	08009f6c 	.word	0x08009f6c
 80071ec:	20000e3c 	.word	0x20000e3c
 80071f0:	08009f88 	.word	0x08009f88
 80071f4:	20000e40 	.word	0x20000e40
 80071f8:	08009fa0 	.word	0x08009fa0
 80071fc:	494e      	ldr	r1, [pc, #312]	; (8007338 <cc110_dumpRegisters+0x508>)
 80071fe:	2003      	movs	r0, #3
 8007200:	f000 fd52 	bl	8007ca8 <log_event>
    log_info("CC110_MCSM0_DATA: %02x", CC110_MCSM0_DATA.data);
 8007204:	4b4d      	ldr	r3, [pc, #308]	; (800733c <cc110_dumpRegisters+0x50c>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4b4d      	ldr	r3, [pc, #308]	; (8007340 <cc110_dumpRegisters+0x510>)
 800720c:	f240 22c7 	movw	r2, #711	; 0x2c7
 8007210:	4949      	ldr	r1, [pc, #292]	; (8007338 <cc110_dumpRegisters+0x508>)
 8007212:	2003      	movs	r0, #3
 8007214:	f000 fd48 	bl	8007ca8 <log_event>
    log_info("CC110_FOCCFG_DATA: %02x", CC110_FOCCFG_DATA.data);
 8007218:	4b4a      	ldr	r3, [pc, #296]	; (8007344 <cc110_dumpRegisters+0x514>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4b4a      	ldr	r3, [pc, #296]	; (8007348 <cc110_dumpRegisters+0x518>)
 8007220:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 8007224:	4944      	ldr	r1, [pc, #272]	; (8007338 <cc110_dumpRegisters+0x508>)
 8007226:	2003      	movs	r0, #3
 8007228:	f000 fd3e 	bl	8007ca8 <log_event>
    log_info("CC110_BSCFG_DATA: %02x", CC110_BSCFG_DATA.data);
 800722c:	4b47      	ldr	r3, [pc, #284]	; (800734c <cc110_dumpRegisters+0x51c>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4b47      	ldr	r3, [pc, #284]	; (8007350 <cc110_dumpRegisters+0x520>)
 8007234:	f240 22c9 	movw	r2, #713	; 0x2c9
 8007238:	493f      	ldr	r1, [pc, #252]	; (8007338 <cc110_dumpRegisters+0x508>)
 800723a:	2003      	movs	r0, #3
 800723c:	f000 fd34 	bl	8007ca8 <log_event>
    log_info("CC110_AGCCTRL2_DATA: %02x", CC110_AGCCTRL2_DATA.data);
 8007240:	4b44      	ldr	r3, [pc, #272]	; (8007354 <cc110_dumpRegisters+0x524>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	4b44      	ldr	r3, [pc, #272]	; (8007358 <cc110_dumpRegisters+0x528>)
 8007248:	f240 22ca 	movw	r2, #714	; 0x2ca
 800724c:	493a      	ldr	r1, [pc, #232]	; (8007338 <cc110_dumpRegisters+0x508>)
 800724e:	2003      	movs	r0, #3
 8007250:	f000 fd2a 	bl	8007ca8 <log_event>
    log_info("CC110_AGCCTRL1_DATA: %02x", CC110_AGCCTRL1_DATA.data);
 8007254:	4b41      	ldr	r3, [pc, #260]	; (800735c <cc110_dumpRegisters+0x52c>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4b41      	ldr	r3, [pc, #260]	; (8007360 <cc110_dumpRegisters+0x530>)
 800725c:	f240 22cb 	movw	r2, #715	; 0x2cb
 8007260:	4935      	ldr	r1, [pc, #212]	; (8007338 <cc110_dumpRegisters+0x508>)
 8007262:	2003      	movs	r0, #3
 8007264:	f000 fd20 	bl	8007ca8 <log_event>
    log_info("CC110_AGCCTRL0_DATA: %02x", CC110_AGCCTRL0_DATA.data);
 8007268:	4b3e      	ldr	r3, [pc, #248]	; (8007364 <cc110_dumpRegisters+0x534>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <cc110_dumpRegisters+0x538>)
 8007270:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 8007274:	4930      	ldr	r1, [pc, #192]	; (8007338 <cc110_dumpRegisters+0x508>)
 8007276:	2003      	movs	r0, #3
 8007278:	f000 fd16 	bl	8007ca8 <log_event>
    log_info("CC110_FREND1_DATA: %02x", CC110_FREND1_DATA.data);
 800727c:	4b3b      	ldr	r3, [pc, #236]	; (800736c <cc110_dumpRegisters+0x53c>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4b3b      	ldr	r3, [pc, #236]	; (8007370 <cc110_dumpRegisters+0x540>)
 8007284:	f240 22cd 	movw	r2, #717	; 0x2cd
 8007288:	492b      	ldr	r1, [pc, #172]	; (8007338 <cc110_dumpRegisters+0x508>)
 800728a:	2003      	movs	r0, #3
 800728c:	f000 fd0c 	bl	8007ca8 <log_event>
    log_info("CC110_FREND0_DATA: %02x", CC110_FREND0_DATA.data);
 8007290:	4b38      	ldr	r3, [pc, #224]	; (8007374 <cc110_dumpRegisters+0x544>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	4b38      	ldr	r3, [pc, #224]	; (8007378 <cc110_dumpRegisters+0x548>)
 8007298:	f240 22ce 	movw	r2, #718	; 0x2ce
 800729c:	4926      	ldr	r1, [pc, #152]	; (8007338 <cc110_dumpRegisters+0x508>)
 800729e:	2003      	movs	r0, #3
 80072a0:	f000 fd02 	bl	8007ca8 <log_event>
    log_info("CC110_FSCAL3_DATA: %02x", CC110_FSCAL3_DATA.data);
 80072a4:	4b35      	ldr	r3, [pc, #212]	; (800737c <cc110_dumpRegisters+0x54c>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	4b35      	ldr	r3, [pc, #212]	; (8007380 <cc110_dumpRegisters+0x550>)
 80072ac:	f240 22cf 	movw	r2, #719	; 0x2cf
 80072b0:	4921      	ldr	r1, [pc, #132]	; (8007338 <cc110_dumpRegisters+0x508>)
 80072b2:	2003      	movs	r0, #3
 80072b4:	f000 fcf8 	bl	8007ca8 <log_event>
    log_info("CC110_FSCAL2_DATA: %02x", CC110_FSCAL2_DATA.data);
 80072b8:	4b32      	ldr	r3, [pc, #200]	; (8007384 <cc110_dumpRegisters+0x554>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	4b32      	ldr	r3, [pc, #200]	; (8007388 <cc110_dumpRegisters+0x558>)
 80072c0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80072c4:	491c      	ldr	r1, [pc, #112]	; (8007338 <cc110_dumpRegisters+0x508>)
 80072c6:	2003      	movs	r0, #3
 80072c8:	f000 fcee 	bl	8007ca8 <log_event>
    log_info("CC110_FSCAL1_DATA: %02x", CC110_FSCAL1_DATA.data);
 80072cc:	4b2f      	ldr	r3, [pc, #188]	; (800738c <cc110_dumpRegisters+0x55c>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <cc110_dumpRegisters+0x560>)
 80072d4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80072d8:	4917      	ldr	r1, [pc, #92]	; (8007338 <cc110_dumpRegisters+0x508>)
 80072da:	2003      	movs	r0, #3
 80072dc:	f000 fce4 	bl	8007ca8 <log_event>
    log_info("CC110_FSCAL0_DATA: %02x", CC110_FSCAL0_DATA.data);
 80072e0:	4b2c      	ldr	r3, [pc, #176]	; (8007394 <cc110_dumpRegisters+0x564>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4b2c      	ldr	r3, [pc, #176]	; (8007398 <cc110_dumpRegisters+0x568>)
 80072e8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80072ec:	4912      	ldr	r1, [pc, #72]	; (8007338 <cc110_dumpRegisters+0x508>)
 80072ee:	2003      	movs	r0, #3
 80072f0:	f000 fcda 	bl	8007ca8 <log_event>
    log_info("CC110_TEST2_DATA: %02x", CC110_TEST2_DATA.data);
 80072f4:	4b29      	ldr	r3, [pc, #164]	; (800739c <cc110_dumpRegisters+0x56c>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	4b29      	ldr	r3, [pc, #164]	; (80073a0 <cc110_dumpRegisters+0x570>)
 80072fc:	f240 22d3 	movw	r2, #723	; 0x2d3
 8007300:	490d      	ldr	r1, [pc, #52]	; (8007338 <cc110_dumpRegisters+0x508>)
 8007302:	2003      	movs	r0, #3
 8007304:	f000 fcd0 	bl	8007ca8 <log_event>
    log_info("CC110_TEST1_DATA: %02x", CC110_TEST1_DATA.data);
 8007308:	4b26      	ldr	r3, [pc, #152]	; (80073a4 <cc110_dumpRegisters+0x574>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <cc110_dumpRegisters+0x578>)
 8007310:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007314:	4908      	ldr	r1, [pc, #32]	; (8007338 <cc110_dumpRegisters+0x508>)
 8007316:	2003      	movs	r0, #3
 8007318:	f000 fcc6 	bl	8007ca8 <log_event>
    log_info("CC110_TEST0_DATA: %02x", CC110_TEST0_DATA.data);
 800731c:	4b23      	ldr	r3, [pc, #140]	; (80073ac <cc110_dumpRegisters+0x57c>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	4b23      	ldr	r3, [pc, #140]	; (80073b0 <cc110_dumpRegisters+0x580>)
 8007324:	f240 22d5 	movw	r2, #725	; 0x2d5
 8007328:	4903      	ldr	r1, [pc, #12]	; (8007338 <cc110_dumpRegisters+0x508>)
 800732a:	2003      	movs	r0, #3
 800732c:	f000 fcbc 	bl	8007ca8 <log_event>
}
 8007330:	bf00      	nop
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	08009a60 	.word	0x08009a60
 800733c:	20000e44 	.word	0x20000e44
 8007340:	08009fb8 	.word	0x08009fb8
 8007344:	20000e48 	.word	0x20000e48
 8007348:	08009fd0 	.word	0x08009fd0
 800734c:	20000e4c 	.word	0x20000e4c
 8007350:	08009fe8 	.word	0x08009fe8
 8007354:	20000e50 	.word	0x20000e50
 8007358:	0800a000 	.word	0x0800a000
 800735c:	20000e54 	.word	0x20000e54
 8007360:	0800a01c 	.word	0x0800a01c
 8007364:	20000e58 	.word	0x20000e58
 8007368:	0800a038 	.word	0x0800a038
 800736c:	20000e5c 	.word	0x20000e5c
 8007370:	0800a054 	.word	0x0800a054
 8007374:	20000e60 	.word	0x20000e60
 8007378:	0800a06c 	.word	0x0800a06c
 800737c:	20000e64 	.word	0x20000e64
 8007380:	0800a084 	.word	0x0800a084
 8007384:	20000e68 	.word	0x20000e68
 8007388:	0800a09c 	.word	0x0800a09c
 800738c:	20000e6c 	.word	0x20000e6c
 8007390:	0800a0b4 	.word	0x0800a0b4
 8007394:	20000e70 	.word	0x20000e70
 8007398:	0800a0cc 	.word	0x0800a0cc
 800739c:	20000e74 	.word	0x20000e74
 80073a0:	0800a0e4 	.word	0x0800a0e4
 80073a4:	20000e78 	.word	0x20000e78
 80073a8:	0800a0fc 	.word	0x0800a0fc
 80073ac:	20000e7c 	.word	0x20000e7c
 80073b0:	0800a114 	.word	0x0800a114

080073b4 <cc110_getStatus>:

static void cc110_getStatus(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
    // Grab latest status
    CC110_PARTNUM_DATA.data = cc110_burstReadRegister(CC110_PARTNUM_ADDR);
 80073b8:	2030      	movs	r0, #48	; 0x30
 80073ba:	f7ff fcaf 	bl	8006d1c <cc110_burstReadRegister>
 80073be:	4603      	mov	r3, r0
 80073c0:	461a      	mov	r2, r3
 80073c2:	4b2c      	ldr	r3, [pc, #176]	; (8007474 <cc110_getStatus+0xc0>)
 80073c4:	701a      	strb	r2, [r3, #0]
    CC110_VERSION_DATA.data = cc110_burstReadRegister(CC110_VERSION_ADDR);
 80073c6:	2031      	movs	r0, #49	; 0x31
 80073c8:	f7ff fca8 	bl	8006d1c <cc110_burstReadRegister>
 80073cc:	4603      	mov	r3, r0
 80073ce:	461a      	mov	r2, r3
 80073d0:	4b29      	ldr	r3, [pc, #164]	; (8007478 <cc110_getStatus+0xc4>)
 80073d2:	701a      	strb	r2, [r3, #0]
    CC110_FREQEST_DATA.data = cc110_burstReadRegister(CC110_FREQEST_ADDR);
 80073d4:	2032      	movs	r0, #50	; 0x32
 80073d6:	f7ff fca1 	bl	8006d1c <cc110_burstReadRegister>
 80073da:	4603      	mov	r3, r0
 80073dc:	461a      	mov	r2, r3
 80073de:	4b27      	ldr	r3, [pc, #156]	; (800747c <cc110_getStatus+0xc8>)
 80073e0:	701a      	strb	r2, [r3, #0]
    CC110_CRCOK_DATA.data = cc110_burstReadRegister(CC110_CRCOK_ADDR);
 80073e2:	2033      	movs	r0, #51	; 0x33
 80073e4:	f7ff fc9a 	bl	8006d1c <cc110_burstReadRegister>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	4b24      	ldr	r3, [pc, #144]	; (8007480 <cc110_getStatus+0xcc>)
 80073ee:	701a      	strb	r2, [r3, #0]
    CC110_RSSI_DATA.data = cc110_burstReadRegister(CC110_RSSI_ADDR);
 80073f0:	2034      	movs	r0, #52	; 0x34
 80073f2:	f7ff fc93 	bl	8006d1c <cc110_burstReadRegister>
 80073f6:	4603      	mov	r3, r0
 80073f8:	461a      	mov	r2, r3
 80073fa:	4b22      	ldr	r3, [pc, #136]	; (8007484 <cc110_getStatus+0xd0>)
 80073fc:	701a      	strb	r2, [r3, #0]
    CC110_MARCSTATE_DATA.data = cc110_burstReadRegister(CC110_MARCSTATE_ADDR);
 80073fe:	2035      	movs	r0, #53	; 0x35
 8007400:	f7ff fc8c 	bl	8006d1c <cc110_burstReadRegister>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	4b1f      	ldr	r3, [pc, #124]	; (8007488 <cc110_getStatus+0xd4>)
 800740a:	701a      	strb	r2, [r3, #0]
    CC110_PKTSTATUS_DATA.data = cc110_burstReadRegister(CC110_PKTSTATUS_ADDR);
 800740c:	2038      	movs	r0, #56	; 0x38
 800740e:	f7ff fc85 	bl	8006d1c <cc110_burstReadRegister>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	4b1d      	ldr	r3, [pc, #116]	; (800748c <cc110_getStatus+0xd8>)
 8007418:	701a      	strb	r2, [r3, #0]
    CC110_TXBYTES_DATA.data = cc110_burstReadRegister(CC110_TXBYTES_ADDR);
 800741a:	203a      	movs	r0, #58	; 0x3a
 800741c:	f7ff fc7e 	bl	8006d1c <cc110_burstReadRegister>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <cc110_getStatus+0xdc>)
 8007426:	701a      	strb	r2, [r3, #0]
    CC110_RXBYTES_DATA.data = cc110_burstReadRegister(CC110_RXBYTES_ADDR);
 8007428:	203b      	movs	r0, #59	; 0x3b
 800742a:	f7ff fc77 	bl	8006d1c <cc110_burstReadRegister>
 800742e:	4603      	mov	r3, r0
 8007430:	461a      	mov	r2, r3
 8007432:	4b18      	ldr	r3, [pc, #96]	; (8007494 <cc110_getStatus+0xe0>)
 8007434:	701a      	strb	r2, [r3, #0]

    // Compute RSSI in dBm - See TI DN505
    if (CC110_RSSI_DATA.RSSI >= 128)
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <cc110_getStatus+0xd0>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b25b      	sxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	da0d      	bge.n	800745c <cc110_getStatus+0xa8>
    {
        cc110_rssiDbm = (int16_t) (((int16_t) CC110_RSSI_DATA.RSSI - 256) / 2) - CC110_RSSI_OFFSET;
 8007440:	4b10      	ldr	r3, [pc, #64]	; (8007484 <cc110_getStatus+0xd0>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007448:	0fda      	lsrs	r2, r3, #31
 800744a:	4413      	add	r3, r2
 800744c:	105b      	asrs	r3, r3, #1
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b4a      	subs	r3, #74	; 0x4a
 8007452:	b29b      	uxth	r3, r3
 8007454:	b21a      	sxth	r2, r3
 8007456:	4b10      	ldr	r3, [pc, #64]	; (8007498 <cc110_getStatus+0xe4>)
 8007458:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        cc110_rssiDbm = (CC110_RSSI_DATA.RSSI / 2) - CC110_RSSI_OFFSET;
    }
}
 800745a:	e009      	b.n	8007470 <cc110_getStatus+0xbc>
        cc110_rssiDbm = (CC110_RSSI_DATA.RSSI / 2) - CC110_RSSI_OFFSET;
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <cc110_getStatus+0xd0>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b4a      	subs	r3, #74	; 0x4a
 8007468:	b29b      	uxth	r3, r3
 800746a:	b21a      	sxth	r2, r3
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <cc110_getStatus+0xe4>)
 800746e:	801a      	strh	r2, [r3, #0]
}
 8007470:	bf00      	nop
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000dc0 	.word	0x20000dc0
 8007478:	20000dc4 	.word	0x20000dc4
 800747c:	20000dc8 	.word	0x20000dc8
 8007480:	20000dcc 	.word	0x20000dcc
 8007484:	20000dd0 	.word	0x20000dd0
 8007488:	20000dd4 	.word	0x20000dd4
 800748c:	20000dd8 	.word	0x20000dd8
 8007490:	20000ddc 	.word	0x20000ddc
 8007494:	20000de0 	.word	0x20000de0
 8007498:	20000e7e 	.word	0x20000e7e

0800749c <cc110_getConfig>:

static void cc110_getConfig(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
    CC110_IOCFG2_DATA.data = cc110_readRegister(CC110_IOCFG2_ADDR);
 80074a0:	2000      	movs	r0, #0
 80074a2:	f7ff fc19 	bl	8006cd8 <cc110_readRegister>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	4b87      	ldr	r3, [pc, #540]	; (80076c8 <cc110_getConfig+0x22c>)
 80074ac:	701a      	strb	r2, [r3, #0]
    CC110_IOCFG1_DATA.data = cc110_readRegister(CC110_IOCFG1_ADDR);
 80074ae:	2001      	movs	r0, #1
 80074b0:	f7ff fc12 	bl	8006cd8 <cc110_readRegister>
 80074b4:	4603      	mov	r3, r0
 80074b6:	461a      	mov	r2, r3
 80074b8:	4b84      	ldr	r3, [pc, #528]	; (80076cc <cc110_getConfig+0x230>)
 80074ba:	701a      	strb	r2, [r3, #0]
    CC110_IOCFG0_DATA.data = cc110_readRegister(CC110_IOCFG0_ADDR);
 80074bc:	2002      	movs	r0, #2
 80074be:	f7ff fc0b 	bl	8006cd8 <cc110_readRegister>
 80074c2:	4603      	mov	r3, r0
 80074c4:	461a      	mov	r2, r3
 80074c6:	4b82      	ldr	r3, [pc, #520]	; (80076d0 <cc110_getConfig+0x234>)
 80074c8:	701a      	strb	r2, [r3, #0]
    CC110_FIFOTHR_DATA.data = cc110_readRegister(CC110_FIFOTHR_ADDR);
 80074ca:	2003      	movs	r0, #3
 80074cc:	f7ff fc04 	bl	8006cd8 <cc110_readRegister>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b7f      	ldr	r3, [pc, #508]	; (80076d4 <cc110_getConfig+0x238>)
 80074d6:	701a      	strb	r2, [r3, #0]
    CC110_SYNC1_DATA.data = cc110_readRegister(CC110_SYNC1_ADDR);
 80074d8:	2004      	movs	r0, #4
 80074da:	f7ff fbfd 	bl	8006cd8 <cc110_readRegister>
 80074de:	4603      	mov	r3, r0
 80074e0:	461a      	mov	r2, r3
 80074e2:	4b7d      	ldr	r3, [pc, #500]	; (80076d8 <cc110_getConfig+0x23c>)
 80074e4:	701a      	strb	r2, [r3, #0]
    CC110_SYNC0_DATA.data = cc110_readRegister(CC110_SYNC0_ADDR);
 80074e6:	2005      	movs	r0, #5
 80074e8:	f7ff fbf6 	bl	8006cd8 <cc110_readRegister>
 80074ec:	4603      	mov	r3, r0
 80074ee:	461a      	mov	r2, r3
 80074f0:	4b7a      	ldr	r3, [pc, #488]	; (80076dc <cc110_getConfig+0x240>)
 80074f2:	701a      	strb	r2, [r3, #0]
    CC110_PKTLEN_DATA.data = cc110_readRegister(CC110_PKTLEN_ADDR);
 80074f4:	2006      	movs	r0, #6
 80074f6:	f7ff fbef 	bl	8006cd8 <cc110_readRegister>
 80074fa:	4603      	mov	r3, r0
 80074fc:	461a      	mov	r2, r3
 80074fe:	4b78      	ldr	r3, [pc, #480]	; (80076e0 <cc110_getConfig+0x244>)
 8007500:	701a      	strb	r2, [r3, #0]
    CC110_PKTCTRL1_DATA.data = cc110_readRegister(CC110_PKTCTRL1_ADDR);
 8007502:	2007      	movs	r0, #7
 8007504:	f7ff fbe8 	bl	8006cd8 <cc110_readRegister>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	4b75      	ldr	r3, [pc, #468]	; (80076e4 <cc110_getConfig+0x248>)
 800750e:	701a      	strb	r2, [r3, #0]
    CC110_PKTCTRL0_DATA.data = cc110_readRegister(CC110_PKTCTRL0_ADDR);
 8007510:	2008      	movs	r0, #8
 8007512:	f7ff fbe1 	bl	8006cd8 <cc110_readRegister>
 8007516:	4603      	mov	r3, r0
 8007518:	461a      	mov	r2, r3
 800751a:	4b73      	ldr	r3, [pc, #460]	; (80076e8 <cc110_getConfig+0x24c>)
 800751c:	701a      	strb	r2, [r3, #0]
    CC110_ADDR_DATA.data = cc110_readRegister(CC110_ADDR_ADDR);
 800751e:	2009      	movs	r0, #9
 8007520:	f7ff fbda 	bl	8006cd8 <cc110_readRegister>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	4b70      	ldr	r3, [pc, #448]	; (80076ec <cc110_getConfig+0x250>)
 800752a:	701a      	strb	r2, [r3, #0]
    CC110_CHANNR_DATA.data = cc110_readRegister(CC110_CHANNR_ADDR);
 800752c:	20da      	movs	r0, #218	; 0xda
 800752e:	f7ff fbd3 	bl	8006cd8 <cc110_readRegister>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	4b6e      	ldr	r3, [pc, #440]	; (80076f0 <cc110_getConfig+0x254>)
 8007538:	701a      	strb	r2, [r3, #0]
    CC110_FSCTRL1_DATA.data = cc110_readRegister(CC110_FSCTRL1_ADDR);
 800753a:	20db      	movs	r0, #219	; 0xdb
 800753c:	f7ff fbcc 	bl	8006cd8 <cc110_readRegister>
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	4b6b      	ldr	r3, [pc, #428]	; (80076f4 <cc110_getConfig+0x258>)
 8007546:	701a      	strb	r2, [r3, #0]
    CC110_FSCTRL0_DATA.data = cc110_readRegister(CC110_FSCTRL0_ADDR);
 8007548:	200c      	movs	r0, #12
 800754a:	f7ff fbc5 	bl	8006cd8 <cc110_readRegister>
 800754e:	4603      	mov	r3, r0
 8007550:	461a      	mov	r2, r3
 8007552:	4b69      	ldr	r3, [pc, #420]	; (80076f8 <cc110_getConfig+0x25c>)
 8007554:	701a      	strb	r2, [r3, #0]
    CC110_FREQ2_DATA.data = cc110_readRegister(CC110_FREQ2_ADDR);
 8007556:	200d      	movs	r0, #13
 8007558:	f7ff fbbe 	bl	8006cd8 <cc110_readRegister>
 800755c:	4603      	mov	r3, r0
 800755e:	461a      	mov	r2, r3
 8007560:	4b66      	ldr	r3, [pc, #408]	; (80076fc <cc110_getConfig+0x260>)
 8007562:	701a      	strb	r2, [r3, #0]
    CC110_FREQ1_DATA.data = cc110_readRegister(CC110_FREQ1_ADDR);
 8007564:	200e      	movs	r0, #14
 8007566:	f7ff fbb7 	bl	8006cd8 <cc110_readRegister>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	4b64      	ldr	r3, [pc, #400]	; (8007700 <cc110_getConfig+0x264>)
 8007570:	701a      	strb	r2, [r3, #0]
    CC110_FREQ0_DATA.data = cc110_readRegister(CC110_FREQ0_ADDR);
 8007572:	200f      	movs	r0, #15
 8007574:	f7ff fbb0 	bl	8006cd8 <cc110_readRegister>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	4b61      	ldr	r3, [pc, #388]	; (8007704 <cc110_getConfig+0x268>)
 800757e:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG4_DATA.data = cc110_readRegister(CC110_MDMCFG4_ADDR);
 8007580:	2010      	movs	r0, #16
 8007582:	f7ff fba9 	bl	8006cd8 <cc110_readRegister>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	4b5f      	ldr	r3, [pc, #380]	; (8007708 <cc110_getConfig+0x26c>)
 800758c:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG3_DATA.data = cc110_readRegister(CC110_MDMCFG3_ADDR);
 800758e:	2011      	movs	r0, #17
 8007590:	f7ff fba2 	bl	8006cd8 <cc110_readRegister>
 8007594:	4603      	mov	r3, r0
 8007596:	461a      	mov	r2, r3
 8007598:	4b5c      	ldr	r3, [pc, #368]	; (800770c <cc110_getConfig+0x270>)
 800759a:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG2_DATA.data = cc110_readRegister(CC110_MDMCFG2_ADDR);
 800759c:	2012      	movs	r0, #18
 800759e:	f7ff fb9b 	bl	8006cd8 <cc110_readRegister>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461a      	mov	r2, r3
 80075a6:	4b5a      	ldr	r3, [pc, #360]	; (8007710 <cc110_getConfig+0x274>)
 80075a8:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG1_DATA.data = cc110_readRegister(CC110_MDMCFG1_ADDR);
 80075aa:	2013      	movs	r0, #19
 80075ac:	f7ff fb94 	bl	8006cd8 <cc110_readRegister>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	4b57      	ldr	r3, [pc, #348]	; (8007714 <cc110_getConfig+0x278>)
 80075b6:	701a      	strb	r2, [r3, #0]
    CC110_MDMCFG0_DATA.data = cc110_readRegister(CC110_MDMCFG0_ADDR);
 80075b8:	2014      	movs	r0, #20
 80075ba:	f7ff fb8d 	bl	8006cd8 <cc110_readRegister>
 80075be:	4603      	mov	r3, r0
 80075c0:	461a      	mov	r2, r3
 80075c2:	4b55      	ldr	r3, [pc, #340]	; (8007718 <cc110_getConfig+0x27c>)
 80075c4:	701a      	strb	r2, [r3, #0]
    CC110_DEVIATN_DATA.data = cc110_readRegister(CC110_DEVIATN_ADDR);
 80075c6:	2015      	movs	r0, #21
 80075c8:	f7ff fb86 	bl	8006cd8 <cc110_readRegister>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	4b52      	ldr	r3, [pc, #328]	; (800771c <cc110_getConfig+0x280>)
 80075d2:	701a      	strb	r2, [r3, #0]
    CC110_MCSM2_DATA.data = cc110_readRegister(CC110_MCSM2_ADDR);
 80075d4:	2016      	movs	r0, #22
 80075d6:	f7ff fb7f 	bl	8006cd8 <cc110_readRegister>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	4b50      	ldr	r3, [pc, #320]	; (8007720 <cc110_getConfig+0x284>)
 80075e0:	701a      	strb	r2, [r3, #0]
    CC110_MCSM1_DATA.data = cc110_readRegister(CC110_MCSM1_ADDR);
 80075e2:	2017      	movs	r0, #23
 80075e4:	f7ff fb78 	bl	8006cd8 <cc110_readRegister>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461a      	mov	r2, r3
 80075ec:	4b4d      	ldr	r3, [pc, #308]	; (8007724 <cc110_getConfig+0x288>)
 80075ee:	701a      	strb	r2, [r3, #0]
    CC110_MCSM0_DATA.data = cc110_readRegister(CC110_MCSM0_ADDR);
 80075f0:	2018      	movs	r0, #24
 80075f2:	f7ff fb71 	bl	8006cd8 <cc110_readRegister>
 80075f6:	4603      	mov	r3, r0
 80075f8:	461a      	mov	r2, r3
 80075fa:	4b4b      	ldr	r3, [pc, #300]	; (8007728 <cc110_getConfig+0x28c>)
 80075fc:	701a      	strb	r2, [r3, #0]
    CC110_FOCCFG_DATA.data = cc110_readRegister(CC110_FOCCFG_ADDR);
 80075fe:	2019      	movs	r0, #25
 8007600:	f7ff fb6a 	bl	8006cd8 <cc110_readRegister>
 8007604:	4603      	mov	r3, r0
 8007606:	461a      	mov	r2, r3
 8007608:	4b48      	ldr	r3, [pc, #288]	; (800772c <cc110_getConfig+0x290>)
 800760a:	701a      	strb	r2, [r3, #0]
    CC110_BSCFG_DATA.data = cc110_readRegister(CC110_BSCFG_ADDR);
 800760c:	201a      	movs	r0, #26
 800760e:	f7ff fb63 	bl	8006cd8 <cc110_readRegister>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	4b46      	ldr	r3, [pc, #280]	; (8007730 <cc110_getConfig+0x294>)
 8007618:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL2_DATA.data = cc110_readRegister(CC110_AGCCTRL2_ADDR);
 800761a:	201b      	movs	r0, #27
 800761c:	f7ff fb5c 	bl	8006cd8 <cc110_readRegister>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	4b43      	ldr	r3, [pc, #268]	; (8007734 <cc110_getConfig+0x298>)
 8007626:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL1_DATA.data = cc110_readRegister(CC110_AGCCTRL1_ADDR);
 8007628:	201c      	movs	r0, #28
 800762a:	f7ff fb55 	bl	8006cd8 <cc110_readRegister>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	4b41      	ldr	r3, [pc, #260]	; (8007738 <cc110_getConfig+0x29c>)
 8007634:	701a      	strb	r2, [r3, #0]
    CC110_AGCCTRL0_DATA.data = cc110_readRegister(CC110_AGCCTRL0_ADDR);
 8007636:	201d      	movs	r0, #29
 8007638:	f7ff fb4e 	bl	8006cd8 <cc110_readRegister>
 800763c:	4603      	mov	r3, r0
 800763e:	461a      	mov	r2, r3
 8007640:	4b3e      	ldr	r3, [pc, #248]	; (800773c <cc110_getConfig+0x2a0>)
 8007642:	701a      	strb	r2, [r3, #0]
    CC110_FREND1_DATA.data = cc110_readRegister(CC110_FREND1_ADDR);
 8007644:	2021      	movs	r0, #33	; 0x21
 8007646:	f7ff fb47 	bl	8006cd8 <cc110_readRegister>
 800764a:	4603      	mov	r3, r0
 800764c:	461a      	mov	r2, r3
 800764e:	4b3c      	ldr	r3, [pc, #240]	; (8007740 <cc110_getConfig+0x2a4>)
 8007650:	701a      	strb	r2, [r3, #0]
    CC110_FREND0_DATA.data = cc110_readRegister(CC110_FREND0_ADDR);
 8007652:	2022      	movs	r0, #34	; 0x22
 8007654:	f7ff fb40 	bl	8006cd8 <cc110_readRegister>
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	4b39      	ldr	r3, [pc, #228]	; (8007744 <cc110_getConfig+0x2a8>)
 800765e:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL3_DATA.data = cc110_readRegister(CC110_FSCAL3_ADDR);
 8007660:	2023      	movs	r0, #35	; 0x23
 8007662:	f7ff fb39 	bl	8006cd8 <cc110_readRegister>
 8007666:	4603      	mov	r3, r0
 8007668:	461a      	mov	r2, r3
 800766a:	4b37      	ldr	r3, [pc, #220]	; (8007748 <cc110_getConfig+0x2ac>)
 800766c:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL2_DATA.data = cc110_readRegister(CC110_FSCAL2_ADDR);
 800766e:	2024      	movs	r0, #36	; 0x24
 8007670:	f7ff fb32 	bl	8006cd8 <cc110_readRegister>
 8007674:	4603      	mov	r3, r0
 8007676:	461a      	mov	r2, r3
 8007678:	4b34      	ldr	r3, [pc, #208]	; (800774c <cc110_getConfig+0x2b0>)
 800767a:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL1_DATA.data = cc110_readRegister(CC110_FSCAL1_ADDR);
 800767c:	2025      	movs	r0, #37	; 0x25
 800767e:	f7ff fb2b 	bl	8006cd8 <cc110_readRegister>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	4b32      	ldr	r3, [pc, #200]	; (8007750 <cc110_getConfig+0x2b4>)
 8007688:	701a      	strb	r2, [r3, #0]
    CC110_FSCAL0_DATA.data = cc110_readRegister(CC110_FSCAL0_ADDR);
 800768a:	2026      	movs	r0, #38	; 0x26
 800768c:	f7ff fb24 	bl	8006cd8 <cc110_readRegister>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	4b2f      	ldr	r3, [pc, #188]	; (8007754 <cc110_getConfig+0x2b8>)
 8007696:	701a      	strb	r2, [r3, #0]
    CC110_TEST2_DATA.data = cc110_readRegister(CC110_TEST2_ADDR);
 8007698:	202c      	movs	r0, #44	; 0x2c
 800769a:	f7ff fb1d 	bl	8006cd8 <cc110_readRegister>
 800769e:	4603      	mov	r3, r0
 80076a0:	461a      	mov	r2, r3
 80076a2:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <cc110_getConfig+0x2bc>)
 80076a4:	701a      	strb	r2, [r3, #0]
    CC110_TEST1_DATA.data = cc110_readRegister(CC110_TEST1_ADDR);
 80076a6:	202d      	movs	r0, #45	; 0x2d
 80076a8:	f7ff fb16 	bl	8006cd8 <cc110_readRegister>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	4b2a      	ldr	r3, [pc, #168]	; (800775c <cc110_getConfig+0x2c0>)
 80076b2:	701a      	strb	r2, [r3, #0]
    CC110_TEST0_DATA.data = cc110_readRegister(CC110_TEST0_ADDR);
 80076b4:	202e      	movs	r0, #46	; 0x2e
 80076b6:	f7ff fb0f 	bl	8006cd8 <cc110_readRegister>
 80076ba:	4603      	mov	r3, r0
 80076bc:	461a      	mov	r2, r3
 80076be:	4b28      	ldr	r3, [pc, #160]	; (8007760 <cc110_getConfig+0x2c4>)
 80076c0:	701a      	strb	r2, [r3, #0]
}
 80076c2:	bf00      	nop
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000de4 	.word	0x20000de4
 80076cc:	20000de8 	.word	0x20000de8
 80076d0:	20000dec 	.word	0x20000dec
 80076d4:	20000df0 	.word	0x20000df0
 80076d8:	20000df4 	.word	0x20000df4
 80076dc:	20000df8 	.word	0x20000df8
 80076e0:	20000dfc 	.word	0x20000dfc
 80076e4:	20000e00 	.word	0x20000e00
 80076e8:	20000e04 	.word	0x20000e04
 80076ec:	20000e08 	.word	0x20000e08
 80076f0:	20000e0c 	.word	0x20000e0c
 80076f4:	20000e10 	.word	0x20000e10
 80076f8:	20000e14 	.word	0x20000e14
 80076fc:	20000e18 	.word	0x20000e18
 8007700:	20000e1c 	.word	0x20000e1c
 8007704:	20000e20 	.word	0x20000e20
 8007708:	20000e24 	.word	0x20000e24
 800770c:	20000e28 	.word	0x20000e28
 8007710:	20000e2c 	.word	0x20000e2c
 8007714:	20000e30 	.word	0x20000e30
 8007718:	20000e34 	.word	0x20000e34
 800771c:	20000e38 	.word	0x20000e38
 8007720:	20000e3c 	.word	0x20000e3c
 8007724:	20000e40 	.word	0x20000e40
 8007728:	20000e44 	.word	0x20000e44
 800772c:	20000e48 	.word	0x20000e48
 8007730:	20000e4c 	.word	0x20000e4c
 8007734:	20000e50 	.word	0x20000e50
 8007738:	20000e54 	.word	0x20000e54
 800773c:	20000e58 	.word	0x20000e58
 8007740:	20000e5c 	.word	0x20000e5c
 8007744:	20000e60 	.word	0x20000e60
 8007748:	20000e64 	.word	0x20000e64
 800774c:	20000e68 	.word	0x20000e68
 8007750:	20000e6c 	.word	0x20000e6c
 8007754:	20000e70 	.word	0x20000e70
 8007758:	20000e74 	.word	0x20000e74
 800775c:	20000e78 	.word	0x20000e78
 8007760:	20000e7c 	.word	0x20000e7c

08007764 <cc110_writeConfig>:

static void cc110_writeConfig(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
#define SMARTRF_SETTING_FSCAL0          0x1F
#define SMARTRF_SETTING_RESERVED_0X29   0x89
#define SMARTRF_SETTING_RESERVED_0X2A   0x127
#define SMARTRF_SETTING_RESERVED_0X2B   0x63

    cc110_writeRegister(CC110_IOCFG2_ADDR, SMARTRF_SETTING_IOCFG2);
 8007768:	2129      	movs	r1, #41	; 0x29
 800776a:	2000      	movs	r0, #0
 800776c:	f7ff faf8 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_IOCFG1_ADDR, SMARTRF_SETTING_IOCFG1);
 8007770:	212e      	movs	r1, #46	; 0x2e
 8007772:	2001      	movs	r0, #1
 8007774:	f7ff faf4 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_IOCFG0_ADDR, SMARTRF_SETTING_IOCFG0);
 8007778:	2106      	movs	r1, #6
 800777a:	2002      	movs	r0, #2
 800777c:	f7ff faf0 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FIFOTHR_ADDR, SMARTRF_SETTING_FIFOTHR);
 8007780:	2107      	movs	r1, #7
 8007782:	2003      	movs	r0, #3
 8007784:	f7ff faec 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_SYNC1_ADDR, SMARTRF_SETTING_SYNC1);
 8007788:	21d3      	movs	r1, #211	; 0xd3
 800778a:	2004      	movs	r0, #4
 800778c:	f7ff fae8 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_SYNC0_ADDR, SMARTRF_SETTING_SYNC0);
 8007790:	2191      	movs	r1, #145	; 0x91
 8007792:	2005      	movs	r0, #5
 8007794:	f7ff fae4 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_PKTLEN_ADDR, SMARTRF_SETTING_PKTLEN);
 8007798:	2105      	movs	r1, #5
 800779a:	2006      	movs	r0, #6
 800779c:	f7ff fae0 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_PKTCTRL1_ADDR, SMARTRF_SETTING_PKTCTRL1);
 80077a0:	2104      	movs	r1, #4
 80077a2:	2007      	movs	r0, #7
 80077a4:	f7ff fadc 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_PKTCTRL0_ADDR, SMARTRF_SETTING_PKTCTRL0);
 80077a8:	2104      	movs	r1, #4
 80077aa:	2008      	movs	r0, #8
 80077ac:	f7ff fad8 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_ADDR_ADDR, SMARTRF_SETTING_ADDR);
 80077b0:	2100      	movs	r1, #0
 80077b2:	2009      	movs	r0, #9
 80077b4:	f7ff fad4 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_CHANNR_ADDR, SMARTRF_SETTING_CHANNR);
 80077b8:	2100      	movs	r1, #0
 80077ba:	20da      	movs	r0, #218	; 0xda
 80077bc:	f7ff fad0 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FSCTRL1_ADDR, SMARTRF_SETTING_FSCTRL1);
 80077c0:	2108      	movs	r1, #8
 80077c2:	20db      	movs	r0, #219	; 0xdb
 80077c4:	f7ff facc 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FSCTRL0_ADDR, SMARTRF_SETTING_FSCTRL0);
 80077c8:	2100      	movs	r1, #0
 80077ca:	200c      	movs	r0, #12
 80077cc:	f7ff fac8 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FREQ2_ADDR, SMARTRF_SETTING_FREQ2);
 80077d0:	2121      	movs	r1, #33	; 0x21
 80077d2:	200d      	movs	r0, #13
 80077d4:	f7ff fac4 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FREQ1_ADDR, SMARTRF_SETTING_FREQ1);
 80077d8:	21e3      	movs	r1, #227	; 0xe3
 80077da:	200e      	movs	r0, #14
 80077dc:	f7ff fac0 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FREQ0_ADDR, SMARTRF_SETTING_FREQ0);
 80077e0:	218e      	movs	r1, #142	; 0x8e
 80077e2:	200f      	movs	r0, #15
 80077e4:	f7ff fabc 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MDMCFG4_ADDR, SMARTRF_SETTING_MDMCFG4);
 80077e8:	215b      	movs	r1, #91	; 0x5b
 80077ea:	2010      	movs	r0, #16
 80077ec:	f7ff fab8 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MDMCFG3_ADDR, SMARTRF_SETTING_MDMCFG3);
 80077f0:	21e5      	movs	r1, #229	; 0xe5
 80077f2:	2011      	movs	r0, #17
 80077f4:	f7ff fab4 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MDMCFG2_ADDR, SMARTRF_SETTING_MDMCFG2);
 80077f8:	2143      	movs	r1, #67	; 0x43
 80077fa:	2012      	movs	r0, #18
 80077fc:	f7ff fab0 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MDMCFG1_ADDR, SMARTRF_SETTING_MDMCFG1);
 8007800:	2122      	movs	r1, #34	; 0x22
 8007802:	2013      	movs	r0, #19
 8007804:	f7ff faac 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MDMCFG0_ADDR, SMARTRF_SETTING_MDMCFG0);
 8007808:	21e5      	movs	r1, #229	; 0xe5
 800780a:	2014      	movs	r0, #20
 800780c:	f7ff faa8 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MCSM2_ADDR, SMARTRF_SETTING_MCSM2);
 8007810:	2107      	movs	r1, #7
 8007812:	2016      	movs	r0, #22
 8007814:	f7ff faa4 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MCSM1_ADDR, SMARTRF_SETTING_MCSM1);
 8007818:	2130      	movs	r1, #48	; 0x30
 800781a:	2017      	movs	r0, #23
 800781c:	f7ff faa0 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_MCSM0_ADDR, SMARTRF_SETTING_MCSM0);
 8007820:	2118      	movs	r1, #24
 8007822:	2018      	movs	r0, #24
 8007824:	f7ff fa9c 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FOCCFG_ADDR, SMARTRF_SETTING_FOCCFG);
 8007828:	211d      	movs	r1, #29
 800782a:	2019      	movs	r0, #25
 800782c:	f7ff fa98 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_BSCFG_ADDR, SMARTRF_SETTING_BSCFG);
 8007830:	211c      	movs	r1, #28
 8007832:	201a      	movs	r0, #26
 8007834:	f7ff fa94 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_AGCCTRL2_ADDR, SMARTRF_SETTING_AGCCTRL2);
 8007838:	21c7      	movs	r1, #199	; 0xc7
 800783a:	201b      	movs	r0, #27
 800783c:	f7ff fa90 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_AGCCTRL1_ADDR, SMARTRF_SETTING_AGCCTRL1);
 8007840:	2100      	movs	r1, #0
 8007842:	201c      	movs	r0, #28
 8007844:	f7ff fa8c 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_AGCCTRL0_ADDR, SMARTRF_SETTING_AGCCTRL0);
 8007848:	21b2      	movs	r1, #178	; 0xb2
 800784a:	201d      	movs	r0, #29
 800784c:	f7ff fa88 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(0x20, SMARTRF_SETTING_RESERVED_0X20);
 8007850:	21fb      	movs	r1, #251	; 0xfb
 8007852:	2020      	movs	r0, #32
 8007854:	f7ff fa84 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FREND1_ADDR, SMARTRF_SETTING_FREND1);
 8007858:	21b6      	movs	r1, #182	; 0xb6
 800785a:	2021      	movs	r0, #33	; 0x21
 800785c:	f7ff fa80 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FREND1_ADDR, SMARTRF_SETTING_FREND0);
 8007860:	2110      	movs	r1, #16
 8007862:	2021      	movs	r0, #33	; 0x21
 8007864:	f7ff fa7c 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FSCAL3_ADDR, SMARTRF_SETTING_FSCAL3);
 8007868:	21ea      	movs	r1, #234	; 0xea
 800786a:	2023      	movs	r0, #35	; 0x23
 800786c:	f7ff fa78 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FSCAL2_ADDR, SMARTRF_SETTING_FSCAL2);
 8007870:	212a      	movs	r1, #42	; 0x2a
 8007872:	2024      	movs	r0, #36	; 0x24
 8007874:	f7ff fa74 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FSCAL1_ADDR, SMARTRF_SETTING_FSCAL1);
 8007878:	2100      	movs	r1, #0
 800787a:	2025      	movs	r0, #37	; 0x25
 800787c:	f7ff fa70 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_FSCAL0_ADDR, SMARTRF_SETTING_FSCAL0);
 8007880:	211f      	movs	r1, #31
 8007882:	2026      	movs	r0, #38	; 0x26
 8007884:	f7ff fa6c 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(0x29, SMARTRF_SETTING_RESERVED_0X29);
 8007888:	2189      	movs	r1, #137	; 0x89
 800788a:	2029      	movs	r0, #41	; 0x29
 800788c:	f7ff fa68 	bl	8006d60 <cc110_writeRegister>
    //cc110_writeRegister(0x2A, SMARTRF_SETTING_RESERVED_0X2A);
    cc110_writeRegister(0x2B, SMARTRF_SETTING_RESERVED_0X2B);
 8007890:	2163      	movs	r1, #99	; 0x63
 8007892:	202b      	movs	r0, #43	; 0x2b
 8007894:	f7ff fa64 	bl	8006d60 <cc110_writeRegister>


        CC110_PKTCTRL1_DATA.data = 0b00000000;      // Disable: CRC autoflush, append status, and no address checking
 8007898:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <cc110_writeConfig+0x164>)
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
        CC110_MCSM1_DATA.data = 0b00001101;         // Clear channel indication always, stay in rx after finishing reception, goto fstxon after sending packet
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <cc110_writeConfig+0x168>)
 80078a0:	220d      	movs	r2, #13
 80078a2:	701a      	strb	r2, [r3, #0]
        cc110_writeRegister(CC110_PKTCTRL1_ADDR, CC110_PKTCTRL1_DATA.data);
 80078a4:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <cc110_writeConfig+0x164>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	2007      	movs	r0, #7
 80078ac:	f7ff fa58 	bl	8006d60 <cc110_writeRegister>
        cc110_writeRegister(CC110_MCSM1_ADDR, CC110_MCSM1_DATA.data);
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <cc110_writeConfig+0x168>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	4619      	mov	r1, r3
 80078b6:	2017      	movs	r0, #23
 80078b8:	f7ff fa52 	bl	8006d60 <cc110_writeRegister>
        cc110_writeRegister(CC110_PATABLE_ADDR, POWER_m30DBM);
 80078bc:	2103      	movs	r1, #3
 80078be:	203e      	movs	r0, #62	; 0x3e
 80078c0:	f7ff fa4e 	bl	8006d60 <cc110_writeRegister>
    cc110_writeRegister(CC110_TEST2_ADDR, CC110_TEST2_DATA.data);
    cc110_writeRegister(CC110_TEST1_ADDR, CC110_TEST1_DATA.data);
    cc110_writeRegister(CC110_TEST0_ADDR, CC110_TEST0_DATA.data);
    cc110_writeRegister(CC110_PATABLE_ADDR, POWER_m15DBM);
    */
}
 80078c4:	bf00      	nop
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000e00 	.word	0x20000e00
 80078cc:	20000e40 	.word	0x20000e40

080078d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	607b      	str	r3, [r7, #4]
 80078da:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <MX_DMA_Init+0x78>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	4a1a      	ldr	r2, [pc, #104]	; (8007948 <MX_DMA_Init+0x78>)
 80078e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078e4:	6313      	str	r3, [r2, #48]	; 0x30
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <MX_DMA_Init+0x78>)
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ee:	607b      	str	r3, [r7, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078f2:	2300      	movs	r3, #0
 80078f4:	603b      	str	r3, [r7, #0]
 80078f6:	4b14      	ldr	r3, [pc, #80]	; (8007948 <MX_DMA_Init+0x78>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	4a13      	ldr	r2, [pc, #76]	; (8007948 <MX_DMA_Init+0x78>)
 80078fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007900:	6313      	str	r3, [r2, #48]	; 0x30
 8007902:	4b11      	ldr	r3, [pc, #68]	; (8007948 <MX_DMA_Init+0x78>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800790e:	2200      	movs	r2, #0
 8007910:	2105      	movs	r1, #5
 8007912:	200e      	movs	r0, #14
 8007914:	f7f8 ff72 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007918:	200e      	movs	r0, #14
 800791a:	f7f8 ff8b 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800791e:	2200      	movs	r2, #0
 8007920:	2105      	movs	r1, #5
 8007922:	200f      	movs	r0, #15
 8007924:	f7f8 ff6a 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007928:	200f      	movs	r0, #15
 800792a:	f7f8 ff83 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800792e:	2200      	movs	r2, #0
 8007930:	2105      	movs	r1, #5
 8007932:	2046      	movs	r0, #70	; 0x46
 8007934:	f7f8 ff62 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007938:	2046      	movs	r0, #70	; 0x46
 800793a:	f7f8 ff7b 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40023800 	.word	0x40023800

0800794c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of heartbeatTask */
  heartbeatTaskHandle = osThreadNew(StartHeartbeatTask, NULL, &heartbeatTask_attributes);
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <MX_FREERTOS_Init+0x38>)
 8007952:	2100      	movs	r1, #0
 8007954:	480c      	ldr	r0, [pc, #48]	; (8007988 <MX_FREERTOS_Init+0x3c>)
 8007956:	f7fc fa87 	bl	8003e68 <osThreadNew>
 800795a:	4602      	mov	r2, r0
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <MX_FREERTOS_Init+0x40>)
 800795e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    consoleTaskHandle = osThreadNew(StartConsoleTask, NULL, &consoleTask_attributes);
 8007960:	4a0b      	ldr	r2, [pc, #44]	; (8007990 <MX_FREERTOS_Init+0x44>)
 8007962:	2100      	movs	r1, #0
 8007964:	480b      	ldr	r0, [pc, #44]	; (8007994 <MX_FREERTOS_Init+0x48>)
 8007966:	f7fc fa7f 	bl	8003e68 <osThreadNew>
 800796a:	4602      	mov	r2, r0
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <MX_FREERTOS_Init+0x4c>)
 800796e:	601a      	str	r2, [r3, #0]
    // TODO: Re-eanble this and figure out how to do I2C DMA
    //displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
    radioTaskHandle = osThreadNew(StartRadioTask, NULL, &radioTask_attributes);
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <MX_FREERTOS_Init+0x50>)
 8007972:	2100      	movs	r1, #0
 8007974:	480a      	ldr	r0, [pc, #40]	; (80079a0 <MX_FREERTOS_Init+0x54>)
 8007976:	f7fc fa77 	bl	8003e68 <osThreadNew>
 800797a:	4602      	mov	r2, r0
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <MX_FREERTOS_Init+0x58>)
 800797e:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 8007980:	bf00      	nop
 8007982:	bd80      	pop	{r7, pc}
 8007984:	0800a38c 	.word	0x0800a38c
 8007988:	080079a9 	.word	0x080079a9
 800798c:	20004114 	.word	0x20004114
 8007990:	0800a344 	.word	0x0800a344
 8007994:	080079d9 	.word	0x080079d9
 8007998:	20004118 	.word	0x20004118
 800799c:	0800a368 	.word	0x0800a368
 80079a0:	08007a01 	.word	0x08007a01
 80079a4:	20004120 	.word	0x20004120

080079a8 <StartHeartbeatTask>:
 * @param  argument: Not used 
 * @retval None
 */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
    log_info("Starting heartbeat task");
 80079b0:	4b06      	ldr	r3, [pc, #24]	; (80079cc <StartHeartbeatTask+0x24>)
 80079b2:	2284      	movs	r2, #132	; 0x84
 80079b4:	4906      	ldr	r1, [pc, #24]	; (80079d0 <StartHeartbeatTask+0x28>)
 80079b6:	2003      	movs	r0, #3
 80079b8:	f000 f976 	bl	8007ca8 <log_event>
    /* Infinite loop */
    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80079bc:	2140      	movs	r1, #64	; 0x40
 80079be:	4805      	ldr	r0, [pc, #20]	; (80079d4 <StartHeartbeatTask+0x2c>)
 80079c0:	f7f9 fe07 	bl	80015d2 <HAL_GPIO_TogglePin>
        osDelay(200);
 80079c4:	20c8      	movs	r0, #200	; 0xc8
 80079c6:	f7fc faf5 	bl	8003fb4 <osDelay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80079ca:	e7f7      	b.n	80079bc <StartHeartbeatTask+0x14>
 80079cc:	0800a160 	.word	0x0800a160
 80079d0:	0800a178 	.word	0x0800a178
 80079d4:	40020000 	.word	0x40020000

080079d8 <StartConsoleTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartConsoleTask(void* argument)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
    log_info("Starting console task");
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <StartConsoleTask+0x20>)
 80079e2:	2292      	movs	r2, #146	; 0x92
 80079e4:	4905      	ldr	r1, [pc, #20]	; (80079fc <StartConsoleTask+0x24>)
 80079e6:	2003      	movs	r0, #3
 80079e8:	f000 f95e 	bl	8007ca8 <log_event>
    while (1)
    {
        log_read();
 80079ec:	f000 fa70 	bl	8007ed0 <log_read>
        osDelay(1);
 80079f0:	2001      	movs	r0, #1
 80079f2:	f7fc fadf 	bl	8003fb4 <osDelay>
        log_read();
 80079f6:	e7f9      	b.n	80079ec <StartConsoleTask+0x14>
 80079f8:	0800a18c 	.word	0x0800a18c
 80079fc:	0800a178 	.word	0x0800a178

08007a00 <StartRadioTask>:
        osDelay(100);
    }
}

void StartRadioTask(void* argument)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
    // Init display
    log_info("Starting radio task");
 8007a08:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <StartRadioTask+0x2c>)
 8007a0a:	22a9      	movs	r2, #169	; 0xa9
 8007a0c:	4908      	ldr	r1, [pc, #32]	; (8007a30 <StartRadioTask+0x30>)
 8007a0e:	2003      	movs	r0, #3
 8007a10:	f000 f94a 	bl	8007ca8 <log_event>
    cc110_init();
 8007a14:	f7fe fd56 	bl	80064c4 <cc110_init>
    osDelay(2000);        // Allow other tasks to startup
 8007a18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007a1c:	f7fc faca 	bl	8003fb4 <osDelay>
    while (1)
    {
        cc110_test();   // Perform test
 8007a20:	f7fe fd9a 	bl	8006558 <cc110_test>
        osDelay(100);
 8007a24:	2064      	movs	r0, #100	; 0x64
 8007a26:	f7fc fac5 	bl	8003fb4 <osDelay>
        cc110_test();   // Perform test
 8007a2a:	e7f9      	b.n	8007a20 <StartRadioTask+0x20>
 8007a2c:	0800a1bc 	.word	0x0800a1bc
 8007a30:	0800a178 	.word	0x0800a178

08007a34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a3a:	f107 0314 	add.w	r3, r7, #20
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	605a      	str	r2, [r3, #4]
 8007a44:	609a      	str	r2, [r3, #8]
 8007a46:	60da      	str	r2, [r3, #12]
 8007a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	4b50      	ldr	r3, [pc, #320]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	4a4f      	ldr	r2, [pc, #316]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a54:	f043 0310 	orr.w	r3, r3, #16
 8007a58:	6313      	str	r3, [r2, #48]	; 0x30
 8007a5a:	4b4d      	ldr	r3, [pc, #308]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	4b49      	ldr	r3, [pc, #292]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	4a48      	ldr	r2, [pc, #288]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a74:	6313      	str	r3, [r2, #48]	; 0x30
 8007a76:	4b46      	ldr	r3, [pc, #280]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a82:	2300      	movs	r3, #0
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	4b42      	ldr	r3, [pc, #264]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8a:	4a41      	ldr	r2, [pc, #260]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a8c:	f043 0304 	orr.w	r3, r3, #4
 8007a90:	6313      	str	r3, [r2, #48]	; 0x30
 8007a92:	4b3f      	ldr	r3, [pc, #252]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	60bb      	str	r3, [r7, #8]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	4a3a      	ldr	r2, [pc, #232]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007aa8:	f043 0301 	orr.w	r3, r3, #1
 8007aac:	6313      	str	r3, [r2, #48]	; 0x30
 8007aae:	4b38      	ldr	r3, [pc, #224]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aba:	2300      	movs	r3, #0
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	4b34      	ldr	r3, [pc, #208]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	4a33      	ldr	r2, [pc, #204]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007ac4:	f043 0302 	orr.w	r3, r3, #2
 8007ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aca:	4b31      	ldr	r3, [pc, #196]	; (8007b90 <MX_GPIO_Init+0x15c>)
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2140      	movs	r1, #64	; 0x40
 8007ada:	482e      	ldr	r0, [pc, #184]	; (8007b94 <MX_GPIO_Init+0x160>)
 8007adc:	f7f9 fd60 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	2180      	movs	r1, #128	; 0x80
 8007ae4:	482b      	ldr	r0, [pc, #172]	; (8007b94 <MX_GPIO_Init+0x160>)
 8007ae6:	f7f9 fd5b 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EVENT_LED_GPIO_Port, EVENT_LED_Pin, GPIO_PIN_RESET);
 8007aea:	2200      	movs	r2, #0
 8007aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007af0:	4829      	ldr	r0, [pc, #164]	; (8007b98 <MX_GPIO_Init+0x164>)
 8007af2:	f7f9 fd55 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8007af6:	2201      	movs	r2, #1
 8007af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007afc:	4826      	ldr	r0, [pc, #152]	; (8007b98 <MX_GPIO_Init+0x164>)
 8007afe:	f7f9 fd4f 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b02:	2308      	movs	r3, #8
 8007b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b0e:	f107 0314 	add.w	r3, r7, #20
 8007b12:	4619      	mov	r1, r3
 8007b14:	4821      	ldr	r0, [pc, #132]	; (8007b9c <MX_GPIO_Init+0x168>)
 8007b16:	f7f9 fa97 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8007b1a:	2310      	movs	r3, #16
 8007b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b22:	2301      	movs	r3, #1
 8007b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8007b26:	f107 0314 	add.w	r3, r7, #20
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	481b      	ldr	r0, [pc, #108]	; (8007b9c <MX_GPIO_Init+0x168>)
 8007b2e:	f7f9 fa8b 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8007b32:	2340      	movs	r3, #64	; 0x40
 8007b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b36:	2301      	movs	r3, #1
 8007b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007b42:	f107 0314 	add.w	r3, r7, #20
 8007b46:	4619      	mov	r1, r3
 8007b48:	4812      	ldr	r0, [pc, #72]	; (8007b94 <MX_GPIO_Init+0x160>)
 8007b4a:	f7f9 fa7d 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8007b4e:	2380      	movs	r3, #128	; 0x80
 8007b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b52:	2301      	movs	r3, #1
 8007b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8007b5e:	f107 0314 	add.w	r3, r7, #20
 8007b62:	4619      	mov	r1, r3
 8007b64:	480b      	ldr	r0, [pc, #44]	; (8007b94 <MX_GPIO_Init+0x160>)
 8007b66:	f7f9 fa6f 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EVENT_LED_Pin|SPI2_NSS_Pin;
 8007b6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b70:	2301      	movs	r3, #1
 8007b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	4619      	mov	r1, r3
 8007b82:	4805      	ldr	r0, [pc, #20]	; (8007b98 <MX_GPIO_Init+0x164>)
 8007b84:	f7f9 fa60 	bl	8001048 <HAL_GPIO_Init>

}
 8007b88:	bf00      	nop
 8007b8a:	3728      	adds	r7, #40	; 0x28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40023800 	.word	0x40023800
 8007b94:	40020000 	.word	0x40020000
 8007b98:	40020400 	.word	0x40020400
 8007b9c:	40021000 	.word	0x40021000

08007ba0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007ba6:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <MX_I2C1_Init+0x54>)
 8007ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007baa:	4b11      	ldr	r3, [pc, #68]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bac:	4a12      	ldr	r2, [pc, #72]	; (8007bf8 <MX_I2C1_Init+0x58>)
 8007bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007bb6:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007bdc:	4804      	ldr	r0, [pc, #16]	; (8007bf0 <MX_I2C1_Init+0x50>)
 8007bde:	f7f9 fd13 	bl	8001608 <HAL_I2C_Init>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007be8:	f000 fb18 	bl	800821c <Error_Handler>
  }

}
 8007bec:	bf00      	nop
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20004124 	.word	0x20004124
 8007bf4:	40005400 	.word	0x40005400
 8007bf8:	000186a0 	.word	0x000186a0

08007bfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	; 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a19      	ldr	r2, [pc, #100]	; (8007c80 <HAL_I2C_MspInit+0x84>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d12b      	bne.n	8007c76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	4b18      	ldr	r3, [pc, #96]	; (8007c84 <HAL_I2C_MspInit+0x88>)
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	4a17      	ldr	r2, [pc, #92]	; (8007c84 <HAL_I2C_MspInit+0x88>)
 8007c28:	f043 0302 	orr.w	r3, r3, #2
 8007c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2e:	4b15      	ldr	r3, [pc, #84]	; (8007c84 <HAL_I2C_MspInit+0x88>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c3a:	23c0      	movs	r3, #192	; 0xc0
 8007c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c3e:	2312      	movs	r3, #18
 8007c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c46:	2303      	movs	r3, #3
 8007c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c4e:	f107 0314 	add.w	r3, r7, #20
 8007c52:	4619      	mov	r1, r3
 8007c54:	480c      	ldr	r0, [pc, #48]	; (8007c88 <HAL_I2C_MspInit+0x8c>)
 8007c56:	f7f9 f9f7 	bl	8001048 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <HAL_I2C_MspInit+0x88>)
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <HAL_I2C_MspInit+0x88>)
 8007c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c68:	6413      	str	r3, [r2, #64]	; 0x40
 8007c6a:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <HAL_I2C_MspInit+0x88>)
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007c76:	bf00      	nop
 8007c78:	3728      	adds	r7, #40	; 0x28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	40005400 	.word	0x40005400
 8007c84:	40023800 	.word	0x40023800
 8007c88:	40020400 	.word	0x40020400

08007c8c <ustrlen>:
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
    return (uint8_t)strlen((char *)str);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7f8 fa9b 	bl	80001d0 <strlen>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	b2db      	uxtb	r3, r3
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <log_event>:
int8_t log_write(char* str, uint32_t len);
int8_t log_writeByte(uint8_t byte);

/* Public Function Definitions -----------------------------------------------*/
void log_event(uint8_t level, const char* file, unsigned int line, const char* format, ...)
{
 8007ca8:	b408      	push	{r3}
 8007caa:	b580      	push	{r7, lr}
 8007cac:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8007cb0:	af04      	add	r7, sp, #16
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	6019      	str	r1, [r3, #0]
 8007cb8:	1d3b      	adds	r3, r7, #4
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	f107 030f 	add.w	r3, r7, #15
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	701a      	strb	r2, [r3, #0]
    // Temporary buffers
    char msg[LOG_MSG_MAX_SIZE] = { 0 };
 8007cc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	f000 ff6c 	bl	8008bae <memset>
    char tag[LOG_MSG_MAX_SIZE] = { 0 };
 8007cd6:	f107 0318 	add.w	r3, r7, #24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	f000 ff63 	bl	8008bae <memset>

    // Get and format current time in ss:ms
    unsigned int timeMs = HAL_GetTick();
 8007ce8:	f7f8 fc80 	bl	80005ec <HAL_GetTick>
 8007cec:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    unsigned int timeS = timeMs / 1000;
 8007cf0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007cf4:	4a55      	ldr	r2, [pc, #340]	; (8007e4c <log_event+0x1a4>)
 8007cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfa:	099b      	lsrs	r3, r3, #6
 8007cfc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    timeMs = timeMs % 1000;
 8007d00:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007d04:	4a51      	ldr	r2, [pc, #324]	; (8007e4c <log_event+0x1a4>)
 8007d06:	fba2 1203 	umull	r1, r2, r2, r3
 8007d0a:	0992      	lsrs	r2, r2, #6
 8007d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d10:	fb01 f202 	mul.w	r2, r1, r2
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    if (level <= LOG_LEVEL)
 8007d1a:	f107 030f 	add.w	r3, r7, #15
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	f200 808a 	bhi.w	8007e3a <log_event+0x192>
    {
        // Create tag for log message
        switch (level)
 8007d26:	f107 030f 	add.w	r3, r7, #15
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d85a      	bhi.n	8007de8 <log_event+0x140>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <log_event+0x90>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d49 	.word	0x08007d49
 8007d3c:	08007d71 	.word	0x08007d71
 8007d40:	08007d99 	.word	0x08007d99
 8007d44:	08007dc1 	.word	0x08007dc1
        {
            case LOG_ERROR:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [ERROR] %s(%u) ", timeS, timeMs,
 8007d48:	f107 0018 	add.w	r0, r7, #24
 8007d4c:	1d3b      	adds	r3, r7, #4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	9302      	str	r3, [sp, #8]
 8007d52:	f107 0308 	add.w	r3, r7, #8
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007d64:	4a3a      	ldr	r2, [pc, #232]	; (8007e50 <log_event+0x1a8>)
 8007d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d6a:	f001 f897 	bl	8008e9c <sniprintf>
                         file, line);
                break;
 8007d6e:	e03c      	b.n	8007dea <log_event+0x142>

            case LOG_WARN:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [WARN] %s(%u) ", timeS, timeMs, file,
 8007d70:	f107 0018 	add.w	r0, r7, #24
 8007d74:	1d3b      	adds	r3, r7, #4
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	9302      	str	r3, [sp, #8]
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007d8c:	4a31      	ldr	r2, [pc, #196]	; (8007e54 <log_event+0x1ac>)
 8007d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d92:	f001 f883 	bl	8008e9c <sniprintf>
                         line);
                break;
 8007d96:	e028      	b.n	8007dea <log_event+0x142>

            case LOG_INFO:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [INFO] %s(%u) ", timeS, timeMs, file,
 8007d98:	f107 0018 	add.w	r0, r7, #24
 8007d9c:	1d3b      	adds	r3, r7, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	9302      	str	r3, [sp, #8]
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007db4:	4a28      	ldr	r2, [pc, #160]	; (8007e58 <log_event+0x1b0>)
 8007db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dba:	f001 f86f 	bl	8008e9c <sniprintf>
                         line);
                break;
 8007dbe:	e014      	b.n	8007dea <log_event+0x142>

            case LOG_DEBUG:
                snprintf(tag, LOG_MSG_MAX_SIZE, "\n\r%03u.%03u [DEBUG] %s(%u) ", timeS, timeMs,
 8007dc0:	f107 0018 	add.w	r0, r7, #24
 8007dc4:	1d3b      	adds	r3, r7, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	f107 0308 	add.w	r3, r7, #8
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007ddc:	4a1f      	ldr	r2, [pc, #124]	; (8007e5c <log_event+0x1b4>)
 8007dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007de2:	f001 f85b 	bl	8008e9c <sniprintf>
                         file, line);
                break;
 8007de6:	e000      	b.n	8007dea <log_event+0x142>

            default:
                // Do nothing
                break;
 8007de8:	bf00      	nop
        }

        // Copy log message
        va_list arg;
        va_start(arg, format);
 8007dea:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8007dee:	f107 0314 	add.w	r3, r7, #20
 8007df2:	601a      	str	r2, [r3, #0]
        vsprintf(msg, format, arg);
 8007df4:	f107 0314 	add.w	r3, r7, #20
 8007df8:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8007e02:	f001 f8a5 	bl	8008f50 <vsiprintf>
        va_end(arg);

        // Prepend tag to message
        strcat(tag, msg);
 8007e06:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007e0a:	f107 0318 	add.w	r3, r7, #24
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 f877 	bl	8008f04 <strcat>

        // Write to the log buffer
        while (log_writeLock == LOG_WRITE_BUSY)
 8007e16:	bf00      	nop
 8007e18:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <log_event+0x1b8>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d0fb      	beq.n	8007e18 <log_event+0x170>
        {
            // Do nothing
        }
        log_write(tag, strlen(tag) + 1);
 8007e20:	f107 0318 	add.w	r3, r7, #24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7f8 f9d3 	bl	80001d0 <strlen>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	f107 0318 	add.w	r3, r7, #24
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 f8a9 	bl	8007f8c <log_write>
    }
}
 8007e3a:	bf00      	nop
 8007e3c:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8007e40:	46bd      	mov	sp, r7
 8007e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e46:	b001      	add	sp, #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	10624dd3 	.word	0x10624dd3
 8007e50:	0800a1d0 	.word	0x0800a1d0
 8007e54:	0800a1ec 	.word	0x0800a1ec
 8007e58:	0800a208 	.word	0x0800a208
 8007e5c:	0800a224 	.word	0x0800a224
 8007e60:	20003fbc 	.word	0x20003fbc

08007e64 <log_bufReadByte>:

int8_t log_bufReadByte(uint8_t* ret_byte)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
    if (log_writeIndex == log_readIndex)
 8007e6c:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <log_bufReadByte+0x5c>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <log_bufReadByte+0x60>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d103      	bne.n	8007e80 <log_bufReadByte+0x1c>
    {
        log_status = LOG_EMPTY;
 8007e78:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <log_bufReadByte+0x64>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e00c      	b.n	8007e9a <log_bufReadByte+0x36>
    }
    else
    {
        *ret_byte = log_buf[log_readIndex];
 8007e80:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <log_bufReadByte+0x60>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <log_bufReadByte+0x68>)
 8007e86:	5cd2      	ldrb	r2, [r2, r3]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	701a      	strb	r2, [r3, #0]
        log_readIndex = (log_readIndex + 1) % LOG_BUF_SIZE;
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <log_bufReadByte+0x60>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3301      	adds	r3, #1
 8007e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e96:	4a0b      	ldr	r2, [pc, #44]	; (8007ec4 <log_bufReadByte+0x60>)
 8007e98:	6013      	str	r3, [r2, #0]
    }

    // Check after the last read if the log is empty
    if (log_writeIndex == log_readIndex)
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <log_bufReadByte+0x5c>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <log_bufReadByte+0x60>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d102      	bne.n	8007eac <log_bufReadByte+0x48>
    {
        log_status = LOG_EMPTY;
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <log_bufReadByte+0x64>)
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	701a      	strb	r2, [r3, #0]
    }

    return (log_status);
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <log_bufReadByte+0x64>)
 8007eae:	f993 3000 	ldrsb.w	r3, [r3]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20003fb8 	.word	0x20003fb8
 8007ec4:	20003fb4 	.word	0x20003fb4
 8007ec8:	2000001d 	.word	0x2000001d
 8007ecc:	20002fb4 	.word	0x20002fb4

08007ed0 <log_read>:

// Example log_read implementation sending logs to a UART
void log_read(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
    static uint8_t log_errorMsg[] = "\n\r\[ERROR] Log buffer overflow!\n\r";
    uint32_t msg_index = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
    uint32_t timeMs = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60bb      	str	r3, [r7, #8]
    uint32_t timeoutMs = 10000;
 8007ede:	f242 7310 	movw	r3, #10000	; 0x2710
 8007ee2:	607b      	str	r3, [r7, #4]

    // Wait for previous transfer to complete if it hasn't already
    while ((Usart_DmaTxComplete != 1) && (timeMs < timeoutMs))
 8007ee4:	e005      	b.n	8007ef2 <log_read+0x22>
    {
        HAL_Delay(1);
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	f7f8 fb8c 	bl	8000604 <HAL_Delay>
        timeMs++;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	60bb      	str	r3, [r7, #8]
    while ((Usart_DmaTxComplete != 1) && (timeMs < timeoutMs))
 8007ef2:	4b21      	ldr	r3, [pc, #132]	; (8007f78 <log_read+0xa8>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d003      	beq.n	8007f04 <log_read+0x34>
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d3f0      	bcc.n	8007ee6 <log_read+0x16>
    }

    // Read out string from log buffer, stopping when reaching a null character
    if (log_status != LOG_EMPTY)
 8007f04:	4b1d      	ldr	r3, [pc, #116]	; (8007f7c <log_read+0xac>)
 8007f06:	f993 3000 	ldrsb.w	r3, [r3]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d02f      	beq.n	8007f6e <log_read+0x9e>
    {
        // If the log got full, output an error immediately
        if (log_status == LOG_FULL)
 8007f0e:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <log_read+0xac>)
 8007f10:	f993 3000 	ldrsb.w	r3, [r3]
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d10b      	bne.n	8007f32 <log_read+0x62>
        {
            HAL_UART_Transmit(&huart1, log_errorMsg, ustrlen(log_errorMsg), HAL_MAX_DELAY);
 8007f1a:	4819      	ldr	r0, [pc, #100]	; (8007f80 <log_read+0xb0>)
 8007f1c:	f7ff feb6 	bl	8007c8c <ustrlen>
 8007f20:	4603      	mov	r3, r0
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f04f 33ff 	mov.w	r3, #4294967295
 8007f28:	4915      	ldr	r1, [pc, #84]	; (8007f80 <log_read+0xb0>)
 8007f2a:	4816      	ldr	r0, [pc, #88]	; (8007f84 <log_read+0xb4>)
 8007f2c:	f7fa ff89 	bl	8002e42 <HAL_UART_Transmit>
 8007f30:	e011      	b.n	8007f56 <log_read+0x86>
        else
        {
            // Copy last string
            do
            {
                log_bufReadByte(&log_msg_dma[msg_index]);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4a14      	ldr	r2, [pc, #80]	; (8007f88 <log_read+0xb8>)
 8007f36:	4413      	add	r3, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff ff93 	bl	8007e64 <log_bufReadByte>
                msg_index++;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
            }
            while ((log_msg_dma[msg_index - 1] != '\0') && (msg_index < (LOG_MSG_MAX_SIZE - 1)));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	4a0f      	ldr	r2, [pc, #60]	; (8007f88 <log_read+0xb8>)
 8007f4a:	5cd3      	ldrb	r3, [r2, r3]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <log_read+0x86>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2bfe      	cmp	r3, #254	; 0xfe
 8007f54:	d9ed      	bls.n	8007f32 <log_read+0x62>
        }

        // Reset transfer flag and send new string via DMA to UART
        Usart_DmaTxComplete = 0;
 8007f56:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <log_read+0xa8>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, log_msg_dma, (msg_index - 1));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	4908      	ldr	r1, [pc, #32]	; (8007f88 <log_read+0xb8>)
 8007f68:	4806      	ldr	r0, [pc, #24]	; (8007f84 <log_read+0xb4>)
 8007f6a:	f7fb f803 	bl	8002f74 <HAL_UART_Transmit_DMA>
    }
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000048 	.word	0x20000048
 8007f7c:	2000001d 	.word	0x2000001d
 8007f80:	20000020 	.word	0x20000020
 8007f84:	20004310 	.word	0x20004310
 8007f88:	20003fc0 	.word	0x20003fc0

08007f8c <log_write>:

/* Private Function Definitions ----------------------------------------------*/
int8_t log_write(char* str, uint32_t len)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]

    if (len >= LOG_MSG_MAX_SIZE)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2bff      	cmp	r3, #255	; 0xff
 8007f9e:	d913      	bls.n	8007fc8 <log_write+0x3c>
    {
        log_warn("Something tried to write a log message >= %d!!!", LOG_MSG_MAX_SIZE);
 8007fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <log_write+0x60>)
 8007fa8:	229d      	movs	r2, #157	; 0x9d
 8007faa:	4911      	ldr	r1, [pc, #68]	; (8007ff0 <log_write+0x64>)
 8007fac:	2002      	movs	r0, #2
 8007fae:	f7ff fe7b 	bl	8007ca8 <log_event>
    }

    // TODO: Wrap this in a mutex
    // Write data to buffer, terminating if log is full
    while ((i < len) && (log_status != LOG_FULL))
 8007fb2:	e009      	b.n	8007fc8 <log_write+0x3c>
    {
        log_writeByte(str[i]);
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f81b 	bl	8007ff8 <log_writeByte>
        i++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
    while ((i < len) && (log_status != LOG_FULL))
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d205      	bcs.n	8007fdc <log_write+0x50>
 8007fd0:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <log_write+0x68>)
 8007fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d1eb      	bne.n	8007fb4 <log_write+0x28>
    }

    return (log_status);
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <log_write+0x68>)
 8007fde:	f993 3000 	ldrsb.w	r3, [r3]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	0800a240 	.word	0x0800a240
 8007ff0:	0800a270 	.word	0x0800a270
 8007ff4:	2000001d 	.word	0x2000001d

08007ff8 <log_writeByte>:

int8_t log_writeByte(uint8_t byte)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	71fb      	strb	r3, [r7, #7]
    // Check to see if log buffer is full
    if (log_writeIndex == ((log_readIndex - 1 + LOG_BUF_SIZE) % LOG_BUF_SIZE))
 8008002:	4b16      	ldr	r3, [pc, #88]	; (800805c <log_writeByte+0x64>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800800a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800800e:	4b14      	ldr	r3, [pc, #80]	; (8008060 <log_writeByte+0x68>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d103      	bne.n	800801e <log_writeByte+0x26>
    {
        log_status = LOG_FULL;
 8008016:	4b13      	ldr	r3, [pc, #76]	; (8008064 <log_writeByte+0x6c>)
 8008018:	22ff      	movs	r2, #255	; 0xff
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	e014      	b.n	8008048 <log_writeByte+0x50>
    }
    else    // Copy byte if not full
    {
        log_status = LOG_OK;
 800801e:	4b11      	ldr	r3, [pc, #68]	; (8008064 <log_writeByte+0x6c>)
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
        log_writeLock = LOG_WRITE_BUSY;
 8008024:	4b10      	ldr	r3, [pc, #64]	; (8008068 <log_writeByte+0x70>)
 8008026:	2201      	movs	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]
        log_buf[log_writeIndex] = byte;
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <log_writeByte+0x68>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	490f      	ldr	r1, [pc, #60]	; (800806c <log_writeByte+0x74>)
 8008030:	79fa      	ldrb	r2, [r7, #7]
 8008032:	54ca      	strb	r2, [r1, r3]
        log_writeLock = LOG_WRITE_FREE;
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <log_writeByte+0x70>)
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
        log_writeIndex = (log_writeIndex + 1) % LOG_BUF_SIZE;
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <log_writeByte+0x68>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008044:	4a06      	ldr	r2, [pc, #24]	; (8008060 <log_writeByte+0x68>)
 8008046:	6013      	str	r3, [r2, #0]
    }

    return (log_status);
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <log_writeByte+0x6c>)
 800804a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800804e:	4618      	mov	r0, r3
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20003fb4 	.word	0x20003fb4
 8008060:	20003fb8 	.word	0x20003fb8
 8008064:	2000001d 	.word	0x2000001d
 8008068:	20003fbc 	.word	0x20003fbc
 800806c:	20002fb4 	.word	0x20002fb4

08008070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  log_info("\n\r\n\rSTM32F407VETx Running\n\r");
 8008074:	4b22      	ldr	r3, [pc, #136]	; (8008100 <main+0x90>)
 8008076:	224b      	movs	r2, #75	; 0x4b
 8008078:	4922      	ldr	r1, [pc, #136]	; (8008104 <main+0x94>)
 800807a:	2003      	movs	r0, #3
 800807c:	f7ff fe14 	bl	8007ca8 <log_event>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008080:	f7f8 fa7e 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008084:	f000 f84e 	bl	8008124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008088:	f7ff fcd4 	bl	8007a34 <MX_GPIO_Init>
  MX_DMA_Init();
 800808c:	f7ff fc20 	bl	80078d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8008090:	f7ff fd86 	bl	8007ba0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8008094:	f000 fc54 	bl	8008940 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8008098:	f000 f8ce 	bl	8008238 <MX_SPI2_Init>
  MX_TIM10_Init();
 800809c:	f000 fbe6 	bl	800886c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_MspDeInit(&htim10);  // Deinit TIM10 - this should only be init'd just before we need to do CC110 tx/rx
 80080a0:	4819      	ldr	r0, [pc, #100]	; (8008108 <main+0x98>)
 80080a2:	f000 fc33 	bl	800890c <HAL_TIM_Base_MspDeInit>
  setbuf(stdout, NULL);
 80080a6:	4b19      	ldr	r3, [pc, #100]	; (800810c <main+0x9c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fe3e 	bl	8008d30 <setbuf>
  log_info("GPIO Initialized");
 80080b4:	4b16      	ldr	r3, [pc, #88]	; (8008110 <main+0xa0>)
 80080b6:	2268      	movs	r2, #104	; 0x68
 80080b8:	4912      	ldr	r1, [pc, #72]	; (8008104 <main+0x94>)
 80080ba:	2003      	movs	r0, #3
 80080bc:	f7ff fdf4 	bl	8007ca8 <log_event>
  log_info("TIM10 Initialized");
 80080c0:	4b14      	ldr	r3, [pc, #80]	; (8008114 <main+0xa4>)
 80080c2:	2269      	movs	r2, #105	; 0x69
 80080c4:	490f      	ldr	r1, [pc, #60]	; (8008104 <main+0x94>)
 80080c6:	2003      	movs	r0, #3
 80080c8:	f7ff fdee 	bl	8007ca8 <log_event>
  log_info("I2C1 Initialized");
 80080cc:	4b12      	ldr	r3, [pc, #72]	; (8008118 <main+0xa8>)
 80080ce:	226a      	movs	r2, #106	; 0x6a
 80080d0:	490c      	ldr	r1, [pc, #48]	; (8008104 <main+0x94>)
 80080d2:	2003      	movs	r0, #3
 80080d4:	f7ff fde8 	bl	8007ca8 <log_event>
  log_info("USART1 Initialized");
 80080d8:	4b10      	ldr	r3, [pc, #64]	; (800811c <main+0xac>)
 80080da:	226b      	movs	r2, #107	; 0x6b
 80080dc:	4909      	ldr	r1, [pc, #36]	; (8008104 <main+0x94>)
 80080de:	2003      	movs	r0, #3
 80080e0:	f7ff fde2 	bl	8007ca8 <log_event>
  log_info("Starting OS...");
 80080e4:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <main+0xb0>)
 80080e6:	226c      	movs	r2, #108	; 0x6c
 80080e8:	4906      	ldr	r1, [pc, #24]	; (8008104 <main+0x94>)
 80080ea:	2003      	movs	r0, #3
 80080ec:	f7ff fddc 	bl	8007ca8 <log_event>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80080f0:	f7fb fe50 	bl	8003d94 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80080f4:	f7ff fc2a 	bl	800794c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80080f8:	f7fb fe80 	bl	8003dfc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80080fc:	e7fe      	b.n	80080fc <main+0x8c>
 80080fe:	bf00      	nop
 8008100:	0800a280 	.word	0x0800a280
 8008104:	0800a29c 	.word	0x0800a29c
 8008108:	200042d0 	.word	0x200042d0
 800810c:	2000004c 	.word	0x2000004c
 8008110:	0800a2ac 	.word	0x0800a2ac
 8008114:	0800a2c0 	.word	0x0800a2c0
 8008118:	0800a2d4 	.word	0x0800a2d4
 800811c:	0800a2e8 	.word	0x0800a2e8
 8008120:	0800a2fc 	.word	0x0800a2fc

08008124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b094      	sub	sp, #80	; 0x50
 8008128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800812a:	f107 0320 	add.w	r3, r7, #32
 800812e:	2230      	movs	r2, #48	; 0x30
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fd3b 	bl	8008bae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008138:	f107 030c 	add.w	r3, r7, #12
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008148:	2300      	movs	r3, #0
 800814a:	60bb      	str	r3, [r7, #8]
 800814c:	4b28      	ldr	r3, [pc, #160]	; (80081f0 <SystemClock_Config+0xcc>)
 800814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008150:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <SystemClock_Config+0xcc>)
 8008152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008156:	6413      	str	r3, [r2, #64]	; 0x40
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <SystemClock_Config+0xcc>)
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008164:	2300      	movs	r3, #0
 8008166:	607b      	str	r3, [r7, #4]
 8008168:	4b22      	ldr	r3, [pc, #136]	; (80081f4 <SystemClock_Config+0xd0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a21      	ldr	r2, [pc, #132]	; (80081f4 <SystemClock_Config+0xd0>)
 800816e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	4b1f      	ldr	r3, [pc, #124]	; (80081f4 <SystemClock_Config+0xd0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008180:	2301      	movs	r3, #1
 8008182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800818a:	2302      	movs	r3, #2
 800818c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800818e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008194:	2304      	movs	r3, #4
 8008196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008198:	23a8      	movs	r3, #168	; 0xa8
 800819a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800819c:	2302      	movs	r3, #2
 800819e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80081a0:	2307      	movs	r3, #7
 80081a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80081a4:	f107 0320 	add.w	r3, r7, #32
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7f9 fb65 	bl	8001878 <HAL_RCC_OscConfig>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80081b4:	f000 f832 	bl	800821c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80081b8:	230f      	movs	r3, #15
 80081ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081bc:	2302      	movs	r3, #2
 80081be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80081c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80081c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80081ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80081d0:	f107 030c 	add.w	r3, r7, #12
 80081d4:	2105      	movs	r1, #5
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7f9 fdbe 	bl	8001d58 <HAL_RCC_ClockConfig>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80081e2:	f000 f81b 	bl	800821c <Error_Handler>
  }
}
 80081e6:	bf00      	nop
 80081e8:	3750      	adds	r7, #80	; 0x50
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40023800 	.word	0x40023800
 80081f4:	40007000 	.word	0x40007000

080081f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a04      	ldr	r2, [pc, #16]	; (8008218 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d101      	bne.n	800820e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800820a:	f7f8 f9db 	bl	80005c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40001400 	.word	0x40001400

0800821c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    log_error("\n\r\n\rERROR Handler Caught an Exception!\n\r\n\r");
 8008220:	4b03      	ldr	r3, [pc, #12]	; (8008230 <Error_Handler+0x14>)
 8008222:	22cc      	movs	r2, #204	; 0xcc
 8008224:	4903      	ldr	r1, [pc, #12]	; (8008234 <Error_Handler+0x18>)
 8008226:	2001      	movs	r0, #1
 8008228:	f7ff fd3e 	bl	8007ca8 <log_event>
  /* USER CODE END Error_Handler_Debug */
}
 800822c:	bf00      	nop
 800822e:	bd80      	pop	{r7, pc}
 8008230:	0800a30c 	.word	0x0800a30c
 8008234:	0800a29c 	.word	0x0800a29c

08008238 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800823c:	4b17      	ldr	r3, [pc, #92]	; (800829c <MX_SPI2_Init+0x64>)
 800823e:	4a18      	ldr	r2, [pc, #96]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008240:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008242:	4b16      	ldr	r3, [pc, #88]	; (800829c <MX_SPI2_Init+0x64>)
 8008244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008248:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800824a:	4b14      	ldr	r3, [pc, #80]	; (800829c <MX_SPI2_Init+0x64>)
 800824c:	2200      	movs	r2, #0
 800824e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008250:	4b12      	ldr	r3, [pc, #72]	; (800829c <MX_SPI2_Init+0x64>)
 8008252:	2200      	movs	r2, #0
 8008254:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008256:	4b11      	ldr	r3, [pc, #68]	; (800829c <MX_SPI2_Init+0x64>)
 8008258:	2200      	movs	r2, #0
 800825a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <MX_SPI2_Init+0x64>)
 800825e:	2200      	movs	r2, #0
 8008260:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008262:	4b0e      	ldr	r3, [pc, #56]	; (800829c <MX_SPI2_Init+0x64>)
 8008264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008268:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800826a:	4b0c      	ldr	r3, [pc, #48]	; (800829c <MX_SPI2_Init+0x64>)
 800826c:	2210      	movs	r2, #16
 800826e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <MX_SPI2_Init+0x64>)
 8008272:	2200      	movs	r2, #0
 8008274:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008276:	4b09      	ldr	r3, [pc, #36]	; (800829c <MX_SPI2_Init+0x64>)
 8008278:	2200      	movs	r2, #0
 800827a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800827c:	4b07      	ldr	r3, [pc, #28]	; (800829c <MX_SPI2_Init+0x64>)
 800827e:	2200      	movs	r2, #0
 8008280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <MX_SPI2_Init+0x64>)
 8008284:	220a      	movs	r2, #10
 8008286:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008288:	4804      	ldr	r0, [pc, #16]	; (800829c <MX_SPI2_Init+0x64>)
 800828a:	f7f9 ff89 	bl	80021a0 <HAL_SPI_Init>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008294:	f7ff ffc2 	bl	800821c <Error_Handler>
  }

}
 8008298:	bf00      	nop
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20004178 	.word	0x20004178
 80082a0:	40003800 	.word	0x40003800

080082a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	; 0x28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ac:	f107 0314 	add.w	r3, r7, #20
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	605a      	str	r2, [r3, #4]
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a5b      	ldr	r2, [pc, #364]	; (8008430 <HAL_SPI_MspInit+0x18c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	f040 80af 	bne.w	8008426 <HAL_SPI_MspInit+0x182>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	4b59      	ldr	r3, [pc, #356]	; (8008434 <HAL_SPI_MspInit+0x190>)
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	4a58      	ldr	r2, [pc, #352]	; (8008434 <HAL_SPI_MspInit+0x190>)
 80082d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082d6:	6413      	str	r3, [r2, #64]	; 0x40
 80082d8:	4b56      	ldr	r3, [pc, #344]	; (8008434 <HAL_SPI_MspInit+0x190>)
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	4b52      	ldr	r3, [pc, #328]	; (8008434 <HAL_SPI_MspInit+0x190>)
 80082ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ec:	4a51      	ldr	r2, [pc, #324]	; (8008434 <HAL_SPI_MspInit+0x190>)
 80082ee:	f043 0304 	orr.w	r3, r3, #4
 80082f2:	6313      	str	r3, [r2, #48]	; 0x30
 80082f4:	4b4f      	ldr	r3, [pc, #316]	; (8008434 <HAL_SPI_MspInit+0x190>)
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008300:	2300      	movs	r3, #0
 8008302:	60bb      	str	r3, [r7, #8]
 8008304:	4b4b      	ldr	r3, [pc, #300]	; (8008434 <HAL_SPI_MspInit+0x190>)
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	4a4a      	ldr	r2, [pc, #296]	; (8008434 <HAL_SPI_MspInit+0x190>)
 800830a:	f043 0302 	orr.w	r3, r3, #2
 800830e:	6313      	str	r3, [r2, #48]	; 0x30
 8008310:	4b48      	ldr	r3, [pc, #288]	; (8008434 <HAL_SPI_MspInit+0x190>)
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800831c:	230c      	movs	r3, #12
 800831e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008320:	2302      	movs	r3, #2
 8008322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008328:	2300      	movs	r3, #0
 800832a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800832c:	2305      	movs	r3, #5
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	4619      	mov	r1, r3
 8008336:	4840      	ldr	r0, [pc, #256]	; (8008438 <HAL_SPI_MspInit+0x194>)
 8008338:	f7f8 fe86 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800833c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008342:	2302      	movs	r3, #2
 8008344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834a:	2300      	movs	r3, #0
 800834c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800834e:	2305      	movs	r3, #5
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	4619      	mov	r1, r3
 8008358:	4838      	ldr	r0, [pc, #224]	; (800843c <HAL_SPI_MspInit+0x198>)
 800835a:	f7f8 fe75 	bl	8001048 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800835e:	4b38      	ldr	r3, [pc, #224]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 8008360:	4a38      	ldr	r2, [pc, #224]	; (8008444 <HAL_SPI_MspInit+0x1a0>)
 8008362:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8008364:	4b36      	ldr	r3, [pc, #216]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 8008366:	2200      	movs	r2, #0
 8008368:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800836a:	4b35      	ldr	r3, [pc, #212]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 800836c:	2200      	movs	r2, #0
 800836e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008370:	4b33      	ldr	r3, [pc, #204]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 8008372:	2200      	movs	r2, #0
 8008374:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008376:	4b32      	ldr	r3, [pc, #200]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 8008378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800837c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800837e:	4b30      	ldr	r3, [pc, #192]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 8008380:	2200      	movs	r2, #0
 8008382:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008384:	4b2e      	ldr	r3, [pc, #184]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 8008386:	2200      	movs	r2, #0
 8008388:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800838a:	4b2d      	ldr	r3, [pc, #180]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 800838c:	2200      	movs	r2, #0
 800838e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008390:	4b2b      	ldr	r3, [pc, #172]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 8008392:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008396:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008398:	4b29      	ldr	r3, [pc, #164]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 800839a:	2200      	movs	r2, #0
 800839c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800839e:	4828      	ldr	r0, [pc, #160]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 80083a0:	f7f8 fa64 	bl	800086c <HAL_DMA_Init>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80083aa:	f7ff ff37 	bl	800821c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a23      	ldr	r2, [pc, #140]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 80083b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80083b4:	4a22      	ldr	r2, [pc, #136]	; (8008440 <HAL_SPI_MspInit+0x19c>)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80083ba:	4b23      	ldr	r3, [pc, #140]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083bc:	4a23      	ldr	r2, [pc, #140]	; (800844c <HAL_SPI_MspInit+0x1a8>)
 80083be:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80083c0:	4b21      	ldr	r3, [pc, #132]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80083c6:	4b20      	ldr	r3, [pc, #128]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083c8:	2240      	movs	r2, #64	; 0x40
 80083ca:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083cc:	4b1e      	ldr	r3, [pc, #120]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80083d2:	4b1d      	ldr	r3, [pc, #116]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083d8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80083da:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083dc:	2200      	movs	r2, #0
 80083de:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80083e6:	4b18      	ldr	r3, [pc, #96]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80083ec:	4b16      	ldr	r3, [pc, #88]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80083f2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80083f4:	4b14      	ldr	r3, [pc, #80]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80083fa:	4813      	ldr	r0, [pc, #76]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 80083fc:	f7f8 fa36 	bl	800086c <HAL_DMA_Init>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8008406:	f7ff ff09 	bl	800821c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a0e      	ldr	r2, [pc, #56]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 800840e:	649a      	str	r2, [r3, #72]	; 0x48
 8008410:	4a0d      	ldr	r2, [pc, #52]	; (8008448 <HAL_SPI_MspInit+0x1a4>)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8008416:	2200      	movs	r2, #0
 8008418:	2105      	movs	r1, #5
 800841a:	2024      	movs	r0, #36	; 0x24
 800841c:	f7f8 f9ee 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008420:	2024      	movs	r0, #36	; 0x24
 8008422:	f7f8 fa07 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008426:	bf00      	nop
 8008428:	3728      	adds	r7, #40	; 0x28
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40003800 	.word	0x40003800
 8008434:	40023800 	.word	0x40023800
 8008438:	40020800 	.word	0x40020800
 800843c:	40020400 	.word	0x40020400
 8008440:	20004230 	.word	0x20004230
 8008444:	40026058 	.word	0x40026058
 8008448:	200041d0 	.word	0x200041d0
 800844c:	40026070 	.word	0x40026070

08008450 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a11      	ldr	r2, [pc, #68]	; (80084a4 <HAL_SPI_MspDeInit+0x54>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d11b      	bne.n	800849a <HAL_SPI_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8008462:	4b11      	ldr	r3, [pc, #68]	; (80084a8 <HAL_SPI_MspDeInit+0x58>)
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	4a10      	ldr	r2, [pc, #64]	; (80084a8 <HAL_SPI_MspDeInit+0x58>)
 8008468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800846c:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 800846e:	210c      	movs	r1, #12
 8008470:	480e      	ldr	r0, [pc, #56]	; (80084ac <HAL_SPI_MspDeInit+0x5c>)
 8008472:	f7f8 ff83 	bl	800137c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8008476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800847a:	480d      	ldr	r0, [pc, #52]	; (80084b0 <HAL_SPI_MspDeInit+0x60>)
 800847c:	f7f8 ff7e 	bl	800137c <HAL_GPIO_DeInit>

    /* SPI2 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008484:	4618      	mov	r0, r3
 8008486:	f7f8 fa9f 	bl	80009c8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800848e:	4618      	mov	r0, r3
 8008490:	f7f8 fa9a 	bl	80009c8 <HAL_DMA_DeInit>

    /* SPI2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8008494:	2024      	movs	r0, #36	; 0x24
 8008496:	f7f8 f9db 	bl	8000850 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
} 
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40003800 	.word	0x40003800
 80084a8:	40023800 	.word	0x40023800
 80084ac:	40020800 	.word	0x40020800
 80084b0:	40020400 	.word	0x40020400

080084b4 <Spi_start>:

/* USER CODE BEGIN 1 */
void Spi_start(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
    while (Spi_Busy != 0)
 80084ba:	bf00      	nop
 80084bc:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <Spi_start+0x40>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1fa      	bne.n	80084bc <Spi_start+0x8>
    {
        // Do nothing
    }
    Spi_Busy = 1;
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <Spi_start+0x40>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80084cc:	2200      	movs	r2, #0
 80084ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084d2:	4809      	ldr	r0, [pc, #36]	; (80084f8 <Spi_start+0x44>)
 80084d4:	f7f9 f864 	bl	80015a0 <HAL_GPIO_WritePin>
    for (volatile uint32_t i = 0; i < 5; i++);
 80084d8:	2300      	movs	r3, #0
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	e002      	b.n	80084e4 <Spi_start+0x30>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3301      	adds	r3, #1
 80084e2:	607b      	str	r3, [r7, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d9f9      	bls.n	80084de <Spi_start+0x2a>
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200040c0 	.word	0x200040c0
 80084f8:	40020400 	.word	0x40020400

080084fc <Spi_stop>:

void Spi_stop(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8008502:	2201      	movs	r2, #1
 8008504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008508:	4809      	ldr	r0, [pc, #36]	; (8008530 <Spi_stop+0x34>)
 800850a:	f7f9 f849 	bl	80015a0 <HAL_GPIO_WritePin>
    for (volatile uint32_t i = 0; i < 5; i++);
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	e002      	b.n	800851a <Spi_stop+0x1e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3301      	adds	r3, #1
 8008518:	607b      	str	r3, [r7, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b04      	cmp	r3, #4
 800851e:	d9f9      	bls.n	8008514 <Spi_stop+0x18>
    Spi_Busy = 0;
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <Spi_stop+0x38>)
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
}
 8008526:	bf00      	nop
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40020400 	.word	0x40020400
 8008534:	200040c0 	.word	0x200040c0

08008538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800853e:	2300      	movs	r3, #0
 8008540:	607b      	str	r3, [r7, #4]
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <HAL_MspInit+0x54>)
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	4a11      	ldr	r2, [pc, #68]	; (800858c <HAL_MspInit+0x54>)
 8008548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800854c:	6453      	str	r3, [r2, #68]	; 0x44
 800854e:	4b0f      	ldr	r3, [pc, #60]	; (800858c <HAL_MspInit+0x54>)
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008556:	607b      	str	r3, [r7, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800855a:	2300      	movs	r3, #0
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	4b0b      	ldr	r3, [pc, #44]	; (800858c <HAL_MspInit+0x54>)
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	4a0a      	ldr	r2, [pc, #40]	; (800858c <HAL_MspInit+0x54>)
 8008564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008568:	6413      	str	r3, [r2, #64]	; 0x40
 800856a:	4b08      	ldr	r3, [pc, #32]	; (800858c <HAL_MspInit+0x54>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008576:	2200      	movs	r2, #0
 8008578:	210f      	movs	r1, #15
 800857a:	f06f 0001 	mvn.w	r0, #1
 800857e:	f7f8 f93d 	bl	80007fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800

08008590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08c      	sub	sp, #48	; 0x30
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80085a0:	2200      	movs	r2, #0
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	2037      	movs	r0, #55	; 0x37
 80085a6:	f7f8 f929 	bl	80007fc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 80085aa:	2037      	movs	r0, #55	; 0x37
 80085ac:	f7f8 f942 	bl	8000834 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	4b1f      	ldr	r3, [pc, #124]	; (8008634 <HAL_InitTick+0xa4>)
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	4a1e      	ldr	r2, [pc, #120]	; (8008634 <HAL_InitTick+0xa4>)
 80085ba:	f043 0320 	orr.w	r3, r3, #32
 80085be:	6413      	str	r3, [r2, #64]	; 0x40
 80085c0:	4b1c      	ldr	r3, [pc, #112]	; (8008634 <HAL_InitTick+0xa4>)
 80085c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c4:	f003 0320 	and.w	r3, r3, #32
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80085cc:	f107 0210 	add.w	r2, r7, #16
 80085d0:	f107 0314 	add.w	r3, r7, #20
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7f9 fdb0 	bl	800213c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80085dc:	f7f9 fd86 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 80085e0:	4603      	mov	r3, r0
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	4a13      	ldr	r2, [pc, #76]	; (8008638 <HAL_InitTick+0xa8>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	0c9b      	lsrs	r3, r3, #18
 80085f0:	3b01      	subs	r3, #1
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_InitTick+0xac>)
 80085f6:	4a12      	ldr	r2, [pc, #72]	; (8008640 <HAL_InitTick+0xb0>)
 80085f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80085fa:	4b10      	ldr	r3, [pc, #64]	; (800863c <HAL_InitTick+0xac>)
 80085fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008600:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8008602:	4a0e      	ldr	r2, [pc, #56]	; (800863c <HAL_InitTick+0xac>)
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8008608:	4b0c      	ldr	r3, [pc, #48]	; (800863c <HAL_InitTick+0xac>)
 800860a:	2200      	movs	r2, #0
 800860c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800860e:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_InitTick+0xac>)
 8008610:	2200      	movs	r2, #0
 8008612:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8008614:	4809      	ldr	r0, [pc, #36]	; (800863c <HAL_InitTick+0xac>)
 8008616:	f7fa f993 	bl	8002940 <HAL_TIM_Base_Init>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8008620:	4806      	ldr	r0, [pc, #24]	; (800863c <HAL_InitTick+0xac>)
 8008622:	f7fa f9b8 	bl	8002996 <HAL_TIM_Base_Start_IT>
 8008626:	4603      	mov	r3, r0
 8008628:	e000      	b.n	800862c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
}
 800862c:	4618      	mov	r0, r3
 800862e:	3730      	adds	r7, #48	; 0x30
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	40023800 	.word	0x40023800
 8008638:	431bde83 	.word	0x431bde83
 800863c:	20004290 	.word	0x20004290
 8008640:	40001400 	.word	0x40001400

08008644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008648:	bf00      	nop
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008652:	b480      	push	{r7}
 8008654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008656:	e7fe      	b.n	8008656 <HardFault_Handler+0x4>

08008658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800865c:	e7fe      	b.n	800865c <MemManage_Handler+0x4>

0800865e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800865e:	b480      	push	{r7}
 8008660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008662:	e7fe      	b.n	8008662 <BusFault_Handler+0x4>

08008664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008668:	e7fe      	b.n	8008668 <UsageFault_Handler+0x4>

0800866a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800866a:	b480      	push	{r7}
 800866c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800866e:	bf00      	nop
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800867c:	4802      	ldr	r0, [pc, #8]	; (8008688 <DMA1_Stream3_IRQHandler+0x10>)
 800867e:	f7f8 fa7b 	bl	8000b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8008682:	bf00      	nop
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20004230 	.word	0x20004230

0800868c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008690:	4802      	ldr	r0, [pc, #8]	; (800869c <DMA1_Stream4_IRQHandler+0x10>)
 8008692:	f7f8 fa71 	bl	8000b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008696:	bf00      	nop
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	200041d0 	.word	0x200041d0

080086a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  HAL_GPIO_WritePin(EVENT_LED_GPIO_Port, EVENT_LED_Pin, GPIO_PIN_SET);    // Measure time in ISR
 80086a4:	2201      	movs	r2, #1
 80086a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086aa:	4808      	ldr	r0, [pc, #32]	; (80086cc <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80086ac:	f7f8 ff78 	bl	80015a0 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80086b0:	4807      	ldr	r0, [pc, #28]	; (80086d0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80086b2:	f7fa f994 	bl	80029de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  cc110_txrx();
 80086b6:	f7fe f845 	bl	8006744 <cc110_txrx>
  HAL_GPIO_WritePin(EVENT_LED_GPIO_Port, EVENT_LED_Pin, GPIO_PIN_RESET);  // Measure time in ISR
 80086ba:	2200      	movs	r2, #0
 80086bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086c0:	4802      	ldr	r0, [pc, #8]	; (80086cc <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80086c2:	f7f8 ff6d 	bl	80015a0 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80086c6:	bf00      	nop
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40020400 	.word	0x40020400
 80086d0:	200042d0 	.word	0x200042d0

080086d4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80086d8:	4802      	ldr	r0, [pc, #8]	; (80086e4 <SPI2_IRQHandler+0x10>)
 80086da:	f7f9 ff67 	bl	80025ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80086de:	bf00      	nop
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20004178 	.word	0x20004178

080086e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086ec:	4802      	ldr	r0, [pc, #8]	; (80086f8 <USART1_IRQHandler+0x10>)
 80086ee:	f7fa fcad 	bl	800304c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086f2:	bf00      	nop
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20004310 	.word	0x20004310

080086fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008700:	4802      	ldr	r0, [pc, #8]	; (800870c <TIM7_IRQHandler+0x10>)
 8008702:	f7fa f96c 	bl	80029de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008706:	bf00      	nop
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20004290 	.word	0x20004290

08008710 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008714:	4802      	ldr	r0, [pc, #8]	; (8008720 <DMA2_Stream7_IRQHandler+0x10>)
 8008716:	f7f8 fa2f 	bl	8000b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800871a:	bf00      	nop
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20004350 	.word	0x20004350

08008724 <_read>:
    {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char* ptr, int len)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	e00a      	b.n	800874c <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8008736:	f3af 8000 	nop.w
 800873a:	4601      	mov	r1, r0
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	60ba      	str	r2, [r7, #8]
 8008742:	b2ca      	uxtb	r2, r1
 8008744:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	3301      	adds	r3, #1
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	dbf0      	blt.n	8008736 <_read+0x12>
    }

    return len;
 8008754:	687b      	ldr	r3, [r7, #4]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <_write>:

__attribute__((weak)) int _write(int file, char* ptr, int len)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b086      	sub	sp, #24
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e009      	b.n	8008784 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	60ba      	str	r2, [r7, #8]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	4618      	mov	r0, r3
 800877a:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	3301      	adds	r3, #1
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	dbf1      	blt.n	8008770 <_write+0x12>
    }
    return len;
 800878c:	687b      	ldr	r3, [r7, #4]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <_close>:

int _close(int file)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
    return -1;
 800879e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <_fstat>:

int _fstat(int file, struct stat* st)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80087be:	605a      	str	r2, [r3, #4]
    return 0;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <_lseek>:
{
    return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b085      	sub	sp, #20
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
    return 0;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
 **/
caddr_t _sbrk(int incr)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char* heap_end;
    char* prev_heap_end;

    if (heap_end == 0)
 80087f0:	4b11      	ldr	r3, [pc, #68]	; (8008838 <_sbrk+0x50>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <_sbrk+0x16>
        heap_end = &end;
 80087f8:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <_sbrk+0x50>)
 80087fa:	4a10      	ldr	r2, [pc, #64]	; (800883c <_sbrk+0x54>)
 80087fc:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 80087fe:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <_sbrk+0x50>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <_sbrk+0x50>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	466a      	mov	r2, sp
 800880e:	4293      	cmp	r3, r2
 8008810:	d907      	bls.n	8008822 <_sbrk+0x3a>
    {
        errno = ENOMEM;
 8008812:	f000 f987 	bl	8008b24 <__errno>
 8008816:	4602      	mov	r2, r0
 8008818:	230c      	movs	r3, #12
 800881a:	6013      	str	r3, [r2, #0]
        return (caddr_t) -1;
 800881c:	f04f 33ff 	mov.w	r3, #4294967295
 8008820:	e006      	b.n	8008830 <_sbrk+0x48>
    }

    heap_end += incr;
 8008822:	4b05      	ldr	r3, [pc, #20]	; (8008838 <_sbrk+0x50>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	4a03      	ldr	r2, [pc, #12]	; (8008838 <_sbrk+0x50>)
 800882c:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
 800882e:	68fb      	ldr	r3, [r7, #12]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	200040c4 	.word	0x200040c4
 800883c:	200043b8 	.word	0x200043b8

08008840 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <SystemInit+0x28>)
 8008846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884a:	4a07      	ldr	r2, [pc, #28]	; (8008868 <SystemInit+0x28>)
 800884c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008854:	4b04      	ldr	r3, [pc, #16]	; (8008868 <SystemInit+0x28>)
 8008856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800885a:	609a      	str	r2, [r3, #8]
#endif
}
 800885c:	bf00      	nop
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	e000ed00 	.word	0xe000ed00

0800886c <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <MX_TIM10_Init+0x40>)
 8008872:	4a0f      	ldr	r2, [pc, #60]	; (80088b0 <MX_TIM10_Init+0x44>)
 8008874:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8008876:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <MX_TIM10_Init+0x40>)
 8008878:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800887c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800887e:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <MX_TIM10_Init+0x40>)
 8008880:	2200      	movs	r2, #0
 8008882:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 24;
 8008884:	4b09      	ldr	r3, [pc, #36]	; (80088ac <MX_TIM10_Init+0x40>)
 8008886:	2218      	movs	r2, #24
 8008888:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800888a:	4b08      	ldr	r3, [pc, #32]	; (80088ac <MX_TIM10_Init+0x40>)
 800888c:	2200      	movs	r2, #0
 800888e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <MX_TIM10_Init+0x40>)
 8008892:	2280      	movs	r2, #128	; 0x80
 8008894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008896:	4805      	ldr	r0, [pc, #20]	; (80088ac <MX_TIM10_Init+0x40>)
 8008898:	f7fa f852 	bl	8002940 <HAL_TIM_Base_Init>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80088a2:	f7ff fcbb 	bl	800821c <Error_Handler>
  }

}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200042d0 	.word	0x200042d0
 80088b0:	40014400 	.word	0x40014400

080088b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a0f      	ldr	r2, [pc, #60]	; (8008900 <HAL_TIM_Base_MspInit+0x4c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d118      	bne.n	80088f8 <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <HAL_TIM_Base_MspInit+0x50>)
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	4a0d      	ldr	r2, [pc, #52]	; (8008904 <HAL_TIM_Base_MspInit+0x50>)
 80088d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d4:	6453      	str	r3, [r2, #68]	; 0x44
 80088d6:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <HAL_TIM_Base_MspInit+0x50>)
 80088d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80088e2:	2200      	movs	r2, #0
 80088e4:	2105      	movs	r1, #5
 80088e6:	2019      	movs	r0, #25
 80088e8:	f7f7 ff88 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80088ec:	2019      	movs	r0, #25
 80088ee:	f7f7 ffa1 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */
    HAL_TIM_Base_Start_IT(&htim10);
 80088f2:	4805      	ldr	r0, [pc, #20]	; (8008908 <HAL_TIM_Base_MspInit+0x54>)
 80088f4:	f7fa f84f 	bl	8002996 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80088f8:	bf00      	nop
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40014400 	.word	0x40014400
 8008904:	40023800 	.word	0x40023800
 8008908:	200042d0 	.word	0x200042d0

0800890c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a07      	ldr	r2, [pc, #28]	; (8008938 <HAL_TIM_Base_MspDeInit+0x2c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d108      	bne.n	8008930 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM10_MspDeInit 0 */

  /* USER CODE END TIM10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM10_CLK_DISABLE();
 800891e:	4b07      	ldr	r3, [pc, #28]	; (800893c <HAL_TIM_Base_MspDeInit+0x30>)
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	4a06      	ldr	r2, [pc, #24]	; (800893c <HAL_TIM_Base_MspDeInit+0x30>)
 8008924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008928:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM10 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 800892a:	2019      	movs	r0, #25
 800892c:	f7f7 ff90 	bl	8000850 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM10_MspDeInit 1 */

  /* USER CODE END TIM10_MspDeInit 1 */
  }
} 
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	40014400 	.word	0x40014400
 800893c:	40023800 	.word	0x40023800

08008940 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008944:	4b11      	ldr	r3, [pc, #68]	; (800898c <MX_USART1_UART_Init+0x4c>)
 8008946:	4a12      	ldr	r2, [pc, #72]	; (8008990 <MX_USART1_UART_Init+0x50>)
 8008948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800894a:	4b10      	ldr	r3, [pc, #64]	; (800898c <MX_USART1_UART_Init+0x4c>)
 800894c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008952:	4b0e      	ldr	r3, [pc, #56]	; (800898c <MX_USART1_UART_Init+0x4c>)
 8008954:	2200      	movs	r2, #0
 8008956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008958:	4b0c      	ldr	r3, [pc, #48]	; (800898c <MX_USART1_UART_Init+0x4c>)
 800895a:	2200      	movs	r2, #0
 800895c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800895e:	4b0b      	ldr	r3, [pc, #44]	; (800898c <MX_USART1_UART_Init+0x4c>)
 8008960:	2200      	movs	r2, #0
 8008962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <MX_USART1_UART_Init+0x4c>)
 8008966:	2208      	movs	r2, #8
 8008968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800896a:	4b08      	ldr	r3, [pc, #32]	; (800898c <MX_USART1_UART_Init+0x4c>)
 800896c:	2200      	movs	r2, #0
 800896e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <MX_USART1_UART_Init+0x4c>)
 8008972:	2200      	movs	r2, #0
 8008974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008976:	4805      	ldr	r0, [pc, #20]	; (800898c <MX_USART1_UART_Init+0x4c>)
 8008978:	f7fa fa16 	bl	8002da8 <HAL_UART_Init>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008982:	f7ff fc4b 	bl	800821c <Error_Handler>
  }

}
 8008986:	bf00      	nop
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20004310 	.word	0x20004310
 8008990:	40011000 	.word	0x40011000

08008994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	605a      	str	r2, [r3, #4]
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	60da      	str	r2, [r3, #12]
 80089aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a36      	ldr	r2, [pc, #216]	; (8008a8c <HAL_UART_MspInit+0xf8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d165      	bne.n	8008a82 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80089b6:	2300      	movs	r3, #0
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	4b35      	ldr	r3, [pc, #212]	; (8008a90 <HAL_UART_MspInit+0xfc>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	4a34      	ldr	r2, [pc, #208]	; (8008a90 <HAL_UART_MspInit+0xfc>)
 80089c0:	f043 0310 	orr.w	r3, r3, #16
 80089c4:	6453      	str	r3, [r2, #68]	; 0x44
 80089c6:	4b32      	ldr	r3, [pc, #200]	; (8008a90 <HAL_UART_MspInit+0xfc>)
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	f003 0310 	and.w	r3, r3, #16
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <HAL_UART_MspInit+0xfc>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	4a2d      	ldr	r2, [pc, #180]	; (8008a90 <HAL_UART_MspInit+0xfc>)
 80089dc:	f043 0301 	orr.w	r3, r3, #1
 80089e0:	6313      	str	r3, [r2, #48]	; 0x30
 80089e2:	4b2b      	ldr	r3, [pc, #172]	; (8008a90 <HAL_UART_MspInit+0xfc>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80089ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80089f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f4:	2302      	movs	r3, #2
 80089f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089fc:	2303      	movs	r3, #3
 80089fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008a00:	2307      	movs	r3, #7
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a04:	f107 0314 	add.w	r3, r7, #20
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4822      	ldr	r0, [pc, #136]	; (8008a94 <HAL_UART_MspInit+0x100>)
 8008a0c:	f7f8 fb1c 	bl	8001048 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008a10:	4b21      	ldr	r3, [pc, #132]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a12:	4a22      	ldr	r2, [pc, #136]	; (8008a9c <HAL_UART_MspInit+0x108>)
 8008a14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8008a16:	4b20      	ldr	r3, [pc, #128]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008a1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a1e:	4b1e      	ldr	r3, [pc, #120]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a20:	2240      	movs	r2, #64	; 0x40
 8008a22:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a24:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a2a:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a32:	4b19      	ldr	r3, [pc, #100]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a38:	4b17      	ldr	r3, [pc, #92]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008a3e:	4b16      	ldr	r3, [pc, #88]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008a44:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a4a:	4b13      	ldr	r3, [pc, #76]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008a50:	4811      	ldr	r0, [pc, #68]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a52:	f7f7 ff0b 	bl	800086c <HAL_DMA_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008a5c:	f7ff fbde 	bl	800821c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a0d      	ldr	r2, [pc, #52]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a64:	631a      	str	r2, [r3, #48]	; 0x30
 8008a66:	4a0c      	ldr	r2, [pc, #48]	; (8008a98 <HAL_UART_MspInit+0x104>)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2105      	movs	r1, #5
 8008a70:	2025      	movs	r0, #37	; 0x25
 8008a72:	f7f7 fec3 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008a76:	2025      	movs	r0, #37	; 0x25
 8008a78:	f7f7 fedc 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    Usart_DmaTxComplete = 1;
 8008a7c:	4b08      	ldr	r3, [pc, #32]	; (8008aa0 <HAL_UART_MspInit+0x10c>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008a82:	bf00      	nop
 8008a84:	3728      	adds	r7, #40	; 0x28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40011000 	.word	0x40011000
 8008a90:	40023800 	.word	0x40023800
 8008a94:	40020000 	.word	0x40020000
 8008a98:	20004350 	.word	0x20004350
 8008a9c:	400264b8 	.word	0x400264b8
 8008aa0:	20000048 	.word	0x20000048

08008aa4 <HAL_UART_TxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
    if (huart->Instance==USART1)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a05      	ldr	r2, [pc, #20]	; (8008ac8 <HAL_UART_TxCpltCallback+0x24>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d102      	bne.n	8008abc <HAL_UART_TxCpltCallback+0x18>
    {
        Usart_DmaTxComplete = 1;
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <HAL_UART_TxCpltCallback+0x28>)
 8008ab8:	2201      	movs	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
    }
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	40011000 	.word	0x40011000
 8008acc:	20000048 	.word	0x20000048

08008ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008ad4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008ad6:	e003      	b.n	8008ae0 <LoopCopyDataInit>

08008ad8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008ad8:	4b0c      	ldr	r3, [pc, #48]	; (8008b0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008ada:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008adc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008ade:	3104      	adds	r1, #4

08008ae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ae0:	480b      	ldr	r0, [pc, #44]	; (8008b10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008ae4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008ae6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ae8:	d3f6      	bcc.n	8008ad8 <CopyDataInit>
  ldr  r2, =_sbss
 8008aea:	4a0b      	ldr	r2, [pc, #44]	; (8008b18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008aec:	e002      	b.n	8008af4 <LoopFillZerobss>

08008aee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008aee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008af0:	f842 3b04 	str.w	r3, [r2], #4

08008af4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008af4:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008af6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008af8:	d3f9      	bcc.n	8008aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008afa:	f7ff fea1 	bl	8008840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008afe:	f000 f817 	bl	8008b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b02:	f7ff fab5 	bl	8008070 <main>
  bx  lr    
 8008b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008b08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008b0c:	0800a470 	.word	0x0800a470
  ldr  r0, =_sdata
 8008b10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008b14:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8008b18:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8008b1c:	200043b4 	.word	0x200043b4

08008b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b20:	e7fe      	b.n	8008b20 <ADC_IRQHandler>
	...

08008b24 <__errno>:
 8008b24:	4b01      	ldr	r3, [pc, #4]	; (8008b2c <__errno+0x8>)
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	2000004c 	.word	0x2000004c

08008b30 <__libc_init_array>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	4e0d      	ldr	r6, [pc, #52]	; (8008b68 <__libc_init_array+0x38>)
 8008b34:	4c0d      	ldr	r4, [pc, #52]	; (8008b6c <__libc_init_array+0x3c>)
 8008b36:	1ba4      	subs	r4, r4, r6
 8008b38:	10a4      	asrs	r4, r4, #2
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	42a5      	cmp	r5, r4
 8008b3e:	d109      	bne.n	8008b54 <__libc_init_array+0x24>
 8008b40:	4e0b      	ldr	r6, [pc, #44]	; (8008b70 <__libc_init_array+0x40>)
 8008b42:	4c0c      	ldr	r4, [pc, #48]	; (8008b74 <__libc_init_array+0x44>)
 8008b44:	f000 ff6c 	bl	8009a20 <_init>
 8008b48:	1ba4      	subs	r4, r4, r6
 8008b4a:	10a4      	asrs	r4, r4, #2
 8008b4c:	2500      	movs	r5, #0
 8008b4e:	42a5      	cmp	r5, r4
 8008b50:	d105      	bne.n	8008b5e <__libc_init_array+0x2e>
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b58:	4798      	blx	r3
 8008b5a:	3501      	adds	r5, #1
 8008b5c:	e7ee      	b.n	8008b3c <__libc_init_array+0xc>
 8008b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b62:	4798      	blx	r3
 8008b64:	3501      	adds	r5, #1
 8008b66:	e7f2      	b.n	8008b4e <__libc_init_array+0x1e>
 8008b68:	0800a468 	.word	0x0800a468
 8008b6c:	0800a468 	.word	0x0800a468
 8008b70:	0800a468 	.word	0x0800a468
 8008b74:	0800a46c 	.word	0x0800a46c

08008b78 <malloc>:
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <malloc+0xc>)
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	f000 b86d 	b.w	8008c5c <_malloc_r>
 8008b82:	bf00      	nop
 8008b84:	2000004c 	.word	0x2000004c

08008b88 <free>:
 8008b88:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <free+0xc>)
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	f000 b817 	b.w	8008bc0 <_free_r>
 8008b92:	bf00      	nop
 8008b94:	2000004c 	.word	0x2000004c

08008b98 <memcpy>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	1e43      	subs	r3, r0, #1
 8008b9c:	440a      	add	r2, r1
 8008b9e:	4291      	cmp	r1, r2
 8008ba0:	d100      	bne.n	8008ba4 <memcpy+0xc>
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bac:	e7f7      	b.n	8008b9e <memcpy+0x6>

08008bae <memset>:
 8008bae:	4402      	add	r2, r0
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d100      	bne.n	8008bb8 <memset+0xa>
 8008bb6:	4770      	bx	lr
 8008bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8008bbc:	e7f9      	b.n	8008bb2 <memset+0x4>
	...

08008bc0 <_free_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d045      	beq.n	8008c54 <_free_r+0x94>
 8008bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bcc:	1f0c      	subs	r4, r1, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bfb8      	it	lt
 8008bd2:	18e4      	addlt	r4, r4, r3
 8008bd4:	f000 fb64 	bl	80092a0 <__malloc_lock>
 8008bd8:	4a1f      	ldr	r2, [pc, #124]	; (8008c58 <_free_r+0x98>)
 8008bda:	6813      	ldr	r3, [r2, #0]
 8008bdc:	4610      	mov	r0, r2
 8008bde:	b933      	cbnz	r3, 8008bee <_free_r+0x2e>
 8008be0:	6063      	str	r3, [r4, #4]
 8008be2:	6014      	str	r4, [r2, #0]
 8008be4:	4628      	mov	r0, r5
 8008be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bea:	f000 bb5a 	b.w	80092a2 <__malloc_unlock>
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	d90c      	bls.n	8008c0c <_free_r+0x4c>
 8008bf2:	6821      	ldr	r1, [r4, #0]
 8008bf4:	1862      	adds	r2, r4, r1
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	bf04      	itt	eq
 8008bfa:	681a      	ldreq	r2, [r3, #0]
 8008bfc:	685b      	ldreq	r3, [r3, #4]
 8008bfe:	6063      	str	r3, [r4, #4]
 8008c00:	bf04      	itt	eq
 8008c02:	1852      	addeq	r2, r2, r1
 8008c04:	6022      	streq	r2, [r4, #0]
 8008c06:	6004      	str	r4, [r0, #0]
 8008c08:	e7ec      	b.n	8008be4 <_free_r+0x24>
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	b10a      	cbz	r2, 8008c14 <_free_r+0x54>
 8008c10:	42a2      	cmp	r2, r4
 8008c12:	d9fa      	bls.n	8008c0a <_free_r+0x4a>
 8008c14:	6819      	ldr	r1, [r3, #0]
 8008c16:	1858      	adds	r0, r3, r1
 8008c18:	42a0      	cmp	r0, r4
 8008c1a:	d10b      	bne.n	8008c34 <_free_r+0x74>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	4401      	add	r1, r0
 8008c20:	1858      	adds	r0, r3, r1
 8008c22:	4282      	cmp	r2, r0
 8008c24:	6019      	str	r1, [r3, #0]
 8008c26:	d1dd      	bne.n	8008be4 <_free_r+0x24>
 8008c28:	6810      	ldr	r0, [r2, #0]
 8008c2a:	6852      	ldr	r2, [r2, #4]
 8008c2c:	605a      	str	r2, [r3, #4]
 8008c2e:	4401      	add	r1, r0
 8008c30:	6019      	str	r1, [r3, #0]
 8008c32:	e7d7      	b.n	8008be4 <_free_r+0x24>
 8008c34:	d902      	bls.n	8008c3c <_free_r+0x7c>
 8008c36:	230c      	movs	r3, #12
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	e7d3      	b.n	8008be4 <_free_r+0x24>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	1821      	adds	r1, r4, r0
 8008c40:	428a      	cmp	r2, r1
 8008c42:	bf04      	itt	eq
 8008c44:	6811      	ldreq	r1, [r2, #0]
 8008c46:	6852      	ldreq	r2, [r2, #4]
 8008c48:	6062      	str	r2, [r4, #4]
 8008c4a:	bf04      	itt	eq
 8008c4c:	1809      	addeq	r1, r1, r0
 8008c4e:	6021      	streq	r1, [r4, #0]
 8008c50:	605c      	str	r4, [r3, #4]
 8008c52:	e7c7      	b.n	8008be4 <_free_r+0x24>
 8008c54:	bd38      	pop	{r3, r4, r5, pc}
 8008c56:	bf00      	nop
 8008c58:	200040c8 	.word	0x200040c8

08008c5c <_malloc_r>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	1ccd      	adds	r5, r1, #3
 8008c60:	f025 0503 	bic.w	r5, r5, #3
 8008c64:	3508      	adds	r5, #8
 8008c66:	2d0c      	cmp	r5, #12
 8008c68:	bf38      	it	cc
 8008c6a:	250c      	movcc	r5, #12
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	4606      	mov	r6, r0
 8008c70:	db01      	blt.n	8008c76 <_malloc_r+0x1a>
 8008c72:	42a9      	cmp	r1, r5
 8008c74:	d903      	bls.n	8008c7e <_malloc_r+0x22>
 8008c76:	230c      	movs	r3, #12
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
 8008c7e:	f000 fb0f 	bl	80092a0 <__malloc_lock>
 8008c82:	4a21      	ldr	r2, [pc, #132]	; (8008d08 <_malloc_r+0xac>)
 8008c84:	6814      	ldr	r4, [r2, #0]
 8008c86:	4621      	mov	r1, r4
 8008c88:	b991      	cbnz	r1, 8008cb0 <_malloc_r+0x54>
 8008c8a:	4c20      	ldr	r4, [pc, #128]	; (8008d0c <_malloc_r+0xb0>)
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	b91b      	cbnz	r3, 8008c98 <_malloc_r+0x3c>
 8008c90:	4630      	mov	r0, r6
 8008c92:	f000 f83d 	bl	8008d10 <_sbrk_r>
 8008c96:	6020      	str	r0, [r4, #0]
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f000 f838 	bl	8008d10 <_sbrk_r>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d124      	bne.n	8008cee <_malloc_r+0x92>
 8008ca4:	230c      	movs	r3, #12
 8008ca6:	6033      	str	r3, [r6, #0]
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f000 fafa 	bl	80092a2 <__malloc_unlock>
 8008cae:	e7e4      	b.n	8008c7a <_malloc_r+0x1e>
 8008cb0:	680b      	ldr	r3, [r1, #0]
 8008cb2:	1b5b      	subs	r3, r3, r5
 8008cb4:	d418      	bmi.n	8008ce8 <_malloc_r+0x8c>
 8008cb6:	2b0b      	cmp	r3, #11
 8008cb8:	d90f      	bls.n	8008cda <_malloc_r+0x7e>
 8008cba:	600b      	str	r3, [r1, #0]
 8008cbc:	50cd      	str	r5, [r1, r3]
 8008cbe:	18cc      	adds	r4, r1, r3
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f000 faee 	bl	80092a2 <__malloc_unlock>
 8008cc6:	f104 000b 	add.w	r0, r4, #11
 8008cca:	1d23      	adds	r3, r4, #4
 8008ccc:	f020 0007 	bic.w	r0, r0, #7
 8008cd0:	1ac3      	subs	r3, r0, r3
 8008cd2:	d0d3      	beq.n	8008c7c <_malloc_r+0x20>
 8008cd4:	425a      	negs	r2, r3
 8008cd6:	50e2      	str	r2, [r4, r3]
 8008cd8:	e7d0      	b.n	8008c7c <_malloc_r+0x20>
 8008cda:	428c      	cmp	r4, r1
 8008cdc:	684b      	ldr	r3, [r1, #4]
 8008cde:	bf16      	itet	ne
 8008ce0:	6063      	strne	r3, [r4, #4]
 8008ce2:	6013      	streq	r3, [r2, #0]
 8008ce4:	460c      	movne	r4, r1
 8008ce6:	e7eb      	b.n	8008cc0 <_malloc_r+0x64>
 8008ce8:	460c      	mov	r4, r1
 8008cea:	6849      	ldr	r1, [r1, #4]
 8008cec:	e7cc      	b.n	8008c88 <_malloc_r+0x2c>
 8008cee:	1cc4      	adds	r4, r0, #3
 8008cf0:	f024 0403 	bic.w	r4, r4, #3
 8008cf4:	42a0      	cmp	r0, r4
 8008cf6:	d005      	beq.n	8008d04 <_malloc_r+0xa8>
 8008cf8:	1a21      	subs	r1, r4, r0
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f000 f808 	bl	8008d10 <_sbrk_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	d0cf      	beq.n	8008ca4 <_malloc_r+0x48>
 8008d04:	6025      	str	r5, [r4, #0]
 8008d06:	e7db      	b.n	8008cc0 <_malloc_r+0x64>
 8008d08:	200040c8 	.word	0x200040c8
 8008d0c:	200040cc 	.word	0x200040cc

08008d10 <_sbrk_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4c06      	ldr	r4, [pc, #24]	; (8008d2c <_sbrk_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4605      	mov	r5, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	f7ff fd64 	bl	80087e8 <_sbrk>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_sbrk_r+0x1a>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_sbrk_r+0x1a>
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	200043b0 	.word	0x200043b0

08008d30 <setbuf>:
 8008d30:	2900      	cmp	r1, #0
 8008d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d36:	bf0c      	ite	eq
 8008d38:	2202      	moveq	r2, #2
 8008d3a:	2200      	movne	r2, #0
 8008d3c:	f000 b800 	b.w	8008d40 <setvbuf>

08008d40 <setvbuf>:
 8008d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d44:	461d      	mov	r5, r3
 8008d46:	4b51      	ldr	r3, [pc, #324]	; (8008e8c <setvbuf+0x14c>)
 8008d48:	681e      	ldr	r6, [r3, #0]
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	460f      	mov	r7, r1
 8008d4e:	4690      	mov	r8, r2
 8008d50:	b126      	cbz	r6, 8008d5c <setvbuf+0x1c>
 8008d52:	69b3      	ldr	r3, [r6, #24]
 8008d54:	b913      	cbnz	r3, 8008d5c <setvbuf+0x1c>
 8008d56:	4630      	mov	r0, r6
 8008d58:	f000 f9f4 	bl	8009144 <__sinit>
 8008d5c:	4b4c      	ldr	r3, [pc, #304]	; (8008e90 <setvbuf+0x150>)
 8008d5e:	429c      	cmp	r4, r3
 8008d60:	d152      	bne.n	8008e08 <setvbuf+0xc8>
 8008d62:	6874      	ldr	r4, [r6, #4]
 8008d64:	f1b8 0f02 	cmp.w	r8, #2
 8008d68:	d006      	beq.n	8008d78 <setvbuf+0x38>
 8008d6a:	f1b8 0f01 	cmp.w	r8, #1
 8008d6e:	f200 8089 	bhi.w	8008e84 <setvbuf+0x144>
 8008d72:	2d00      	cmp	r5, #0
 8008d74:	f2c0 8086 	blt.w	8008e84 <setvbuf+0x144>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 f978 	bl	8009070 <_fflush_r>
 8008d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d82:	b141      	cbz	r1, 8008d96 <setvbuf+0x56>
 8008d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d88:	4299      	cmp	r1, r3
 8008d8a:	d002      	beq.n	8008d92 <setvbuf+0x52>
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff ff17 	bl	8008bc0 <_free_r>
 8008d92:	2300      	movs	r3, #0
 8008d94:	6363      	str	r3, [r4, #52]	; 0x34
 8008d96:	2300      	movs	r3, #0
 8008d98:	61a3      	str	r3, [r4, #24]
 8008d9a:	6063      	str	r3, [r4, #4]
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	061b      	lsls	r3, r3, #24
 8008da0:	d503      	bpl.n	8008daa <setvbuf+0x6a>
 8008da2:	6921      	ldr	r1, [r4, #16]
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7ff ff0b 	bl	8008bc0 <_free_r>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008db0:	f023 0303 	bic.w	r3, r3, #3
 8008db4:	f1b8 0f02 	cmp.w	r8, #2
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	d05d      	beq.n	8008e78 <setvbuf+0x138>
 8008dbc:	ab01      	add	r3, sp, #4
 8008dbe:	466a      	mov	r2, sp
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 fa48 	bl	8009258 <__swhatbuf_r>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	4318      	orrs	r0, r3
 8008dcc:	81a0      	strh	r0, [r4, #12]
 8008dce:	bb2d      	cbnz	r5, 8008e1c <setvbuf+0xdc>
 8008dd0:	9d00      	ldr	r5, [sp, #0]
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7ff fed0 	bl	8008b78 <malloc>
 8008dd8:	4607      	mov	r7, r0
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d14e      	bne.n	8008e7c <setvbuf+0x13c>
 8008dde:	f8dd 9000 	ldr.w	r9, [sp]
 8008de2:	45a9      	cmp	r9, r5
 8008de4:	d13c      	bne.n	8008e60 <setvbuf+0x120>
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f043 0302 	orr.w	r3, r3, #2
 8008df0:	81a3      	strh	r3, [r4, #12]
 8008df2:	2300      	movs	r3, #0
 8008df4:	60a3      	str	r3, [r4, #8]
 8008df6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	6163      	str	r3, [r4, #20]
 8008e02:	b003      	add	sp, #12
 8008e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e08:	4b22      	ldr	r3, [pc, #136]	; (8008e94 <setvbuf+0x154>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d101      	bne.n	8008e12 <setvbuf+0xd2>
 8008e0e:	68b4      	ldr	r4, [r6, #8]
 8008e10:	e7a8      	b.n	8008d64 <setvbuf+0x24>
 8008e12:	4b21      	ldr	r3, [pc, #132]	; (8008e98 <setvbuf+0x158>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	bf08      	it	eq
 8008e18:	68f4      	ldreq	r4, [r6, #12]
 8008e1a:	e7a3      	b.n	8008d64 <setvbuf+0x24>
 8008e1c:	2f00      	cmp	r7, #0
 8008e1e:	d0d8      	beq.n	8008dd2 <setvbuf+0x92>
 8008e20:	69b3      	ldr	r3, [r6, #24]
 8008e22:	b913      	cbnz	r3, 8008e2a <setvbuf+0xea>
 8008e24:	4630      	mov	r0, r6
 8008e26:	f000 f98d 	bl	8009144 <__sinit>
 8008e2a:	f1b8 0f01 	cmp.w	r8, #1
 8008e2e:	bf08      	it	eq
 8008e30:	89a3      	ldrheq	r3, [r4, #12]
 8008e32:	6027      	str	r7, [r4, #0]
 8008e34:	bf04      	itt	eq
 8008e36:	f043 0301 	orreq.w	r3, r3, #1
 8008e3a:	81a3      	strheq	r3, [r4, #12]
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f013 0008 	ands.w	r0, r3, #8
 8008e42:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008e46:	d01b      	beq.n	8008e80 <setvbuf+0x140>
 8008e48:	f013 0001 	ands.w	r0, r3, #1
 8008e4c:	bf18      	it	ne
 8008e4e:	426d      	negne	r5, r5
 8008e50:	f04f 0300 	mov.w	r3, #0
 8008e54:	bf1d      	ittte	ne
 8008e56:	60a3      	strne	r3, [r4, #8]
 8008e58:	61a5      	strne	r5, [r4, #24]
 8008e5a:	4618      	movne	r0, r3
 8008e5c:	60a5      	streq	r5, [r4, #8]
 8008e5e:	e7d0      	b.n	8008e02 <setvbuf+0xc2>
 8008e60:	4648      	mov	r0, r9
 8008e62:	f7ff fe89 	bl	8008b78 <malloc>
 8008e66:	4607      	mov	r7, r0
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d0bc      	beq.n	8008de6 <setvbuf+0xa6>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	464d      	mov	r5, r9
 8008e76:	e7d3      	b.n	8008e20 <setvbuf+0xe0>
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e7b6      	b.n	8008dea <setvbuf+0xaa>
 8008e7c:	46a9      	mov	r9, r5
 8008e7e:	e7f5      	b.n	8008e6c <setvbuf+0x12c>
 8008e80:	60a0      	str	r0, [r4, #8]
 8008e82:	e7be      	b.n	8008e02 <setvbuf+0xc2>
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	e7bb      	b.n	8008e02 <setvbuf+0xc2>
 8008e8a:	bf00      	nop
 8008e8c:	2000004c 	.word	0x2000004c
 8008e90:	0800a3ec 	.word	0x0800a3ec
 8008e94:	0800a40c 	.word	0x0800a40c
 8008e98:	0800a3cc 	.word	0x0800a3cc

08008e9c <sniprintf>:
 8008e9c:	b40c      	push	{r2, r3}
 8008e9e:	b530      	push	{r4, r5, lr}
 8008ea0:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <sniprintf+0x64>)
 8008ea2:	1e0c      	subs	r4, r1, #0
 8008ea4:	b09d      	sub	sp, #116	; 0x74
 8008ea6:	681d      	ldr	r5, [r3, #0]
 8008ea8:	da08      	bge.n	8008ebc <sniprintf+0x20>
 8008eaa:	238b      	movs	r3, #139	; 0x8b
 8008eac:	602b      	str	r3, [r5, #0]
 8008eae:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb2:	b01d      	add	sp, #116	; 0x74
 8008eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eb8:	b002      	add	sp, #8
 8008eba:	4770      	bx	lr
 8008ebc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ec4:	bf14      	ite	ne
 8008ec6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008eca:	4623      	moveq	r3, r4
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	9307      	str	r3, [sp, #28]
 8008ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ed4:	9002      	str	r0, [sp, #8]
 8008ed6:	9006      	str	r0, [sp, #24]
 8008ed8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ede:	ab21      	add	r3, sp, #132	; 0x84
 8008ee0:	a902      	add	r1, sp, #8
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	f000 fa37 	bl	8009358 <_svfiprintf_r>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	bfbc      	itt	lt
 8008eee:	238b      	movlt	r3, #139	; 0x8b
 8008ef0:	602b      	strlt	r3, [r5, #0]
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d0dd      	beq.n	8008eb2 <sniprintf+0x16>
 8008ef6:	9b02      	ldr	r3, [sp, #8]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	e7d9      	b.n	8008eb2 <sniprintf+0x16>
 8008efe:	bf00      	nop
 8008f00:	2000004c 	.word	0x2000004c

08008f04 <strcat>:
 8008f04:	b510      	push	{r4, lr}
 8008f06:	4603      	mov	r3, r0
 8008f08:	781a      	ldrb	r2, [r3, #0]
 8008f0a:	1c5c      	adds	r4, r3, #1
 8008f0c:	b93a      	cbnz	r2, 8008f1e <strcat+0x1a>
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f18:	2a00      	cmp	r2, #0
 8008f1a:	d1f9      	bne.n	8008f10 <strcat+0xc>
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	4623      	mov	r3, r4
 8008f20:	e7f2      	b.n	8008f08 <strcat+0x4>
	...

08008f24 <_vsiprintf_r>:
 8008f24:	b500      	push	{lr}
 8008f26:	b09b      	sub	sp, #108	; 0x6c
 8008f28:	9100      	str	r1, [sp, #0]
 8008f2a:	9104      	str	r1, [sp, #16]
 8008f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f30:	9105      	str	r1, [sp, #20]
 8008f32:	9102      	str	r1, [sp, #8]
 8008f34:	4905      	ldr	r1, [pc, #20]	; (8008f4c <_vsiprintf_r+0x28>)
 8008f36:	9103      	str	r1, [sp, #12]
 8008f38:	4669      	mov	r1, sp
 8008f3a:	f000 fa0d 	bl	8009358 <_svfiprintf_r>
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	b01b      	add	sp, #108	; 0x6c
 8008f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f4a:	bf00      	nop
 8008f4c:	ffff0208 	.word	0xffff0208

08008f50 <vsiprintf>:
 8008f50:	4613      	mov	r3, r2
 8008f52:	460a      	mov	r2, r1
 8008f54:	4601      	mov	r1, r0
 8008f56:	4802      	ldr	r0, [pc, #8]	; (8008f60 <vsiprintf+0x10>)
 8008f58:	6800      	ldr	r0, [r0, #0]
 8008f5a:	f7ff bfe3 	b.w	8008f24 <_vsiprintf_r>
 8008f5e:	bf00      	nop
 8008f60:	2000004c 	.word	0x2000004c

08008f64 <__sflush_r>:
 8008f64:	898a      	ldrh	r2, [r1, #12]
 8008f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	0710      	lsls	r0, r2, #28
 8008f6e:	460c      	mov	r4, r1
 8008f70:	d458      	bmi.n	8009024 <__sflush_r+0xc0>
 8008f72:	684b      	ldr	r3, [r1, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	dc05      	bgt.n	8008f84 <__sflush_r+0x20>
 8008f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dc02      	bgt.n	8008f84 <__sflush_r+0x20>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	d0f9      	beq.n	8008f7e <__sflush_r+0x1a>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f90:	682f      	ldr	r7, [r5, #0]
 8008f92:	6a21      	ldr	r1, [r4, #32]
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	d032      	beq.n	8008ffe <__sflush_r+0x9a>
 8008f98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	075a      	lsls	r2, r3, #29
 8008f9e:	d505      	bpl.n	8008fac <__sflush_r+0x48>
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	1ac0      	subs	r0, r0, r3
 8008fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fa6:	b10b      	cbz	r3, 8008fac <__sflush_r+0x48>
 8008fa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008faa:	1ac0      	subs	r0, r0, r3
 8008fac:	2300      	movs	r3, #0
 8008fae:	4602      	mov	r2, r0
 8008fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fb2:	6a21      	ldr	r1, [r4, #32]
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b0      	blx	r6
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	d106      	bne.n	8008fcc <__sflush_r+0x68>
 8008fbe:	6829      	ldr	r1, [r5, #0]
 8008fc0:	291d      	cmp	r1, #29
 8008fc2:	d848      	bhi.n	8009056 <__sflush_r+0xf2>
 8008fc4:	4a29      	ldr	r2, [pc, #164]	; (800906c <__sflush_r+0x108>)
 8008fc6:	40ca      	lsrs	r2, r1
 8008fc8:	07d6      	lsls	r6, r2, #31
 8008fca:	d544      	bpl.n	8009056 <__sflush_r+0xf2>
 8008fcc:	2200      	movs	r2, #0
 8008fce:	6062      	str	r2, [r4, #4]
 8008fd0:	04d9      	lsls	r1, r3, #19
 8008fd2:	6922      	ldr	r2, [r4, #16]
 8008fd4:	6022      	str	r2, [r4, #0]
 8008fd6:	d504      	bpl.n	8008fe2 <__sflush_r+0x7e>
 8008fd8:	1c42      	adds	r2, r0, #1
 8008fda:	d101      	bne.n	8008fe0 <__sflush_r+0x7c>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b903      	cbnz	r3, 8008fe2 <__sflush_r+0x7e>
 8008fe0:	6560      	str	r0, [r4, #84]	; 0x54
 8008fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe4:	602f      	str	r7, [r5, #0]
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	d0c9      	beq.n	8008f7e <__sflush_r+0x1a>
 8008fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fee:	4299      	cmp	r1, r3
 8008ff0:	d002      	beq.n	8008ff8 <__sflush_r+0x94>
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7ff fde4 	bl	8008bc0 <_free_r>
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	6360      	str	r0, [r4, #52]	; 0x34
 8008ffc:	e7c0      	b.n	8008f80 <__sflush_r+0x1c>
 8008ffe:	2301      	movs	r3, #1
 8009000:	4628      	mov	r0, r5
 8009002:	47b0      	blx	r6
 8009004:	1c41      	adds	r1, r0, #1
 8009006:	d1c8      	bne.n	8008f9a <__sflush_r+0x36>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c5      	beq.n	8008f9a <__sflush_r+0x36>
 800900e:	2b1d      	cmp	r3, #29
 8009010:	d001      	beq.n	8009016 <__sflush_r+0xb2>
 8009012:	2b16      	cmp	r3, #22
 8009014:	d101      	bne.n	800901a <__sflush_r+0xb6>
 8009016:	602f      	str	r7, [r5, #0]
 8009018:	e7b1      	b.n	8008f7e <__sflush_r+0x1a>
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009020:	81a3      	strh	r3, [r4, #12]
 8009022:	e7ad      	b.n	8008f80 <__sflush_r+0x1c>
 8009024:	690f      	ldr	r7, [r1, #16]
 8009026:	2f00      	cmp	r7, #0
 8009028:	d0a9      	beq.n	8008f7e <__sflush_r+0x1a>
 800902a:	0793      	lsls	r3, r2, #30
 800902c:	680e      	ldr	r6, [r1, #0]
 800902e:	bf08      	it	eq
 8009030:	694b      	ldreq	r3, [r1, #20]
 8009032:	600f      	str	r7, [r1, #0]
 8009034:	bf18      	it	ne
 8009036:	2300      	movne	r3, #0
 8009038:	eba6 0807 	sub.w	r8, r6, r7
 800903c:	608b      	str	r3, [r1, #8]
 800903e:	f1b8 0f00 	cmp.w	r8, #0
 8009042:	dd9c      	ble.n	8008f7e <__sflush_r+0x1a>
 8009044:	4643      	mov	r3, r8
 8009046:	463a      	mov	r2, r7
 8009048:	6a21      	ldr	r1, [r4, #32]
 800904a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800904c:	4628      	mov	r0, r5
 800904e:	47b0      	blx	r6
 8009050:	2800      	cmp	r0, #0
 8009052:	dc06      	bgt.n	8009062 <__sflush_r+0xfe>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	f04f 30ff 	mov.w	r0, #4294967295
 8009060:	e78e      	b.n	8008f80 <__sflush_r+0x1c>
 8009062:	4407      	add	r7, r0
 8009064:	eba8 0800 	sub.w	r8, r8, r0
 8009068:	e7e9      	b.n	800903e <__sflush_r+0xda>
 800906a:	bf00      	nop
 800906c:	20400001 	.word	0x20400001

08009070 <_fflush_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	b1db      	cbz	r3, 80090b2 <_fflush_r+0x42>
 800907a:	b118      	cbz	r0, 8009084 <_fflush_r+0x14>
 800907c:	6983      	ldr	r3, [r0, #24]
 800907e:	b90b      	cbnz	r3, 8009084 <_fflush_r+0x14>
 8009080:	f000 f860 	bl	8009144 <__sinit>
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <_fflush_r+0x48>)
 8009086:	429c      	cmp	r4, r3
 8009088:	d109      	bne.n	800909e <_fflush_r+0x2e>
 800908a:	686c      	ldr	r4, [r5, #4]
 800908c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009090:	b17b      	cbz	r3, 80090b2 <_fflush_r+0x42>
 8009092:	4621      	mov	r1, r4
 8009094:	4628      	mov	r0, r5
 8009096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800909a:	f7ff bf63 	b.w	8008f64 <__sflush_r>
 800909e:	4b07      	ldr	r3, [pc, #28]	; (80090bc <_fflush_r+0x4c>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	d101      	bne.n	80090a8 <_fflush_r+0x38>
 80090a4:	68ac      	ldr	r4, [r5, #8]
 80090a6:	e7f1      	b.n	800908c <_fflush_r+0x1c>
 80090a8:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <_fflush_r+0x50>)
 80090aa:	429c      	cmp	r4, r3
 80090ac:	bf08      	it	eq
 80090ae:	68ec      	ldreq	r4, [r5, #12]
 80090b0:	e7ec      	b.n	800908c <_fflush_r+0x1c>
 80090b2:	2000      	movs	r0, #0
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	bf00      	nop
 80090b8:	0800a3ec 	.word	0x0800a3ec
 80090bc:	0800a40c 	.word	0x0800a40c
 80090c0:	0800a3cc 	.word	0x0800a3cc

080090c4 <std>:
 80090c4:	2300      	movs	r3, #0
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	e9c0 3300 	strd	r3, r3, [r0]
 80090ce:	6083      	str	r3, [r0, #8]
 80090d0:	8181      	strh	r1, [r0, #12]
 80090d2:	6643      	str	r3, [r0, #100]	; 0x64
 80090d4:	81c2      	strh	r2, [r0, #14]
 80090d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090da:	6183      	str	r3, [r0, #24]
 80090dc:	4619      	mov	r1, r3
 80090de:	2208      	movs	r2, #8
 80090e0:	305c      	adds	r0, #92	; 0x5c
 80090e2:	f7ff fd64 	bl	8008bae <memset>
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x38>)
 80090e8:	6263      	str	r3, [r4, #36]	; 0x24
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std+0x3c>)
 80090ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std+0x40>)
 80090f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std+0x44>)
 80090f4:	6224      	str	r4, [r4, #32]
 80090f6:	6323      	str	r3, [r4, #48]	; 0x30
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	08009859 	.word	0x08009859
 8009100:	0800987b 	.word	0x0800987b
 8009104:	080098b3 	.word	0x080098b3
 8009108:	080098d7 	.word	0x080098d7

0800910c <_cleanup_r>:
 800910c:	4901      	ldr	r1, [pc, #4]	; (8009114 <_cleanup_r+0x8>)
 800910e:	f000 b885 	b.w	800921c <_fwalk_reent>
 8009112:	bf00      	nop
 8009114:	08009071 	.word	0x08009071

08009118 <__sfmoreglue>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	1e4a      	subs	r2, r1, #1
 800911c:	2568      	movs	r5, #104	; 0x68
 800911e:	4355      	muls	r5, r2
 8009120:	460e      	mov	r6, r1
 8009122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009126:	f7ff fd99 	bl	8008c5c <_malloc_r>
 800912a:	4604      	mov	r4, r0
 800912c:	b140      	cbz	r0, 8009140 <__sfmoreglue+0x28>
 800912e:	2100      	movs	r1, #0
 8009130:	e9c0 1600 	strd	r1, r6, [r0]
 8009134:	300c      	adds	r0, #12
 8009136:	60a0      	str	r0, [r4, #8]
 8009138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800913c:	f7ff fd37 	bl	8008bae <memset>
 8009140:	4620      	mov	r0, r4
 8009142:	bd70      	pop	{r4, r5, r6, pc}

08009144 <__sinit>:
 8009144:	6983      	ldr	r3, [r0, #24]
 8009146:	b510      	push	{r4, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	bb33      	cbnz	r3, 800919a <__sinit+0x56>
 800914c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009150:	6503      	str	r3, [r0, #80]	; 0x50
 8009152:	4b12      	ldr	r3, [pc, #72]	; (800919c <__sinit+0x58>)
 8009154:	4a12      	ldr	r2, [pc, #72]	; (80091a0 <__sinit+0x5c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6282      	str	r2, [r0, #40]	; 0x28
 800915a:	4298      	cmp	r0, r3
 800915c:	bf04      	itt	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	6183      	streq	r3, [r0, #24]
 8009162:	f000 f81f 	bl	80091a4 <__sfp>
 8009166:	6060      	str	r0, [r4, #4]
 8009168:	4620      	mov	r0, r4
 800916a:	f000 f81b 	bl	80091a4 <__sfp>
 800916e:	60a0      	str	r0, [r4, #8]
 8009170:	4620      	mov	r0, r4
 8009172:	f000 f817 	bl	80091a4 <__sfp>
 8009176:	2200      	movs	r2, #0
 8009178:	60e0      	str	r0, [r4, #12]
 800917a:	2104      	movs	r1, #4
 800917c:	6860      	ldr	r0, [r4, #4]
 800917e:	f7ff ffa1 	bl	80090c4 <std>
 8009182:	2201      	movs	r2, #1
 8009184:	2109      	movs	r1, #9
 8009186:	68a0      	ldr	r0, [r4, #8]
 8009188:	f7ff ff9c 	bl	80090c4 <std>
 800918c:	2202      	movs	r2, #2
 800918e:	2112      	movs	r1, #18
 8009190:	68e0      	ldr	r0, [r4, #12]
 8009192:	f7ff ff97 	bl	80090c4 <std>
 8009196:	2301      	movs	r3, #1
 8009198:	61a3      	str	r3, [r4, #24]
 800919a:	bd10      	pop	{r4, pc}
 800919c:	0800a3c8 	.word	0x0800a3c8
 80091a0:	0800910d 	.word	0x0800910d

080091a4 <__sfp>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	4b1b      	ldr	r3, [pc, #108]	; (8009214 <__sfp+0x70>)
 80091a8:	681e      	ldr	r6, [r3, #0]
 80091aa:	69b3      	ldr	r3, [r6, #24]
 80091ac:	4607      	mov	r7, r0
 80091ae:	b913      	cbnz	r3, 80091b6 <__sfp+0x12>
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff ffc7 	bl	8009144 <__sinit>
 80091b6:	3648      	adds	r6, #72	; 0x48
 80091b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091bc:	3b01      	subs	r3, #1
 80091be:	d503      	bpl.n	80091c8 <__sfp+0x24>
 80091c0:	6833      	ldr	r3, [r6, #0]
 80091c2:	b133      	cbz	r3, 80091d2 <__sfp+0x2e>
 80091c4:	6836      	ldr	r6, [r6, #0]
 80091c6:	e7f7      	b.n	80091b8 <__sfp+0x14>
 80091c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091cc:	b16d      	cbz	r5, 80091ea <__sfp+0x46>
 80091ce:	3468      	adds	r4, #104	; 0x68
 80091d0:	e7f4      	b.n	80091bc <__sfp+0x18>
 80091d2:	2104      	movs	r1, #4
 80091d4:	4638      	mov	r0, r7
 80091d6:	f7ff ff9f 	bl	8009118 <__sfmoreglue>
 80091da:	6030      	str	r0, [r6, #0]
 80091dc:	2800      	cmp	r0, #0
 80091de:	d1f1      	bne.n	80091c4 <__sfp+0x20>
 80091e0:	230c      	movs	r3, #12
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	4604      	mov	r4, r0
 80091e6:	4620      	mov	r0, r4
 80091e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ea:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <__sfp+0x74>)
 80091ec:	6665      	str	r5, [r4, #100]	; 0x64
 80091ee:	e9c4 5500 	strd	r5, r5, [r4]
 80091f2:	60a5      	str	r5, [r4, #8]
 80091f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80091f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80091fc:	2208      	movs	r2, #8
 80091fe:	4629      	mov	r1, r5
 8009200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009204:	f7ff fcd3 	bl	8008bae <memset>
 8009208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800920c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009210:	e7e9      	b.n	80091e6 <__sfp+0x42>
 8009212:	bf00      	nop
 8009214:	0800a3c8 	.word	0x0800a3c8
 8009218:	ffff0001 	.word	0xffff0001

0800921c <_fwalk_reent>:
 800921c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009220:	4680      	mov	r8, r0
 8009222:	4689      	mov	r9, r1
 8009224:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009228:	2600      	movs	r6, #0
 800922a:	b914      	cbnz	r4, 8009232 <_fwalk_reent+0x16>
 800922c:	4630      	mov	r0, r6
 800922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009232:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009236:	3f01      	subs	r7, #1
 8009238:	d501      	bpl.n	800923e <_fwalk_reent+0x22>
 800923a:	6824      	ldr	r4, [r4, #0]
 800923c:	e7f5      	b.n	800922a <_fwalk_reent+0xe>
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d907      	bls.n	8009254 <_fwalk_reent+0x38>
 8009244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009248:	3301      	adds	r3, #1
 800924a:	d003      	beq.n	8009254 <_fwalk_reent+0x38>
 800924c:	4629      	mov	r1, r5
 800924e:	4640      	mov	r0, r8
 8009250:	47c8      	blx	r9
 8009252:	4306      	orrs	r6, r0
 8009254:	3568      	adds	r5, #104	; 0x68
 8009256:	e7ee      	b.n	8009236 <_fwalk_reent+0x1a>

08009258 <__swhatbuf_r>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	460e      	mov	r6, r1
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	2900      	cmp	r1, #0
 8009262:	b096      	sub	sp, #88	; 0x58
 8009264:	4614      	mov	r4, r2
 8009266:	461d      	mov	r5, r3
 8009268:	da07      	bge.n	800927a <__swhatbuf_r+0x22>
 800926a:	2300      	movs	r3, #0
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	89b3      	ldrh	r3, [r6, #12]
 8009270:	061a      	lsls	r2, r3, #24
 8009272:	d410      	bmi.n	8009296 <__swhatbuf_r+0x3e>
 8009274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009278:	e00e      	b.n	8009298 <__swhatbuf_r+0x40>
 800927a:	466a      	mov	r2, sp
 800927c:	f000 fb52 	bl	8009924 <_fstat_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	dbf2      	blt.n	800926a <__swhatbuf_r+0x12>
 8009284:	9a01      	ldr	r2, [sp, #4]
 8009286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800928a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800928e:	425a      	negs	r2, r3
 8009290:	415a      	adcs	r2, r3
 8009292:	602a      	str	r2, [r5, #0]
 8009294:	e7ee      	b.n	8009274 <__swhatbuf_r+0x1c>
 8009296:	2340      	movs	r3, #64	; 0x40
 8009298:	2000      	movs	r0, #0
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	b016      	add	sp, #88	; 0x58
 800929e:	bd70      	pop	{r4, r5, r6, pc}

080092a0 <__malloc_lock>:
 80092a0:	4770      	bx	lr

080092a2 <__malloc_unlock>:
 80092a2:	4770      	bx	lr

080092a4 <__ssputs_r>:
 80092a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	688e      	ldr	r6, [r1, #8]
 80092aa:	429e      	cmp	r6, r3
 80092ac:	4682      	mov	sl, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4690      	mov	r8, r2
 80092b2:	4699      	mov	r9, r3
 80092b4:	d837      	bhi.n	8009326 <__ssputs_r+0x82>
 80092b6:	898a      	ldrh	r2, [r1, #12]
 80092b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092bc:	d031      	beq.n	8009322 <__ssputs_r+0x7e>
 80092be:	6825      	ldr	r5, [r4, #0]
 80092c0:	6909      	ldr	r1, [r1, #16]
 80092c2:	1a6f      	subs	r7, r5, r1
 80092c4:	6965      	ldr	r5, [r4, #20]
 80092c6:	2302      	movs	r3, #2
 80092c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80092d0:	f109 0301 	add.w	r3, r9, #1
 80092d4:	443b      	add	r3, r7
 80092d6:	429d      	cmp	r5, r3
 80092d8:	bf38      	it	cc
 80092da:	461d      	movcc	r5, r3
 80092dc:	0553      	lsls	r3, r2, #21
 80092de:	d530      	bpl.n	8009342 <__ssputs_r+0x9e>
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7ff fcbb 	bl	8008c5c <_malloc_r>
 80092e6:	4606      	mov	r6, r0
 80092e8:	b950      	cbnz	r0, 8009300 <__ssputs_r+0x5c>
 80092ea:	230c      	movs	r3, #12
 80092ec:	f8ca 3000 	str.w	r3, [sl]
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f6:	81a3      	strh	r3, [r4, #12]
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009300:	463a      	mov	r2, r7
 8009302:	6921      	ldr	r1, [r4, #16]
 8009304:	f7ff fc48 	bl	8008b98 <memcpy>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800930e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	6126      	str	r6, [r4, #16]
 8009316:	6165      	str	r5, [r4, #20]
 8009318:	443e      	add	r6, r7
 800931a:	1bed      	subs	r5, r5, r7
 800931c:	6026      	str	r6, [r4, #0]
 800931e:	60a5      	str	r5, [r4, #8]
 8009320:	464e      	mov	r6, r9
 8009322:	454e      	cmp	r6, r9
 8009324:	d900      	bls.n	8009328 <__ssputs_r+0x84>
 8009326:	464e      	mov	r6, r9
 8009328:	4632      	mov	r2, r6
 800932a:	4641      	mov	r1, r8
 800932c:	6820      	ldr	r0, [r4, #0]
 800932e:	f000 fb1d 	bl	800996c <memmove>
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	1b9b      	subs	r3, r3, r6
 8009336:	60a3      	str	r3, [r4, #8]
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	441e      	add	r6, r3
 800933c:	6026      	str	r6, [r4, #0]
 800933e:	2000      	movs	r0, #0
 8009340:	e7dc      	b.n	80092fc <__ssputs_r+0x58>
 8009342:	462a      	mov	r2, r5
 8009344:	f000 fb2b 	bl	800999e <_realloc_r>
 8009348:	4606      	mov	r6, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	d1e2      	bne.n	8009314 <__ssputs_r+0x70>
 800934e:	6921      	ldr	r1, [r4, #16]
 8009350:	4650      	mov	r0, sl
 8009352:	f7ff fc35 	bl	8008bc0 <_free_r>
 8009356:	e7c8      	b.n	80092ea <__ssputs_r+0x46>

08009358 <_svfiprintf_r>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	461d      	mov	r5, r3
 800935e:	898b      	ldrh	r3, [r1, #12]
 8009360:	061f      	lsls	r7, r3, #24
 8009362:	b09d      	sub	sp, #116	; 0x74
 8009364:	4680      	mov	r8, r0
 8009366:	460c      	mov	r4, r1
 8009368:	4616      	mov	r6, r2
 800936a:	d50f      	bpl.n	800938c <_svfiprintf_r+0x34>
 800936c:	690b      	ldr	r3, [r1, #16]
 800936e:	b96b      	cbnz	r3, 800938c <_svfiprintf_r+0x34>
 8009370:	2140      	movs	r1, #64	; 0x40
 8009372:	f7ff fc73 	bl	8008c5c <_malloc_r>
 8009376:	6020      	str	r0, [r4, #0]
 8009378:	6120      	str	r0, [r4, #16]
 800937a:	b928      	cbnz	r0, 8009388 <_svfiprintf_r+0x30>
 800937c:	230c      	movs	r3, #12
 800937e:	f8c8 3000 	str.w	r3, [r8]
 8009382:	f04f 30ff 	mov.w	r0, #4294967295
 8009386:	e0c8      	b.n	800951a <_svfiprintf_r+0x1c2>
 8009388:	2340      	movs	r3, #64	; 0x40
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	2300      	movs	r3, #0
 800938e:	9309      	str	r3, [sp, #36]	; 0x24
 8009390:	2320      	movs	r3, #32
 8009392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009396:	2330      	movs	r3, #48	; 0x30
 8009398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939c:	9503      	str	r5, [sp, #12]
 800939e:	f04f 0b01 	mov.w	fp, #1
 80093a2:	4637      	mov	r7, r6
 80093a4:	463d      	mov	r5, r7
 80093a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093aa:	b10b      	cbz	r3, 80093b0 <_svfiprintf_r+0x58>
 80093ac:	2b25      	cmp	r3, #37	; 0x25
 80093ae:	d13e      	bne.n	800942e <_svfiprintf_r+0xd6>
 80093b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80093b4:	d00b      	beq.n	80093ce <_svfiprintf_r+0x76>
 80093b6:	4653      	mov	r3, sl
 80093b8:	4632      	mov	r2, r6
 80093ba:	4621      	mov	r1, r4
 80093bc:	4640      	mov	r0, r8
 80093be:	f7ff ff71 	bl	80092a4 <__ssputs_r>
 80093c2:	3001      	adds	r0, #1
 80093c4:	f000 80a4 	beq.w	8009510 <_svfiprintf_r+0x1b8>
 80093c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ca:	4453      	add	r3, sl
 80093cc:	9309      	str	r3, [sp, #36]	; 0x24
 80093ce:	783b      	ldrb	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 809d 	beq.w	8009510 <_svfiprintf_r+0x1b8>
 80093d6:	2300      	movs	r3, #0
 80093d8:	f04f 32ff 	mov.w	r2, #4294967295
 80093dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	9307      	str	r3, [sp, #28]
 80093e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093e8:	931a      	str	r3, [sp, #104]	; 0x68
 80093ea:	462f      	mov	r7, r5
 80093ec:	2205      	movs	r2, #5
 80093ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80093f2:	4850      	ldr	r0, [pc, #320]	; (8009534 <_svfiprintf_r+0x1dc>)
 80093f4:	f7f6 fef4 	bl	80001e0 <memchr>
 80093f8:	9b04      	ldr	r3, [sp, #16]
 80093fa:	b9d0      	cbnz	r0, 8009432 <_svfiprintf_r+0xda>
 80093fc:	06d9      	lsls	r1, r3, #27
 80093fe:	bf44      	itt	mi
 8009400:	2220      	movmi	r2, #32
 8009402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009406:	071a      	lsls	r2, r3, #28
 8009408:	bf44      	itt	mi
 800940a:	222b      	movmi	r2, #43	; 0x2b
 800940c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009410:	782a      	ldrb	r2, [r5, #0]
 8009412:	2a2a      	cmp	r2, #42	; 0x2a
 8009414:	d015      	beq.n	8009442 <_svfiprintf_r+0xea>
 8009416:	9a07      	ldr	r2, [sp, #28]
 8009418:	462f      	mov	r7, r5
 800941a:	2000      	movs	r0, #0
 800941c:	250a      	movs	r5, #10
 800941e:	4639      	mov	r1, r7
 8009420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009424:	3b30      	subs	r3, #48	; 0x30
 8009426:	2b09      	cmp	r3, #9
 8009428:	d94d      	bls.n	80094c6 <_svfiprintf_r+0x16e>
 800942a:	b1b8      	cbz	r0, 800945c <_svfiprintf_r+0x104>
 800942c:	e00f      	b.n	800944e <_svfiprintf_r+0xf6>
 800942e:	462f      	mov	r7, r5
 8009430:	e7b8      	b.n	80093a4 <_svfiprintf_r+0x4c>
 8009432:	4a40      	ldr	r2, [pc, #256]	; (8009534 <_svfiprintf_r+0x1dc>)
 8009434:	1a80      	subs	r0, r0, r2
 8009436:	fa0b f000 	lsl.w	r0, fp, r0
 800943a:	4318      	orrs	r0, r3
 800943c:	9004      	str	r0, [sp, #16]
 800943e:	463d      	mov	r5, r7
 8009440:	e7d3      	b.n	80093ea <_svfiprintf_r+0x92>
 8009442:	9a03      	ldr	r2, [sp, #12]
 8009444:	1d11      	adds	r1, r2, #4
 8009446:	6812      	ldr	r2, [r2, #0]
 8009448:	9103      	str	r1, [sp, #12]
 800944a:	2a00      	cmp	r2, #0
 800944c:	db01      	blt.n	8009452 <_svfiprintf_r+0xfa>
 800944e:	9207      	str	r2, [sp, #28]
 8009450:	e004      	b.n	800945c <_svfiprintf_r+0x104>
 8009452:	4252      	negs	r2, r2
 8009454:	f043 0302 	orr.w	r3, r3, #2
 8009458:	9207      	str	r2, [sp, #28]
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	783b      	ldrb	r3, [r7, #0]
 800945e:	2b2e      	cmp	r3, #46	; 0x2e
 8009460:	d10c      	bne.n	800947c <_svfiprintf_r+0x124>
 8009462:	787b      	ldrb	r3, [r7, #1]
 8009464:	2b2a      	cmp	r3, #42	; 0x2a
 8009466:	d133      	bne.n	80094d0 <_svfiprintf_r+0x178>
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	1d1a      	adds	r2, r3, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	9203      	str	r2, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	bfb8      	it	lt
 8009474:	f04f 33ff 	movlt.w	r3, #4294967295
 8009478:	3702      	adds	r7, #2
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	4d2e      	ldr	r5, [pc, #184]	; (8009538 <_svfiprintf_r+0x1e0>)
 800947e:	7839      	ldrb	r1, [r7, #0]
 8009480:	2203      	movs	r2, #3
 8009482:	4628      	mov	r0, r5
 8009484:	f7f6 feac 	bl	80001e0 <memchr>
 8009488:	b138      	cbz	r0, 800949a <_svfiprintf_r+0x142>
 800948a:	2340      	movs	r3, #64	; 0x40
 800948c:	1b40      	subs	r0, r0, r5
 800948e:	fa03 f000 	lsl.w	r0, r3, r0
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	4303      	orrs	r3, r0
 8009496:	3701      	adds	r7, #1
 8009498:	9304      	str	r3, [sp, #16]
 800949a:	7839      	ldrb	r1, [r7, #0]
 800949c:	4827      	ldr	r0, [pc, #156]	; (800953c <_svfiprintf_r+0x1e4>)
 800949e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094a2:	2206      	movs	r2, #6
 80094a4:	1c7e      	adds	r6, r7, #1
 80094a6:	f7f6 fe9b 	bl	80001e0 <memchr>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d038      	beq.n	8009520 <_svfiprintf_r+0x1c8>
 80094ae:	4b24      	ldr	r3, [pc, #144]	; (8009540 <_svfiprintf_r+0x1e8>)
 80094b0:	bb13      	cbnz	r3, 80094f8 <_svfiprintf_r+0x1a0>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	3307      	adds	r3, #7
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	3308      	adds	r3, #8
 80094bc:	9303      	str	r3, [sp, #12]
 80094be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c0:	444b      	add	r3, r9
 80094c2:	9309      	str	r3, [sp, #36]	; 0x24
 80094c4:	e76d      	b.n	80093a2 <_svfiprintf_r+0x4a>
 80094c6:	fb05 3202 	mla	r2, r5, r2, r3
 80094ca:	2001      	movs	r0, #1
 80094cc:	460f      	mov	r7, r1
 80094ce:	e7a6      	b.n	800941e <_svfiprintf_r+0xc6>
 80094d0:	2300      	movs	r3, #0
 80094d2:	3701      	adds	r7, #1
 80094d4:	9305      	str	r3, [sp, #20]
 80094d6:	4619      	mov	r1, r3
 80094d8:	250a      	movs	r5, #10
 80094da:	4638      	mov	r0, r7
 80094dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094e0:	3a30      	subs	r2, #48	; 0x30
 80094e2:	2a09      	cmp	r2, #9
 80094e4:	d903      	bls.n	80094ee <_svfiprintf_r+0x196>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0c8      	beq.n	800947c <_svfiprintf_r+0x124>
 80094ea:	9105      	str	r1, [sp, #20]
 80094ec:	e7c6      	b.n	800947c <_svfiprintf_r+0x124>
 80094ee:	fb05 2101 	mla	r1, r5, r1, r2
 80094f2:	2301      	movs	r3, #1
 80094f4:	4607      	mov	r7, r0
 80094f6:	e7f0      	b.n	80094da <_svfiprintf_r+0x182>
 80094f8:	ab03      	add	r3, sp, #12
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4622      	mov	r2, r4
 80094fe:	4b11      	ldr	r3, [pc, #68]	; (8009544 <_svfiprintf_r+0x1ec>)
 8009500:	a904      	add	r1, sp, #16
 8009502:	4640      	mov	r0, r8
 8009504:	f3af 8000 	nop.w
 8009508:	f1b0 3fff 	cmp.w	r0, #4294967295
 800950c:	4681      	mov	r9, r0
 800950e:	d1d6      	bne.n	80094be <_svfiprintf_r+0x166>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	065b      	lsls	r3, r3, #25
 8009514:	f53f af35 	bmi.w	8009382 <_svfiprintf_r+0x2a>
 8009518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800951a:	b01d      	add	sp, #116	; 0x74
 800951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009520:	ab03      	add	r3, sp, #12
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	4622      	mov	r2, r4
 8009526:	4b07      	ldr	r3, [pc, #28]	; (8009544 <_svfiprintf_r+0x1ec>)
 8009528:	a904      	add	r1, sp, #16
 800952a:	4640      	mov	r0, r8
 800952c:	f000 f882 	bl	8009634 <_printf_i>
 8009530:	e7ea      	b.n	8009508 <_svfiprintf_r+0x1b0>
 8009532:	bf00      	nop
 8009534:	0800a42c 	.word	0x0800a42c
 8009538:	0800a432 	.word	0x0800a432
 800953c:	0800a436 	.word	0x0800a436
 8009540:	00000000 	.word	0x00000000
 8009544:	080092a5 	.word	0x080092a5

08009548 <_printf_common>:
 8009548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	4691      	mov	r9, r2
 800954e:	461f      	mov	r7, r3
 8009550:	688a      	ldr	r2, [r1, #8]
 8009552:	690b      	ldr	r3, [r1, #16]
 8009554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009558:	4293      	cmp	r3, r2
 800955a:	bfb8      	it	lt
 800955c:	4613      	movlt	r3, r2
 800955e:	f8c9 3000 	str.w	r3, [r9]
 8009562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009566:	4606      	mov	r6, r0
 8009568:	460c      	mov	r4, r1
 800956a:	b112      	cbz	r2, 8009572 <_printf_common+0x2a>
 800956c:	3301      	adds	r3, #1
 800956e:	f8c9 3000 	str.w	r3, [r9]
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	0699      	lsls	r1, r3, #26
 8009576:	bf42      	ittt	mi
 8009578:	f8d9 3000 	ldrmi.w	r3, [r9]
 800957c:	3302      	addmi	r3, #2
 800957e:	f8c9 3000 	strmi.w	r3, [r9]
 8009582:	6825      	ldr	r5, [r4, #0]
 8009584:	f015 0506 	ands.w	r5, r5, #6
 8009588:	d107      	bne.n	800959a <_printf_common+0x52>
 800958a:	f104 0a19 	add.w	sl, r4, #25
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	f8d9 2000 	ldr.w	r2, [r9]
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	42ab      	cmp	r3, r5
 8009598:	dc28      	bgt.n	80095ec <_printf_common+0xa4>
 800959a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	3300      	adds	r3, #0
 80095a2:	bf18      	it	ne
 80095a4:	2301      	movne	r3, #1
 80095a6:	0692      	lsls	r2, r2, #26
 80095a8:	d42d      	bmi.n	8009606 <_printf_common+0xbe>
 80095aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095ae:	4639      	mov	r1, r7
 80095b0:	4630      	mov	r0, r6
 80095b2:	47c0      	blx	r8
 80095b4:	3001      	adds	r0, #1
 80095b6:	d020      	beq.n	80095fa <_printf_common+0xb2>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	68e5      	ldr	r5, [r4, #12]
 80095bc:	f8d9 2000 	ldr.w	r2, [r9]
 80095c0:	f003 0306 	and.w	r3, r3, #6
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	bf08      	it	eq
 80095c8:	1aad      	subeq	r5, r5, r2
 80095ca:	68a3      	ldr	r3, [r4, #8]
 80095cc:	6922      	ldr	r2, [r4, #16]
 80095ce:	bf0c      	ite	eq
 80095d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095d4:	2500      	movne	r5, #0
 80095d6:	4293      	cmp	r3, r2
 80095d8:	bfc4      	itt	gt
 80095da:	1a9b      	subgt	r3, r3, r2
 80095dc:	18ed      	addgt	r5, r5, r3
 80095de:	f04f 0900 	mov.w	r9, #0
 80095e2:	341a      	adds	r4, #26
 80095e4:	454d      	cmp	r5, r9
 80095e6:	d11a      	bne.n	800961e <_printf_common+0xd6>
 80095e8:	2000      	movs	r0, #0
 80095ea:	e008      	b.n	80095fe <_printf_common+0xb6>
 80095ec:	2301      	movs	r3, #1
 80095ee:	4652      	mov	r2, sl
 80095f0:	4639      	mov	r1, r7
 80095f2:	4630      	mov	r0, r6
 80095f4:	47c0      	blx	r8
 80095f6:	3001      	adds	r0, #1
 80095f8:	d103      	bne.n	8009602 <_printf_common+0xba>
 80095fa:	f04f 30ff 	mov.w	r0, #4294967295
 80095fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009602:	3501      	adds	r5, #1
 8009604:	e7c3      	b.n	800958e <_printf_common+0x46>
 8009606:	18e1      	adds	r1, r4, r3
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	2030      	movs	r0, #48	; 0x30
 800960c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009610:	4422      	add	r2, r4
 8009612:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009616:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800961a:	3302      	adds	r3, #2
 800961c:	e7c5      	b.n	80095aa <_printf_common+0x62>
 800961e:	2301      	movs	r3, #1
 8009620:	4622      	mov	r2, r4
 8009622:	4639      	mov	r1, r7
 8009624:	4630      	mov	r0, r6
 8009626:	47c0      	blx	r8
 8009628:	3001      	adds	r0, #1
 800962a:	d0e6      	beq.n	80095fa <_printf_common+0xb2>
 800962c:	f109 0901 	add.w	r9, r9, #1
 8009630:	e7d8      	b.n	80095e4 <_printf_common+0x9c>
	...

08009634 <_printf_i>:
 8009634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009638:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800963c:	460c      	mov	r4, r1
 800963e:	7e09      	ldrb	r1, [r1, #24]
 8009640:	b085      	sub	sp, #20
 8009642:	296e      	cmp	r1, #110	; 0x6e
 8009644:	4617      	mov	r7, r2
 8009646:	4606      	mov	r6, r0
 8009648:	4698      	mov	r8, r3
 800964a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800964c:	f000 80b3 	beq.w	80097b6 <_printf_i+0x182>
 8009650:	d822      	bhi.n	8009698 <_printf_i+0x64>
 8009652:	2963      	cmp	r1, #99	; 0x63
 8009654:	d036      	beq.n	80096c4 <_printf_i+0x90>
 8009656:	d80a      	bhi.n	800966e <_printf_i+0x3a>
 8009658:	2900      	cmp	r1, #0
 800965a:	f000 80b9 	beq.w	80097d0 <_printf_i+0x19c>
 800965e:	2958      	cmp	r1, #88	; 0x58
 8009660:	f000 8083 	beq.w	800976a <_printf_i+0x136>
 8009664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009668:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800966c:	e032      	b.n	80096d4 <_printf_i+0xa0>
 800966e:	2964      	cmp	r1, #100	; 0x64
 8009670:	d001      	beq.n	8009676 <_printf_i+0x42>
 8009672:	2969      	cmp	r1, #105	; 0x69
 8009674:	d1f6      	bne.n	8009664 <_printf_i+0x30>
 8009676:	6820      	ldr	r0, [r4, #0]
 8009678:	6813      	ldr	r3, [r2, #0]
 800967a:	0605      	lsls	r5, r0, #24
 800967c:	f103 0104 	add.w	r1, r3, #4
 8009680:	d52a      	bpl.n	80096d8 <_printf_i+0xa4>
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6011      	str	r1, [r2, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	da03      	bge.n	8009692 <_printf_i+0x5e>
 800968a:	222d      	movs	r2, #45	; 0x2d
 800968c:	425b      	negs	r3, r3
 800968e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009692:	486f      	ldr	r0, [pc, #444]	; (8009850 <_printf_i+0x21c>)
 8009694:	220a      	movs	r2, #10
 8009696:	e039      	b.n	800970c <_printf_i+0xd8>
 8009698:	2973      	cmp	r1, #115	; 0x73
 800969a:	f000 809d 	beq.w	80097d8 <_printf_i+0x1a4>
 800969e:	d808      	bhi.n	80096b2 <_printf_i+0x7e>
 80096a0:	296f      	cmp	r1, #111	; 0x6f
 80096a2:	d020      	beq.n	80096e6 <_printf_i+0xb2>
 80096a4:	2970      	cmp	r1, #112	; 0x70
 80096a6:	d1dd      	bne.n	8009664 <_printf_i+0x30>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	f043 0320 	orr.w	r3, r3, #32
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	e003      	b.n	80096ba <_printf_i+0x86>
 80096b2:	2975      	cmp	r1, #117	; 0x75
 80096b4:	d017      	beq.n	80096e6 <_printf_i+0xb2>
 80096b6:	2978      	cmp	r1, #120	; 0x78
 80096b8:	d1d4      	bne.n	8009664 <_printf_i+0x30>
 80096ba:	2378      	movs	r3, #120	; 0x78
 80096bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096c0:	4864      	ldr	r0, [pc, #400]	; (8009854 <_printf_i+0x220>)
 80096c2:	e055      	b.n	8009770 <_printf_i+0x13c>
 80096c4:	6813      	ldr	r3, [r2, #0]
 80096c6:	1d19      	adds	r1, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6011      	str	r1, [r2, #0]
 80096cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096d4:	2301      	movs	r3, #1
 80096d6:	e08c      	b.n	80097f2 <_printf_i+0x1be>
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6011      	str	r1, [r2, #0]
 80096dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096e0:	bf18      	it	ne
 80096e2:	b21b      	sxthne	r3, r3
 80096e4:	e7cf      	b.n	8009686 <_printf_i+0x52>
 80096e6:	6813      	ldr	r3, [r2, #0]
 80096e8:	6825      	ldr	r5, [r4, #0]
 80096ea:	1d18      	adds	r0, r3, #4
 80096ec:	6010      	str	r0, [r2, #0]
 80096ee:	0628      	lsls	r0, r5, #24
 80096f0:	d501      	bpl.n	80096f6 <_printf_i+0xc2>
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	e002      	b.n	80096fc <_printf_i+0xc8>
 80096f6:	0668      	lsls	r0, r5, #25
 80096f8:	d5fb      	bpl.n	80096f2 <_printf_i+0xbe>
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	4854      	ldr	r0, [pc, #336]	; (8009850 <_printf_i+0x21c>)
 80096fe:	296f      	cmp	r1, #111	; 0x6f
 8009700:	bf14      	ite	ne
 8009702:	220a      	movne	r2, #10
 8009704:	2208      	moveq	r2, #8
 8009706:	2100      	movs	r1, #0
 8009708:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800970c:	6865      	ldr	r5, [r4, #4]
 800970e:	60a5      	str	r5, [r4, #8]
 8009710:	2d00      	cmp	r5, #0
 8009712:	f2c0 8095 	blt.w	8009840 <_printf_i+0x20c>
 8009716:	6821      	ldr	r1, [r4, #0]
 8009718:	f021 0104 	bic.w	r1, r1, #4
 800971c:	6021      	str	r1, [r4, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d13d      	bne.n	800979e <_printf_i+0x16a>
 8009722:	2d00      	cmp	r5, #0
 8009724:	f040 808e 	bne.w	8009844 <_printf_i+0x210>
 8009728:	4665      	mov	r5, ip
 800972a:	2a08      	cmp	r2, #8
 800972c:	d10b      	bne.n	8009746 <_printf_i+0x112>
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	07db      	lsls	r3, r3, #31
 8009732:	d508      	bpl.n	8009746 <_printf_i+0x112>
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	6862      	ldr	r2, [r4, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	bfde      	ittt	le
 800973c:	2330      	movle	r3, #48	; 0x30
 800973e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009742:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009746:	ebac 0305 	sub.w	r3, ip, r5
 800974a:	6123      	str	r3, [r4, #16]
 800974c:	f8cd 8000 	str.w	r8, [sp]
 8009750:	463b      	mov	r3, r7
 8009752:	aa03      	add	r2, sp, #12
 8009754:	4621      	mov	r1, r4
 8009756:	4630      	mov	r0, r6
 8009758:	f7ff fef6 	bl	8009548 <_printf_common>
 800975c:	3001      	adds	r0, #1
 800975e:	d14d      	bne.n	80097fc <_printf_i+0x1c8>
 8009760:	f04f 30ff 	mov.w	r0, #4294967295
 8009764:	b005      	add	sp, #20
 8009766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800976a:	4839      	ldr	r0, [pc, #228]	; (8009850 <_printf_i+0x21c>)
 800976c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009770:	6813      	ldr	r3, [r2, #0]
 8009772:	6821      	ldr	r1, [r4, #0]
 8009774:	1d1d      	adds	r5, r3, #4
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6015      	str	r5, [r2, #0]
 800977a:	060a      	lsls	r2, r1, #24
 800977c:	d50b      	bpl.n	8009796 <_printf_i+0x162>
 800977e:	07ca      	lsls	r2, r1, #31
 8009780:	bf44      	itt	mi
 8009782:	f041 0120 	orrmi.w	r1, r1, #32
 8009786:	6021      	strmi	r1, [r4, #0]
 8009788:	b91b      	cbnz	r3, 8009792 <_printf_i+0x15e>
 800978a:	6822      	ldr	r2, [r4, #0]
 800978c:	f022 0220 	bic.w	r2, r2, #32
 8009790:	6022      	str	r2, [r4, #0]
 8009792:	2210      	movs	r2, #16
 8009794:	e7b7      	b.n	8009706 <_printf_i+0xd2>
 8009796:	064d      	lsls	r5, r1, #25
 8009798:	bf48      	it	mi
 800979a:	b29b      	uxthmi	r3, r3
 800979c:	e7ef      	b.n	800977e <_printf_i+0x14a>
 800979e:	4665      	mov	r5, ip
 80097a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80097a4:	fb02 3311 	mls	r3, r2, r1, r3
 80097a8:	5cc3      	ldrb	r3, [r0, r3]
 80097aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80097ae:	460b      	mov	r3, r1
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d1f5      	bne.n	80097a0 <_printf_i+0x16c>
 80097b4:	e7b9      	b.n	800972a <_printf_i+0xf6>
 80097b6:	6813      	ldr	r3, [r2, #0]
 80097b8:	6825      	ldr	r5, [r4, #0]
 80097ba:	6961      	ldr	r1, [r4, #20]
 80097bc:	1d18      	adds	r0, r3, #4
 80097be:	6010      	str	r0, [r2, #0]
 80097c0:	0628      	lsls	r0, r5, #24
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	d501      	bpl.n	80097ca <_printf_i+0x196>
 80097c6:	6019      	str	r1, [r3, #0]
 80097c8:	e002      	b.n	80097d0 <_printf_i+0x19c>
 80097ca:	066a      	lsls	r2, r5, #25
 80097cc:	d5fb      	bpl.n	80097c6 <_printf_i+0x192>
 80097ce:	8019      	strh	r1, [r3, #0]
 80097d0:	2300      	movs	r3, #0
 80097d2:	6123      	str	r3, [r4, #16]
 80097d4:	4665      	mov	r5, ip
 80097d6:	e7b9      	b.n	800974c <_printf_i+0x118>
 80097d8:	6813      	ldr	r3, [r2, #0]
 80097da:	1d19      	adds	r1, r3, #4
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	681d      	ldr	r5, [r3, #0]
 80097e0:	6862      	ldr	r2, [r4, #4]
 80097e2:	2100      	movs	r1, #0
 80097e4:	4628      	mov	r0, r5
 80097e6:	f7f6 fcfb 	bl	80001e0 <memchr>
 80097ea:	b108      	cbz	r0, 80097f0 <_printf_i+0x1bc>
 80097ec:	1b40      	subs	r0, r0, r5
 80097ee:	6060      	str	r0, [r4, #4]
 80097f0:	6863      	ldr	r3, [r4, #4]
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	2300      	movs	r3, #0
 80097f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097fa:	e7a7      	b.n	800974c <_printf_i+0x118>
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	462a      	mov	r2, r5
 8009800:	4639      	mov	r1, r7
 8009802:	4630      	mov	r0, r6
 8009804:	47c0      	blx	r8
 8009806:	3001      	adds	r0, #1
 8009808:	d0aa      	beq.n	8009760 <_printf_i+0x12c>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	079b      	lsls	r3, r3, #30
 800980e:	d413      	bmi.n	8009838 <_printf_i+0x204>
 8009810:	68e0      	ldr	r0, [r4, #12]
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	4298      	cmp	r0, r3
 8009816:	bfb8      	it	lt
 8009818:	4618      	movlt	r0, r3
 800981a:	e7a3      	b.n	8009764 <_printf_i+0x130>
 800981c:	2301      	movs	r3, #1
 800981e:	464a      	mov	r2, r9
 8009820:	4639      	mov	r1, r7
 8009822:	4630      	mov	r0, r6
 8009824:	47c0      	blx	r8
 8009826:	3001      	adds	r0, #1
 8009828:	d09a      	beq.n	8009760 <_printf_i+0x12c>
 800982a:	3501      	adds	r5, #1
 800982c:	68e3      	ldr	r3, [r4, #12]
 800982e:	9a03      	ldr	r2, [sp, #12]
 8009830:	1a9b      	subs	r3, r3, r2
 8009832:	42ab      	cmp	r3, r5
 8009834:	dcf2      	bgt.n	800981c <_printf_i+0x1e8>
 8009836:	e7eb      	b.n	8009810 <_printf_i+0x1dc>
 8009838:	2500      	movs	r5, #0
 800983a:	f104 0919 	add.w	r9, r4, #25
 800983e:	e7f5      	b.n	800982c <_printf_i+0x1f8>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1ac      	bne.n	800979e <_printf_i+0x16a>
 8009844:	7803      	ldrb	r3, [r0, #0]
 8009846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800984a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800984e:	e76c      	b.n	800972a <_printf_i+0xf6>
 8009850:	0800a43d 	.word	0x0800a43d
 8009854:	0800a44e 	.word	0x0800a44e

08009858 <__sread>:
 8009858:	b510      	push	{r4, lr}
 800985a:	460c      	mov	r4, r1
 800985c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009860:	f000 f8c4 	bl	80099ec <_read_r>
 8009864:	2800      	cmp	r0, #0
 8009866:	bfab      	itete	ge
 8009868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800986a:	89a3      	ldrhlt	r3, [r4, #12]
 800986c:	181b      	addge	r3, r3, r0
 800986e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009872:	bfac      	ite	ge
 8009874:	6563      	strge	r3, [r4, #84]	; 0x54
 8009876:	81a3      	strhlt	r3, [r4, #12]
 8009878:	bd10      	pop	{r4, pc}

0800987a <__swrite>:
 800987a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987e:	461f      	mov	r7, r3
 8009880:	898b      	ldrh	r3, [r1, #12]
 8009882:	05db      	lsls	r3, r3, #23
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	4616      	mov	r6, r2
 800988a:	d505      	bpl.n	8009898 <__swrite+0x1e>
 800988c:	2302      	movs	r3, #2
 800988e:	2200      	movs	r2, #0
 8009890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009894:	f000 f858 	bl	8009948 <_lseek_r>
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800989e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	4632      	mov	r2, r6
 80098a6:	463b      	mov	r3, r7
 80098a8:	4628      	mov	r0, r5
 80098aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ae:	f000 b817 	b.w	80098e0 <_write_r>

080098b2 <__sseek>:
 80098b2:	b510      	push	{r4, lr}
 80098b4:	460c      	mov	r4, r1
 80098b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ba:	f000 f845 	bl	8009948 <_lseek_r>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	bf15      	itete	ne
 80098c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80098c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098ce:	81a3      	strheq	r3, [r4, #12]
 80098d0:	bf18      	it	ne
 80098d2:	81a3      	strhne	r3, [r4, #12]
 80098d4:	bd10      	pop	{r4, pc}

080098d6 <__sclose>:
 80098d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098da:	f000 b813 	b.w	8009904 <_close_r>
	...

080098e0 <_write_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4c07      	ldr	r4, [pc, #28]	; (8009900 <_write_r+0x20>)
 80098e4:	4605      	mov	r5, r0
 80098e6:	4608      	mov	r0, r1
 80098e8:	4611      	mov	r1, r2
 80098ea:	2200      	movs	r2, #0
 80098ec:	6022      	str	r2, [r4, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	f7fe ff35 	bl	800875e <_write>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_write_r+0x1e>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_write_r+0x1e>
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	200043b0 	.word	0x200043b0

08009904 <_close_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4c06      	ldr	r4, [pc, #24]	; (8009920 <_close_r+0x1c>)
 8009908:	2300      	movs	r3, #0
 800990a:	4605      	mov	r5, r0
 800990c:	4608      	mov	r0, r1
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	f7fe ff41 	bl	8008796 <_close>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d102      	bne.n	800991e <_close_r+0x1a>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	b103      	cbz	r3, 800991e <_close_r+0x1a>
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	bd38      	pop	{r3, r4, r5, pc}
 8009920:	200043b0 	.word	0x200043b0

08009924 <_fstat_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4c07      	ldr	r4, [pc, #28]	; (8009944 <_fstat_r+0x20>)
 8009928:	2300      	movs	r3, #0
 800992a:	4605      	mov	r5, r0
 800992c:	4608      	mov	r0, r1
 800992e:	4611      	mov	r1, r2
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	f7fe ff3c 	bl	80087ae <_fstat>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d102      	bne.n	8009940 <_fstat_r+0x1c>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	b103      	cbz	r3, 8009940 <_fstat_r+0x1c>
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	bd38      	pop	{r3, r4, r5, pc}
 8009942:	bf00      	nop
 8009944:	200043b0 	.word	0x200043b0

08009948 <_lseek_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4c07      	ldr	r4, [pc, #28]	; (8009968 <_lseek_r+0x20>)
 800994c:	4605      	mov	r5, r0
 800994e:	4608      	mov	r0, r1
 8009950:	4611      	mov	r1, r2
 8009952:	2200      	movs	r2, #0
 8009954:	6022      	str	r2, [r4, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f7fe ff39 	bl	80087ce <_lseek>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_lseek_r+0x1e>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	b103      	cbz	r3, 8009966 <_lseek_r+0x1e>
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	200043b0 	.word	0x200043b0

0800996c <memmove>:
 800996c:	4288      	cmp	r0, r1
 800996e:	b510      	push	{r4, lr}
 8009970:	eb01 0302 	add.w	r3, r1, r2
 8009974:	d807      	bhi.n	8009986 <memmove+0x1a>
 8009976:	1e42      	subs	r2, r0, #1
 8009978:	4299      	cmp	r1, r3
 800997a:	d00a      	beq.n	8009992 <memmove+0x26>
 800997c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009980:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009984:	e7f8      	b.n	8009978 <memmove+0xc>
 8009986:	4283      	cmp	r3, r0
 8009988:	d9f5      	bls.n	8009976 <memmove+0xa>
 800998a:	1881      	adds	r1, r0, r2
 800998c:	1ad2      	subs	r2, r2, r3
 800998e:	42d3      	cmn	r3, r2
 8009990:	d100      	bne.n	8009994 <memmove+0x28>
 8009992:	bd10      	pop	{r4, pc}
 8009994:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009998:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800999c:	e7f7      	b.n	800998e <memmove+0x22>

0800999e <_realloc_r>:
 800999e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a0:	4607      	mov	r7, r0
 80099a2:	4614      	mov	r4, r2
 80099a4:	460e      	mov	r6, r1
 80099a6:	b921      	cbnz	r1, 80099b2 <_realloc_r+0x14>
 80099a8:	4611      	mov	r1, r2
 80099aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80099ae:	f7ff b955 	b.w	8008c5c <_malloc_r>
 80099b2:	b922      	cbnz	r2, 80099be <_realloc_r+0x20>
 80099b4:	f7ff f904 	bl	8008bc0 <_free_r>
 80099b8:	4625      	mov	r5, r4
 80099ba:	4628      	mov	r0, r5
 80099bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099be:	f000 f827 	bl	8009a10 <_malloc_usable_size_r>
 80099c2:	42a0      	cmp	r0, r4
 80099c4:	d20f      	bcs.n	80099e6 <_realloc_r+0x48>
 80099c6:	4621      	mov	r1, r4
 80099c8:	4638      	mov	r0, r7
 80099ca:	f7ff f947 	bl	8008c5c <_malloc_r>
 80099ce:	4605      	mov	r5, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0f2      	beq.n	80099ba <_realloc_r+0x1c>
 80099d4:	4631      	mov	r1, r6
 80099d6:	4622      	mov	r2, r4
 80099d8:	f7ff f8de 	bl	8008b98 <memcpy>
 80099dc:	4631      	mov	r1, r6
 80099de:	4638      	mov	r0, r7
 80099e0:	f7ff f8ee 	bl	8008bc0 <_free_r>
 80099e4:	e7e9      	b.n	80099ba <_realloc_r+0x1c>
 80099e6:	4635      	mov	r5, r6
 80099e8:	e7e7      	b.n	80099ba <_realloc_r+0x1c>
	...

080099ec <_read_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4c07      	ldr	r4, [pc, #28]	; (8009a0c <_read_r+0x20>)
 80099f0:	4605      	mov	r5, r0
 80099f2:	4608      	mov	r0, r1
 80099f4:	4611      	mov	r1, r2
 80099f6:	2200      	movs	r2, #0
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f7fe fe92 	bl	8008724 <_read>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_read_r+0x1e>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_read_r+0x1e>
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	200043b0 	.word	0x200043b0

08009a10 <_malloc_usable_size_r>:
 8009a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a14:	1f18      	subs	r0, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbc      	itt	lt
 8009a1a:	580b      	ldrlt	r3, [r1, r0]
 8009a1c:	18c0      	addlt	r0, r0, r3
 8009a1e:	4770      	bx	lr

08009a20 <_init>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr

08009a2c <_fini>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr
